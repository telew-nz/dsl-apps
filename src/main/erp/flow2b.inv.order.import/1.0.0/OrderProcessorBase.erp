back interface OrderProcessorBase extends OrderProcessor {
  impl func process = {
    let lines = lines(text)
    let htf = lines.span(!isTableHeader(_))
    let headerLines = htf.#0
    let tf = htf.#1.drop(1).span(!isTableFooter(_))
    
    let tableLines: [TableLine] = filterTableLines(makeTableLines(tf.#0))
    let footerLines = tf.#1.or{
      let tail = tableLines.last.tail
      tableLines.last.tail = []
      tail
    }
    
    poi.items*.delete
    
    let nums = tableLines.map{l =>
      extractLineNum(l).alt(LineNum(line = l))
    }
    poi.rowsWithGst = false
    let infoLines = headerLines + footerLines
    if (let total = extractTotal(infoLines)) {
      if (nums*.amount.sum == total.withGst) {
        poi.rowsWithGst = true
      }
      if (total.gst && nums.all(!gstRate)) {
        nums*.gstRate = total.gstRate
      }
      poi.totalNoGst = total.noGst
      poi.gst = total.gst
    } else if (nums.all(type) let type = nums*.type.distinct.onlyOne) {
      poi.rowsWithGst = type == withGst
      let total = Total(noGst = nums*.amountNoGst.sum.positive, gst = nums*.gst.sum.positive)
      if (checkTotal(infoLines, total)) {
        poi.totalNoGst = total.noGst
        poi.gst = total.gst
      }
    }
    
    nums.foreach{ln =>
      ln.makeItem(extractLineDesc(ln))
    }
    extractInfo(infoLines)
    
    let tf = text.flex
    poi.invoiceType = {
      if (tf.contains("tax invoice")) TaxInvoice
      else if (tf.contains("credit note")) CreditNote
      else if (tf.contains("debit note")) DebitNote
    }
    
    //poi.text = text
    poi.save
  }
  
  func intPattern = "\d+"
  func decPattern = "\\\$?(,?\d\d?\d?)+\.\d\d(\d\d)?"
  func percentPattern = "\d+(.\d+)?\s?%"
  func codePattern = "^[\^]?\s*([A-Z0-9-#*]+)\s"
  func tableLinePattern = ".*\s" + decPattern
  func wordSepPattern = "[\s=]"
  func datePattern = "(\S*)\s*date\s*:?\s*([^\s]+)"
  func numberPattern = "([A-Za-z.]+)(\s+[A-Za-z.]+)?((:\s*)|\s+)(([A-Z.-]*[0-9]{2,}[A-Z]*([-.\s]|\$))+)"
  func invoiceNumberTerms = ["tax invoice", "invoice no", "invoice", "number"]
  func vendorNumberTerms = ["gst number", "abn"]
  
  field rTableLine = Regex(tableLinePattern)
  field rDec = Regex(decPattern)
  field rInt = Regex(intPattern)
  field rWordSep = Regex(wordSepPattern)
  field rPercent = Regex(percentPattern)
  field rCode = Regex(codePattern)
  field rDate = Regex(datePattern)
  field rNumber = Regex(numberPattern)
  
  
  func lines(text: PlainText): [String]? = {
    text.lines(None).mapOpt(_)
  }
  func isTableHeader(line: String): Bool = line.flex.contains("description") 
 
  func isTableFooter(line: String): Bool = false
  func canBeTableLine(line: String): Bool = {
    line.length > 20 && line.matches(rTableLine) //ends with *0.00 or *0.0000
  } 
  func wordType(word: String): LineWordType = {
    if (word.matches(rDec)) dec
    else if (word.matches(rInt)) int
    else if (word.matches(rPercent)) percent
    else str
  }
  func splitToWords(line: String): [String] = {
    line.split(rWordSep).mapOpt(_)!
  }
  func cmp(a: UMoney[4]?, b: UMoney[4]?): Bool = a.round(round, 2) == b.round(round, 2)
  func extractLineNum(line: TableLine): LineNum? = {
    let decs: [UDec[4]]? = line.decs
    (if (let qtys = line.ints.distinct) {
        //qty*price + gst == amount
        qtys.mapOpt{qty =>
          if (let i = decs.combinations(3)*.permutations.find(i => cmp(i(1)*qty + i(2), i(3)))) {
            LineNum(line = line, qty = qty, amount = i(3), gstRate = i(2).as[UPercent[2]]/(i(1)*qty), type = withGst, gst = i(2))
          }
      	}.first
      .or {
        //qty*(price + gst) == amount
        qtys.mapOpt{qty =>
          if (let i = decs.combinations(3)*.permutations.find(i => cmp((i(1) + i(2))*qty, i(3)))) {
            LineNum(line = line, qty = qty, amount = i(3), gstRate = i(2)/i(1), type = withGst, gst = i(2)*qty)
          }
      	}.first
      }.or {
       //qty*price == amount
        qtys.mapOpt{qty =>
          if (let i = decs.combinations(2)*.permutations.find(i => cmp(i(1)*qty, i(2)))) {
            LineNum(line = line, qty = qty, amount = i(2))
          }
      	}.first
      }.or {
       //qty*price/pricePerQty == amount
        qtys.combinations(2)*.permutations.mapOpt{qi =>
          if (let i = decs.combinations(2)*.permutations.find(i => cmp(i(1)*qi(1)/qi(2), i(2)))) {
            LineNum(line = line, qty = qi(1), amount = i(2))
          }
      	}.first
      }
    }).or {
      //amount*gstRate == gst
      if (let pers = line.percents.distinct) {
        pers.mapOpt{gstRate =>
          if (let i = decs.combinations(2)*.permutations.find(i => cmp((i(1)*gstRate), i(2)))) {
            LineNum(line = line, qty = 1, amount = i(1), gstRate = gstRate, type = noGst, gst = i(2))
          }
      	}.first
      }
      
    }
  }
  func extractLineDesc(num: LineNum): LineDesc? = {
    let desc = ([num.line.str] + num.line.tail).join("\n")
    let code = desc.all(rCode).onlyOne?.group(1)
    LineDesc(line = num.line, code = code, desc = if (code) desc.replace(rCode, "").trim else desc)
  }
  func extractTotal(lines: [String]?): Total? = {
    if (let i = lines*.all(rDec)*.toString*.toUNum.combinations(3)*.permutations
      .filter(i => i(1) > i(2) && i(3) >= i(1))
      .find(i => i(1) + i(2) == i(3))
    ) {
      Total(noGst = i(1), gst = i(2))
    }
  }
  func checkTotal(lines: [String]?, total: Total): Bool = {
    let decs = lines*.all(rDec)*.toString*.toUNum
    [total.noGst , total.withGst].exists(n => n in decs)
  }
  
  func extractInfo(lines: [String]?): Void = {
    lines.foreach {line =>
      let ll = line.lower
      ll.all(rDate).foreach {d =>
        if (d.group(1) == "due") {
          if (!poi.dueDate) {
            poi.dueDate = try? Date(d.group(2)!)
          }
        } else {
          if (!poi.invoiceDate) {
            poi.invoiceDate = try? Date(d.group(2)!)
          }
        }
      }
    }
    let nums = lines.flatMap {line =>
      line.all(rNumber).map {g =>
        (name = " " + (g.group(1).trim + " " + g.group(2).trim).trim!.replace(".", "").lower, num = g.group(5).trim!)
      }
    }
    poi.vendorNumber = vendorNumberTerms.mapOpt {n =>
      nums.find(name.endsWith(" " + n))?.num
    }.first
    poi.invoiceNumber = invoiceNumberTerms.mapOpt {n =>
      nums.find(name.endsWith(" " + n) && num != poi.vendorNumber)?.num
    }.first 
  }
  
  back class TableLine {
    field str: String
    field tail: [String]?
    field words: [String] = splitToWords(str)
    field pattern = words.map(w => wordType(w)).dropWhile(_ == str).reverse
    
    func ints: [UInt]? = words.filter(matches(rInt)).mapOpt(toUNum)
    func decs: [UDec[4]]? = words.filter(matches(rDec)).mapOpt(toUNum)
    func percents: [UPercent[2]]? = words.filter(matches(rPercent)).mapOpt(toUNum.as[UDec[4]]/100)
    
    func text: PlainText = ([str] + tail).join("\n")
    func matchLevel(other: TableLine): Dec[4]? = {
      let m = pattern.zip(other.pattern).takeWhile(left == right).count
      if (m >= 3) m.as[Dec[4]]
      else {
        let q0 = (str.length.as[Dec[4]]/other.str.length)
        let q = ((if (q0 > 1) 1/q0 else q0) + 0.3).max(1)
        m*q
      }
    }
  }
  
  
  back class LineNum(line: TableLine, qty: UQty[4]?, amount: UMoney[4]?, gstRate: UPercent[2]??, gst: UMoney[4]?, type: LineAmountType?) {
    func makeItem(desc: LineDesc?): PurchaseOrderImportItem = this.copy(
      PurchaseOrderImportItem, 
      poi = poi, 
      code = desc?.code
      desc = desc?.desc
    )
    compute amountWithGst = if (type == withGst) amount else amount + gst
    compute amountNoGst = if (type == withGst) amount - gst else amount
  }
  back class LineDesc(line: TableLine, desc: String?, code: String?)
  back class Total(noGst: UMoney[4]?, gst: UMoney[4]?) {
    compute withGst: UMoney[4]? = noGst + gst
    compute gstRate: UPercent[2]? = if (let noGst) gst/noGst
  }
  
  
  func makeTableLines(lines: [String]?): [TableLine] = {
    guard (let tableLines = lines.dropWhile(!canBeTableLine(_))) else return throw "Cannot find possible table lines"
    
    var tl = TableLine(str = tableLines.first)
    var ret: [TableLine] = [tl]
    tableLines.drop(1).foreach{line => 
      if (tl.tail.count < 8 && canBeTableLine(line)) {
        tl = TableLine(str = line)
        ret += tl
      } else {
        tl.tail += [line]
      }
    }
    ret
  }
  
  func filterTableLines(lines: [TableLine]): [TableLine] = {
    var l = lines.first
    guard (let levels = lines.drop(1).map(line => (line, level = line.matchLevel(l)))) else return lines
    
    let threshold = (levels*.level.max * 0.7).min(3)
    var ret = [l]
    levels.foreach {ll =>
      if (ll.level >= threshold) {
        l = ll.line
        ret += l
      } else {
        l.tail = l.tail + [ll.line.str] + ll.line.tail
      }
    }
    ret
  }
}

enum LineAmountType {
  case withGst
  case noGst
}

enum LineWordType {
  case dec
  case int
  case percent
  case str
}