object ITPOINoVendor extends IssueType[ImportedOrder] {
  impl func title = "Order Import: Vendor or Customer is not found"
  impl func label(item: ImportedOrder) = if (item.type == SalesOrder) "Order Import: Customer is not found" else "Order Import: Vendor is not found"
  impl func hasIssue(item: ImportedOrder) = item.poi.state == Complete && {
       (item.type != SalesOrder && !item.vendor)
    || (item.type == SalesOrder && !item.customer)
  }
  impl func fixes(item: ImportedOrder) = [
    Fix(text = "Edit and select the " + (if (item.type == SalesOrder) "customer" else "vendor"))
  ]
}
object ITPOINoLegalEntity extends IssueType[ImportedOrder] {
  impl func title = "Order Import: Legal Entity is not found"
  impl func hasIssue(item: ImportedOrder) = !item.legalEntity && item.poi.state == Complete
  impl func fixes(item: ImportedOrder) = [
    Fix(text = "Edit and select the legal entity")
  ]
}
object ITPOINoStore extends IssueType[ImportedOrder] {
  impl func title = "Order Import: Store is not found"
  impl func hasIssue(item: ImportedOrder) = !item.store && item.items.all(product) && item.items.exists(!product?.isTangible) && item.poi.state == Complete
  impl func fixes(item: ImportedOrder) = [
    Fix(text = "Edit and select the store")
  ]
}
object ITPOINoProduct extends IssueType[ImportedOrder] {
  impl func title = "Order Import: Product is not found"
  impl func hasIssue(item: ImportedOrder) = item.items.exists(!product) && item.poi.state == Complete
  impl func fixes(item: ImportedOrder) = [
    Fix(text = "Edit and select all the products")
  ]
} 
 
extend entity ImportedOrder {
  extend override func issueTypesAdd = [ITPOINoVendor, ITPOINoLegalEntity, ITPOINoStore, ITPOINoProduct] 
}