back interface OrderProcessorBase extends OrderProcessor {
  impl func process(poi: PurchaseOrderImport, text: PlainText) = {
    if (let pages = text.split("\f").mapOpt(_).mapOpt(lines(_))) {
      nextInvs(poi, pages)
    }
  }
  
  func nextInvs(poi: PurchaseOrderImport, pages:[[String]]): [POIInvoice] = {
    let page = pages.first
    if (let tail = pages.drop(1), let n = page.takeWhile(!isTableHeader(_)).count.positive) {
      let htf = tail.first.span(!isTableHeader(_))
      let d0 = htf.#0.count.as[UDec[8]]/n
      let d = if (d0 > 1) 1.as[UDec[8]]/d0! else d0
      let hhtf = htf.#1.span(!canBeTableLine(_))
      if (!hhtf.#1 || d < 0.5) {
        let pph = page.span(!isTableFooter(_))
        let newPage: [String] = pph.#0! + hhtf.#0 + pph.#1 + htf.#0 + hhtf.#1
        nextInvs(poi, [newPage] + tail.drop(1))
      } else {
        [makeInv(poi, page)] + nextInvs(poi, tail)
      }
    } else {
      [makeInv(poi, page)]
    }
  }
  
  func makeInv(poi: PurchaseOrderImport, lines: [String]): POIInvoice = {
    let inv = POIInvoice(poi = poi)
    
    let txt = lines.join("\n").flex
    inv.invoiceType = {
      if (txt.contains("credit note")) CreditNote
      else if (txt.contains("debit note")) DebitNote
      else if (txt.contains("adjustment note")) AdjustmentNote
      else if (txt.contains("tax invoice")) TaxInvoice
    }
    
    let htf = lines.span(!isTableHeader(_))
    let headerLines = htf.#0
    let tf = htf.#1.drop(1).span(!isTableFooter(_))
        
    guard (let tableLines0 = makeTableLines(tf.#0)) else return inv
    let tableLines = filterTableLines(tableLines0)
    
    let footerLines = tableLines.last.tail + tf.#1
    tableLines.last.tail = []
    
    let nums = selectLineNums(tableLines.map{l => 
      extractLineNum(l).alt([LineNum(line = l)])
    })
    
    let infoLines = headerLines + footerLines
    if (let total = extractTotal(infoLines)) {
      if (nums*.amount*.v.sum == total.withGst) {
        inv.rowsWithGst = true
      } 
      if (total.gst) {
        nums.filter(!gstRate)*.gstRate = IdxD(v = total.gstRate)
      }
      inv.totalNoGst = total.noGst
      inv.gst = total.gst
    } else if (nums.all(type) let type = nums*.type.distinct.onlyOne) {
      inv.rowsWithGst = type == withGst
      let total = Total(noGst = nums*.amountNoGst.sum.positive, gst = nums*.gst*.v.sum.positive)
      if (checkTotal(infoLines, total)) {
        inv.totalNoGst = total.noGst
        inv.gst = total.gst
      }
    }
    
    let totalMatch = inv.totalWithGst && nums*.amount*.v.sum in [inv.totalWithGst, inv.totalNoGst]
    nums.foreach{ln =>
      if (!totalMatch || ln.qty) {
        ln.makeItem(inv, extractLineDesc(ln))
      }
    }
    extractInfo(inv, infoLines)
    
    
    
    //inv.text = text
    inv
  }
  
  func intPattern = "\d+"
  func decPattern = "-?\s*\\\$?(\d{1,3}(,?\d{3})*\.\d{2,4})(\s*[CcDd][Rr])?"
  func percentPattern = "\d+(.\d+)?\s?%"
  func codePattern = "^[\^]?\s*(([A-Z0-9]{1,3}\s+)?[A-Z0-9-#.*]+)(\s|\$)"
  func tableLinePattern = ".*\s" + decPattern + "\s*"
  func wordSepPattern = "[\s=]"
  func datePattern = "(\S*)\s*date\s*:?\s*([^\s]+)"
  func numberPattern = "([A-Za-z.]+)(\s+[A-Za-z.]+(\s+[Nn][Oo].?)?)?((:\s*)|\s+)(([A-Z.-]*[0-9]{2,}[A-Z]*([-./\\\\\s]|\$))+)"
  func invoiceNumberTerms = ["tax invoice", "invoice no", "invoice", "reference", "number"]
  func vendorNumberTerms = ["gst number", "abn", "gst no", "gst reg no"]
  func headerTerms = ["description"]
  func footerTerms = [
     "charged to account", "total excluding", "total including", "total exclusive", "total gst", 
     "comments", "E &O E", "E&OE", "carry forward", "amount on account", "delivery instructions", 
     "rates displayed include"
  ]
  
  field rTableLine = Regex(tableLinePattern)
  field rDec = Regex(decPattern)
  field rInt = Regex(intPattern)
  field rWordSep = Regex(wordSepPattern)
  field rPercent = Regex(percentPattern)
  field rCode = Regex(codePattern)
  field rDate = Regex(datePattern)
  field rNumber = Regex(numberPattern)
  
  
  func lines(text: PlainText): [String]? = {
    text.lines(None).mapOpt(_)
  }
  func isTableHeader(line: String): Bool = {
    let l = line.flexWholeWords
    headerTerms.exists(l.contains(_))
  }
 
  func isTableFooter(line: String): Bool = {
    let l = line.replace(".", " ").flexWholeWords
    footerTerms.exists(l.contains(_))
  }
  func canBeTableLine(line: String): Bool = {
    line.length > 20 && line.matches(rTableLine) //ends with *0.00 or *0.0000
  } 
  func wordType(word: String): LineWordType = {
    if (word.matches(rDec)) dec
    else if (word.matches(rInt)) int
    else if (word.matches(rPercent)) percent
    else if (word =%= "nett" || word =%= "net" || word == "-") any
    else str
  }
  func splitToWords(line: String): [String] = {
    line.split(rWordSep).mapOpt(_)!
  } 
  func cmp(a: IdxD, b: IdxD): Bool = a.v.round(round, 2) == b.v.round(round, 2)
  func cmp(a: Number?, b: Number?): Bool = a.round(round, 2) == b.round(round, 2)
  func doExtractLineNum(line: TableLine, qtys: [IdxD]?, decs: [IdxD]?): [LineNum]? = {
    let arr: [[LineNum]?] = [
      //qty*price + gst == amount
      qtys.flatMap{qty =>
        decs.combinations(3)*.permutations
          .filter{i => (i(1)*qty > i(2) || !i(3).v) && cmp(i(1)*qty + i(2), i(3))}
          .map {i =>
            LineNum(
              formula = 1, line = line, qty = qty, amount = i(3), 
              gstRate = if (let q = i(1).v*qty.v) IdxD(v = i(2).v.as[UPercent[2]]/q), 
              type = withGst, gst = i(2), others = [i(1)]
            )
          }
      } 
    
      //qty*(price + gst) == amount
      qtys.distinct.flatMap{qty =>
        decs.combinations(3)*.permutations
          .filter(i => (i(1) > i(2) || !i(3).v) && cmp((i(1) + i(2))*qty, i(3)))
          .map{i =>
            LineNum(formula = 2, line = line, qty = qty, amount = i(3), gstRate = if (i(1).v) i(2)/i(1), type = withGst, gst = i(2)*qty, others = [i(1)])
          }
      }
    
      //qty*price - discount == amount
      qtys.flatMap{qty =>
        decs.combinations(3)*.permutations
          .filter(i => (i(2).v > 0 || !i(3).v) && cmp(i(1)*qty - i(2), i(3)))
          .map{i =>
            LineNum(formula = 3, line = line, qty = qty, amount = i(3), others = [i(1)])
          }
      }

      //qty*price*(100% - discount) == amount
       qtys.flatMap{qty =>
        line.percents.flatMap {discount =>
          decs.combinations(2)*.permutations
            .filter(i => cmp(i(1)*qty*((1 - discount.v).positive), i(2)))
            .map{i =>
              LineNum(formula = 4, line = line, qty = qty, amount = i(2), others = [i(1)])
            }
        }
      }

      //Such as Bunnings
      //round(priceNoGst*(1+gst/amountExclGst)*(1-discount))*qty = amountWithGst
      if (decs.count >= 4) {
        qtys.distinct.flatMap{qty =>
          line.percents.flatMap {discount =>
            decs.combinations(4)*.permutations
              .filter(i => i(3).v && i(2) < i(3) && i(3) <= i(4))
              .filter{i => 
                cmp((i(1).v.as[UDec[8]]*(1 + (i(2).v/i(3).v!).round(round, 2))*(1 - discount.v).positive).round(round, 2)*qty.v, i(4).v)
              }.map{i =>
                LineNum(formula = 5, line = line, qty = qty, amount = i(4), type = withGst, gstRate = i(2)/i(3), gst = i(2), others = [i(1), i(3)])
              }
          }
        }
      }
    
      //Such as Bunnings Landscape
      //round(priceNoGst*(1+gst/amountExclGst))*qty = amountWithGst
      if (decs.count >= 4) {
        qtys.distinct.flatMap{qty =>
          decs.combinations(4)*.permutations
            .filter(i => i(3).v && i(2) < i(3) && i(3) <= i(4))
            .filter{i => 
               cmp((i(1).v.as[UDec[8]]*(1 + (i(2).v/i(3).v!).round(round, 2))).round(round, 2)*qty.v, i(4).v)
             }.map {i =>
               LineNum(formula = 6, line = line, qty = qty, amount = i(4), type = withGst, gst = i(2), gstRate = i(2)/i(3), others = [i(1), i(3)])
             }
        }
      }

      //qty*price == amount
      qtys.distinct.flatMap{qty =>
        decs.combinations(2)*.permutations
          .filter(i => cmp(i(1)*qty, i(2)))
          .map{i =>
            LineNum(formula = 7, line = line, qty = qty, amount = i(2), others = [i(1)])
          }
      }

      //qty*price/pricePerQty == amount
      qtys.combinations(2)*.permutations.filter(qi => qi(2).v).flatMap{qi =>
        decs.combinations(2)*.permutations
          .filter(i => cmp(i(1)*qi(1)/qi(2), i(2)))
          .map {i =>
            LineNum(formula = 8, line = line, qty = qi(1), amount = i(2))
          }
      }
    ]
    arr.flatMap(_)
  }
  
  func extractLineNum(line: TableLine): [LineNum]? = {
    let decs = line.decs
    let candidates = {
      if (let qtys = line.ints) {
         doExtractLineNum(line, qtys, decs)
      } 
      + 
      //qty is decimal
      decs.flatMap {qty =>
        doExtractLineNum(line, [qty], decs.filter{d => d.i != qty.i})
      }
    }
    
    candidates.or{
      //amount*gstRate == gst
      if (let pers = line.percents.distinct) {
        pers.filter(_ <= 0.4).flatMap{gstRate =>
          decs.combinations(2)*.permutations
            .filter(i => cmp((i(1)*gstRate), i(2)))
            .map{i =>
              LineNum(formula = 100, line = line, amount = i(1), gstRate = gstRate, type = noGst, gst = i(2))
            }
      	}
      }
    }
  }
  func selectLineNums(ls: [[LineNum]]): [LineNum] = {
    guard (let sample = 1.range(ls.count)
      .combinations(2)
      .map {is =>
        let lsa: [LineNum] = ls(is(1))
        ls(is(1)).flatMap{a =>
          ls(is(2)).map{b =>
            (sim = a.sim(b), lidx = if (a.formula > b.formula) is(2) else is(1), line = if (a.formula > b.formula) b else a, amount = a.amount?.v + b.amount?.v)
          }
        }.sortBy(sim.desc, line.formula, amount.desc)
       .first!
      }
      .sortBy(sim.desc, line.formula, amount.desc)
      .first
    ) else return ls*.first
    
    var i = 0
    ls.map {l =>
      i += 1
      if (i == sample.lidx) {
        sample.line
      } else {
        l.map{b =>
            (sim = sample.line.sim(b), line = b)
          }.sortBy(sim.desc, line.formula, line.amount?.v)
          .first.line
      }
    }
  }
  
  func extractLineDesc(num: LineNum): LineDesc? = {
    let nums = num.qty?.v.toSeq + num.amount?.v.toSeq + num.gst?.v.toSeq + (if (let r = num.gstRate?.v) [r*100]) + num.others*.v
    var n: Int? = 0
    let f = num.line.words.takeWhile{s =>
      n += s.v.length + 1
      n < 15 || (try? IdxS.toNum(s.v)) !in nums
    }.map(v).join(" ")
    let desc = ([f] + num.line.tail).join("\n")
    let code = desc.all(rCode).onlyOne?.group(1)
    LineDesc(line = num.line, code = code, desc = if (code) desc.replace(rCode, "").trim else desc)
  }
  func extractTotal(lines: [String]?): Total? = {
    if (let i = lines*.all(rDec).map(IdxS.toNum(_.toString)).combinations(3)*.permutations
      .filter(i => i(1) > i(2) && i(3) >= i(1))
      .find(i => i(1) + i(2) == i(3))
    ) {
      Total(noGst = i(1), gst = i(2))
    }
  }
  func checkTotal(lines: [String]?, total: Total): Bool = {
    let decs = lines*.all(rDec).map(IdxS.toNum(_.toString))
    [total.noGst , total.withGst].exists(n => n in decs)
  }
  
  func extractInfo(inv: POIInvoice, lines: [String]?): Void = {
    lines.foreach {line =>
      let ll = line.lower
      ll.all(rDate).foreach {d =>
        if (d.group(1) == "due") {
          if (!inv.dueDate) {
            inv.dueDate = try? Date(d.group(2)!)
          }
        } else {
          if (!inv.invoiceDate) {
            inv.invoiceDate = try? Date(d.group(2)!)
          }
        }
      }
    }
    let nums = lines.flatMap {line =>
      line.all(rNumber).map {g =>
        (name = " " + (g.group(1).trim + " " + g.group(2).trim).trim!.replace(".", "").replace(":", "").lower, num = g.group(6).trim!)
      }
    }
    inv.vendorNumber = vendorNumberTerms.mapOpt {n =>
      nums.find(name.endsWith(" " + n))?.num
    }.first
    inv.invoiceNumber = invoiceNumberTerms.mapOpt {n =>
      nums.find(name.endsWith(" " + n) && num != inv.vendorNumber)?.num
    }.first 
  }
  
  back class TableLine {
    field str: String
    field tail: [String]?
    field words: [IdxS] = {
      var i: UInt = 1
      splitToWords(str).reverse.map {w =>
        let r = IdxS(i = i, v = w)
        i += 1
        r
      }.reverse
    }
    field pattern = words.map(w => wordType(w.v)).dropWhile(_ == str).reverse
    
    func ints: [IdxD]? = words.filter(v.matches(rInt)).map(toNum)
    func decs: [IdxD]? = words.filter(v.matches(rDec)).map(toNum)
    func percents: [IdxD]? = words.filter(v.matches(rPercent)).map{IdxD(i = i, v = v.toNum.as[Dec[4]]/100)}
    func text: PlainText = ([str] + tail).join("\n")
    func matchLevel(other: TableLine): Dec[4]? = {
      let m = pattern.zip(other.pattern).takeWhile(left == right || left == any || right == any).count.as[UDec[4]]
      if (m >= 3) m
      else {
        let q0 = (str.length.as[Dec[4]]/other.str.length)
        let q = ((if (q0 > 1) 1/q0 else q0) + 0.3).min(1)
        m*q
      }
    }
    impl func toString = "$str\n$(tail.join('\n'))".trim
  }
  
  
  back class LineNum(formula: UInt?, line: TableLine, qty: IdxD?, amount: IdxD?, gstRate: IdxD?, gst: IdxD?, type: LineAmountType?, others: [IdxD]?) {
    func makeItem(inv: POIInvoice, desc: LineDesc?) = POIInvoiceItem(
      invoice = inv, 
      qty = qty?.v.positive.alt(1), amount = amount?.v.positive, gstRate = gstRate?.v.positive
      code = desc?.code
      desc = desc?.desc
    )
    compute amountWithGst = if (type == withGst) amount?.v else amount?.v + gst?.v
    compute amountNoGst = if (type == withGst) amount?.v - gst?.v else amount?.v
    
    func idxSim(a: IdxD?, b: IdxD?): Dec[4]? = {
      if (let ai = a?.i, let bi = b?.i) {
        (1 - (ai - bi).abs/2).max(-1)
      } else if (a?.i || b?.i) {
        -1
      }
    }
    func sim(o: LineNum): Dec[4]? = {
      idxSim(qty, o.qty)*3 + idxSim(amount, o.amount)*3
    }
    impl func toString = "LineNum$formula($qty = $amount)"
  }
  back class LineDesc(line: TableLine, desc: String?, code: String?)
  back class Total(noGst: Money[4]?, gst: Money[4]?) {
    compute withGst: Money[4]? = noGst + gst
    compute gstRate: UPercent[2]? = if (let noGst) (gst/noGst).abs.positive
  }
  
  
  func makeTableLines(lines: [String]?): [TableLine]? = {
    guard (let tableLines = lines.dropWhile(!canBeTableLine(_))) else return []
    
    var tl = TableLine(str = tableLines.first)
    var ret: [TableLine] = [tl]
    tableLines.drop(1).foreach{line => 
      if (tl.tail.count < 8 && canBeTableLine(line)) {
        tl = TableLine(str = line)
        ret += tl
      } else {
        tl.tail += [line]
      }
    }
    ret
  }
  
  func filterTableLines(lines: [TableLine]): [TableLine] = {
    var l = lines.first
    if (l.words.first.v == "1" && lines.exists(_.words.first.v == "2")) return {
      var i = 1
      var ret: [TableLine]? = []
      lines.foreach {ll =>
        if (ll.words.first.v == i.toString && ll.words.count > 1) {
          l = ll
          l.words = l.words.drop(1)!
          l.str = l.str.dropPrefix(i.toString).trim!
          ret += l
          i += 1
        } else {
          l.tail = l.tail + [ll.str] + ll.tail
        }
      }
      ret!
    }
    
    guard (let levels = lines.drop(1).map(line => (line, level = line.matchLevel(l)))) else return lines
    
    let threshold = (levels*.level.max * 0.7).min(3)
    var ret = [l]
    levels.foreach {ll =>
      if (ll.level >= threshold || ll.line.pattern.takeWhile(_ != str).count >= 3) {
        l = ll.line
        ret += l
      } else {
        l.tail = l.tail + [ll.line.str] + ll.line.tail
      }
    }
    ret
  }
}

class IdxS(field i: UInt?, field v: String) {
  func toNum: IdxD = IdxD(i = i, v = IdxS.toNum(v))
  impl func toString = "$i:$v"
  
  object func toNum(s: String?): Number? =s.lower.dropSuffixes(["cr", "dr"]).toNum
}

class IdxD(field i: UInt?, field v: Number?) extends Ord {
  func mul(o: IdxD): IdxD = IdxD(v = v*o.v)
  func div(o: IdxD): IdxD = IdxD(v = v/o.v!)
  func add(o: IdxD): IdxD = IdxD(v = v + o.v)
  func sub(o: IdxD): IdxD = IdxD(v = v - o.v)
  func add(o: Number?): IdxD = IdxD(v = v + o, i = i)
  func mul(o: Number?): IdxD = IdxD(v = v*o, i = i)
  
  impl func more(other: IdxD): Bool = v > other.v
  override func compare(other: IdxD): Int? = if (v == other.v) 0 else if (v > other.v) 1 else -1
  impl func toString = "$i:$v"
}

enum LineAmountType {
  case withGst
  case noGst
}

enum LineWordType {
  case dec
  case int
  case percent
  case str
  case any
}