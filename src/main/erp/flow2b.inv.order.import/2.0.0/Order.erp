extend entity PurchaseOrderImport {
  back func resolve: Void = if (OrderImportService.resolveReferences) {
    vendor = Vendor.all
      .find(legalEntity.legalInfo?.gstNumber =%= vendorNumber)
      .result.get
    items*.resolve
    save
  }
  
  impl event onSave = {
    if (!OrderImportService.isCurrent && updated(vendor) && !vendor?.legalEntity?.legalInfo?.gstNumber
        let vendorNumber = vendorNumber.trim
    ) {
      vendor?.legalEntity?.legalInfo?.gstNumber = vendorNumber
    } 
    if (canMakePO) {
      MakePOJob(poi = this).enqueue
    }
  }
  
  back func canMakePO = state == Complete && OrderImportService.resolveReferences && !purchaseOrder && !issues
  
  back func makePO: PurchaseOrder? = if (canMakePO) {
    let date = invoiceDate.alt(Date.now)
    let po = PurchaseOrder(
      date = date
      vendor = vendor!, customer = legalEntity! 
      deliveries = [PurchaseDelivery(store = store)]
    ).save
    this.purchaseOrder = po
    save
    items*.makeItem(po)
    po
  }
}

class MakePOJob extends SystemJob {
  field poi: PurchaseOrderImport
  impl func service = OrderImportService
  impl func do = {
    poi.makePO
  }
}

extend entity RefEntity {
  func _hasNum(num: String?): Bool = num.trim && (entityNumbers.exists(_ =%= num))
}
extend entity PurchaseOrderImportItem {
  back func resolve: Void = {
    product = ISubProduct.all
      .filter(p => p._hasNum(code) || p.title =%= desc)
      .result.get.onlyOne
  }
  
  impl event onSave = {
    if (!OrderImportService.isCurrent && updated(product) let product, let code = code.trim) {
      product.addRefNum(code)
    }
  }
  
  back func makeItem(po: PurchaseOrder): PurchaseItem = {
    PurchaseItem(
      order = po, 
      deliveryItem = DeliveryItem(product = product!, unit = product!.unit, qty = qty.alt(1)), 
      gstRate = gstRate, sAmount = amount, 
      storedWithGst = poi.rowsWithGst
    )
  }
}