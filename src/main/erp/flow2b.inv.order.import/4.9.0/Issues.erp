object ITPOINoVendor extends IssueType[POIInvoice] {
  impl func title = "POI: Vendor is not found"
  impl func hasIssue(item: POIInvoice) = !item.vendor && item.poi.state == Complete
  impl func fixes(item: POIInvoice) = [
    Fix(text = "Edit and select the vendor")
  ]
}
object ITPOINoLegalEntity extends IssueType[POIInvoice] {
  impl func title = "POI: Legal Entity is not found"
  impl func hasIssue(item: POIInvoice) = !item.legalEntity && item.poi.state == Complete
  impl func fixes(item: POIInvoice) = [
    Fix(text = "Edit and select the legal entity")
  ]
}
object ITPOINoStore extends IssueType[POIInvoice] {
  impl func title = "POI: Store is not found"
  impl func hasIssue(item: POIInvoice) = !item.store && item.items.all(product) && item.items.exists(!product?.isTangible) && item.poi.state == Complete
  impl func fixes(item: POIInvoice) = [
    Fix(text = "Edit and select the store")
  ]
}
object ITPOINoProduct extends IssueType[POIInvoice] {
  impl func title = "POI: Product is not found"
  impl func hasIssue(item: POIInvoice) = item.items.exists(!product) && item.poi.state == Complete
  impl func fixes(item: POIInvoice) = [
    Fix(text = "Edit and select all the products")
  ]
} 
 
extend entity POIInvoice {
  extend override func issueTypes = super.issueTypes + issuesTypes0 + [ITPOINoVendor, ITPOINoLegalEntity, ITPOINoStore, ITPOINoProduct] 
}
