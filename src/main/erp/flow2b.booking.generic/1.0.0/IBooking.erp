trait IBooking {
  func preferedDates: [Date]?
  func duration: Duration
  func requiredCapacity: Number
  field status: BookingStatus
  compute state: BookingState = {
    if (status == Canceled) Canceled
    else if (status == Provided) Provided
    else calcState
  } {
    from = [calcState, BookingState.Canceled, BookingState.Provided]
    update = {
      this.status = new.status
    }
  } 
  func calcState: BookingState = {
    if (preferedDates && preferedDates!.max + duration > Date.now) Overdue
    else if (assignment) Assigned
    else Entered
  }
  field assignment: BookingAssignment? inline by booking
    
  func _possibleAssignments: Future[[BookingAssignment]?] = {
    if ((try? duration) && (try? requiredCapacity) && (try? preferedDates)) { 
      let booking = this
      preferedDates.query
      .map(date => Period(start = date, end = date + booking.duration))
      .flatMap{period => 
         doVacancies1(this, IBookingSlot.all
            .filter{slot =>
                 slot.match(booking)
              && slot.isWorking(period) 
              && !BookingAssignment.all.exists(a => a.slots.contains(slot) && a.period.intersects(period))
            }
      		.sortBy(order)
         )
         .map(slots => BookingAssignment(period = period, slots = slots))
      }
      .first(10)
      .result
    } else Future.apply([])
  }
  compute possibleAssignments: [BookingAssignment]? <- if (assignment) Future.apply([]) else _possibleAssignments
  
  object func doVacancies1(booking: IBooking, vacantSlots: [IBookingSlot]?): [[IBookingSlot]]? = {
     if (let slots = vacantSlots) {
       if (let r = slots.filter(match(booking))) r.map(i => [i])
       else doVacancies(booking, 2, slots)
     } else []
  }
  object func doVacancies(booking: IBooking, n: Int, vacantSlots: [IBookingSlot]): [[IBookingSlot]]? = {
    if (let combinations = vacantSlots.combinations(n)) {
      if (let r = combinations.filter(maxCapacity.sum >= booking.requiredCapacity)) r
      else doVacancies(booking, n + 1, vacantSlots)
    } else []
  }
  
  func assign(): Void = {
    if (!assignment) _possibleAssignments.map(this.assignment = first)
  }
  func reassign(): Void = {
    _possibleAssignments.map(this.assignment = first)
  }
  view assignmentSelectView = y {possibleAssignments >> list(action = {
    this.assignment = _
    this.save()
  }) {
    grid (labels = None) {
      slots 
      period.toString
    }
  }
    label("No Available", css = "color: red", visible = !possibleAssignments)
  }
}

inline entity BookingAssignment { 
  field booking: IBooking
  list field slots: [IBookingSlot]
  field period: Period
  view form = panel{grid (labels = None) {
    slots 
    period
  }}
}