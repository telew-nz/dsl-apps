entity VariableKit extends ISuperProduct with ICustomerSuperProduct with TWeightSize {
  func isTangible = true
  field title: String
  field photos: [Image]?
  field description: Text?
  field obsolete: Bool
  field alwaysAvailable: Bool
  field variations: [KitVariation]? read by variableKit
  func skuPrefix = "VKIT"
  
  object func attrs: [ProductAttr]? = [ColorItem.as[ProductAttr]!, Size]
  func child = variations
  func customerProducts = variations
  compute productCost: ProductCost? {
    availableFor = All
    value = childProductCost
  }
  
  view form = nav{
    tabs {
      grid (labels = Top, label = "Main") {
        photos >> field(height = 10, label = "")
        title >> field(label = "")
        row {sku refNum space}
        row {weight width height depth}
        brands
        categories
        row {obsolete  alwaysAvailable >> field (label = "Always Available for Sale")}
        productCost >> field(frame = false)
        baseMainView
        variations
        extension("main")
        description
      }
      grid (labels = Top, label = "Related") {
        accessories >> list(frame = false)
        principals >> list(frame = false)
        extension("rel")
      }
      extension("tabs")
      grid (labels = Top, label = "Other") {
        extension
      }
    }
    button("Add Missing Variations") {
      back {
        addMissingVariations()
      }
    }
    extension("nav")
  }
  back func addMissingVariations() = {
    if (let template = variations.first, let sampleProd = template.items*.product*.as[GoodVariation].find(attrTerms == template.attrTerms)) {
      sampleProd.variableGood.variations.foreach {sampleVar =>
        if (!this.variations.exists(_.attrTerms == sampleVar.attrTerms)) {
          let newItems = template.items.map {i =>
            if (let pv = i.product.as[GoodVariation]) {
              if (pv.attrTerms == template.attrTerms) {
                if (let product = pv.variableGood.variations.find(_.attrTerms == sampleVar.attrTerms)) {
                  (product, i.unit, i.qty)
                }
              } else {
                (i.product, i.unit, i.qty)
              }
            } else {
              (i.product, i.unit, i.qty)
            }
          }
          if (newItems.all(_)) {
            KitVariation(
              variableKit = this
              color = sampleVar.color, size = sampleVar.size,
              items = newItems.map {i =>
                KitItem(product = i!.product, unit = i!.unit, qty = i!.qty)
              }
            ).save
          }
        }
      }
    }
  }
}

entity KitVariation extends IKit with IComplexSubProduct with ICustomerComplexProduct {
  func title: String = "$variableKit $(attrTerms.join(" "))"
  
  ref field variableKit: VariableKit
  func getParent = variableKit
  field obsolete: Bool
  field photos: [Image]?
  field alwaysAvailable: Bool
  func isTangible = true
  
  func customerSuperProduct = variableKit
  func attrTerms = color.toSeq + size.toSeq
  
  ref field color: ColorItem?
  ref field size: Size?
  
  view form = nav{
    tabs {
      grid (labels = Top, label = "Main") {
        photos >> field(height = 10, label = "")
        variableKit >> field(label = "", noTab)
        row {sku refNum >> field(noTab) space}
        color
        size
        barcodes
        row {obsolete  alwaysAvailable >> field (label = "Always Available for Sale")}
        productCost >> field(frame = false)
        items >> table {
          product >> field(width = 0.7)
          qty >> field(width = 0.3)
        }
        baseMainView
        extension("main")
        description
      }
      grid (labels = Top, label = "Related") {
        kits
        extension("rel")
      }
      extension("tabs")
      grid (labels = Top, label = "Other") {
        customerProductView
        extension
      }
    }
    extension("nav")
  }
  view ref = x{"   " >> field(background = color?.color, visible = color) title}
}