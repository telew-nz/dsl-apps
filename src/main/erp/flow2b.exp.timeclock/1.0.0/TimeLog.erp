inline trait TimeLog {
  field timeLogItems: [TimeLogItem]? inline by entity
    
  view timeLogWidget = y (label = "Time Log") {
    timeLogItems >> list(editMode = AlwaysRead) {grid(labels = None) {
      row{person, hours}
      row{start, end}
    }}
    timeLogHours + " hours overall" >> field(visible = timeLogHours, margin = Around)
    button("Start" visible = openedTimeLogItem.isEmpty, css = "color: green") {
      timeLogItems = timeLogItems + TimeLogItem()
      save
    }
    button("Stop" visible = openedTimeLogItem.nonEmpty, css = "color: red") {
      openedTimeLogItem!.end = DateTime.now
      save
    }
  }
  view timeLogItemsList = y (label = "Timelog") {
    timeLogItems >> list{grid (labels = None) {
      row{person, hours}
      row{start, end}
    }}
    timeLogHours + " hours overall" >> field(visible = timeLogHours, margin = Around)
    button("Start" visible = openedTimeLogItem.isEmpty, css = "color: green") {
      timeLogItems = timeLogItems + TimeLogItem()
      save
    }
    button("Stop" visible = openedTimeLogItem.nonEmpty, css = "color: red") {
      openedTimeLogItem!.end = DateTime.now
      save
    }
  }
  compute timeLogHours: Dec[2]? {
    value = timeLogItems*.hours.sum
    views = []
  }
  func openedTimeLogItem: TimeLogItem? = timeLogItems.find(person.isCurrent && end.isEmpty)
}

inline entity TimeLogItem {
  system field entity: TimeLog by timeLogItems
  field person: Person {
    default = Person.current!
    width = 0.4
  }
  field start: Date {
    default = now
    width = 0.3
  }
  field end: Date? {width = 0.3}
  compute hours: Dec[2]? = if (let e = end) e.sub(start).hours else 0
}

/*entity Test extends TimeLog {
  field title: String
  view form = nav{grid {
    title
    timeLogWidget
  }}
}*/