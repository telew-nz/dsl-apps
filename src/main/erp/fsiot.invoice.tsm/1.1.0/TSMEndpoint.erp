trait TSMEndpoint extends IEndpoint with PseudoEntity {
  impl func service = TSMIntegration
  impl func mainEntity = service
  func enabled: Bool
  func script: Code?
  func sendingState: TSMState
  func nextState: TSMState
  
  system field next: POIInvoice?
  back func getFirst: HttpResponse = {
    procNext
  }
  back func getNext: HttpResponse = {
    if (next!.tsmState == sendingState) {
      next!.tsmState = nextState
      next!.saveMain
    }
    next = null
    save
    procNext
  }
  
  
  back func procNext: HttpResponse = {
    guard (enabled, let script, let next = updateNext) else return HttpResponse(code = 404)
    
    HttpResponse(
      code = 200, 
      headers = ["Content-Type" -> "text/octet-stream"], 
      body = next.script(script).toData)
  }
  
  back func updateNext: POIInvoice? = {
    if (let next) {
      if (next.tsmState != Entered || next.savedIssues) {
        this.next = null
        save
      }
    }
    if (!next) {
      this.next = POIInvoice.all.find(_.tsmState == sendingState && !_.savedIssues).result.get
      save
    }
    this.next
  }
}

object TSMAlertEndpoint extends TSMEndpoint {
  impl func script = service.alertScript
  impl func enabled = service.sendAlerts 
  impl func sendingState = Entered
  impl func nextState = AlertSent
}

object TSMInvoiceEndpoint extends TSMEndpoint {
  impl func script = service.invoiceScript
  impl func enabled = service.sendInvoices
  impl func sendingState = Approved
  impl func nextState = Sent
}