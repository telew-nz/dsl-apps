extend entity POIInvoice {
  field agent: User? {views = []}
  field tsmState: TSMState {
    default = Entered
    views = []
    //from = (tsmState + if (tsmState in [AlertSent, Cancelled]) [TSMState.Approved, TSMState.Cancelled]).toSet
  }
  
  extend view stateView = tsmState >> field(editMode = AlwaysEdit)
  
  func term(name: String, value: String?) = TsmTerm(name = name, value = value)
  func tsmFieldsBase: [TsmTerm] = [
    term("formUrl", formUrl) 
    term("number", number)
    term("invoiceNumber", s(invoiceNumber))
    term("poNumber", s(poNumber))
    term("invoiceDate", d(invoiceDate))
    term("dueDate", d(dueDate))
    term("vendorNumber", s(vendorNumber))
    term("rowsWithGst", rowsWithGst)
    term("totalNoGst", n(totalNoGst))
    term("gst", n(gst))
    term("totalWithGst", n(totalWithGst))
    term("agentEmail", s(agent?.person?.collectContacts*.as[EmailContact]*.email.first))
  ]
  func tsmFields = tsmFieldsBase
  func tsm: String = tsmFields.map(value).join(",")
  func tmsHeader: String = {
    '"$tsm"'
  }
  func tsmItems: PlainText = {
    items*.toTsm.join(" + chr(13) + ;\n").alt('""')
  }
  func s(str: String?): String? = {
    str.replace(",", " ").replace("\"", " ").replace("\n", " ").replace("  ", " ").trim
  }
  func n(num: Num?): String? = num.noUnit.unformattedString
  func d(date: Date?): String? = date
  
  func script(s: PlainText): PlainText = {
    tsmFieldsBase.fold(s, acc.replace("\$" + name, value)!)
      .replace("\$invoiceData", tmsHeader)
      .replace("\$invoiceItems", tsmItems)!
  }
  
  impl func activeRoles = {
    if (tsmState == AlertSent) [BusAdmin, InvoiceAgent]
    else if (tsmState !in [Sent, Cancelled]) [BusAdmin]
  }
  func invoiceAgent: User? = null
  
  impl func splitPerUser(role: String) = role == "fsiot.invoice.tsm.InvoiceAgent"
  impl event onSave = {
    if (tsmState == AlertSent) {
      invoiceAgent?.join(this)?.notify()
    }
  }
}

class TsmTerm(name: String, value: String?)
extend entity POIInvoiceItem {
  func term(name: String, value: String?) = TsmTerm(name = name, value = value)
  func tsmFieldsBase: [TsmTerm] = [
    term("code", s(code))
    term("desc", s(desc))
    term("qty", n(qty))
    term("amount", n(amount))
    term("gstRate", if (let gstRate) n(gstRate))
  ]
  func tsmFields = tsmFieldsBase
  func tsm: String = tsmFields.map(value).join(",")
  func toTsm: String = '"$tsm"'
  
  func s(str: String?): String? = invoice.s(str)
  func n(num: Num?): String? = invoice.n(num)
}