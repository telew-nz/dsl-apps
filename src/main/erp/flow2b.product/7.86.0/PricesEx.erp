extend trait IVendor {
  field priceModels: [IPriceModel]? read by vendor  
  back func price(level: IPriceLevel, priceType: PriceType, product: IBaseProduct): IPrice? = {
    priceModel(level, priceType, product)?.price(level, priceType, product)
  }
  back func priceModel(level: IPriceLevel, priceType: PriceType, product: IBaseProduct): IPriceModel? = {
    priceModels
      .filter(m => m.active && m.levels.contains(level))
      .sortBy(priority, start.desc)
      .find(contains(level, priceType, product))
  }
}

extend entity IVendor {
  extend view vendorView = priceModels
}

extend trait IBaseProduct {
  system stored compute salesPrice: SalesPrice? {
    availableFor = List
    value <-  if (status.forSale) {
      if (RegisterService.recalculating) this.salesPrice
      else if (let p = defPriceSales) p.salesPrice
    } 
     
    update = {
      let le = OurLegalEntity.ours.first!
      updateSalesPrice(le, le.pricesIncludingGst, new)
    }
  }
  func defPriceSales: IPriceSales? = ourPrices*.as[IPriceSales].filter(has(Sales) && model.isDefaultLevel).first
  system stored compute rentPrices: [DurPrice]? {
    availableFor = List
    value <- if (rentStatus.forRent) {
      if (RegisterService.recalculating) this.rentPrices
      else if (let p = ourPrices*.as[IPriceRent].filter(has(Rent) && model.isDefaultLevel).first) p.rentPrices
    }
  }

  compute currentPrice: UMoney? {
    label = "Discounted Price"
    value = salesPrice?.current
    visible = !dynamicPrices
    update = {
      let sp = salesPrice.alt(SalesPrice())
      sp.current = new
      let le = OurLegalEntity.ours.first!
      updateSalesPrice(le, le.pricesIncludingGst, sp)
    }
  }
  compute regularPrice: UMoney? {
    label = "Sales Price"
    value = salesPrice?.regular
    visible = !dynamicPrices
    update = {
      let sp = salesPrice.alt(SalesPrice())
      sp.regular = new
      let le = OurLegalEntity.ours.first!
      updateSalesPrice(le, le.pricesIncludingGst, sp)
    }
  }
  func updateSalesPrice(le: IVendor, inclGst: Bool, price: SalesPrice?): Void = {
    if (let sp = staticPrices*.as[IStaticPriceSales].find(model.active && model.vendor == le && model.isSalesModel)) {
      if (let p = price) sp.updateSalesPrice(inclGst, p)
      else sp.delete
    } else if (let price) {
      let pl = IPriceModel.ours*.as[IStaticPriceModel]
        .find(isSalesModel && vendor == le && supports(this))
        .alt(IStaticPriceModel.makeDefault(vendor = le))
      pl.forceNewPrice(this).as[IStaticPriceSales]?.updateSalesPrice(inclGst, price)
    }
  }
  func updateRentPrice(le: IVendor, inclGst: Bool, price: [DurPrice]?): Void = {
    if (let sp = staticPrices*.as[IStaticPriceRent].find(model.active && model.vendor == le && model.isRentModel)) {
      if (let price) sp.updateRentPrice(inclGst, price)
      else sp.delete
    } else if (let price) {
      let pl = IPriceModel.ours*.as[IStaticPriceModel]
        .find(isRentModel && vendor == le && supports(this))
        .alt(IStaticPriceModel.makeDefaultRent(vendor = le))
      pl.forceNewPrice(this).as[IStaticPriceRent]?.updateRentPrice(inclGst, price)
    }
  }
  compute ourPrices: [IPrice]? {
    value = prices.filter(vendor.is[OurLegalEntity])
    update = {}
    remove = {
      if (let p = old.as[IStaticPrice]) {
        if (p.created) p.delete
        else p.toDelete = true
      }
    }
  } 
  compute purchasePrices: [IPrice]? {
    value = prices.filter(!vendor.is[OurLegalEntity])
    update = {}
  }
  
  compute prices = (staticPrices.filter(!toDelete && model.active) + dynamicPrices).sortBy(model.priority, model.start.desc)
  back func prevPriceModel(level: IPriceLevel, priceType: PriceType, model: IPriceModel): IPriceModel? = {
    let mods = {
        staticPrices
           .filter(p => !p.toDelete && p.model.active && p.model.vendor == model.vendor)
          *.model
        +
        IDynamicPriceModel.all
           .filter(p => p.active && p.vendor == model.vendor && p.levels.contains(level))  
           .result.get
    }
      .sortBy(b => (b.priority, b.start.desc))
    if (let mods1 = mods.dropWhile(_ != model)) {
      mods1.drop(1)
        .filter(p => p.contains(level, priceType, this))
        .first
    } else {
      mods.first
    }
  }
    
  
  field staticPrices: [IStaticPrice]? inline by product
  
  compute dynamicPrices: [IPrice]? {
    availableFor = Inline
    value = back {
      IDynamicPriceModel.all
        .filter(active)
        .groupBy(vendor)
        .agg(prices = sortBy(b => (b.priority, b.start.desc)).flatMap(b => b.levels.flatMap(level => b.priceSales(level, this).toSeq + b.priceRent(level, this).toSeq)))
        .flatMap(prices)
    }
  }
  
  compute possibleOurModels = IPriceModel.ours*.as[IStaticPriceModel].filter(m => m.active && !ourPrices.exists(_.model == m) && m.supports(this))
}
