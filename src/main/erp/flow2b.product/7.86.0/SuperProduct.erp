trait ISuperProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
  
  impl final func subTitle(superTitle: String): String = superTitle
  impl field rentStatus: ProdRentStatus = NotForRent
  
  impl func trackItems: TrackItems? = null
  impl final func superProduct: ISuperProduct = this
  impl func collectPhotos: [Image]? = if (let p = photos) p else subProducts*.photos
  
  impl func description: Text? = ""
  
  impl func isValid: Bool = true
  func obsolete: Bool = false
  func weightInGrams: Number? = 0
  
  object field gen: Int?
  const field n: Int? = increment(ISuperProduct.gen)
  impl ref compute sku = skuPrefix + n
  func skuPrefix: String = "PR"
  impl func kits: [IKit]? = subProducts*.kits
  field _invoiceDesc: Text? {label = "Invoice Description"}
  field showKitItems: Bool {visible = this.is[IBasicKit] || this.is[IVariableKit]}
  impl func calcInvoiceDesc = _invoiceDesc
  
  impl func productItems: [IProductItem]? {
    default value = subProducts*.productItems
  }
  
  view superProductTabView {
    layout = group{
      categoriesView
      grid(label = "Invoice") {
        extension("invoice")
        showKitItems
        _invoiceDesc
      }
    }
  }
  view superProductNavView = x{
    
  }
  ref compute brand: Brand? {
    value = brands.first
    update = {
      this.brands = new.toSeq + this.brands.drop(1)
    }
  }
  
  func unitsView {
    default value = emptyView
  }
  
  impl event onSave = {}
  report Report {
    generateFilters = false
    field status: [ProductStatus]? {auto}
    field rentStatus: [ProductStatus]? {auto}
    field categories: ProductCategory? {auto label = "Category"}
    field tags: ProductTag? {auto label = "Tag"}
    field brands: Brand? {auto label = "Brand"}
    
    field shippingClass: ShippingClass? {auto}
    field revenueType: RevenueType? {auto}
    field expenseType: ExpenseType? {auto}
    field priceModel: IPriceModel?
    field priceLevel: IPriceLevel {
      default = PriceLevelDefault
      visible = priceModel
    }
    
    impl view list = ISuperProduct.all.filter((!priceModel || priceModel!.contains(priceLevel, _))) >> nav{list{}}
  }
}



