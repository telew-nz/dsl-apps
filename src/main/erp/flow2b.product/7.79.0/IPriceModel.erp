enum PriceModelState {
  case Planned {background = "#ed9" icon = "play"}
  case Active {background = "#8bf" icon = "spinner"}
  case Canceled {background = "#999" icon = "times-circle"}
  case Finished {color = "white" background = "#090" icon = "check-circle"}
}

trait IPriceModel extends RefEntity with IIPriceModel {
  func start: Date
  func end: Date?
  impl ref compute active: Bool = !canceled && start <= now && now <? end
  ref field levels: [IPriceLevel]? = [PriceLevelDefault]
  compute levelTitles: String? = levels*.title.join(", ")
  func isDefaultLevel = levels.contains(PriceLevelDefault)
  func mainPriceLevel: IPriceLevel = if (isDefaultLevel) PriceLevelDefault else levels.first.alt(PriceLevelDefault)
  
  field canceled: Bool
  ref compute state: PriceModelState {
    value = {
      if (canceled) Canceled
      else calcState
    }
    from = [calcState, Canceled]
    update = {
      canceled = new == Canceled
    }
  }
  func calcState: PriceModelState = {
    if (Date.now < start) Planned
    else if (end && Date.now >= end!) Finished
    else Active
  }
  
  object func ours: [IPriceModel]? = OurLegalEntity.ours*.priceModels
  func currency: Currency = vendor.getCurrency
  ref field vendor: IVendor by priceModels =? OurLegalEntity.onlyOne
  impl view traitItem = y {
    dslType.singular >> field(fontStyle = Label)
    x {state vendor start end}
    x (visible = vendor.is[OurLegalEntity]) {label("Levels:") levelTitles >> field(stretch = 1, fontStyle = Normal)}
  }
  view pmNavButtons = x (spacing = false) {
    button("Products") {
      ISuperProduct.Report(priceModel = this).list.open
    }
  }
  
  back func touchAllProducts(): Void = {
    IBaseProduct.all
       .filter(p => this.levels.exists(l => this.contains(l, p)))
      *.touch
  }
}

trait IPriceLevel extends RefEntity with NewEngine {
  field models: [IPriceModel]? by levels
}

entity PriceLevel extends IPriceLevel {
  impl field title: String
  field desc: Text? {label = "Description"}
  field customers: [Customer]? read by _priceLevel
  impl view form = nav{grid{
    title
    models
    desc
    customers
  }}
}

object PriceLevelDefault extends Entity with IPriceLevel {
  impl func title = "Default"
}

extend entity Customer {
  field _priceLevel: PriceLevel? {views = []}
  compute priceLevel: IPriceLevel {
    value = _priceLevel?.as[IPriceLevel].alt(PriceLevelDefault)
    update = {
      _priceLevel = new.as[PriceLevel]
    }
  }
}
