trait IBaseProduct extends HasNumber {
  const system field skuGen: Int?
  
  func isTangible: Bool
  func sku: String
  func number = sku
  
  func unit: ProductUnit = Item
  func altUnits: [ProductAltUnit]? = []
  func units: [ProductUnit] = (unit + altUnits*.unit).toSet
  
  func kits: [IKit]?
  func photos: [Image]? = []
  
  func collectPhotos: [Image]?
  func collectPhotosDown: [Image]? 
  func collectPhotosUp: [Image]? 
  func variationPhotos: [Image]?
  
  func weightSize: IWeightSize?
  
  func description: Text?
  
  func isValid: Bool
  func gstRate(vendor: IVendor?): UPercent[2]??
  func hasGst(vendor: IVendor?): Bool = gstRate(vendor)
  
  var status: ProductStatus
  var rentStatus: ProdRentStatus
  
  func forSale = status.forSale
  func forPurchase = status.forPurchase
  func alwaysAvailable = status == AlwaysAvailableForSale || (!isTangible && status.forSale)
  
  func superProduct: ISuperProduct
  func subProducts: [ISubProduct]?
  
  func parent: IBaseProduct?
  func child: [IBaseProduct]?
  func productCost: ProductCost?
  func childProductCost: ProductCost? = child.mapOpt(productCost).sortBy(cost.desc, date.desc).first
  func productItems: [ProductItem]? = []
  func trackItems: TrackItems?
  view statusView = x{status rentStatus >> field(visible = canRent) }
  func canRent = false
}

enum TrackItems {
  case Sometimes {background = "#ed9"}
  case Always {background = "#efd"}
}

enum ProductStatus(forSale: Bool, forPurchase: Bool, subs: [ProductStatus]) {
  case Entered(forSale = false, forPurchase = false, subs = [Entered]) {background = "#ed9"}
  case ForSale(forSale = true, forPurchase = true, subs = [Entered, ForSale, NotForSale, ForClearance, Obsolete]) {background = "#efd"}
  case AlwaysAvailableForSale(forSale = true, forPurchase = true, subs = [Entered, ForSale, NotForSale, AlwaysAvailableForSale, ForClearance, Obsolete]) {background = "#dea"}
  case NotForSale(forSale = false, forPurchase = true, subs = [Entered, NotForSale, Obsolete]) {background = "#ecd"}
  case ForClearance(forSale = true, forPurchase = false, subs = [Entered, ForClearance, Obsolete]) {background = "#f99"}
  case Obsolete(forSale = false, forPurchase = false, subs = [Obsolete]) {background = "#999"}
  
  object func default: ProductStatus = ForSale
}


enum ProdRentStatus(forRent: Bool) {
  case ForRent(forRent = true) {background = "#efd"}
  case NotForRent(forRent = false) {background = "#ecd"}
}
