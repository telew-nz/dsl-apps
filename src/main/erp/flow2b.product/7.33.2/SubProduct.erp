trait ISubProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
  
  final func child: [IBaseProduct]? = []
  final func subProducts: [ISubProduct]? = [this]
  func collectPhotos: [Image]? = collectPhotosUp
  func collectPhotosUp: [Image]? = if (let p = photos) p else parent?.collectPhotosUp
  final func collectPhotosDown: [Image]? = photos
  func variationPhotos = if (let p = photos) p else parent?.variationPhotos
  func trackItems = superProduct.trackItems
  func products: [IProduct : Qty]
  func productCost: ProductCost?
  
  
  field includedInKitItems: [KitItem]? inline by product {deleteCascade = false}
  compute kits = includedInKitItems*.kit.distinct
  func weightSize = parent!.weightSize
  
  func productQtys(qty: Qty): [ProductQty] = {
    let bq = toBase(qty)
    products.toSeq.map{i =>
      ProductQty(product = i.#0, qty = i.#1*bq)
    }
  } 
  func tangibleProductQtys(qty: Qty): [ProductQty]? = productQtys(qty).filter(product.isTangible)

  event onSave = {}
  
}


trait IComplexSubProduct extends ISubProduct {
  func parent: IBaseProduct? = getParent
  func getParent: IBaseProduct
  func superProduct: ISuperProduct = getParent.superProduct
  
  
  field subRentStatus: ProdRentStatus?
  compute rentStatus: ProdRentStatus {
    views = []
    value = subRentStatus.alt(getParent.rentStatus)
    update = {
      subRentStatus = if (new != getParent.rentStatus) new
    }
  }
  
  ref compute sku = getParent.sku + "." + skuN
  
  const field skuN: Int? = increment(getParent.skuGen)
  event onSave = {}
  
  func isValid: Bool = superProduct.isValid
  func isTangible: Bool = superProduct.isTangible
  func weightInGrams: Number? = superProduct.weightInGrams
  func description: Text? = superProduct.description
  func gstRate(vendor: IVendor?): UPercent[2]?? = superProduct.gstRate(vendor)
  func obsolete: Bool = superProduct.obsolete
  func unit: ProductUnit = superProduct.unit
  func units = superProduct.units
  func collectPhotos: [Image]? = if (let p = photos) p else superProduct.collectPhotos.first(1)
  
  field subStatus: ProductStatus?
  compute status: ProductStatus {
    from = getParent.status.subs
    value = {
      let ps = getParent.status
      if (let ss = subStatus) if (ps.subs.contains(ss)) ss else ps
      else ps
    }
    update = {
      subStatus = if (new != getParent.status) new
    }
  }
}


class ProductCost {
  field date: Date
  field cost: Money?
  compute curCost: Money[our]? = cost.as[Money[our]]
  
  view form = x(label = "Approximate Cost") {curCost label("at", fontStyle = Label) date >> field(fontStyle = Label)}
  func toString = "$cost at $date"
  
  func mul(qty: Qty?): ProductCost = ProductCost(date = date, cost = cost*qty)
  object func sum(costs: [ProductCost]): ProductCost = {
    ProductCost(date = costs*.date.min, cost = costs*.curCost.sum)
  }
  func to(currency: Currency, date: Date): Future[ProductCost] = {
    if (currency == our) {
      ProductCost(date = date, cost = curCost)
    } else {
      let cost <- curCost.to[Money[currency]](date)
      ProductCost(date = date, cost = cost)
    }
  }
}

class ProductQty {
  field product: IProduct
  field qty: Qty
  
  func toString = "$product -> $qty"
}


