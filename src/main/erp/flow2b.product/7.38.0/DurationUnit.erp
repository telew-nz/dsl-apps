enum DurUnit(scale: Int?, symbol: String, defDur: Duration?) extends Unit {
  object func default: DurUnit = Hour
  func position: UnitPosition = SuffixWithSpace
  case Day(scale = 2, symbol = "day", defDur = 1_day)
  case HalfDay(scale = 0, symbol = "half day", defDur = 12_hour)
  case Hour(scale = 2, symbol = "hour", defDur = 1_hour)
  case Week(scale = 2, symbol = "week", defDur = 1_week)
  case HalfWeek(scale = 0, symbol = "half week", defDur = 0.5_week)
  case Minimum(scale = 0, symbol = "minimum", defDur = 0)
  case Slot(scale = 0, symbol = "slot", defDur = 0)
  case Event(scale = 0, symbol = "event", defDur = 0)
}

object Night extends Unit {
  func position: UnitPosition = SuffixWithSpace
  func symbol: String = "night"
  func scale: Int? = 0
}

object Slot extends Unit {
  func position: UnitPosition = SuffixWithSpace
  func symbol: String = "slot"
  func scale: Int? = 2
}

class DurPrice {
  field currency: Currency
  field unit: DurUnit = default
  field dur: Qty[unit] {
    label = "Duration"
    canEditUnit
    default = 1
  }
  field price: Money[currency]? {
    canEditUnit
  }
  view form = x{dur price}
  func convertGst(gstRate: UPercent?, priceInclGst: Bool, expectedInclGst: Bool): DurPrice = {
    if (priceInclGst == expectedInclGst) this
    else DurPrice(
      price = SalesPrice.convertGst(gstRate, price, priceInclGst, expectedInclGst),
      currency = currency, unit = unit, dur = dur
    )
  }
}