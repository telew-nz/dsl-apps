trait ISubProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
    
  field barcodes: [Barcode]? 
  final func child: [IBaseProduct]? = []
  final func subProducts: [ISubProduct]? = [this]
  func collectPhotos: [Image]? = collectPhotosUp
  func collectPhotosUp: [Image]? = if (let p = photos) p else parent?.collectPhotosUp
  final func collectPhotosDown: [Image]? = photos
  func variationPhotos = if (let p = photos) p else parent?.variationPhotos
  func trackItems = superProduct.trackItems
  func products: [IProduct : Qty]
  func productCost: ProductCost?
  
  field includedInKitItems: [KitItem]? inline by product {deleteCascade = false}
  compute kits = includedInKitItems*.kit.distinct
  func weightSize = parent!.weightSize
  
  func productQtys(qty: Qty): [ProductQty] = {
    let bq = toBase(qty)
    products.toSeq.map{i =>
      ProductQty(product = i.#0, qty = i.#1*bq)
    }
  } 
  func tangibleProductQtys(qty: Qty): [ProductQty]? = productQtys(qty).filter(product.isTangible)

  event onSave = {}
  
  class Barcode {
    compute unitOne: Qty[unit] {
      label = "Unit"
      value = 1.as[Qty[unit]]!
      canEditUnit
    } 
    field unit: ProductUnit {
      default = this[ISubProduct].unit
      from = units
    }
    compute units = this[ISubProduct].units
    field number: String
    view form = x{unitOne number >> field(stretch = 1)}
  }
}

trait IComplexSubProduct extends ISubProduct {
  func parent: IBaseProduct? = getParent
  func getParent: IBaseProduct
  func superProduct: ISuperProduct = getParent.superProduct
  
  ref compute sku = getParent.sku + "." + skuN
  
  const field skuN: Int? = increment(getParent.skuGen)
  event onSave = {}
  
  func isValid: Bool = superProduct.isValid
  func isTangible: Bool = superProduct.isTangible
  func weightInGrams: Number? = superProduct.weightInGrams
  func description: Text? = superProduct.description
  func shortDescription: Text? = superProduct.shortDescription
  func gstRate(vendor: IVendor?): UPercent[2]?? = superProduct.gstRate(vendor)
  func obsolete: Bool = superProduct.obsolete
  func unit: ProductUnit = superProduct.unit
  func units = superProduct.units
  func collectPhotos: [Image]? = if (let p = photos) p else superProduct.collectPhotos.first(1)
  
  field subStatus: ProductStatus?
  compute status: ProductStatus {
    value = subStatus.alt(getParent.status)
    update = {
      subStatus = if (new != getParent.status) new
    }
  }
}


class ProductCost {
  field date: Date
  field cost: Money[Currency.our]?
  
  view form = x(label = "Approximate Cost") {cost label("at", fontStyle = Label) date >> field(fontStyle = Label)}
  func toString = "$cost at $date"
}

class ProductQty {
  field product: IProduct
  field qty: Qty
  
  func toString = "$product -> $qty"
}


