enum DurUnit(impl field scale: Int?, impl field symbol: String, defDur: UDuration?) extends Unit {
  object func default: DurUnit = Hour
  impl func position: UnitPosition = SuffixWithSpace
  case Day(scale = 2, symbol = "day", defDur = 1_day)
  case HalfDay(scale = 0, symbol = "half day", defDur = 12_hour)
  case Hour(scale = 2, symbol = "hour", defDur = 1_hour)
  case Week(scale = 2, symbol = "week", defDur = 1_week)
  case HalfWeek(scale = 0, symbol = "half week", defDur = 0.5_week)
  case Month(scale = 2, symbol = "month", defDur = 1_month)
  case Year(scale = 2, symbol = "year", defDur = 1_year)
  case Minimum(scale = 0, symbol = "minimum", defDur = 0)
  case Slot(scale = 0, symbol = "slot", defDur = 0)
  case Event(scale = 0, symbol = "event", defDur = 0)
}

object Slot extends Unit {
  impl func position: UnitPosition = SuffixWithSpace
  impl func symbol: String = "slot"
  impl func scale: Int? = 2
}

class DurPrice {
  field unit: DurUnit = default
  field dur: UQty[unit] {
    label = "Duration"
    canEditUnit
    default = 1
  }
  field price: SalesPrice 
  impl view form = x{dur price}
  func convertGst(gstRate: UPercent?, priceInclGst: Bool, expectedInclGst: Bool): DurPrice = {
    if (priceInclGst == expectedInclGst) this
    else DurPrice(
      price = price.convertGst(gstRate, priceInclGst, expectedInclGst),
      unit = unit, dur = dur
    )
  }
}
