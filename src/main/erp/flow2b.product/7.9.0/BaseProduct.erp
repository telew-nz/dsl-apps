trait HasNumber extends RefEntity {
  func number: String
  ref field refNum: String? {label = "Reference Number"} 
  compute fullNum: String {
    label = "Number"
    value = if (let r = refNum) "$number ($refNum)" else number
  }
  func title = fullNum
  func entityNumbers = [number, refNum]
}

trait IBaseProduct extends HasNumber {
  const system field skuGen: Int?
  
  func isTangible: Bool
  func sku: String
  func number = sku
  
  func unit: ProductUnit = Item
  func altUnits: [ProductAltUnit]? = []
  func units: [ProductUnit] = (unit + altUnits*.unit).toSet
  
  func photos: [Image]? = []
  
  func collectPhotos: [Image]?
  func collectPhotosDown: [Image]? 
  func collectPhotosUp: [Image]? 
  func variationPhotos: [Image]?
  
  func weightSize: IWeightSize?
  
  func description: Text?
  func shortDescription: Text? = ""
  
  func isValid: Bool
  func gstRate(vendor: IVendor?): UPercent[2]??
  func hasGst(vendor: IVendor?): Bool = gstRate(vendor)
  
  func status: ProductStatus
  
  func forSale = status.forSale
  func alwaysAvailable = status == AlwaysAvailableForSale
  
  func superProduct: ISuperProduct
  func subProducts: [ISubProduct]?
  
  func parent: IBaseProduct?
  func child: [IBaseProduct]?
  func productCost: ProductCost?
  func childProductCost: ProductCost? = child.mapOpt(productCost).sortBy(cost.desc, date.desc).first
  func salesPrice: Future[SalesPrice] = SalesPrice.empty
  
  view traitItem = grid(labels = None) {
    status
    row {title >> field(width = 0.6) salesPrice >> field(width = 0.4, frame = false, align = Right)}
  }
  view baseMainView = grid (labels = Top) {
  }
}

enum ProductStatus(forSale: Bool) {
  case Entered(forSale = false) {background = "#ed9"}
  case ForSale(forSale = true) {background = "#efd"}
  case AlwaysAvailableForSale(forSale = true) {background = "#dea"}
  case NotForSale(forSale = false) {background = "#ecd"}
  case Obsolete(forSale = false) {background = "#999"}
  
  object func default: ProductStatus = ForSale
}
