enum PriceType {
  case Sales
  case Rent
}

class PriceRequest(currency: Currency, inclGst: Bool, level: IPriceLevel, order: PriceOrder?)
class PriceOrder {
  field customer: ICustomer?
  field items: [PriceOrderItem]?
}
class PriceOrderItem {
  field prod: IBaseProduct
  field qty: UQty
  field rentPeriod: RentPeriod?
  func priceType: PriceType = if (rentPeriod) Rent else Sales
}

interface IIPriceModel {
  func active: Bool = true
  func priority: Dec[8]? = 0
  func currency: Currency
  
  func isDynamic = false
  func isSalesModel = true
  func isRentModel = false
  func hasLevel(level: IPriceLevel): Bool
  
  func contains(level: IPriceLevel, type: PriceType): Bool = {
    hasLevel(level) && ((type == Sales && isSalesModel) || (type == Rent && isRentModel))
  }
  back final func contains(level: IPriceLevel, product: IBaseProduct): Bool = {
    contains(level, Sales, product) || contains(level, Rent, product)
  }
  back final func contains(level: IPriceLevel, type: PriceType, product: IBaseProduct): Bool  = {
    contains(level, type) && doContains(level, type, product)
  }
  back func doContains(level: IPriceLevel, type: PriceType, product: IBaseProduct): Bool {
    default value = doPrice(level, type, product)
  }
  
  back final func price(level: IPriceLevel, type: PriceType, product: IBaseProduct): IPrice? = {
    if (contains(level, type)) {
      doPrice(level, type, product)
    }
  }
  back func doPrice(level: IPriceLevel, type: PriceType, product: IBaseProduct): IPrice?
  back final func priceSales(level: IPriceLevel, product: IBaseProduct): IPriceSales? = price(level, Sales, product)?.as[IPriceSales]
  back final func priceRent(level: IPriceLevel, product: IBaseProduct): IPriceRent? = price(level, Rent, product)?.as[IPriceRent]
  
  func hasSlots = false
}


object PriceModelNone extends IIPriceModel {
  impl func hasLevel(level: IPriceLevel): Bool = false
  impl func doPrice(level: IPriceLevel, type: PriceType, product: IBaseProduct) = null
  impl func currency = our
}

trait IDynamicPriceModel extends IPriceModel {
  impl event onSave = {
    if (dataUpdated && active) {
      touchAllProducts()
    }
  }
}

interface IPrice {
  func model: IPriceModel
  func currency = model.currency
  func vendor: IVendor = model.vendor
  func product: IBaseProduct
  func gstRate: UPercent[2]? = product.gstRate(vendor.legalEntity).alt(0)
  func has(type: PriceType): Bool
  func levels: [IPriceLevel]?
  
  func autoCategories: [IProductCategory]? = []
  func autoTags: [IProductTag]? = []
  
   
  back func amount(request: PriceRequest, item: PriceOrderItem): Future[SalesPrice]   
}