trait IKit extends ISubProduct {
  impl func trackItems = null
  field items: [KitItem] inline by kit
  impl func products: [IProduct : UQty] = items.flatMap{i =>
    i.product.products.mapValues{ 
      _*i.qty
    }.toSeq
  }.toMap!
  impl ref compute productCost = {
    let costs = items.map{
      let pc = product.productCost
      (date = pc?.date, cost = pc?.cost*qty)
    }
    if (costs.all(date)) {
      ProductCost(date = costs.map(date!).min, cost = costs*.cost.sum)
    }
  }
  override final func productItems: [ProductItem]? = []
}

inline entity KitItem {
  field kit: IKit by items
  field product: ISubProduct by includedInKitItems {
    available(Ref).with(unit, altUnits, vendors, productCost, invoiceDesc)
    update = {
      this.unit = new.unit
      this.qty = this.qty.as[UQty[this.unit]]
    }
  }
  field unit: ProductUnit {
    from = product.units
  }
  field qty: UQty[unit] {
    label = "Quantity"
    default = 1
    canEditUnit = true
  }
}

basicProduct Kit (skuPrefix = "KIT", kit = true) {
  field color: ColorItem?
  field size: Size?
  field condition: ProdCondition?
  
  impl func prodCondition: ProdCondition? = condition
  impl view customView = grid {
    row{color size condition}
  } 
}


trait IBasicKit extends IBasicSubProduct with IKit {
  impl func trackItems = null
  impl view form = nav(onBarcode = if (ui.edit) addBarcode(barcode)){
    tabs {
      grid (labels = None, label = "Main") {
        mainView
      }
      superProductTabView
      subProductTabView
      extension("tabs")
      grid (labels = Top, label = "More") {
        unitsView
        barcodes
        extension
      }
    }
    superProductNavView
    nfcWriteBtn
    extension("nav")
  }
}
/*entity Kit extends IBasicSubProduct with IKit with TWeightSize {
  impl func isTangible = true
  impl func trackItems = null
  impl field title: String
  impl field description: Text?
  impl field status: ProductStatus = default
  impl func skuPrefix = "KIT"
  
  impl view form = nav(onBarcode = if (ui.edit) addBarcode(barcode)){
    tabs {
      grid (labels = Top, label = "Main") {
        photos >> field(height = 10, label = "")
        statusView
        title >> field(label = "", fontStyle = H1)
        row {sku refNum space}
        items >> table {
          product >> field(width = 0.7)
          qty >> field(width = 0.3)
        }
        
        row {weight width height depth}
        barcodes
        productCost >> field(frame = false)
        baseMainView
        extension("main")
        extension
        description
      }
      superProductTabView
      subProductTabView
      extension("tabs")      
    }
    superProductNavView
    extension("nav")
  }
}*/

trait IVariableKit extends IVariableSuperProduct {
  impl func variations: [IKitVariation]?
}

trait IKitVariation extends ISubVariation with IKit {
  impl func superProduct: IVariableKit
  impl view form = nav(onBarcode = if (ui.edit) addBarcode(barcode)){
    tabs {
      grid (labels = None, label = "Main") {
        mainView
      }
      grid (labels = Top, label = "Related") {
        kits
        extension("rel")
      }
      subProductTabView
      extension("tabs")
    }
    nfcWriteBtn
    extension("nav")
  }
}
