entity PriceList extends IStaticPriceModel with NewEngine {
  impl func title = "PL $vendor $date"
  ref field date: Date[day] = now
  field pricesIncludingGst: Bool = (try? vendor.pricesIncludingGst).alt(true)
  
  field products: [PriceListProduct]? inline by priceList 
  impl back func priceSales(product: IBaseProduct): IPriceSales? = {
    products.find(p => p.product == product || p.product == product.superProduct)
  }
  impl view form = nav{tabs {
    grid(width = 1.2, label = "Prices"){
      date
      vendor
      pricesIncludingGst
      products >> table {
        header {
          label("Code", width = 0.2)
          label("Product", width = 0.35)
          label("Regular", width = 0.2, align = Right)
          label("Discounted", width = 0.2, align = Right)
          extension("th")
        }
        body {
          row {
            rowView
          }
          row {
            row2View
          }
        }
      }
    }
    priceLevels
  }}
  
  impl func supports(product: IBaseProduct): Bool = true
  impl func findPrice(product: IBaseProduct) = products.find(p => p.product == product)
  impl func forceNewPrice(product: IBaseProduct) = PriceListProduct(product = product, priceList = this)
} 
  
entity PriceListProduct extends IStaticPriceSales {
  impl func model = priceList
  field priceList: PriceList by products =? IPriceModel.ours*.as[PriceList].onlyOne
  
  field regular: UMoney[currency]? {
    update = {
      if (old == current) current = new
    }
  }
  compute gstK = if (vendor.hasGst) (1.0000 + product.gstRate(vendor.legalEntity).alt(0)) else 1.0000
  
  field current: UMoney[currency]? {
    label = "Discounted"
  }
  compute cost: Future[UMoney[currency]?] {
    label = "Approx Cost"
    value = product.productCost?.cost.to[UMoney[currency]](now)
  }
  func margin(price: UMoney[currency]?): Percent[2]? = {
    if (let r = if (priceList.pricesIncludingGst) price/gstK else price) {
      let c = cost.get
      (r - c).as[Percent[2]]/r
    }
  }
  func priceWithMargin(margin: Percent[2]?): UMoney[currency]? = {
    if (let c = cost.get, let p = (1.0000 - margin).positive) {
      let r = c/p
      if (priceList.pricesIncludingGst) r*gstK else r
    }
  }
  
  compute regularMargin: Percent[2]? {
    value = margin(regular)
    update = {regular =? priceWithMargin(new)}
  }
  compute currentMargin: Percent[2]? {
    value = margin(current)
    update = {current =? priceWithMargin(new)}
  }
  view rowView = group{
    product.fullNum >> field(rowSpan = 2, fontStyle = Label)
    product >> field(title = title)
    regular
    current
  }
  
  view row2View = group{
    x {label("Cost:") cost label("Margins:", align = Right, stretch = 1) } 
    regularMargin >> field(fontStyle = if (current == regular) Normal else Strikeout) 
    currentMargin
  }
  
  
  impl event onSave = product.touch
  impl func baseSalesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    let rp <- regular.to[UMoney[currency]](now)
    let cp <- {
      if (regular != current) {
        current.to[UMoney[currency]](now)
      } else Future(rp)
    }
    SalesPrice(currency = currency, regular = rp, current = cp)
      .convertGst(gstRate, priceList.pricesIncludingGst, inclGst)
  }
  back override func salesPrice(currency: Currency, inclGst: Bool, level: PriceLevel?): Future[SalesPrice] = {
    if (let level, let p = level.price(this)) {
      let a <- p.to[UMoney[currency]](now)
      SalesPrice(regular = a, current = a)
    } else {
      super.salesPrice(currency, inclGst, level)
    }
  }
  impl func updateSalesPrice(salesPrice: SalesPrice): Bool = {
    regular = salesPrice.regular
    current = salesPrice.current
  }
  impl view form = grid {
    row{
      regular
      current
      extension
    }
  }
}

