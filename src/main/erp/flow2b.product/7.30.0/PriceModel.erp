trait IPriceModel extends RefEntity {
  object func ours: [IPriceModel]? = OurLegalEntity.ours*.priceModels
  func currency: Currency = vendor.getCurrency
  ref field vendor: IVendor by priceModels =? OurLegalEntity.onlyOne
  func priority: Dec[8]? = 0
  
  back func contains(product: IBaseProduct): Bool = price(product)
  back func price(product: IBaseProduct): IPrice?
}

trait IDynamicPriceModel extends IPriceModel 
trait IStaticPriceModel extends IPriceModel {
  func supports(product: IBaseProduct): Bool = false
  func createPrice(product: IBaseProduct): IStaticPrice = throw "createPrice Unsupported"
}

interface IPrice {
  list compute salesPrice: Future[SalesPrice] {
    value = back{salesPrice(vendor.getCurrency, vendor.pricesIncludingGst)}
  }

  func model: IPriceModel
  func currency = model.currency
  func vendor: IVendor = model.vendor
  func product: IBaseProduct
  func gstRate: UPercent[2]? = product.gstRate(vendor).alt(0)
  back func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice]
  back func salesAmount(currency: Currency, customer: ICustomer?, qty: Qty, inclGst: Bool): Future[SalesPrice] = {
    let p <- salesPrice(currency, inclGst)
    p.mul(product.toBase(qty))
  }
  
  view form
}

trait IStaticPrice extends AnyEntity with IPrice {
  func model: IStaticPriceModel
  field product: IBaseProduct by staticPrices {
    available(Ref).with(productCost)
  }
  func updateSalesPrice(salesPrice: SalesPrice): Bool = false
}

extend trait IVendor {
  field priceModels: [IPriceModel]? read by vendor  
  back func price(product: IBaseProduct): IPrice? = {
    priceModel(product)?.price(product)
  }
  
  back func priceModel(product: IBaseProduct): IPriceModel? = {
    priceModels.sortBy(priority).find(contains(product))
  }
}

extend entity IVendor {
  extend view vendorView = priceModels
}

extend trait IBaseProduct {
  compute salesPrice: SalesPrice? {
    availableFor = List
    value <- {
      if (let p = salesPrices.first) p.salesPrice
    }
    update = {
      updateSalesPrice(OurLegalEntity.ours.first!, new)
    }
  }
  compute currentPrice: Money? {
    label = "Discounted Price"
    value = salesPrice?.current
    update = {
      let sp = salesPrice.alt(SalesPrice())
      sp.current = new
      updateSalesPrice(OurLegalEntity.ours.first!, sp)
    }
  }
  compute regularPrice: Money? {
    label = "Sales Price"
    value = salesPrice?.regular
    update = {
      let sp = salesPrice.alt(SalesPrice())
      sp.regular = new
      updateSalesPrice(OurLegalEntity.ours.first!, sp)
    }
  }
  func updateSalesPrice(le: OurLegalEntity, price: SalesPrice?): Void = {
    if (let sp = staticPrices.find(model.vendor == le)) {
      if (let p = price) sp.updateSalesPrice(p)
      else sp.delete
    } else if (let price) {
      let pl = IPriceModel.ours*.as[IStaticPriceModel]
        .find(vendor == le && supports(this))
        .alt(PriceList(vendor = le))
      pl.createPrice(this).updateSalesPrice(price)
    }
  }
  
  compute salesPrices: [IPrice]? {
    value = prices.filter(vendor.is[OurLegalEntity])
  } 
  compute purchasePrices: [IPrice]? {
    value = prices.filter(!vendor.is[OurLegalEntity])
  }
  
  compute prices = staticPrices + dynamicPrices
  
  field staticPrices: [IStaticPrice]? inline by product
  
  compute dynamicPrices: [IPrice]? {
    availableFor = Inline
    value = back {
      IDynamicPriceModel.all
        .groupBy(vendor).agg(price = sortBy(b => b.priority).mapOpt(b => b.price(this)).first)
        .flatMap(price.toSeq)
    }
  }
  view traitItem = grid(labels = None) {
    statusView
    row {title >> field(width = 0.6) salesPrice >> field(width = 0.4, frame = false)}
  }
  
  view baseMainView = grid(labels = Top) {
    //edit {
    //  row {regularPrice currentPrice space }
    //}
    read {salesPrice >> field(frame = false)}
    edit{row{regularPrice currentPrice space}}
    salesPrices >> list(label = "Prices", visible = !OurLegalEntity.ours.onlyOne){ grid(labels = None) {
      row {vendor model}
      form >> field(frame = false)
	}}
  }
  view supplyView = grid(labels = Top, label = "Supply", visible = purchasePrices) {
    purchasePrices >> list(label = "Purchase Prices"){ grid(labels = None) {
      row {vendor model}
      form >> field(frame = false)
	}}
  }
}
