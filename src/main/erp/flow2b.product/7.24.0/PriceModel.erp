interface IPriceModel {
  func priority: Dec[8]? = 0
  func date: Date[day] = now
  
  back func contains(product: IBaseProduct): Bool = price(product)
  back func price(product: IBaseProduct): IPrice?
}

trait PriceModel extends Entity with IPriceModel {
  func currency: Currency = vendor.getCurrency
  ref field vendor: IVendor by priceModels =? OurLegalEntity.onlyOne
} 
object EmptyPriceModel extends IPriceModel {
  func price(product: IBaseProduct): IPrice? = null
}

interface IPrice {
  compute salesPrice: Future[SalesPrice] = back {
    salesPrice(vendor.getCurrency, vendor.pricesIncludingGst)
  }
  func vendor: IVendor
  func product: IBaseProduct
  func gstRate: UPercent[2]? = product.gstRate(vendor).alt(0)
  func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice]
  func salesAmount(currency: Currency, customer: ICustomer?, qty: Qty, inclGst: Bool): Future[SalesPrice] = {
    let p <- salesPrice(currency, inclGst)
    p.mul(product.toBase(qty))
  }
  
  view form
}

extend trait IVendor {
  field priceModels: [PriceModel]? read by vendor  
  back func price(product: IBaseProduct): IPrice? = {
    priceModel(product)?.price(product)
  }
  
  back func priceModel(product: IBaseProduct): IPriceModel? = {
    priceModels.sortBy(priority, date.desc).find(contains(product))
  }
}

extend entity IVendor {
  extend view vendorView = priceModels
}

extend trait IBaseProduct {
  override list compute salesPrice: Future[SalesPrice] = back {
    OurLegalEntity.ours.mapOpt{
      a => a.price(this)?.salesPrice(Currency.our, a.pricesIncludingGst) 
    }.first.alt(SalesPrice.empty)
  } 
  compute prices: Future[[VendorPrice]?] {
    value = if (id) PriceModel.all
      .groupBy(vendor).agg(priceModel = sortBy(b => (b.priority, b.date.desc)).find(b => b.contains(this)))
      .filter(priceModel)
      .map{i => 
        VendorPrice(vendor = i.vendor, model = i.priceModel!, price = i.priceModel!.price(this)!)
      }.result
    availableFor = All
  }
  extend view baseMainView = prices >> list{grid(labels = None){
    row {vendor model}
    price.form >> field(frame = false)
  }}   
}

class VendorPrice {
  field vendor: IVendor
  field model: PriceModel
  field price: IPrice
}