extend trait ISubProduct {
  field barcodes: [Barcode]? inline by item
  
  func addBarcode(number: String): Barcode = {
    (try? barcodes!).find(b => b.number == number)
      .alt(Barcode(item = this, number = number, unit = (try? this.unit).alt(Item)))
  }  
  view labelView = grid(labels = None, margin = Around, pageBreakAfter){
    title
    barcode >> field(barcode = barcodeFormat)
  }
  compute barcode = barcodes.find(b => b.unit == this.unit)?.number.alt(number)
  compute barcodeFormat = if (let bc = barcodes.find(b => b.unit == this.unit)) bc.format else "CODE128"
}

trait IBarcode extends AnyEntity {
  func number: String
  func barcodeItem: RefEntity
  func unit: ProductUnit = Item
  func qty: Qty[unit] = 1.as[Qty[unit]]!
  
  back object func find(number: String): IBarcode? = {
    if (let b = IBarcode.all.find(b => b.number == number).result.get) b
    else if (number.length == 12) {
      let n = "0$number"
      IBarcode.all.find(b => b.number == n).result.get
    }
  }
}
inline entity Barcode extends IBarcode {
  func barcodeItem: RefEntity = item
  field item: ISubProduct by barcodes
  compute unitOne: Qty[unit] {
    label = "Unit"
    value = 1.as[Qty[unit]]!
    canEditUnit
  } 
  field unit: ProductUnit {
    default = item.unit
    from = item.units
  }
  field number: String
  view form = x{unitOne number >> field(stretch = 1)}
  func format = if (number.length == 13) "EAN13" else if (number.length == 12) "UPC" else "CODE128"
}
