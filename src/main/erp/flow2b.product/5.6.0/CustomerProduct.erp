inline trait ProductAttr[T] {
  func name: String
  func toString = name
}

trait ICustomerBaseProduct extends IBaseProduct 
trait ICustomerSuperProduct extends ICustomerBaseProduct {
  object func attrs: [ProductAttr]? = []
  func variations: [ProductVariation]? = customerProducts*.variation
  func customerProducts: [ICustomerProduct]?
  back func attrOptions: [ProductAttrOptions[Any]]? = {
    let attrs: [ProductAttrValue[Any]]? = customerProducts*.variation*.attrs
    attrs.groupBy[ProductAttr](_.attr).toSeq
      .map(ProductAttrOptions[Any](attr = _.#0, options = _.#1*.value))
  }
}
trait ICustomerProduct extends ICustomerBaseProduct {
  func customerSuperProduct: ICustomerSuperProduct
  func variation: ProductVariation?
  func attrValue[T](attr: ProductAttr[T], value: T) = ProductAttrValue[T](attr = attr, value = value)
  func variation(attrs: [ProductAttrValue]) = ProductVariation(product = this, attrs = attrs)
}
trait ICustomerComplexProduct extends ICustomerProduct

class ProductVariation(product: ICustomerProduct, attrs: [ProductAttrValue[Any]])
class ProductAttrValue[T](system field attr: ProductAttr[T], value: T)
class ProductAttrOptions[T](system field attr: ProductAttr[T], options: [T]?)