interface IIPriceModel {
  func active: Bool = true
  func priority: Dec[8]? = 0
  
  func isDynamic = false
  func isSalesModel = true
  func isRentModel = false
  back func contains(product: IBaseProduct): Bool = containsSales(product) || containsRent(product)
  back func containsSales(product: IBaseProduct): Bool {
    default value = priceSales(product)
  }
  back func containsRent(product: IBaseProduct): Bool {
    default value = priceRent(product)
  }
  back func priceSales(product: IBaseProduct): IPriceSales? = null
  back func priceRent(product: IBaseProduct): IPriceRent? = null
  
  func rentRetDate(dispatch: ScheduleDate, retSchedule: ISchedule, qty: UQty?): Date {
    default value = {
      let d = toDuration(qty)
      if (let start = dispatch.schedule.nextWorkingDate(dispatch.date), let end = retSchedule.addWorkingTime(start, d)) {
        end
      } else {
        dispatch.date
      }
    }
  }
  
  func toDuration(qty: UQty?): UDuration? = {
    if (qty) qty.unit!.as[DurUnit]!.defDur*qty
  }  
  
  func hasSlots = false
}


trait IPriceModel extends RefEntity with IIPriceModel {
  func start: Date
  func end: Date?
  impl func active: Bool = !canceled && start <= now && now <? end
  
  field canceled: Bool
  ref compute state: PriceModelState {
    value = {
      if (canceled) Canceled
      else calcState
    }
    from = [calcState, Canceled]
    update = {
      canceled = new == Canceled
    }
  }
  func calcState: PriceModelState = {
    if (Date.now < start) Planned
    else if (end && Date.now >= end!) Finished
    else Active
  }
  
  object func ours: [IPriceModel]? = OurLegalEntity.ours*.priceModels
  func currency: Currency = vendor.getCurrency
  ref field vendor: IVendor by priceModels =? OurLegalEntity.onlyOne
  impl view traitItem = y {
    dslType.singular >> field(fontStyle = Label)
    x {state vendor start end}
  }
  view pmNavButtons = x (spacing = false) {
    button("Products") {
      ISuperProduct.Report(priceModel = this).list.open
    }
  }
}
enum PriceModelState {
  case Planned {background = "#ed9" icon = "play"}
  case Active {background = "#8bf" icon = "spinner"}
  case Canceled {background = "#999" icon = "times-circle"}
  case Finished {color = "white" background = "#090" icon = "check-circle"}
}

object PriceModelNone extends IIPriceModel 

class ScheduleDate(date: Date, schedule: ISchedule)

trait IDynamicPriceModel extends IPriceModel 
trait IStaticPriceModel extends IPriceModel {
  func supports(product: IBaseProduct): Bool = false
  back func findPrice(product: IBaseProduct): IStaticPrice? = null
  func createPrice(product: IBaseProduct): IStaticPrice {
    deprecated(use = "newPrice or forceNewPrice, override forceNewPrice & findPrice")
    value = throw "createPrice Unsupported"
  }
  back final func newPrice(product: IBaseProduct): IStaticPrice = findPrice(product).alt(forceNewPrice(product))
  func forceNewPrice(product: IBaseProduct): IStaticPrice {
    ignoreWarnings
    default value = createPrice(product)
  }
  object func makeDefault(vendor: IVendor): IStaticPriceModel = {
    PriceList(vendor = vendor)
//    throw "Default price model is not implemented"
  }
}

interface IPrice {
  func model: IPriceModel
  func currency = model.currency
  func vendor: IVendor = model.vendor
  func product: IBaseProduct
  func gstRate: UPercent[2]? = product.gstRate(vendor.legalEntity).alt(0)
   
  view form
}

interface IPriceSales extends IPrice {
  list compute salesPrice: Future[SalesPrice] {
    value = back{
      salesPrice(currency, vendor.pricesIncludingGst, null)
    }
  }
  back func salesPrice(currency: Currency, inclGst: Bool, level: PriceLevel?): Future[SalesPrice]
  final back func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    salesPrice(currency, inclGst, null)
  }
  back func salesAmount(currency: Currency, customer: ICustomer?, level: PriceLevel?, qty: UQty, inclGst: Bool): Future[SalesPrice] {
    default value = {
	  let p <- salesPrice(currency, inclGst, level.or(customer?.priceLevel))
      p.mul(product.toBase(qty))
    }
  }
}

interface IPriceRent extends IPrice {
  list compute rentPrices: Future[[DurPrice]?] {
    value = back{
      rentPrices(currency, vendor.pricesIncludingGst)
    }
  }
  
  object back func defRentDur(dispatch: ScheduleDate, ret: ScheduleDate, unit: DurUnit?, forceUnit: Bool): UQty = {
    if (let dur = ret.schedule.workingTime(Period(start = dispatch.date, end = ret.date))) {
      if (let u = unit?.defDur) {
        dur.to[Duration[u.unit!]].as[UQty[unit!]]!
      } else {
        dur.to[Duration[hour]].as[UQty[DurUnit.Hour]]!
      }
    } else {
      1.as[UQty[unit.alt(DurUnit.Hour)]]
    }
  }
  back func rentDur(dispatch: ScheduleDate, ret: ScheduleDate, unit: DurUnit?, forceUnit: Bool): UQty {
    default value = defRentDur(dispatch, ret, unit, forceUnit)
  }
  back func rentPeriods(date: Date, schedule: ISchedule, retSchedule: ISchedule, qty: UQty?): [Period]?  ={
    []
  }
    
  
  func rentDurUnits: [DurUnit]? {
    default value = DurUnit.all.toSet
  }
  func defaultDur: UQty? = 0
  
  back func rentPrices(currency: Currency, inclGst: Bool): Future[[DurPrice]?] = {
    throw "Rent prices are not supported"
  }
  back func rentAmount(currency: Currency, inclGst: Bool, customer: ICustomer?, qty: UQty, period: RentPeriod): Future[SalesPrice] {
    default value = {
      let rps <- rentPrices(currency, inclGst)
      guard (let rp = rps.first) else return SalesPrice()

      let dur = period.dur
      if (let d1 = dur.unit?.as[DurUnit]?.defDur, let d2 = rp.unit.defDur) {
        rp.price.mul(qty * (dur*d1)/(rp.dur*d2))
      } else {
        rp.price.mul(qty * dur/rp.dur)
      }
    }
  }
  func bond: UMoney[currency]? = 0
  back func bond(currency: Currency, customer: ICustomer?, qty: UQty, period: RentPeriod): Future[UMoney?] = {
    let b <- bond.to[UMoney[currency]](now)
    b*qty
  }
}
class RentPeriod(dispatch: ScheduleDate, ret: ScheduleDate, dur: UQty?)

trait IStaticPrice extends PseudoEntity with IPrice {
  impl func mainEntity = model
  impl func model: IStaticPriceModel
  impl field product: IBaseProduct by staticPrices {
    touchCascade = false
    available(Ref).with(productCost)
  }
  func updateSalesPrice(salesPrice: SalesPrice): Bool = false
  
  system field toDelete: Bool
  impl event onSave = {
    if (toDelete && !deleted) {
      delete
    }
  }
}
trait IStaticPriceSales extends IStaticPrice with IPriceSales

extend trait IVendor {
  field priceModels: [IPriceModel]? read by vendor  
  back func priceSales(product: IBaseProduct): IPriceSales? = {
    priceModelSales(product)?.priceSales(product)
  }
  back func priceRent(product: IBaseProduct): IPriceRent? = {
    priceModelRent(product)?.priceRent(product)
  }
  back func priceModelSales(product: IBaseProduct): IPriceModel? = {
    priceModels.sortBy(priority, start).find(containsSales(product))
  }
  back func priceModelRent(product: IBaseProduct): IPriceModel? = {
    priceModels.sortBy(priority, start).find(containsRent(product))
  }
}

extend entity IVendor {
  extend view vendorView = priceModels
}

extend trait IBaseProduct {
  compute salesPrice: SalesPrice? {
    availableFor = List
    value <- {
      if (let p = ourPrices*.as[IPriceSales].first) p.salesPrice
    }
    update = {
      updateSalesPrice(OurLegalEntity.ours.first!, new)
    }
  }
  compute rentPrices: [DurPrice]? {
    availableFor = List
    value <- {
      if (rentStatus == ForRent) {
        if (let p = ourPrices*.as[IPriceRent].first) p.rentPrices
      }
    }
  }
  compute currentPrice: UMoney? {
    label = "Discounted Price"
    value = salesPrice?.current
    visible = !dynamicPrices
    update = {
      let sp = salesPrice.alt(SalesPrice())
      sp.current = new
      updateSalesPrice(OurLegalEntity.ours.first!, sp)
    }
  }
  compute regularPrice: UMoney? {
    label = "Sales Price"
    value = salesPrice?.regular
    visible = !dynamicPrices
    update = {
      let sp = salesPrice.alt(SalesPrice())
      sp.regular = new
      updateSalesPrice(OurLegalEntity.ours.first!, sp)
    }
  }
  func updateSalesPrice(le: OurLegalEntity, price: SalesPrice?): Void = {
    if (let sp = staticPrices.find(model.active && model.vendor == le && model.isSalesModel)) {
      if (let p = price) sp.updateSalesPrice(p)
      else sp.delete
    } else if (let price) {
      let pl = IPriceModel.ours*.as[IStaticPriceModel]
        .find(isSalesModel && vendor == le && supports(this))
        .alt(IStaticPriceModel.makeDefault(vendor = le))
      pl.forceNewPrice(this).updateSalesPrice(price)
    }
  }
  
  back func updateVendorPrice(le: IVendor, price: UMoney?): Void = {
    if (let price) updateVendorPrice(le, SalesPrice(current = price, regular = price))
  }
  back func updateVendorPrice(le: IVendor, price: SalesPrice?): Void = {
    if (let sp = staticPrices.find(model.active && model.vendor == le && model.isSalesModel)) {
      if (let p = price) sp.updateSalesPrice(p)
      else sp.delete
    } else if (let price) {
      let pl = IPriceModel.all.result.get*.as[IStaticPriceModel]
        .find(isSalesModel && vendor == le && supports(this))
        .alt(IStaticPriceModel.makeDefault(vendor = le))
      pl.forceNewPrice(this).updateSalesPrice(price)
    }
  }
  
  compute ourPrices: [IPrice]? {
    value = prices.filter(vendor.is[OurLegalEntity])
    update = {}
    remove = {
      if (let p = old.as[IStaticPrice]) {
        if (p.created) p.delete
        else p.toDelete = true
      }
    }
  } 
  compute purchasePrices: [IPrice]? {
    value = prices.filter(!vendor.is[OurLegalEntity])
    update = {}
  }
  
  compute prices = (staticPrices.filter(!toDelete && model.active) + dynamicPrices).sortBy(model.priority, model.start)
  back func prevPriceModel(model: IPriceModel): IPriceModel? = {
    {
        staticPrices
           .filter(p => !p.toDelete && p.model.active && p.model.vendor == model.vendor)
          *.model
        +
        IDynamicPriceModel.all
           .filter(p => p.active && p.vendor == model.vendor)  
           .result.get
    }
      .sortBy(b => (b.priority, b.start))
      .dropWhile(_ != model).drop(1)
      .filter(p => p.containsSales(this))
      .first
  }
    
  
  field staticPrices: [IStaticPrice]? inline by product
  
  compute dynamicPrices: [IPrice]? {
    availableFor = Inline
    value = back {
      IDynamicPriceModel.all
        .filter(active)
        .groupBy(vendor)
        .agg(prices = sortBy(b => (b.priority, b.start)).flatMap(b => b.priceSales(this).toSeq + b.priceRent(this).toSeq))
        .flatMap(prices)
    }
  }
  
  compute possibleOurModels = IPriceModel.ours*.as[IStaticPriceModel].filter(m => m.active && !ourPrices.exists(_.model == m) && m.supports(this))
}

