trait IPriceModOwner extends AnyEntity {
  field mods: [IPriceMod]? inline by owner {
    label = "Price Modifiers"
  }

  func applyMods(prod: IBaseProduct, qty: UQty, amount: UMoney?): Future[UMoney?] = {
    goApplyMods(prod, qty, amount, mods)
  }
  
  func goApplyMods(prod: IBaseProduct, qty: UQty, amount: UMoney?, mods: [IPriceMod]?): Future[UMoney?] = {
    if (let d = mods.first) {
      let nextAmount <- d.apply(prod, qty, amount)
      goApplyMods(prod, qty, nextAmount, mods.drop(1))
    } else {
      amount
    }
  }
}

trait IPriceMod extends InlineEntity {
  system field owner: IPriceModOwner
  
  func apply(prod: IBaseProduct, qty: UQty, amount: UMoney?): Future[UMoney?]
}

entity PriceModDiscountPercent extends IPriceMod {
  singular = "Percentage Discount"
  field discount: UPercent[2]
  impl func apply(prod: IBaseProduct, qty: UQty, amount: UMoney?): Future[UMoney?] = {
    amount * (1.0000 - discount).positive
  }
  impl view form = x{label("Percentage Discount") discount >> field(align = Left)}
}

entity PriceModDiscountFixed extends IPriceMod {
  singular = "Fixed Discount"
  field currency: Currency = default
  field discount: Money[currency] {canEditUnit}
  impl func apply(prod: IBaseProduct, qty: UQty, amount: UMoney?): Future[UMoney?] = {
    let d <- discount.to[Money[amount.unit!]](now)
    (amount - d).positive
  }
  
  impl view form = x{label("Fixed Discount") discount >> field(align = Left)}
}