enum ProductUnit(symbol: String, scale: Int?, base: ProductUnit?, k: Number) extends Unit {
  func position: UnitPosition = SuffixWithSpace
  case Item(symbol = "item", scale = 0, base = null, k = 1)
  case Inner(symbol = "inner", scale = 0, base = null, k = 1) = "Inner Box"
  case Outer(symbol = "outer", scale = 0, base = null, k = 1) = "Outer Box"
  case Gram(symbol = "g", scale = 0, base = null, k = 1)
  case Kilogram(symbol = "kg", scale = 2, base = Gram, k = 1000)
  case Litre(symbol = "L", scale = 2, base = null, k = 1)
}

interface IWeightSize {
  final func weightSize: IWeightSize? = this
  
  func weightUnit: WeightUnit
  func weight: Qty[weightUnit]?
  func lengthUnit: LengthUnit
  func width: Qty[lengthUnit]?
  func height: Qty[lengthUnit]?
  func depth: Qty[lengthUnit]?
}

interface TWeightSizeOnly extends IWeightSize {  
  field lengthUnit: LengthUnit = Centimetre
  field width: Qty[lengthUnit]? {canEditUnit}
  field height: Qty[lengthUnit]? {canEditUnit}
  field depth: Qty[lengthUnit]? {canEditUnit}
}

interface TWeightSize extends TWeightSizeOnly {  
  field weightUnit: WeightUnit = Gram
  field weight: Qty[weightUnit]? {canEditUnit}
}

enum WeightUnit(symbol: String, scale: Int?, k: Dec[8]) extends Unit {
  func position: UnitPosition = SuffixWithSpace
  case Milligram(symbol = "mg", scale = 1, k = 0.001)
  case Gram(symbol = "g", scale = 1, k = 1)
  case Kilogram(symbol = "kg", scale = 2, k = 1000)
  
  func convert(dec: Number?): Number? = {
    dec.as[Qty[this]]*dec.unit!.as[WeightUnit]!.k/k
  }
}
enum LengthUnit(symbol: String, scale: Int?, k: Dec[8]) extends Unit {
  func position: UnitPosition = SuffixWithSpace
  case Millimetre(symbol = "mm", scale = 0, k = 0.001)
  case Centimetre(symbol = "cm", scale = 1, k = 0.01)
  case Metre(symbol = "m", scale = 3, k = 1)
  func convert(dec: Number?): Number? = {
    dec.as[Qty[this]]*dec.unit!.as[LengthUnit]!.k/k
  }
}

inline entity ProductAltUnit extends TWeightSize {
  field product: IAltUnits by altUnits
  compute baseUnit: ProductUnit = product.unit
  field unit: ProductUnit = Inner
  field baseK: Qty[baseUnit] 
  field unitK: Qty[unit] {
    canEditUnit
  }
  compute k: Dec[8] = unitK.as[Dec[8]]!/baseK
}

trait IAltUnits extends RefEntity with TWeightSize {
  ref field unit: ProductUnit = Item
  field altUnits: [ProductAltUnit]? inline by product {
    label = "Alternative Units"
  }
  compute unitOne: Qty[unit] {
    label = "Unit"
    value = 1.as[Qty[unit]]!
    canEditUnit
  }

  view unitsView = grid (labels = Top) {
    panel(label = "Base Unit") {
      grid (labels = Top) {
        row {unitOne space weight width height depth}
      }
    }
    altUnits >> list {grid(labels = Top){
      row{x(label = "Unit", flow = false, width = 0.33333){unitK label("=") baseK >> field (placeholder = "")} 
          space(width = 0)
          weight width height depth}
    }}
  }
}

extend trait IBaseProduct {
  func toBase(qty: Qty): Qty[unit] = {
    if (!qty.unit || qty.unit == unit) qty.as[Qty[unit]]!
    else qty.as[Qty[unit]]!*altUnits.find(_.unit == qty.unit)?.k
      .alt(throw "Cannot convert " + qty.unit + " to " + unit + " for product " + this)
  }
  func fromBase(to: ProductUnit, qty: Qty): Qty[to] = {
    if (!qty.unit || qty.unit == to) qty.as[Qty[to]]!
    else qty.as[Qty[to]]!/altUnits.find(_.unit == to)?.k
      .alt(throw "Cannot convert " + qty.unit + " to " + to + " for product " + this)
  }
  func convert(to: ProductUnit, qty: Qty): Qty[to] = {
    if (!qty.unit || qty.unit == to) qty.as[Qty[to]]!
    else fromBase(to, toBase(qty))
  }
}