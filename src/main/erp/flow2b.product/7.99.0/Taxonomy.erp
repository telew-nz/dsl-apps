extend trait ISuperProduct {
  field categories: [ProductCategory]? by products 
  func autoCategories: [IProductCategory]? = prices*.autoCategories
  compute allCategories: [IProductCategory]? {
    availableFor = Inline
    label = "Categories"
    value = (categories + autoCategories).distinct
    update = {
      this.categories = new.filter(!autoCategories.contains(_))*.as[ProductCategory]
    }
  }
  
  field tags: [ProductTag]? by products 
  func autoTags: [IProductTag]? = prices*.autoTags
  compute allTags: [IProductTag]? {
    label = "Tags"
    availableFor = Inline
    value = (tags + autoTags).distinct
    update = {
      this.tags = new.filter(!autoTags.contains(_))*.as[ProductTag]
    }
  }
  
  
  field brands: [Brand]? by products 
  
  ref field crossSells: [CrossSell]? by products 
  func crossSellProducts: [ISuperProduct]? = (crossSells*.products - this).distinct
  field upsells: [ISuperProduct]? by downsells
  field downsells: [ISuperProduct]? by upsells
  
  view categoriesView = grid(label = "Categories"){
    allCategories
    inventoryType
    revenueType
    expenseType
    brands
    allTags
    crossSells
    upsells
    downsells
    kits
    shippingClass
  }
  field _shippingClass: ShippingClass? by products 
  compute shippingClass: ShippingClass? = _shippingClass.or(categories*.shippingClass.first)
  
  field _revenueType: RevenueType? by incomeProducts
  ref override compute revenueType: RevenueType? {
    value = calcRevenueType
    update = {
      _revenueType = if (categories*.revenueType.first != new) new
    }
  }
  func calcRevenueType = _revenueType.or(categories*.revenueType.first)
  field _expenseType: ExpenseType? by incomeProducts
  ref override compute expenseType: ExpenseType? {
    visible = !isTangible
    value = calcExpenseType
    update = {
      _expenseType = if (categories*.expenseType.first != new) new
    }
  }
  func calcExpenseType = _expenseType.or(categories*.expenseType.first)

  field _inventoryType: InventoryType? by products
  ref override compute inventoryType: InventoryType? {
    visible = isTangible
    value = _inventoryType.or(categories*.inventoryType.first)
  }
}

trait IProductTaxonomy extends RefEntity {
  func photos: [Image]?
  func superCategory: IProductTaxonomy?
  func subCategories: [IProductTaxonomy]?
  func name: String
  func description: Text?
  func taxonomyProducts: [ISuperProduct]?
  func tree: [this] = this + superCategory?.tree
  func level: UInt = 1 + superCategory?.level
  func up(delta: UInt?): this? = {
    if (delta) superCategory?.up((delta - 1).positive)
    else this
  }
  func collectPhotos: [Image]? = {
    if (let p = photos) p
    else if (let p = taxonomyProducts*.collectPhotos.first(1)) p
    else subCategories*.collectPhotos.first(1)
  }
}

trait IProductCategory extends IProductTaxonomy {
  impl func superCategory: IProductCategory?
  impl func subCategories: [IProductCategory]?
  func shippingClass: ShippingClass? = null
  func revenueType: RevenueType? = null
  func expenseType: ExpenseType? = null
  func inventoryType: InventoryType? = null
}
entity ProductCategory extends Entity with IProductCategory {
  impl field photos: [Image]?
  impl field superCategory: ProductCategory? by subCategories
  impl field subCategories: [ProductCategory]? read by superCategory
  impl ref field name: String
  impl field description: Text?
  field products: [ISuperProduct]? by categories
  impl func taxonomyProducts = products
  impl ref compute title = if (let s = superCategory) "$s / $name" else name
  field _shippingClass: ShippingClass? by categories 
  impl ref stored compute shippingClass: ShippingClass? = _shippingClass.or(superCategory?.shippingClass)
  field _revenueType: RevenueType? by incomeCategories 
  impl ref stored compute revenueType: RevenueType? = _revenueType.or(superCategory?.revenueType)

  field _expenseType: ExpenseType? by incomeCategories 
  impl ref stored compute expenseType: ExpenseType? = _expenseType.or(superCategory?.expenseType)
  
  field _inventoryType: InventoryType? by categories 
  impl ref stored compute inventoryType: InventoryType? = _inventoryType.or(superCategory?.inventoryType)
  impl event onSave = {
    subCategories*.touch
    if (updated(shippingClass) || updated(expenseType) || updated(revenueType) || updated(inventoryType)) {
      products*.touch
    }
  }
  
  impl view form = nav{grid{
    photos
    superCategory
    name >> field(label = "" fontStyle = H1)
    subCategories 
    inventoryType
    revenueType
    expenseType
    shippingClass
    description
    products
  }}
}

alias IBrand = Brand
object BrandAttr {

	field attr: IProductAttr = ProductAttr(attrName = "Brand")

}
entity Brand extends Entity with IProductTaxonomy with IProductAttrTerm {
  extend field attr = BrandAttr.attr
  override func attrName = "Brand"
  
  field logo: Image? 
  field actors: [Actor]?
  impl func photos: [Image]? = logo.toSeq
  impl func superCategory = superBrand
  impl func subCategories = subBrands
  
  field superBrand: Brand? by subBrands
  field subBrands: [Brand]? read by superBrand
  impl ref field name: String
  impl field description: Text?
  field products: [ISuperProduct]? by brands
  impl func taxonomyProducts = products
  impl ref compute title = if (let s = superBrand) "$s / $name" else name

  impl view form = nav{grid{
    logo
    superBrand
    name >> field(label = "" fontStyle = H1)
    subBrands >> list {field(title = _.name)}
    actors
    description
    products
  }}
  
  impl event onSaveOrDelete = {
  }
}

extend entity Actor {
  field brands: [Brand]? by actors
}

trait IProductTag extends IProductTaxonomy {
  impl func photos: [Image]? = []
  impl func name = title
  impl func superCategory = null
  impl func subCategories = []
}
entity ProductTag extends Entity with IProductTag {
  impl field photos: [Image]?
  impl field title: String
  impl field description: Text?
  field products: [ISuperProduct]? by tags
  impl func taxonomyProducts = products
  impl view form = nav{grid{
    photos
    title >> field(label = "" fontStyle = H1)
    description
    products
  }}
}

trait ICrossSell extends IProductTaxonomy {
  impl func photos: [Image]? = []
  impl func name = title
  impl func superCategory = null
  impl func subCategories = []
}
entity CrossSell extends Entity with ICrossSell {
  impl field title: String
  impl field description: Text?
  field products: [ISuperProduct]? by crossSells
  impl func taxonomyProducts = products

  impl view form = nav{grid{
    title >> field(label = "" fontStyle = H1)
    description
    products
  }}
}

entity ShippingClass extends IProductTaxonomy {
  impl func photos: [Image]? = []
  impl func superCategory = null
  impl func subCategories = []
  impl func name: String = title
  
  impl field title: String
  impl field description: Text?
  field products: [ISuperProduct]? by _shippingClass
  impl func taxonomyProducts = products
  field categories: [ProductCategory]? by _shippingClass

  impl view form = nav{grid{
    title >> field(label = "" fontStyle = H1)
    description
    products
  }}
}

trait IIncomeType extends IBasicProduct with IProductTaxonomy {
  background = "#d68400"
  
  override func collectPhotos: [Image]? = super[IProductTaxonomy].collectPhotos
  
  impl func isTangible = false
  impl func superCategory = null
  impl func subCategories = []
  impl func name = title
  
  ref field gstRate: GstRate? = null
  ref field specialGstRate: UPercent[2]? {
    visible = gstRate == Special
  }
  compute getGstRate: UPercent[2]?? {
    value = {
      if (gstRate == Special) specialGstRate
	  else if (gstRate) gstRate!.rate 
    }
    views = []
  }
  ref field nonTaxable: UPercent? {
    validate = if (0 > taxable || taxable > 1.00_PercentUnit) "Taxable percentage should be between 0% and 100%"
  }
  compute taxable: UPercent? {
    label = "Taxable Percentage"
    value = (1.00_PercentUnit - nonTaxable).as[UPercent]
    update = {
      nonTaxable = (1.00_PercentUnit - new).as[UPercent]
    }
  }
  override func gstRate(vendor: LegalEntity?): UPercent[2]?? = if (vendor?.hasGst) {
    getGstRate.or(vendor!.defaultGstRate.rate)
  } 
} 

entity ExpenseType extends IIncomeType  {
  impl field title: String
  impl func skuPrefix = "ET"
  impl compute status {
    value = NotForSale
    update = {}
  } 
  field incomeCategories: [ProductCategory]? by _expenseType {
    label = "Categories"
  }
  field incomeProducts: [ISuperProduct]? by _expenseType
  impl func taxonomyProducts = incomeProducts
  override func calcRevenueType = null
  override func calcExpenseType = this
  
  impl field description: Text?
  impl view mainView = grid{}
  override view form = nav{
    grid{
      x{title >> field(stretch = 1, fontStyle = H2) number}
      refNums
      extension
      taxable >> field(showEmpty)
      gstRate
      specialGstRate
      description
      
      incomeCategories
      incomeProducts
    }
    extension("nav")
  }
}


entity RevenueType extends IIncomeType {
  impl field title: String
  impl func skuPrefix = "RT"
  impl compute status {
    value = ForSale
    update = {}
  } 
  field incomeCategories: [ProductCategory]? by _revenueType{
    label = "Categories"
  }
  field incomeProducts: [ISuperProduct]? by _revenueType
  impl func taxonomyProducts = incomeProducts
  override func calcRevenueType = this
  override func calcExpenseType = null
  
  impl field description: Text?
  impl view mainView = grid{}
  override view form = nav{
    grid{
      x{title >> field(stretch = 1, fontStyle = H2) number}
      refNums
      extension
      taxable >> field(showEmpty)
      gstRate
      specialGstRate
      description
      
      incomeCategories
      incomeProducts
    }
    extension("nav")
  }
}

entity InventoryType extends IProductTaxonomy with HasN {
  impl field title: String
  impl func nextN = increment(IIncomeType.gen)
  
  impl func numPrefix = "IT"
  
  impl func photos = []
  impl func superCategory = null
  impl func subCategories = []
  impl func name = title
  
  field categories: [ProductCategory]? by _inventoryType
  field products: [ISuperProduct]? by _inventoryType
  impl func taxonomyProducts = products
  
  impl field description: Text?
  impl view form = nav{
    grid{
      x{title >> field(stretch = 1, fontStyle = H2) number}
      refNum
      extension
      description
      
      categories
      products
    }
    extension("nav")
  }
}