trait ISubProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
    
  func superProduct: ISuperProduct
  func products: [IProduct : Qty]
  
  field includedInKitItems: [KitItem]? inline by product {deleteCascade = false}
  compute kits = includedInKitItems*.kit.distinct
  
  func productQtys(qty: Qty): [ProductQty] = {
    let bq = toBase(qty)
    products.toSeq.map{i =>
      ProductQty(product = i.#0, qty = i.#1*bq)
    }
  }
  func tangibleProductQtys(qty: Qty): [ProductQty]? = productQtys(qty).filter(product.isTangible)
  func isValid: Bool = superProduct.isValid
  func isTangible: Bool = superProduct.isTangible
  
  func weightInGrams: Number? = superProduct.weightInGrams
  func subProducts: [IProduct]? = [this]
  func description: Text? = superProduct.description
  func productItems: [IProductItem]? = []
  func forceGstRate(vendor: Actor?): Percent[2]?? = superProduct.forceGstRate(vendor)
  func sku: String = superProduct.sku
  func obsolete: Bool = superProduct.obsolete
  func unit: ProductUnit = superProduct.unit
  func units = superProduct.units
  func alwaysAvailable: Bool = superProduct.alwaysAvailable 
  
  func forceHasGst(vendor: Actor?): Bool = forceGstRate(vendor)
  event onSave = {}
  //func mapProducts[R](qty: Qty, f: (product: IProduct, qty: Qty) => R): [R] = {
  //  let bq = toBase(qty)
  //  products.toSeq.map{i =>
  //    f(i.#0, i.#1*bq)
  //  }
  //}
}

class ProductQty {
  field product: IProduct
  field qty: Qty?
  
  func toString = "$product -> $qty"
}

trait IProduct extends ISubProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
  
  event onSave = {}
  func products: [IProduct : Qty] = [this -> 1.as[Qty[unit]]!]
  func productQtys(qty: Qty): [ProductQty] = {
    [ProductQty(product = this, qty = toBase(qty))]
  }
  func tangibleProductQtys(qty: Qty): [ProductQty]? = if (isTangible) [ProductQty(product = this, qty = toBase(qty))]
  //func mapProducts[R](qty: Qty, f: (product: IProduct, qty: Qty) => R): [R] = {
  //  let r: R = f(this, toBase(qty))
  //  [r]
  //}
}

trait IComplexProduct extends IProduct {
  field manualSku: String?
  ref compute sku: String {
    value = manualSku.alt(superProduct.sku + "." + skuN)
    update = {
      manualSku = new
    }
  }
  const field skuN: Int? = increment(superProduct.skuGen)
  event onSave = {}
}
