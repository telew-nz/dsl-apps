trait ISuperProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
  
  final func parent: IBaseProduct? = null
  final func superProduct: ISuperProduct = this
  field trackItems: Bool {label = "Always Track Serial Numbers"}
  func subProducts: [ISubProduct]? = child*.subProducts
  func collectPhotos: [Image]? = collectPhotosDown
  func collectPhotosUp: [Image]? = collectPhotosDown
  func collectPhotosDown: [Image]? = if (let p = photos) p else child*.collectPhotosDown
  final func variationPhotos: [Image]? = []
  
  func description: Text? = ""
  
  func isValid: Bool = true
  func obsolete: Bool = false
  func weightInGrams: Number? = 0
  func alwaysAvailable: Bool = !isTangible 
  
  object field gen: Int?
  const field n: Int? = increment(ISuperProduct.gen)
  ref compute sku = skuPrefix + n
  func skuPrefix: String = "PR"
  
  ref field accessories: [Accessory]? inline by product
  field principals: [Accessory]? inline by accessory
  
  field categories: [ProductCategory]? by products {
    available(All).for(All)
  }
  field brands: [Brand]? by products {
    available(All).for(All)
  }
    
  func forSale: Bool = true
  func productItems: [ProductItem]? = subProducts*.productItems
  field gstRate: GstRate? = null
  field specialGstRate: UPercent[2]? {
    visible = gstRate == Special
  }
  ref compute getGstRate: UPercent[2]?? = {
    if (gstRate == Special) specialGstRate
    else if (gstRate) gstRate!.rate 
  }
  func gstRate(vendor: IVendor?): UPercent[2]?? = if (vendor?.hasGst) getGstRate.or(vendor!.defaultGstRate.rate)
  event onSave = {}
  report Report {
    field status: [ProductStatus]? {auto}
    view list = ISuperProduct.all >> nav{list{}}
  }
}

