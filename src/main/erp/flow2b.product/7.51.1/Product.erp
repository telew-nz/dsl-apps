trait IProduct extends ISubProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
  
  impl field productItems: [ProductItem]? inline by product 
  
  impl ref system const field productCost: ProductCost? {label = "Approximate Cost"} 
  impl event onSave = {}
  impl func products: [IProduct : UQty] = [this -> 1.as[UQty[unit]]]
  override func productQtys(qty: UQty): [ProdUQty] = {
    [ProdUQty(product = this, qty = toBase(qty))]
  }
  override func tangibleProductQtys(qty: UQty): [ProdUQty]? = if (isTangible) [ProdUQty(product = this, qty = toBase(qty))]
  //func mapProducts[R](qty: Qty, f: (product: IProduct, qty: Qty) => R): [R] = {
  //  let r: R = f(this, toBase(qty))
  //  [r]
  //}
  view productNavView = x{
    button("Print Label", visible = id) {
      labelView.print
    }
  }
  view productTabView = group{
    supplyView
    grid(labels = Top, label = "Serial Numbers", visible = trackItems || productItems) {
       productItems >> list{itemView}
    }
  }
}

trait IComplexProduct extends IComplexSubProduct with IProduct