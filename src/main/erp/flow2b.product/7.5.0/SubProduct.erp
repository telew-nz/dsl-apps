trait ISubProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
    
  final func child: [IBaseProduct]? = []
  final func subProducts: [ISubProduct]? = [this]
  func collectPhotos: [Image]? = collectPhotosUp
  func collectPhotosUp: [Image]? = if (let p = photos) p else parent?.collectPhotosUp
  final func collectPhotosDown: [Image]? = photos
  func variationPhotos = if (let p = photos) p else parent?.variationPhotos
  
  func products: [IProduct : Qty]
  
  field includedInKitItems: [KitItem]? inline by product {deleteCascade = false}
  compute kits = includedInKitItems*.kit.distinct
  func productItems: [IProductItem]? = []
  func weightSize = parent!.weightSize
  
  func productQtys(qty: Qty): [ProductQty] = {
    let bq = toBase(qty)
    products.toSeq.map{i =>
      ProductQty(product = i.#0, qty = i.#1*bq)
    }
  } 
  func tangibleProductQtys(qty: Qty): [ProductQty]? = productQtys(qty).filter(product.isTangible)

  event onSave = {}
  //func mapProducts[R](qty: Qty, f: (product: IProduct, qty: Qty) => R): [R] = {
  //  let bq = toBase(qty)
  //  products.toSeq.map{i =>
  //    f(i.#0, i.#1*bq)
  //  }
  //}
}


class ProductQty {
  field product: IProduct
  field qty: Qty
  
  func toString = "$product -> $qty"
}


