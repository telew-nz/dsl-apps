enum PriceModelState {
  case Planned {background = "#ed9" icon = "play"}
  case Active {background = "#8bf" icon = "spinner"}
  case Canceled {background = "#999" icon = "times-circle"}
  case Finished {color = "white" background = "#090" icon = "check-circle"}
}

trait IPriceModel extends RefEntity with IIPriceModel with HasN {
  func start: Date
  func end: Date?
  
  object field gen: Int?
  impl func numPrefix = "PM"
  impl func nextN = increment(gen)
  
  impl ref compute active: Bool = !canceled && start <= now && now <? end
  ref field levels: [IPriceLevel]? = [PriceLevelDefault]
  impl func hasLevel(level: IPriceLevel): Bool = levels.contains(level)
  compute levelTitles: String? = levels*.title.join(", ")
  func isDefaultLevel = levels.contains(PriceLevelDefault)
  func mainPriceLevel: IPriceLevel = if (isDefaultLevel) PriceLevelDefault else levels.first.alt(PriceLevelDefault)
  func buttonLabel: String = {
    if (isOur) {
      if (isSalesModel && !ours.exists(m => m.isSalesModel && m != this && m.is[IStaticPriceModel])) "Sales Price" 
      else if (isRentModel && !ours.exists(m => m.isRentModel && m != this && m.is[IStaticPriceModel])) "Rent Price" 
      else fullTitle
    } else {
      vendor.toString
    }
  }
  func isOur: Bool = vendor.is[OurLegalEntity]
  
  field canceled: Bool
  ref compute state: PriceModelState {
    value = {
      if (canceled) Canceled
      else calcState
    }
    from = [calcState, Canceled]
    update = {
      canceled = new == Canceled
    }
  }
  func calcState: PriceModelState = {
    if (Date.now < start) Planned
    else if (end && Date.now >= end!) Finished
    else Active
  }
  
  object func ours: [IPriceModel]? = OurLegalEntity.ours*.priceModels
  object func theirs: [IPriceModel]? = Workspace.current.priceModels.filter(!isOur)
  object func models: [IPriceModel]? = Workspace.current.priceModels
  ref field vendor: IVendor by priceModels =? OurLegalEntity.onlyOne
  impl ref field currency: Currency =? (try? vendor)?.getCurrency
  impl view traitItem = y {
    dslType.singular >> field(fontStyle = Label)
    x {state vendor start end}
    x (visible = vendor.is[OurLegalEntity]) {label("Levels:") levelTitles >> field(stretch = 1, fontStyle = Normal)}
  }
  view pmNavButtons = x (spacing = false) {
    button("Products", icon = "boxes") {
      ISuperProduct.Report(priceModel = this).list.open
    }
  }
  
  back func touchAllProducts(): Void = {
    IBaseProduct.all
       .filter(p => this.levels.exists(l => this.contains(l, p)))
       .foreach{p =>
         p.touch
         p.allKits*.touch
       }
  }
}

extend entity Workspace {
  compute priceModels: [IPriceModel]? {
    availableFor = Inline
    value <- back{IPriceModel.all}
  }
}
