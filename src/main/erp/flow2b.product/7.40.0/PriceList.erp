entity PriceList extends IStaticPriceModel {
  impl func title = "PL $vendor $date"
  ref field date: Date[day] = now
  field pricesIncludingGst: Bool = (try? vendor.pricesIncludingGst).alt(true)
  
  field products: [PriceListProduct]? inline by priceList 
  impl back func price(product: IBaseProduct): IPrice? = {
    products.find(p => p.product == product || p.product == product.superProduct)
  }
  impl view form = nav{grid(width = 1.2){
    date
    vendor
    pricesIncludingGst
    products >> table {
      product >> field(width = 0.35) 
      cost >> field(width = 0.2, visible = vendor.legalEntity.our)
      regular >> field(width = 0.2, fontStyle = if (current == regular) Normal else Strikeout) 
      current >> field(width = 0.2)
      marginsView
    }
  }}
  
  impl func supports(product: IBaseProduct): Bool = true
  impl func createPrice(product: IBaseProduct) = PriceListProduct(product = product, priceList = this)
} 
  
inline entity PriceListProduct extends IStaticPrice {
  impl func model = priceList
  field priceList: PriceList by products =? IPriceModel.ours*.as[PriceList].onlyOne
  
  field regular: UMoney[currency]? {
    label = "Regular Price"
    update = {
      if (old == current) current = new
    }
  }
  compute gstK = if (vendor.hasGst) (1.0000 + product.gstRate(vendor).alt(0)) else 1.0000
  compute regularNoGst {
    value = {
      if (priceList.pricesIncludingGst) regular/gstK
      else regular
    }
    update = {
      if (priceList.pricesIncludingGst) regular = new*gstK
      else regular = new
    }
  }
  field current: UMoney[currency]? {
    label = "Current Price"
  }
  compute currentNoGst {
    value = {
      if (priceList.pricesIncludingGst) current/gstK
      else current
    }
    update = {
      if (priceList.pricesIncludingGst) current = new*gstK
      else current = new
    }
  }
  compute cost: Future[UMoney[currency]?] {
    label = "Approx Cost"
    value = product.productCost?.curCost.to[UMoney[currency]](now)
  }
  compute regularMargin: Percent[2]? {
    value = {
      if (let r = regularNoGst) {
        let c = cost.get
        if (c) (r - c).as[Percent[2]]/r
      }
    }
    update = {
      if (let c = cost.get, let p = (1.0000 - new).positive) regularNoGst = c/p
    }
  }
  compute currentMargin: Percent[2]? {
    value = {
      if (let r = currentNoGst) {
        let c = cost.get
        if (c) (r - c).as[Percent[2]]/r
      }
    }
    update = {
      if (let c = cost.get, let p = (1.0000 - new).positive) currentNoGst = c/p
    }
  }
  view marginsView = x (label = "Margin", width = 0.25, flow = false, visible = vendor.legalEntity.our) {
    regularMargin >> field(fontStyle = if (current == regular) Normal else Strikeout, visible = current != regular || ui.edit) 
    currentMargin
  }
  
  
  impl event onSave = product.touch
  impl func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    let rp <- regular.to[UMoney[currency]](now)
    let cp <- {
      if (regular != current) {
        current.to[UMoney[currency]](now)
      } else Future(rp)
    }
    SalesPrice(currency = currency, regular = rp, current = cp)
      .convertGst(gstRate, priceList.pricesIncludingGst, inclGst)
  }
  impl func updateSalesPrice(salesPrice: SalesPrice): Bool = {
    regular = salesPrice.regular
    current = salesPrice.current
  }
  impl view form = grid {row{
    salesPrice >> field(frame = false)
    marginsView
  }}
}

