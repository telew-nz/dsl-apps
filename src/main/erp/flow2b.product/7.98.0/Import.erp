trait IProductImportSchema extends SheetImportSchema {
  back func categories[T](data: [T]?, root: ProductCategory?, category: (item: T) => String?, level: (item: T) => UInt?): [(category: ProductCategory?, item: T)]? = {
    let rootLevel = root?.level
    data.accum(
      root
      acc = {(item, acc) =>
        if (let n = category(item).trim) {
          let l = rootLevel + 1 + level(item)
          ProductCategory(
            name = n, 
            superCategory = acc?.up((acc?.level - l + 1).positive).or(root)
          ).saveBy(title.flex)
        } else {
          acc
        }
      }
      map = (category = acc, item = _)
    ).result
  }
}


entity ProductImportSchema extends IProductImportSchema {
  impl field title: String
  
  field type: ProductImportType
  
  field code: String?
  field name: String
  field barcode: String?
  field description: String?
  field categories: [String]?
  field salesPrice: String?
  
  field suppliers: [Supplier]?
  
  impl view form = nav{grid{
    title
    type
    name
    row {code  barcode}
    description
    categories
    salesPrice
    suppliers
  }}
  
  class Supplier {
    field code: String? {label = "Supplier's Code"}
    field name: String? {
      validate = if (!code && !name) "Name or code should be set"
    }
    field sku: String? {label = "Supplier's Product SKU"}
    field cost: String? 
    impl view form = grid{
      row {code name }
      row {sku cost}
    }
  }
 
  
  impl back func process(file: File, data: [String?]?) = {
    data.drop(1).map(split(SplitRules.CSV)).mapOpt(_).foreach{i =>
      if (let cName = i(name)) {
        var g = type.make(cName).saveBy(_.title.flex)
        if (let refNum = col(i, code)) {
          g.refNum = refNum
          g = g.saveBy(p => p.refNum)
        }
        if (let d = col(i, description)) {
          g.description = d
        }
        if (let bc = col(i, barcode)) {
          g.barcodes = [Barcode(number = bc, item = g)]
        }
        categories.foreach {cCat =>
          if (let cat = i(cCat)) {
            g.categories = (g.categories + ProductCategory(name = cat).saveBy(name.flex)).distinct
          }
        }
        if (let p = col(i, salesPrice).toUNum) {
          let le = OurLegalEntity.ours.first!
          g.updateSalesPrice(le, le.pricesIncludingGst, SalesPrice(current = p, regular = p))
        }
        
        suppliers.foreach{s =>
          let sup: Vendor? = {
            if (let cSName = s.name) {
              if (let name = i(cSName).trim) {
                let com = Company(title = name).saveBy(_.title.flex)
                if (let cSCode = s.code, let code = i(cSCode).trim) {
                  com.refNum = code
                  com.saveBy(c => c.refNum.flex)
                } else {
                  com
                }
              }
            } else if (let code = i(s.code!).trim) {
              LegalEntity.all.find(_.refNum =%= code).result.get
            }
          }?.makeVendor()
          if (let sup) {
            if (let rn = col(i, s.sku)) {
              g.addRefNum(rn)
            }
            if (let cost = col(i,  s.cost).toUNum) {
              g.updateSalesPrice(sup, sup.pricesIncludingGst, SalesPrice(current = cost, regular = cost))
            }
          }
        }
        
        g.save
        
      }
    }
  } 
}

enum ProductImportType(make: String => IBasicProduct) {
  case Good(make = Good(title = _))
  case Service(make = Service(title = _))
}