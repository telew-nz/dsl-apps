entity PersonalProject extends DevProduct {
  func isTangible = false
  func type: ProductType = ProductType.Project
  ref field actor: Actor by personalProjects {
    available(All).for(All)
  }
  func itemRoles = [ProductOwner, Developer, Salesperson, QA, Stakeholder, CustomerRole]
  view traitItem = row{type, actor, title}
  
  func subProducts = [this]
  func isTheir = actor.isTheir
  func canRead: Bool = isTheir
  func canEdit: Bool = isTheir
  func multiupdate = [actor]
  ref stored compute rank: UDec[2] = actor.rank
  field requirements: Text?
  compute issuesByMilestone: [(milestone: Milestone?, issues: [Issue]?)] = milestones.map{m =>
    let milestone: Milestone? = (m)
    (milestone, issues = m.blockedByActiveIssues + m.issues.filter(status.active))
  } + (milestone = null[Milestone], issues.filter(!milestone))
  ref compute blockStatus = milestones.first?.blockStatus
  view ref = x {blockStatus title}
  view form = nav{tabs {
    grid (labels = None, label = "Main") {
      title >> field(fontSize = 1.5)
      actor
      blockStatus
      h2("Milestones")
      issuesByMilestone.filter(issues) >> subtotal {
        milestone?.name.alt("No Milestone") >> field(fontSize = 0.8)
        list {ref}
      }
      x {
        add("User Story") {
          UserStory(product = this, backlog = backlog!).form.open
        }
        add("Bug") {
          Bug(product = this, backlog = backlog!).form.open
        }
        add("Milestone") {
          Milestone(products = [this]).form.open
        }
      }
      h2("Desires")
      actor.desires 
      tickets
    }
    grid (labels = None, label = "Text Requirements") {
      requirements
    }
    grid (labels = Right, label = "Settings") {
      title
      status
      actor
      rank
      sandboxWorkspace
      extension
      roadmap
      backlog
      dependencies
      milestones >> list {
        x(flow = false){status title}
      }
      features 
      docs
      packageDocs
      description
    }
  }}
  
  object view list = PersonalProject.all >> nav {list{
    x{type, actor, blockStatus, title}
  }}
  
  event onSave = {
    milestones*.touch
    issues*.touch
  }
}
