class AppVersionSel {
  singular = "App"
  field app: App {
    update = {
      version =? new.versions.first
    }
  }
  field version: AppVersion {
    from = app.versions
  }
  compute verSel: AppVersion {
    value = version
    from = App.all.flatMap(versions.first.toSeq).sortBy(status)
    update = {
      this.app = new.app
      this.version = new 
    }
  }
  impl view form = x {
    verSel >> field(visible = !try? app)
    version.status >> field(editMode = AlwaysRead) 
    app >> field(visible = try? app, noTab)
    version >> field (title = version, visible = try? app, noTab)
  }
}

trait DevIssue extends Issue {
  impl compute title = "$number $name"
  ref field name: String {
    label = "Title (keep it short)" 
    validate = if (name.length >= 90) "Title should be shorter than 90 symbols"
  }
  
  override func statuses: [IssueStatus] = IssueStatus.all.filter(_ !in [QAReview, ToTest, Closed])!.toSet 
  field apps: [AppVersionSel]? 
  compute appVersions: Future[[AppVersion]?] = apps.oneByOne(Future(_.version))

  //func implStatus: IssueStatus = if (apps*.version.all(status >= Test)) ToTest else Implemented
  //func verifiedStatus: IssueStatus = if (apps*.version.all(status == Prod)) Closed else Verified
  impl ref field backlog: Backlog? by allIssues 
  
  impl compute product: DevProduct {
    value = _product
    update = {
      _product = new
    }
  }
  ref field feature: Feature? by stories from product.features.filter(_.status.canChoose)
  impl event onSave = {
    let _ <- if (status in [Implemented, ToTest, Verified, Closed] && apps) {
      let appVersions <- appVersions
      let isTest = appVersions.all(status >= Test || status == Canceled)
      let isReleased = appVersions.all(status in [Canceled, Prod])
      if (status == Implemented && isTest) {
        status = ToTest
      } else if (status == ToTest && !isTest) {
        status = Implemented
      } else if (status == Verified && isReleased) {
        status = Closed
      } else if (status == Closed && !isReleased) {
        status = Verified
      }
    } else if (status == Implemented) {
      status = ToTest
    } else if (status == Verified) {
      status = Closed
    }
    
    if (touched || created || updated(status)) {
      backlog = if (status.backlog) {
        product.backlog.alt(throw "Please set backlog for the product $product")
      }
      backlog?.touch
    }
  }
  impl ref field developer: User? {from = User.all.filter(is(Developer))}
  impl compute itemUser = if (status.dev) developer
  impl event statusUpdated = {
    if (status in [InProgress, Implemented, ToTest] && User.current?.is(Developer)) {
      developer = User.current
    }
  }
}
