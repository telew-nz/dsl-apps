enum Severity(rank: Dec[2], description: Text) {
  case Critical(rank = 3.00, description = 
"* Data can be damaged or lost
* Security problem
* A user cannot execute his role completely with no workaround") 
{
    color = "white"
    background = "#c00"
  }
  case Major(rank = 1.10, description = 
"* A user cannot do something which should be able to
* It makes it hard to work
* System error displayed
* Incorrect computation result
* Spelling mistake
* Incorrect or misleading Dsl compilation errors") {
    background = "#f99"
  }
  case Minor(rank = 0.25, description = 
"* Inconvenience
* Bad look") {
    background = "#efd"
  }
}

enum AffectedPercent(value: Dec[2], rank: Dec[2]) {
  case P1(value = 0.01, rank = 0.10) {label = "1%" background = "#efd"}
  case P5(value = 0.05, rank = 0.20) {label = "5%" background = "#dea"}
  case P10(value = 0.10, rank = 0.30) {label = "10%" background = "#dd9"}
  case P20(value = 0.20, rank = 0.50) {label = "20%" background = "#ed9"}
  case P40(value = 0.40, rank = 0.80) {label = "40%" background = "#ea9"}
  case P60(value = 0.60, rank = 0.90) {label = "60%" background = "#f99990"}
  case P100(value = 1.00, rank = 1.00) {label = "100%" background = "#f99"}
}

enum Stability {
  case Always {background = "#f99"}
  case Often {background = "#ffb16c"}
  case Sometimes {background = "#ed9"}
  case Once {background = "#efd", label = "Once Upon a Time"}
}

entity Bug extends Issue {
  field severity: Severity
  field startingPoint: Text {
    label = "Starting point for steps (where you are)"
  }
  field steps: Text {
    label = "Steps to reproduce (from beginning to end)"
  }
  field stability: Stability {
    label = "How often it can be reproduced (please try to reproduce again)"
  }
  field affected: AffectedPercent {
    label = "Affected percent of users of the app"
  }
  field actualResult: Text
  field expectedResult: Text 
  field additionalInfo: Text?
  field criticalReason: Text? {
    label = "Reason why it's critical"
    isValid = severity != Critical || criticalReason
    visible = severity == Critical 
  }
  func prefix: String = "B"
  func desireRank: Dec[2]? = product.usersRank * severity.rank * (if (severity == Critical) 1.00 else affected.rank)
  
  func descUpdated: Bool = updated(actualResult) || updated(expectedResult) || updated(additionalInfo) || updated(title)
  func defaultStatus: IssueStatus = if (Person.current!.is(QA)) Entered else QAReview
  func statuses: [IssueStatus] = IssueStatus.all!.toSet
  
  view ref = y {
    product
    x{title blockStatus status effort } 
  }
  view traitItem = grid (width = 1.5) {
    x {
      IssueType.Bug title >> field
    }
    row {
      rank
      product
      x(label = "Status"){blockStatus status}
      milestone
      effort >> field(label = "Effort")
      severity
      owner
    }
  }
  view form = nav {
    grid {
      number
      name
      feature
      row {
        backlog
        product
        milestone
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      owner
      effort
      severity
      severity.description >> field(label = "", editMode = AlwaysRead, fontSize = 0.75)
      criticalReason
      affected
      startingPoint
      steps
      stability
      actualResult
      expectedResult
      blockedByIssues >> field(label = "This bug is blocked by")
      blocksItems >> field(label = "This bug blocks") 
      edit {
        x{
           button("To User Story") {
             let s = steps
             let d = "$actualResult\n$expectedResult"
             let r = convertTo(UserStory)
             r.goal = s
             r.additionalInfo = d
           }
           button("To Tech") {
             let d = "$steps\n$actualResult\n$expectedResult"
             let r = convertTo(TechImprovement)
             r.description = d
           }
         }
      }
    }
  }
  func type: IssueType = Bug
}