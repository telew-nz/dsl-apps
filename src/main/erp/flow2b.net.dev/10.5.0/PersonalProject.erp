entity PersonalProject extends DevProduct with PseudoEntity {
  func isTangible = false
  
  impl func mainEntity = actor
  impl func type: ProductType = ProductType.Project
  ref field actor: Actor by project 
    
  func subProducts = [this]
  func isTheir = actor.isTheir
  impl func canRead: Bool = isTheir
  impl func canEdit: Bool = isTheir
  impl func multiupdate = [actor]
  impl ref stored compute rank: UDec[2] = actor.rank
  compute issuesByMilestone: [(milestone: Milestone?, issues: [Issue]?)] = milestones.map{m =>
    let milestone: Milestone? = (m)
    (milestone, issues = m.blockedByActiveIssues + m.issues.filter(status.active))
  } + (milestone = null[Milestone], issues.filter(!milestone && !_.is[Incident]))
  compute unresolvedIncidents = issues.filter(_.is[Incident] && (status.active || status == Pending))
  compute resolvedIncidents = issues.filter(_.is[Incident] && !status.active && status != Pending)
  ref compute blockStatus = milestones.first?.blockStatus
  impl view ref = x (flow = false) {blockStatus title}
  impl view form = grid (labels = None) {
    blockStatus
    actor.tickets
    h2("Unresolved Incidents", visible = unresolvedIncidents)
    unresolvedIncidents
    h2("Milestones")
    issuesByMilestone.filter(issues) >> subtotal {
      milestone?.name.alt("No Milestone") >> field(fontSize = 0.8)
      list {ref}
    }
    x {
      add("Tech Task") {
        TechTask(product = this, backlog = backlog!).form.open
      }
      add("User Story") {
        UserStory(product = this, backlog = backlog!).form.open
      }
      add("Bug") {
        Bug(product = this, backlog = backlog!).form.open
      }
      add("Milestone") {
        Milestone(products = [this]).form.open
      }
    }
    h2("Desires")
    actor.desires 
    
    h2("Resolved Incidents", visible = resolvedIncidents)
    resolvedIncidents
  }
  
  view settings = grid (labels = Right, label = "Settings") {
    title
    status
    actor
    rank
    sandboxWorkspace
    extension
    roadmap
    backlog
    dependencies
    milestones >> list {
      x(flow = false){status title}
    }
    features 
    docs
    packageDocs
  }
  
  impl object view list = PersonalProject.all >> nav {list{
    x{type, actor, blockStatus, title}
  }}
  
  impl event onSave = {
    milestones*.touch
    issues*.touch
  }
}
