entity Epic extends IUserStory {
  background = "#7b3a80" icon = "weight-hanging"
  impl func numPrefix: String = "E"
    
  impl view ref = y {
    x{number >> field(fontStyle = Label)  title product >> field(fontStyle = Label)}
    x{DevIssueType.Epic effort blockStatus status >> field(editMode = AlwaysEdit) itemUser}
  }
  impl view traitItem = grid(labels = None) {
    x{title >> field(stretch = 1) number >> field(fontStyle = Label)}
    row {product milestone feature}
    x {DevIssueType.Epic effort blockStatus status >> field(editMode = AlwaysEdit) itemUser}
  }
  
  impl view form = nav {
    grid {
      x(flow = false, label = ""){
        blockStatus 
        status >> field(editMode = AlwaysEdit)
        name >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }      
      feature
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      spuUses
      effort
      devType >> field (label = "", visible = estimations)
      estimations >> field (label = "")
      role >> field(label = "As a (choose carefully)", placeholder = "who")
      goal >> field(label = "I want (make it precise and understandable for a developer)", placeholder = "what (a developer should be able to understand how to implement it)")
      benefit >> field(label = "so that (put some efforts to make it clear)", placeholder = "why")
      additionalInfo >> field(label = "Additional Information")
      blockedByIssues >> field(label = "This story is blocked by")
      blocksItems >> field(label = "This story blocks")
      desires

    }
     
    edit {
      x{
        button("To User Story") {
          convertTo(UserStory)
        }
      }
    }
  }
  impl func type: DevIssueType = Epic
  
  override func statuses: [IssueStatus] = IssueStatus.all.filter(_ !in [ToTest, Implemented, QAReview, Todo, ToDoc, Failed, InProgress, Verified])!.toSet 
}


