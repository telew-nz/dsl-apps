trait Blockable {
  field blockedByIssues: [Issue]? by blocksItems
  func rank: Dec[2]?
  func rawRank: Dec[2]? = rank
  func products: [DevProduct]?
  compute blockedByActiveIssues {
    value = blockedByIssues.filter(status.blocking)
    update = {
      this.blockedByIssues = this.blockedByIssues.filter(!status.blocking) + new
    }
  }
  //func product: DevProduct
  func isForDev: Bool
  func active: Bool
  ref compute blockStatus: BlockStatus {
    value = if (blockedByActiveIssues && isForDev) Blocked else NotBlocked
    visible = blockStatus == Blocked
  }
  func productEfforRank(p: DevProduct): Dec[2] = 1.00
}

enum BlockStatus {
  case Blocked {
    color = "white"
    background = "#c00"
  }
  case NotBlocked {background = "#999"}
}
