enum TechSeverity(rank: UDec[2]) {
  case Critical(rank = 1.5) {
    color = "white"
    background = "#c00"
  }
  case Major(rank = 0.3) {
    background = "#f99"
  }
  case Minor(rank = 0.1) {
    background = "#efd"
  }
}

entity TechImprovement extends Issue {
  field severity: TechSeverity
  func prefix: String = "T"
  field description: Text
  func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*severity.rank)
  
  view ref = y {
    x{product.title title >> field(stretch = 1)}
    x {IssueType.Tech severity effort blockStatus status}
  }
  view traitItem = grid(labels = None) {
    x {title >> field(stretch = 1) rank}
    row {product milestone space}
    x {IssueType.Tech severity effort blockStatus status}
  } 
  func type: IssueType = Tech
  func descUpdated: Bool = updated(description) || updated(title)  
  view form = nav {
    grid {
      number
      name
      feature
      row {
        backlog
        product
        milestone >> field(title = name)
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      effort
      severity
      description
      blockedByIssues >> field(label = "This tech is blocked by")
      blocksItems >> field(label = "This tech blocks")
      desires
    }
    edit {
      x{
        button("To User Story") {
          let d = description
          let r = convertTo(UserStory)
          r.goal = d
        }
        button("To Bug") {
          let d = description
          let r = convertTo(Bug)
          r.steps = d
        }
      }
    }
  }
}