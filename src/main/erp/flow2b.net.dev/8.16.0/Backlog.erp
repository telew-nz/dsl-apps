entity Backlog {
  background = "#545790"
  field status: BacklogStatus = Entered
  ref field name: String? {views = []}
  ref compute title {
    value = name.alt(products.first!.title)
    update = {
      this.name = new
    }
  }
  field products: [DevProduct]? by backlog {
    update = {
      let o: [DevProduct]? = old.alt([])
      new.filter(!o.contains(_))
        .foreach(this.issues = this.issues + _.issues)
    }
  }
  ref compute oneProduct: DevProduct? {
    value = if (products.count == 1) products.first else null
    views = []
  }
 
  system field issues: [Issue]? read by backlog {views = []}
  /*compute backlog: [Issue]? {
    value = issues.filter(status.backlog)
    update = {
      issues = issues.filter{status == Verified} + new + issues.filter{status != Verified && !status.backlog}
    }
    init = {
      new.backlog = _
      new.product =? oneProduct
    }
  }
  compute size: Int? = backlog.count
  view backlogView = backlog >> list(editMode = AlwaysRefRead, frame = true) {
    x(flow = false) {
      grid {
        _ >> field(label = "")
        row{product milestone rank}
      }
      y (css = "align-self: center") {
      	button("↑") {
          backlog.issues = _ + backlog.issues.filter(i => i != _)
          backlog.save
        }
        button("↓") {
          backlog.issues = backlog.issues.filter(i => i != _) + _
          backlog.save
        }
      }
    }
  }  
  
  view form = nav{
    tabs {
      grid(labels = None, label = "Backlog"){
        row{title >> field(fontSize = 1.2)  size + " issues" >> field(align = Right, fontSize = 1.2)}
        backlogView
      }
      grid(labels = Top, label = "Settings"){
        title 
        status
        products
      }
    }
    button("Sort by rank") {
      issues = issues.filter{status == Verified} + backlog.sortBy(
        if (status == Approved || status == Entered) if (milestone && milestone!.status.going) 1 else 2 else 0, rank.desc) 
        + issues.filter{status != Verified && !status.backlog}
      UI.save(this)
    }
  }*/
  view form = nav{
    grid(labels = Top, label = "Settings"){
      title 
      status
      products
    }
    button("➠") {
      Issue.Report(backlog = this).list.open
    }
  }
  object view list = Backlog.all >> nav{list{
    x{status title}
  }}
  view ref = x {
    title
    button("➠") {
      Issue.Report(backlog = this).list.open
    }
  }
}

enum BacklogStatus(active: Bool, dev: Bool, qa: Bool, backlog: Bool) {
  case Entered {
    background = "#ed9"
  }
  case Canceled {
    background = "#999"
  }
  case Dormant {
    background = "#ecd"
  }
  case Development {
    background = "#8bf"
  }
  case Complete {
    color = "white"
    background = "#090"
  }
}
