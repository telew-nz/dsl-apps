role ProductOwner {
  entity Bug = readWrite
  entity UserStory = readWrite
  entity Feature = readWrite  
  entity Milestone = readWrite
  entity UniversalApp = readWrite  
  entity PersonalProject = readWrite 
  entity Roadmap = readWrite
  entity Backlog = readWrite
  entity Article = readWrite
  menu Development {
    entity Issue
    entity Article
    entity DevProduct = "Products"
    entity ProductRole = "Roles"
    entity DocPackage = "Docs"
    entity Backlog
    entity Roadmap
  }
  
  view dashboard = row {
    Issue.all.filter(isForPO && User.current!.ownedBacklogs.contains(backlog)).sortBy(sort.desc, number) >> 
      nav(label = "Entered Issues", background = "#545790", limit = 5, more = Issue.Report(po = User.current, status = [IssueStatus.Entered]).list.open) {
        list {}
      }
    Issue.all.filter(status.dev && User.current!.ownedBacklogs.contains(backlog)).sortBy(sort.desc, number) >> 
      nav(label = "Backlog", background = "#545790", limit = 5, more = Issue.Report(po = User.current).list.open) {
        list {}
      }
    ProductRole.all.filter(status == Entered) >> 
      nav(label = "Unapproved Roles", background = "#545790", limit = 5, more = ProductRole.Report(status = [RoleStatus.Entered]).list.open) {
        list {}
      }    
    
  }
}

extend entity User {
  field ownedBacklogs: [Backlog]? {
    views = []
    visible = is(ProductOwner)
  }
  extend view form = extend {
    ownedBacklogs
    developingBacklogs
  }
  field developingBacklogs: [Backlog]? {
    views = []
    visible = is(Developer)
  }
}