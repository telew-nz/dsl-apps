extend trait Actor {
  field projects: [PersonalProject]? read by actor {views = []}
  field desires: [Desire]? inline by actor
  compute rank: UDec[2] = 1.00
  
  
  extend impl event onSave = {
    projects*.touch
  }
}

extend entity Company {
  extend view form = projects
}
extend entity Person {
  extend view form = projects
}


enum CustomerHappiness(level: Dec[2]?) {
  case Angry(level = -1) { color = "white" background = "#c00" icon="angry"}
  case Unhappy(level = -0.5) {background = "#f99" icon="frown"}
  case OK(level = 0){background = "#ed9" icon="meh"}
  case Happy(level = 0.5) {background = "#dea" icon="grin"}
  case Excited(level = 1) {color = "white" background = "#090" icon="grin-hearts"}
}

enum CustomerState(current: Bool) {
  case Deployment(current = true) {background = "#ed9" icon = "spinner"}
  case Active(current = true) {background = "#dea" icon = "atom"}
  case DeploymentFailed(current = false) {background = "#999" icon = "times"}
  case Churned(current = false) {background = "#999" icon="hand-point-down"}
}

extend entity CompanyPerson {
  field happiness: CustomerHappiness {
    views = []
    default = OK
    visible = company.as[LegalEntity]?.customer
  }
  
  extend view stateView = happiness
}

extend entity Customer {
  field state: CustomerState {
    default = Deployment
    views = []
    update = {
      if (new == Active && !activeDate) activeDate = now
      if (new == Churned && !churnDate) churnDate = now
      if (new == DeploymentFailed && !failureDate) failureDate = now
    }
  }
  field happiness: CustomerHappiness {
    views = []
    default = OK
  }
  field deploymentDate: Date {
    default = now
    views = []
  }
  field activeDate: Date? {
    views = []
    visible = state == Active || state == Churned
    validate = if (!activeDate && (state == Active || state == Churned)) "Active date is Required"
  }
  field churnDate: Date? {
    views = []
    visible = state == Churned
    validate = if (!churnDate && state == Churned) "Churn date is Required"
  }
  field failureDate: Date? {
    views = []
    visible = state == DeploymentFailed
    validate = if (!failureDate && state == DeploymentFailed) "Failure date is Required"
  }
  compute stateDur: Duration[week, 0]? = {
    let d = Date.now - {
      if (state == Active) activeDate! 
      else if (state == Churned) churnDate! 
      else if (state == DeploymentFailed) failureDate! 
      else deploymentDate
    }
    d.to[Duration[week]].round(round, 0)
  }
  extend view stateView = group{state stateDur extension("state") happiness >> field(editMode = AlwaysEdit)}
  extend view form = extend("top"){
    row{deploymentDate activeDate churnDate}
    row{failureDate space space}
    legalEntity.projects
  }
}