extend enum DashboardIssue {
  case BacklogLimitsExceeded(role = ProductOwner, priority = major)
}

entity Backlog extends DashboardItem {
  background = "#545790"
  field active: Bool
  ref field name: String? {views = []}
  impl ref compute title {
    value = name.alt(products.first!.title)
    update = {
      this.name = new
    }
  }
  field products: [DevProduct]? by backlog 
  ref compute oneProduct: DevProduct? {
    value = if (products.count == 1) products.first else null
    views = []
  }
  
  impl func itemRoles = [ProductOwner]
  impl func activeRoles = if (active) [ProductOwner]
  impl func itemPriority = major
  impl func issues = if (sizeLimit < size || devLimit < devSize || qaLimit < qaSize) {
    [BacklogLimitsExceeded]
  }
 
  impl func canRead = products.all(_.as[PersonalProject]?.isTheir)

  system field backlogIssues: [DevIssue]? read by backlog {views = []}
  
  compute qaIssues {
    label = "QA"
    value = backlogIssues.filter(status == Implemented)
    update = {
      backlogIssues = new + backlogIssues.filter(_.status != Implemented)
    }
  }
  compute progressIssues {
    label = "In Progress"
    value = backlogIssues.filter(status in [InProgress, Failed])
    update = {
      backlogIssues = backlogIssues.filter(_.status == Implemented) + new + backlogIssues.filter(_.status in [Todo, Approved])
    }
  }
  compute todoIssues {
    label = "PO"
    value = backlogIssues.filter(status == Todo)
    update = {
      backlogIssues = backlogIssues.filter(_.status in [InProgress, Failed, Implemented] ) + new + backlogIssues.filter(_.status == Approved)
    }
  }
  compute poIssues {
    label = "PO"
    value = backlogIssues.filter(status == Approved)
    update = {
      backlogIssues = backlogIssues.filter(_.status != Approved) + new
    }
  }
  
  field sizeLimit: UInt = 100
  field devLimit: UInt = 10
  field qaLimit: UInt = 10
  
  compute size: UInt? = backlogIssues.count
  compute devSize: UInt? = backlogIssues.filter(status.dev).count
  compute qaSize: UInt? = backlogIssues.filter(status.qa).count
  view backlogView = poIssues >> list(editMode = AlwaysRefRead, frame = true) {
    x(flow = false) {
      //grid (margin = None) {
        ref >> field(stretch = 1)
      //}
      button("↓") {
        backlog!.poIssues = backlog!.poIssues.filter(i => i != _) + _
        UI.save(backlog!.save)
      }
      button("↑") {
        backlog!.poIssues = _ + backlog!.poIssues.filter(i => i != _)
        UI.save(backlog!.save)
      }
    }
  }  
 
  
  impl view form = nav{
    tabs {
      grid(labels = None, label = "Backlog"){
        row{
          title  
          "$size of $sizeLimit issues" >> field(color = if (sizeLimit < size) "red" else "black")
          "$devSize of $devLimit dev" >> field(color = if (devLimit < devSize) "red" else "black")
          "$qaSize of $qaLimit qa" >> field(color = if (qaLimit < qaSize) "red" else "black")
        }
        backlogView
      }
      grid(labels = None, label = "Development") {
        progressIssues >> list(frame = true) {ref}
        todoIssues >> list(frame = true) {ref}
      }
      grid(labels = None, label = "QA") {
        qaIssues >> list(frame = true) {ref}
      }
      grid(labels = Top, label = "Settings"){
        title 
        active
        row {sizeLimit devLimit qaLimit}
        products
      }
    }
    button("Sort by rank") {
      backlogIssues = backlogIssues.sortBy(if (status == Approved) if (milestone && milestone!.status.going) 1 else 2 else 0, rank.desc)
      UI.save(this)
    }
  }
  /*
  impl view form = nav{
    grid(labels = Top, label = "Settings"){
      title 
      status
      products
    }
    button("➠") {
      Issue.Report(backlog = this).list.open
    }
  }
  impl view ref = x(flow = false, margin = None) {
    title
    button("➠") {
      Issue.Report(backlog = this).list.open
    }
  }
  */
  impl object view list = Backlog.all >> nav{list{
    title
  }}
  
}
