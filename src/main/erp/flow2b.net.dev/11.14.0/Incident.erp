entity Incident extends Issue with DeferredJob {
  ref const field date: Date = now
  compute unrespondedTime: Duration? {
    value = (Date.now - rspDate).to[Duration[hour, 0]]
    visible = status.active || status == Pending
  }
  system const field rspDate: Date = now
  system const field revisionDate: Date?
  impl func service = NotificationService
  impl func jobDate = if (status == Revision let revisionDate) {
    if (urgency == Urgent) {
      revisionDate + 4_hour
    } else {
      revisionDate + 7_day
    }
  }
  impl func requireEfforts = false
  impl compute title {
    value = "$number $product $subject"
  }  
  field urls: [Url]?
  ref impl compute product: PersonalProject {
    value = _product.as[PersonalProject]!
    update = {
      _product = new
    }
  }
  func timeColor: String = {
    let ur = unrespondedTime
    if (ur >= urgency.norm) "#f00"
    else if (ur >= urgency.norm/2) "#dc8800"
    else "black"
  }
  field urgencyReason: Text? {
    visible = urgency == Urgent
    validate = if (urgency == Urgent && !urgencyReason) "Urgency reason is required for urgent incidents"
  }
  
  impl event onSave = {
    if (updated(status)) {
      if (status == Revision) {
        revisionDate = now
      } else if (status in [Todo, InProgress, Failed] && origin(status) !in [Todo, InProgress, Failed]) {
        rspDate = now
      }
    }
  }
  
  impl func do = {
    if (status == Revision) {
      status = InProgress
      save
    }
  }
  
  override func statuses: [IssueStatus] = IssueStatus.all.filter(_ !in [QAReview, Heap, Backlog, Entered, Postponed, ToTest, Verified])!.toSet
  override func defaultStatus = Todo
  override func isBlocking(issue: Issue): Bool = issue.status.blocking || issue.status in [Implemented, Verified, ToTest]
  ref field urgency: Urgency = Usual
  impl func numPrefix: String = "I"
  ref field subject: String?
  field desc: Text? {label = "Description"}
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*urgency.rank)
  impl func itemRoles = [Support]
  override func activeRoles = if ((status.active && status != Revision && status != Implemented) || (status in [Pending, Revision] && urgency == Urgent)) {
    [Role.Support]
  }
  impl view ref = y {
    x {number >> field(fontStyle = Label) title date >> field(fontStyle = Label)}
    x {IssueType.Incident urgency effort blockStatus status >> field(editMode = AlwaysEdit) unrespondedTime >> field(color = timeColor)}
  }
  impl view traitItem = grid(labels = None) {
    x {title date >> field(stretch = 1) number >> field(fontStyle = Label)}
    row {product milestone space}
    x {IssueType.Incident urgency effort blockStatus status >> field(editMode = AlwaysEdit)  unrespondedTime >> field(color = timeColor, align = Right, stretch = 1)}
  } 
  impl func type: IssueType = Incident
  impl func descUpdated: Bool = updated(activities) && activities.last?.comment
  impl view form = nav {
    grid {
      x(flow = false, label = ""){
        blockStatus 
        status >> field(editMode = AlwaysEdit)
        unrespondedTime >> field(color = timeColor)
        subject >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }
      urls
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      urgency
      urgencyReason
      desc 
      x { 
        add("New Bug") {
          Bug.incomplete(blocksItems = [this]).form.open
        }
        add("New Story") {
          UserStory.incomplete(blocksItems = [this]).form.open
        }
        add("New Tech Task") {
          TechTask.incomplete(blocksItems = [this]).form.open
        }
      }
      blockedByIssues >> field(label = "This incident is blocked by")
      blocksItems >> field(label = "This incident blocks")
    }
    edit {
      x{
        button("To Tech Task") {
          convertTo(TechTask)
        }
      }
    }
  }
}