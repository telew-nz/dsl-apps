entity ProductRole {
  background = "#545790"
  field title: String
  field description: Text?
  field features: [Feature]? read by role
  field stories: [UserStory]? read by role
}

enum ProductType {
  case App {
    background = "#ed9"
  }
  case Project {
    background = "#efd"
  }
}

enum ProductStatus {
  case Entered {background = "#ed9"}
  case Revision {background = "#fcc"}
  case Approved {background = "#ccf"}
  case Canceled {background = "#999"}
  case InProgress {background = "#8bf"}
  case Dormant {background = "#999"}
  case Partner {background = "#ecd"}
}

trait DevProduct { 
  background = "#545790"
  field title: String
  field description: Text?
  func type: ProductType
  field status: ProductStatus = Entered
  field sandboxWorkspace: String?
  
  ref field milestones: [Milestone]? read by products {
    available(All).for(All)
  }
  func milestonesSelection: [Milestone]? = milestones.sortBy(if (status == Closed) 1 else 0, title)
  ref field features: [Feature]? read by products
  ref compute activeMilestonesCount = milestones.filter(status.rankCount).count
  field docs: [Article]? from Article.all.filter{parentArticle.isEmpty}
  field packageDocs: [DocPackage]? by product
  ref field backlog: Backlog? by products { 
    update = {
      if (let newBacklog = new) issues.foreach(backlog = newBacklog)
    }
  }
  field dependencies: [UniversalApp]? by dependants
  
  ref field roadmap: Roadmap? by products { 
    update = {
      if (let newRoadmap = new) features.foreach(roadmap = newRoadmap)
    }
  }
  system field issues: [Issue]? read by product
  func canRead: Bool
  func canEdit: Bool
  func rank: Dec[2]
  event onSave = {
    if (updated(backlog)) issues.foreach(backlog = this.backlog!)
    if (updated(roadmap)) features.foreach(roadmap = this.roadmap!)
    milestones*.touch
  }
  func allDependants: [DevProduct]? = []
}


entity UniversalApp extends DevProduct {
  func isTangible = false
  func type: ProductType = ProductType.App
  view traitItem = row{type, title}
  func subProducts = [this]
  field dependants: [DevProduct]? by dependencies
  func allDependants: [DevProduct]? = (dependants + dependants*.allDependants).distinct
  
  system stored ref compute rank: Dec[2] = {
    1.00 + allDependants*.as[PersonalProject].count
  }
  view form = nav{grid (labels = Right) {
    title
    status
    backlog
    roadmap
    sandboxWorkspace
    milestones >> list {
      x(flow = false){status title}
    }
    features 
    docs
    packageDocs
    description
    rank
    dependencies
    dependants
  }}
  func canRead: Bool = true
  func canEdit: Bool = false
  
  event onSave = {
    dependants*.touch
  }
}


