extend entity User {
  ref field ownedBacklogs: [Backlog]? {
    views = []
    visible = is(ProductOwner)
  }
  extend view form = extend {
    ownedBacklogs
    developingBacklogs
  }
  ref field developingBacklogs: [Backlog]? {
    views = []
    visible = is(Developer) || is(Tech)
  }
}

role Developer {
  entity Bug = readWrite
  entity UserStory = readWrite
  entity CodeDebt = readWrite
  entity TechTask = readWrite
  entity Roadmap = readOnly
  entity Backlog = readOnly
  entity Feature = readWrite  
  entity Milestone = readOnly  
  entity UniversalApp = readOnly  
  entity PersonalProject = readOnly  
  entity Article = readWrite
  view menu = menu("Development") {
    Issue >> item(fastSearch, fastAdd)
    Article >> item(fastSearch)
    DocPackage >> item("Docs")
    DocType >> item("Data Types")
  }
}
   
role ProductOwner {
  entity Bug = readWrite
  entity UserStory = readWrite
  entity CodeDebt = readWrite
  entity TechTask = readWrite
  entity Feature = readWrite  
  entity Milestone = readWrite
  entity UniversalApp = readWrite  
  entity PersonalProject = readWrite 
  entity Roadmap = readWrite
  entity Backlog = readWrite
  entity Article = readWrite
  view menu = menu("Development") {
    Issue >> item(fastSearch, fastAdd)
    Article >> item(fastSearch)
    DevProduct >> item("Products")
    ProductRole >> item("Roles")
    DocPackage >> item("Docs")
    Backlog
    Roadmap
  }
}

extend role CustomerRole {
  entity PersonalProject {
    read = isTheir
    write = !created && !deleted && isTheir
  }
  entity UniversalApp = readOnly
    
  entity UserStory {
    read = product.canRead
    write = product.canEdit
  }
  entity Bug {
    read = product.canRead
    write = product.canEdit
  }
  entity CodeDebt {
    read = product.canRead
    write = product.canEdit
  }
  entity TechTask {
    read = product.canRead
    write = product.canEdit
  }
  entity Backlog {
    read = products.all(_.as[PersonalProject]?.isTheir)
    write = false
  }
  entity Milestone {
    read = products.exists(canRead)
    write = false
  }
  entity Roadmap {
    read = true //products.all(canRead)
    write = false
  }
  entity Feature {
    read = products.all(canRead)
    write = products.all(canEdit)
  }
  entity ProductRole = readOnly
  entity File = readWrite
  entity Article = readOnly
  extend view menu = menu("Development") {
    PersonalProject
  }
  extend view dashboard = PersonalProject.all >> nav(label = "Projects") { list (canAdd = false){grid(labels = None) {
    title
  }}}
}

role Stakeholder {
  entity Bug = readWrite
  entity UserStory = readWrite
  entity CodeDebt = readOnly
  entity TechTask = readWrite
  entity Roadmap = readOnly
  entity Backlog = readOnly
  entity Feature = readWrite  
  entity Milestone = readOnly  
  entity UniversalApp = readOnly  
  entity PersonalProject = readOnly  
  entity Article = readOnly
  view menu = menu("Development") {
    Issue >> item(fastSearch, fastAdd)
    Article >> item(fastSearch)
    Backlog
    Roadmap
  }
  
}

role QA {
  entity Bug = readWrite
  entity UserStory = readWrite
  entity CodeDebt = readWrite
  entity TechTask = readWrite
  entity Roadmap = readOnly
  entity Backlog = readOnly
  entity Feature = readWrite  
  entity Milestone = readOnly  
  entity UniversalApp = readOnly  
  entity PersonalProject = readOnly  
  entity Article = readWrite
  
  view menu = menu("Development") {
    Issue >> item(fastSearch, fastAdd)
    Article >> item(fastSearch)
    Backlog
    Roadmap
  } 
}

role Tech {
  entity Bug = readWrite
  entity UserStory = readWrite
  entity CodeDebt = readWrite
  entity TechTask = readWrite
  entity Roadmap = readOnly
  entity Backlog = readOnly
  entity Feature = readWrite  
  entity Milestone = readOnly  
  entity UniversalApp = readOnly  
  entity PersonalProject = readOnly  
  entity Article = readWrite
  
  view menu = menu("Development") {
    TechTask >> item(fastSearch, fastAdd)
    Article >> item(fastSearch)
  } 
}