entity UserStory extends DevIssue {
  impl func prefix: String = "S"
    
  field role: ProductRole {
    by = stories
    label = "As a"
  }
  field goal: Text {
    label = "I want"
  }
  field benefit: Text {
    label = "so that"
  }
  field additionalInfo: Text?
  impl func descUpdated: Bool = updated(role) || updated(goal) || updated(benefit) || updated(additionalInfo) || updated(title)
  
    
  impl view ref = y {
    x(margin = None){product title >> field(stretch = 1)}
    x{IssueType.Story effort blockStatus status}
  }
  impl view traitItem = grid(labels = None) {
    x {title >> field(stretch = 1) rank}
    row {product milestone feature}
    x {IssueType.Story effort blockStatus status}
  }
  
  impl view form = nav {
    grid {
      number
      name
      feature
      row {
        product
        milestone >> field(title = name)
        backlog
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      effort
      role >> field(label = "As a (choose carefully)", placeholder = "who")
      goal >> field(label = "I want (make it precise and understandable for a developer)", placeholder = "what (a developer should be able to understand how to implement it)")
      benefit >> field(label = "so that (put some efforts to make it clear)", placeholder = "why")
      additionalInfo >> field(label = "Additional Information")
      blockedByIssues >> field(label = "This story is blocked by")
      blocksItems >> field(label = "This story blocks")
      desires
      
    }
    edit {
      x{
        button("To Bug") {
          let g = goal
          let d = "$benefit\n$additionalInfo"
          let r = convertTo(Bug)
          r.steps = g
          r.additionalInfo = g
        }
        button("To Tech Task") {
          let d = "$goal\n$benefit\n$additionalInfo"
          let r = convertTo(TechTask)
          r.desc = d
        }
        button("To Code Debt") {
          let d = "$goal\n$benefit\n$additionalInfo"
          let r = convertTo(CodeDebt)
          r.description = d
        }

      }
    }
  }
  impl func type: IssueType = Story
}


