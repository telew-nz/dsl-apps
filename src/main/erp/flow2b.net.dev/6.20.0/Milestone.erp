enum MilestoneStatus(active: Bool, rankCount: Bool, rank: Dec[2]?, going: Bool) {
  case Entered(active = true, rankCount = true, rank = 1, going = false) {background = "#ed9"}
  case InProgress(active = true, rankCount = true, rank = 4, going = true) {background = "#8bf"}
  case Implemented(active = true, rankCount = false, rank = 4, going = true) {background = "#dea"}
  case Verified(active = true, rankCount = false, rank = 4, going = true) {background = "#dea"}
  case Production(active = true, rankCount = false, rank = 6, going = true) {
    color = "white"
    background = "#090"
  }
  case Closed(active = false, rankCount = false, rank = 0, going = false) {
    background = "#999"
  }
}

entity Milestone extends Blockable {
  background = "#545790"
  func title: String = "$product: $name"
  ref field name: String
  ref field status: MilestoneStatus = Entered
  ref field product: DevProduct read by milestones
  field releaseDate: Date?
  func remainingEffort: Int? = todo.map(effort?.value).sum
  func wholeEffort: Int? = remainingEffort + done.map(effort?.value).sum
  compute effort = remainingEffort + " of " + wholeEffort
  stored compute currentNumber: Int? = product.milestones.filter(status.rankCount).indexOf(this)
  field description: Text?
  ref compute rank: Dec[2]? = status.rank*product.rank/(currentNumber.max(0.00) + 1.00) * (if (status.going) 3.0 else 1.0)
  func active: Bool = status.active
  compute todo: [Issue]? {
    value = issues.filter(status.active)
    update = {
      issues = new + issues.filter(!status.active)
    }
    init = {
      new.product = product
      new.milestone = _
    }
  }
  compute done: [Issue]? {
    value = issues.filter(status == Verified)
    canAdd = false
  }
  field issues: [Issue]? read by milestone {
  	views = []
  }
  view ref = y {
    title
    x{blockStatus status >> field(visible = status != Entered) }
  }
  
  view form = nav {
    grid {
      product
      name
      status
      description
      effort
      todo >> list(editMode = AlwaysRefRead, frame = true){_}
      blockedByActiveIssues >> list(frame = true, label = "Blocked by Issues", singular = "Issue"){
        _
      }
      done >> list(editMode = AlwaysRefRead, frame = true){_}
    }
  }
  
  report Report {
    field status: [MilestoneStatus]? {auto = true}
    view list = Milestone.all >> nav {list{
      ref
    }}
  }
}
