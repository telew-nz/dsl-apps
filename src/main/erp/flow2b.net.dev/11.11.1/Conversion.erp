back object Conversion extends IConversion {
  func convert(version: [Int?]): Future[Any] = {
    if (version < [11,0,0]) {
      Bug.all.update(steps = "$(field[Text](_, 'startingPoint'))<p></p>$steps")
      DevIssue.all.update(backlog = if (status.backlog) product.backlog)
      Backlog.all.update(active = true)
      fixBackRefs(DevIssue, backlog)
      fixBackRefs(PersonalProject, actor)
    }
    if (version < [11,2,0]) {
      renameField(Milestone, milestoneIssues, "issues")
    }
    if (version < [11,6,0]) {
      Incident.all.update(rspDate = date)
      Incident.all.filter(status == Revision).update(revisionDate = now)
    }
    if (version < [11,8,1]) {
      Blockable.all.foreach(recalcField(_, _.blockStatus))
    }
    if (version < [11,10,0]) {
      renameField(Backlog, allIssues, "backlogIssues")
      Issue.all.filter(field[String](_, "status") == "Approved").update(status = Backlog)
      DevIssue.all.filter(status == Entered).update(backlog = product.backlog!)
    }
    if (version < [11,11,1]) {
      Issue.all.filter(status == Pending && !blockedByActiveIssues).update(status = defaultStatus)
    }
  }  
}    