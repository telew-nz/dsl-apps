entity TechTaskType {
  impl field title: String
  field usualEffort: Effort?
  field params: [TaskParam]? inline by taskType  {label = "Parameters"}
  field desc: Text? {
    label = "Description"
  }
}
entity TaskParam {
  field taskType: TechTaskType
  impl field title: String
  ref field key: String?
  ref field desc: Text?
}

enum Urgency(rank: UDec[2], norm: Duration ) {
  case Urgent(rank = 1.5, norm = 24_hour) {
    color = "white"
    background = "#c00"
  }
  case Usual(rank = 0.3, norm = 48_hour) {
    background = "#f99"
  }
  case NotUrgent(rank = 0.1, norm = 168_hour) {
    background = "#efd"
  }
}

entity TechTask extends Issue {
  impl compute title {
    value = "$number $product $taskType"
  }
  ref field taskType: TechTaskType {
    available(Inline).for(Inline)
    update = {
      if (!effort) {
        this.effort = new.usualEffort
      }
      new.params.map(p => ParamValue(tech = this, param = p))
    }
  }
  impl compute product: PersonalProject {
    value = _product.as[PersonalProject]!
    update = {
      _product = new
    }
  }
  field params: [ParamValue]? inline by tech 
  override func isBlocking(issue: Issue): Bool = issue.status.blocking || issue.status == Implemented
  ref field urgency: Urgency = Usual
  impl func numPrefix: String = "T"
  field desc: Text? {label = "Description"}
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*urgency.rank)
  impl func itemRoles = [Tech, Stakeholder]
  override func activeRoles = ((if (status.dev) [Role.Tech]) + (if (status.po) [Role.TechOwner]) + (if (status.qa) [Role.Tech])).toSet
  compute howTo: Text? = {
    params.fold(taskType?.desc, if (let key = param.key) acc.replace(key, strValue.trim) else acc)
    
  }
  impl view ref = y {
    x {number >> field(fontStyle = Label) title }
    x {IssueType.Tech urgency effort blockStatus status >> field(editMode = AlwaysEdit)}
  }
  impl view traitItem = grid(labels = None) {
    title >> field(stretch = 1)
    row {product milestone space}
    x {IssueType.Tech urgency effort blockStatus status >> field(editMode = AlwaysEdit)}
  } 
  impl func type: IssueType = Tech
  impl func descUpdated: Bool = updated(activities) && activities.last?.comment
  impl view form = nav {
    grid {
      x(flow = false, label = ""){
        blockStatus 
        status >> field(editMode = AlwaysEdit)
        taskType >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = Label)
      }
      
      row {
        product
        milestone >> field(title = name)
        backlog >> field(editMode = AlwaysRead)
      }
      effort
      urgency
      params >> list{grid(labels = None){
        param.title >> field(editMode = AlwaysRead)
        value
        param.desc >> field(fontSize = 0.75, editMode = AlwaysRead)
      }}
      desc
      howTo >> field(editMode = AlwaysRead)
      
      blockedByIssues >> field(label = "This tech task is blocked by")
      blocksItems >> field(label = "This tech task blocks")
    }
    edit {
      x{
        button("To User Story") {
          let d = desc
          let r = convertTo(UserStory)
          r.goal =? d
        }
        button("To Bug") {
          let d = desc
          let r = convertTo(Bug)
          r.steps =? d
        }
      }
    }
  }
}

inline entity ParamValue {
  field tech: TechTask
  field param: TaskParam {
    from = tech.taskType.params
  }
  field value: Text?
  func strValue: String? = value
}