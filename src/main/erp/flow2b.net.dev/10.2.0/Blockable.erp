trait Blockable extends Entity {
  field blockedByIssues: [Issue]? by blocksItems
  func contentIssues: [Issue]? = []
  func rank: Dec[2]?
  func rawRank: Dec[2]? = rank
  func products: [DevProduct]?
  compute blockedByActiveIssues {
    value = blockedByIssues.filter(this.isBlocking(_))
    update = {
      this.blockedByIssues = this.blockedByIssues.filter(!this.isBlocking(_)) + new
    }
  }
  func isBlocking(issue: Issue): Bool = issue.status.blocking
  //func product: DevProduct
  func isInBacklog: Bool
  func active: Bool
  ref stored compute blockStatus: BlockStatus? {
    value = if (let e = blockedByEfforts) BlockStatus.fromValue(e)
  }
  compute blockedByEfforts: Int? = blockedByActiveIssues.map(i => i.effort?.value + i.blockedByEfforts).sum + contentIssues*.blockedByEfforts.sum
  func productEfforRank(p: DevProduct): Dec[2] = 1.00
}

enum BlockStatus(value: Int) {
  case Blocked1(value = 1) {
    background = "#f99"
  }
  case Blocked2(value = 2) {
    background = "#f99"
  }
  case Blocked3(value = 3) {
    background = "#f99"
  }
  case Blocked5(value = 5) {
    background = "#f99"
  }
  case Blocked8(value = 8) {
    color = "white"
    background = "#c00"
  }
  case Blocked13(value = 13) {
    color = "white"
    background = "#c00"
  }
  case Blocked20(value = 20) {
    color = "white"
    background = "#c00"
  }
  case BlockedInfinity(value = 10000000) = "Blockedâˆž" {
    color = "white"
    background = "#f00"
  }
  
  object func fromValue(v: Int): BlockStatus = {
    if (v == 1) Blocked1
    else if (v == 2) Blocked2
    else if (v == 3) Blocked3
    else if (v <= 5) Blocked5
    else if (v <= 8) Blocked8
    else if (v <= 13) Blocked13
    else if (v <= 30) Blocked20
    else BlockedInfinity
  }
}
