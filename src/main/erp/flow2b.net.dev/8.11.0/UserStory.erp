entity UserStory extends Issue {
  func prefix: String = "S"
    
  field role: ProductRole {
    by = stories
    label = "As a"
  }
  field goal: Text {
    label = "I want"
  }
  field benefit: Text {
    label = "so that"
  }
  field additionalInfo: Text?
  func descUpdated: Bool = updated(role) || updated(goal) || updated(benefit) || updated(additionalInfo) || updated(title)
  
    
  view ref = y {
    product
    x{title blockStatus status} 
  }
  view traitItem = grid (width = 1.5) {
    x {
      IssueType.Story
      title
    }
    row {
      rank
      product
      x(label = "Status"){blockStatus status }
      milestone
      effort >> field(label = "Effort")
      feature
      owner
    }
  }
  view form = nav {
    grid {
      number
      name
      feature
      row {
        backlog
        product
        milestone
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      owner
      effort
      role >> field(label = "As a (choose carefully)", placeholder = "who")
      goal >> field(label = "I want (make it precise and understandable for a developer)", placeholder = "what (a developer should be able to understand how to implement it)")
      benefit >> field(label = "so that (put some efforts to make it clear)", placeholder = "why")
      additionalInfo >> field(label = "Additional Information")
      blockedByIssues >> field(label = "This story is blocked by")
      blocksItems >> field(label = "This story blocks")
      desires
      
    }
    edit {
      x{
        button("To Bug") {
          let g = goal
          let d = "$benefit\n$additionalInfo"
          let r = convertTo(Bug)
          r.steps = g
          r.additionalInfo = g
        }
        button("To Tech") {
          let d = "$goal\n$benefit\n$additionalInfo"
          let r = convertTo(TechImprovement)
          r.description = d
        }

      }
    }
  }
  func type: IssueType = Story
}

entity ProductRole {
  background = "#545790"
  field title: String
  field superRoles: [ProductRole]? by subRoles {
    singular = "Super Role"
  }
  field subRoles: [ProductRole]? read by superRoles {
    singular = "Sub Role"
  }
  field description: Text?
  field features: [Feature]? read by role
  field stories: [UserStory]? read by role
  view form = nav {grid {
    title
    superRoles
    subRoles
    description
    features
    stories
  }}
}
