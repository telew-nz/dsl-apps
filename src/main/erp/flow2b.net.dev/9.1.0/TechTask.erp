entity TechTaskType {
  impl field title: String
  field usualEffort: Effort?
  field desc: Text? {
    label = "Description"
  }
}

enum TechTaskUrgency(rank: UDec[2]) {
  case Urgent(rank = 1.5) {
    color = "white"
    background = "#c00"
  }
  case Usual(rank = 0.3) {
    background = "#f99"
  }
  case NotUrgent(rank = 0.1) {
    background = "#efd"
  }
}

entity TechTask extends Issue {
  impl compute title {
    value = "$number $product $taskType"
  }
  ref field taskType: TechTaskType {
    available(Inline).for(Inline)
    update = {
      if (!effort) effort = new.usualEffort
    }
  }
  impl compute product: PersonalProject {
    value = _product.as[PersonalProject]!
    update = {
      _product = new
      this.backlog = new.backlog.alt(throw "Please create backlog for the product " + new)
    }
  }
  override func isBlocking(issue: Issue): Bool = issue.status.blocking || issue.status == Implemented
  field urgency: TechTaskUrgency = Usual
  impl func prefix: String = "T"
  field desc: Text? {label = "Description"}
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*urgency.rank)
  impl func itemRoles = [Tech, Stakeholder]
  override func activeRoles = if (status.active) [Role.Tech]
  impl view ref = y {
    title
    x {IssueType.Tech urgency effort blockStatus status}
  }
  impl view traitItem = grid(labels = None) {
    x {title >> field(stretch = 1) rank}
    row {product milestone space}
    x {IssueType.Tech urgency effort blockStatus status}
  } 
  impl func type: IssueType = Tech
  impl func descUpdated: Bool = updated(desc) || updated(title)  
  impl view form = nav {
    grid {
      number
      taskType
      
      row {
        product
        milestone >> field(title = name)
        backlog
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      effort
      urgency
      desc
      taskType?.desc >> field(editMode = AlwaysRead, label = "")
      
      blockedByIssues >> field(label = "This tech task is blocked by")
      blocksItems >> field(label = "This tech task blocks")
    }
    edit {
      x{
        button("To User Story") {
          let d = desc
          let r = convertTo(UserStory)
          r.goal =? d
        }
        button("To Bug") {
          let d = desc
          let r = convertTo(Bug)
          r.steps =? d
        }
      }
    }
  }
}