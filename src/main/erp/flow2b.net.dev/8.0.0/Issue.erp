enum IssueType {
  case Bug {
    background = "#f99"
  }
  case Story {
    background = "#efd"
  }
  case Tech {
    background = "#ed9"
  }
}

enum IssueStatus(active: Bool, dev: Bool, qa: Bool, po: Bool, backlog: Bool) {
  case Draft(active = false, dev = false, qa = false, po = false, backlog = false) {
    background = "#999"
  }
  case QAReview(active = true, dev = false, qa = true, po = false, backlog = false) {
    background = "#ffb57f"
  }
  case Revision(active = true, dev = false, qa = false, po = false, backlog = false) {
    background = "#ffb57f"
  }
  case Entered(active = true, dev = false, qa = false, po = true, backlog = true) {
    background = "#ed9"
  }
  case Approved(active = true, dev = true, qa = false, po = false, backlog = true) {
    background = "#ccf"
  }
  case InProgress(active = true, dev = true, qa = false, po = false, backlog = true) {
    background = "#8bf"
  }
  case Implemented(active = true, dev = false, qa = true, po = false, backlog = true) {
    background = "#dea"
  }
  case Failed(active = true, dev = true, qa = false, po = false, backlog = true) {
    background = "#f99"
  }
  case Verified(active = false, dev = false, qa = false, po = false, backlog = false) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false, dev = false, qa = false, po = false, backlog = false) {
    background = "#999"
  }
  case Duplicate(active = false, dev = false, qa = false, po = false, backlog = false) {
    background = "#999"
  }
  case Postponed(active = false, dev = false, qa = false, po = false, backlog = false) {
    background = "#ecd"
  }
}


trait Issue extends Blockable {
  background = "#545790"
  object field generator: Int?
  const system ref field n: Int =? increment(Issue.generator)
  compute number: String = prefix + n
  func prefix: String
  compute title {
    value = number + " " + name
    update = {this.name = new}
  }
  func statuses: [IssueStatus] = IssueStatus.all.filter(_ != QAReview)!.toSet
  ref field name: String {
    label = "Title (keep it short)" 
    isValid = name.length < 90
  }
  ref field product: DevProduct {
    default =? try? backlog?.oneProduct!
    from = DevProduct.all.filter(p => p.backlog == (try? backlog) || !(try? backlog))
    update = {
      this.backlog = new.backlog.alt(throw "Please create backlog for the product " + new)
    }
  }
  ref field backlog: Backlog {
    update = {
      this.product =? new.oneProduct
    }
  }
  ref field milestone: Milestone? from product.milestonesSelection by issues {
    init = {
      new.products = [product]
    }
  }
  func defaultStatus: IssueStatus = Entered
  ref field status: IssueStatus {
    default = defaultStatus
    from = statuses
    update = {
      owner = if (new == InProgress) Person.current else null
    } 
  }
  ref field feature: Feature? by stories from product.features.filter(status.canChoose)

  ref field effort: Effort?
  field blocksItems: [Blockable]? by blockedByIssues 
  field desires: [IDesire]? inline by issue
  
  field owner: Actor? = Person.current  
  
  func type: IssueType
  func active = status.active
  view ref = x (flow = false) {
    title blockStatus type effort status 
  }
  
  system ref stored compute rawRank: Dec[2]? = {
    let pr = {
      if (product.is[PersonalProject]) milestone?.rank.alt(product.rank/(product.activeMilestonesCount + 1)) 
      else product.rank
    }
    
    let r = (1.00 + desireRank)*product.rank*rankK
    if (let bi = blocksItems.filter(active)){
      let b = bi
        .groupBy(product)
        .agg(if (key == this.product) rawRank.max.max(r) else rawRank.max)
        .values.sum
      if (bi.exists(product == this.product)) b
      else b + r
    } else r
  }
  ref stored compute rank: Dec[2]? = {
    (rawRank*efforRank)
  }
  
  func desireRank: Dec[2]? = desires*.rank.sum
  
  func efforRank: Dec[2] = {
    if (let bi = blockedByActiveIssues) 0.9*effort?.rank.alt(1).min(bi*.effort*.rank.min.alt(1))
    else effort?.rank.alt(1)
  }
  func rankK: Dec[2] = 1.00
  func onSave = {
    owner?.join(this)
    if (let la = activities.last) {
      if (status == Revision 
          && Person.current == createdBy 
          && (la.comment || descUpdated) 
          && la.entities.first == this
          && !updated(status) 
         ) 
      {
        status = defaultStatus
      }
    }
    blocksItems*.touch
  }
  func descUpdated: Bool
  
  system stored compute sort: Dec[2] = {
    rank + (if (status == Approved || status == Entered) (if (milestone && milestone!.status.going) 1 else 0) else 2)*1000000
  }
  
  report Report {
    field backlog: Backlog? {auto} 
    
    field myDrafts: Bool
    field qa: Person? {
      label = "QA"
      from = Person.all.filter(is(QA))
    }
    field po: Person? {
      label = "PO"
      from = Person.all.filter(is(ProductOwner))
    }
    field dev: Person? {
      label = "Developer"
      from = Person.all.filter(is(Developer))
    }
    field stakeholder: Person? {
      label = "Stakeholder"
      from = Person.all.filter(is(Stakeholder))
    }
    field status: [IssueStatus]? {auto}
    view list = Issue.all.filter(
      (!qa || (status.qa && isFor(qa, QA))) &&
      (!po || (status.backlog && po!.ownedBacklogs.contains(backlog))) &&
      (!dev || (status.backlog && dev!.developingBacklogs.contains(backlog))) &&
      (!stakeholder || status.backlog) &&
      (!myDrafts || status == Draft && (owner == Person.current || createdBy == Person.current)))
    .sortBy(sort.desc)
  }
}
