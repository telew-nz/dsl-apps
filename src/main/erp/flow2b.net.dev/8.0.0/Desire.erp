inline trait IDesire {
  field issue: Issue by desires
  func rank: Dec[2]?
}
inline entity Desire extends IDesire {
  field actor: Actor by desires {
    available(Ref).with(rank)
  }
  field strength: DesireStrength
  field comment: Text?
  view form = grid (labels = None, margin = TopBottom) {
    x{actor issue  strength}
    comment
  }
  func rank: Dec[2]? = actor.rank * strength.rank
}
inline entity AllUsersDesire extends IDesire {
  field strength: DesireStrength
  field comment: Text
  view form = grid (labels = None, margin = TopBottom) {
    x{label("All Users") issue strength}
    comment
  }
  func rank: Dec[2]? = issue.product.usersRank * strength.rank
}


enum DesireStrength(rank: Dec[2]) {
  case VeryStrong(rank = 1.00) {background = "#f99"}
  case Strong(rank = 0.50) {background = "#ed9"}
  case Weak(rank = 0.20) {background = "#efd"}
}