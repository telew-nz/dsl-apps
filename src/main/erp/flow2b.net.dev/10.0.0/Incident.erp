entity Incident extends Issue {
  impl func requireEfforts = false
  impl compute title {
    value = "$number $product $subject"
  }
  field urls: [Url]?
  impl compute product: PersonalProject {
    value = _product.as[PersonalProject]!
    update = {
      _product = new
      this.backlog = new.backlog.alt(throw "Please create backlog for the product " + new)
    }
  }
  override func statuses: [IssueStatus] = IssueStatus.all.filter(_ != QAReview && _ != Approved && _ != Entered && _ != Postponed)!.toSet
  override func defaultStatus = Todo
  override func isBlocking(issue: Issue): Bool = issue.status.blocking || issue.status == Implemented
  field urgency: Urgency = Usual
  impl func prefix: String = "I"
  field subject: String?
  field desc: Text? {label = "Description"}
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank*urgency.rank)
  impl func itemRoles = [Support, Stakeholder]
  override func activeRoles = if (status.active) [Role.Support]
  impl view ref = y {
    title
    x {IssueType.Incident urgency effort blockStatus status}
  }
  impl view traitItem = grid(labels = None) {
    x {title >> field(stretch = 1) rank}
    row {product milestone space}
    x {IssueType.Incident urgency effort blockStatus status}
  } 
  impl func type: IssueType = Incident
  impl func descUpdated: Bool = updated(desc) || updated(subject)  
  impl view form = nav {
    grid {
      number
      subject
      urls
      row {
        product
        milestone >> field(title = name)
        backlog
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      urgency
      desc      
      blockedByIssues >> field(label = "This incident is blocked by")
      blocksItems >> field(label = "This incident blocks")
    }
  }
}