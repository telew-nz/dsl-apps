enum Severity(rank: UDec[2]) {
  case Critical(rank = 5.00) {color = "white" background = "#c00"}
  case Major(rank = 2.00) {background = "#f99"}
  case Minor(rank = 1.00) {background = "#efd"}
}

enum AffectedPercent(value: Dec[2], rank: UDec[2]) {
  case P1(value = 0.01, rank = 0.10) {label = "1%" background = "#efd"}
  case P5(value = 0.05, rank = 0.20) {label = "5%" background = "#dea"}
  case P10(value = 0.10, rank = 0.30) {label = "10%" background = "#dd9"}
  case P20(value = 0.20, rank = 0.50) {label = "20%" background = "#ed9"}
  case P40(value = 0.40, rank = 0.80) {label = "40%" background = "#ea9"}
  case P60(value = 0.60, rank = 0.90) {label = "60%" background = "#f99990"}
  case P100(value = 1.00, rank = 1.00) {label = "100%" background = "#f99"}
}

enum Problem(severity: Severity, description: Text) {
  case DataDamage(severity = Critical, description = "Data can be damaged or lost.") {
    color = "white" background = "#c00"
  }
  case Security(severity = Critical, description = "Security problem.") {
    color = "white" background = "#c00"
  }
  case SystemInstability(severity = Critical, description = "System is down or too slow for everybody") {
    color = "white" background = "#c00"
  }
  case CannotEnterData(severity = Critical, description = "Important data cannot be entered with no workaround.

For example Sales Order cannot be entered.") {
    color = "white", background = "#c00"
  }
  case CannotReadData(severity = Critical, description = "You cannot access an important non-computed item or list with no workaround.
If you cannot access a report, it's a Computation Error.

For example list of Sales Orders cannot be opened.") {
    color = "white", background = "#c00"
  }
  
  
  case Spelling(severity = Major, description = "Spelling mistake.") {background = "#f99"}
  case SystemError(severity = Major, description = "System error displayed when it should not.") {background = "#f99"}
  case MajorInconvenience (severity = Major, description = "It makes it hard to work but workaround exists.") {background = "#f99"}
  case ComputationError(severity = Major, description = "Incorrect computation result in a field, a report or in integration without data damage.

For example wrong data in a report or compute field.") {background = "#f99"}
  case DslCompilation(severity = Major, description = "Incorrect or misleading Dsl compilation errors or absense of necessary error.") {background = "#f99"}
  case Performance(severity = Major, description = "Something working too slow"){background = "#f99"}
  
  
  case UnexpectedBehaviour (severity = Minor, description = "It's unextpected how it's working") {background = "#efd"}
  case BadLook (severity = Minor, description = "Something looks not very good.") {background = "#efd"}
  case MinorInconvenience (severity = Minor, description = "It's not the best but it does not affect work too much.") {background = "#efd"}
  case Other(severity = Minor, description = "Something not in the list.") {background = "#efd"}
}

enum Stability {
  case Always {background = "#f99"}
  case Often {background = "#ffb16c"}
  case Sometimes {background = "#ed9"}
  case Once {background = "#efd", label = "Once Upon a Time"}
}

entity Bug extends DevIssue {
  compute severity: Severity = problem.severity
  ref field problem: Problem
  impl func itemPriority = if (status == QAReview) major else default
  field startingPoint: Text {
    label = "Starting point for steps (you can copy URL of the page where you are)"
  }
  field steps: Text {
    label = "Steps to reproduce (from beginning to end)"
  }
  field stability: Stability {
    label = "How often it can be reproduced (please try to reproduce again)"
  }
  field affected: AffectedPercent {
    default = P100
    label = "Affected percent of users of the app"
  }
  field actualResult: Text
  field expectedResult: Text 
  field additionalInfo: Text?
  
  impl func prefix: String = "B"
  impl func additionalDesire: IIDesire? = IntDesire(issue = this, rank = product.rank * severity.rank * (if (severity == Critical) 1.00 else affected.rank))
  
  impl func descUpdated: Bool = updated(actualResult) || updated(expectedResult) || updated(additionalInfo) || updated(title)
  impl func defaultStatus: IssueStatus = if (User.current!.is(QA)) Entered else QAReview
  override func statuses: [IssueStatus] = IssueStatus.all!.toSet
  impl event onSave = {
    if (created && severity == Critical) {
      User.all(ProductOwner).filter(ownedBacklogs.contains(this.backlog))*.join(this)
      User.all(Developer).filter(developingBacklogs.contains(this.backlog))*.join(this)
      joinAll(QA)
    }
  }
  impl view ref = y {
    x(margin = None){product title >> field(stretch = 1)}
    x{IssueType.Bug severity effort blockStatus status} 
  }
  impl view traitItem = grid(labels = None) {
    x {title >> field(stretch = 1) rank}
    row {product milestone space}
    x {IssueType.Bug severity effort blockStatus status}
  }
  impl view form = nav {
    grid {
      number
      name
      feature
      row {
        product
        milestone >> field(title = name)
        backlog
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      effort
      problem 
      problem.description >> field(label = "", editMode = AlwaysRead, fontSize = 0.75)
      
      affected
      startingPoint
      steps
      stability
      actualResult
      expectedResult
      blockedByIssues >> field(label = "This bug is blocked by")
      blocksItems >> field(label = "This bug blocks") 
      desires
      
    }
    edit {
      x{
        button("To User Story") {
          let s = steps
          let d = "$actualResult\n$expectedResult"
          let r = convertTo(UserStory)
          r.goal = s
          r.additionalInfo = d
        }
        button("To Tech Task") {
          let d = "$steps\n$actualResult\n$expectedResult"
          let r = convertTo(TechTask)
          r.desc = d
        }
        button("To Code Debt") {
          let d = "$steps\n$actualResult\n$expectedResult"
          let r = convertTo(CodeDebt)
          r.description = d
        }
      }
    }
  }
  impl func type: IssueType = Bug
}