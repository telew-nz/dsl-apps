enum TechSeverity(rank: Dec[2]) {
  case Critical(rank = 10.00) {
    color = "white"
    background = "#c00"
  }
  case Major(rank = 3.10) {
    background = "#f99"
  }
  case Minor(rank = 1.10) {
    background = "#efd"
  }
}

entity TechImprovement extends Issue {
  field severity: TechSeverity
  func prefix: String = "T"
  field description: Text
  func rankK: Dec[2] = severity.rank 
  view ref = y {
    product
    x{title blockStatus status} 
  }
  view traitItem = grid (width = 1.5) {
    title >> field(label = "")
    row {
      IssueType.Tech
      effort
      x(label = "Status"){blockStatus status}
      owner
      product 
      severity
      milestone
    }
  }
  func type: IssueType = Tech
  func descUpdated: Bool = updated(description) || updated(title)  
  view form = nav {
    grid {
      number
      name
      feature
      row {
        backlog
        product
        milestone
      }
      rank
      x(label = "Status"){blockStatus status >> field(compact = false)}
      owner
      effort
      severity
      description
      blockedByIssues >> field(label = "This tech is blocked by")
      blocksItems >> field(label = "This tech blocks")
      desires
      edit {
        x{
           button("To User Story") {
             let d = description
             let r = convertTo(UserStory)
             r.goal = d
           }
           button("To Bug") {
             let d = description
             let r = convertTo(Bug)
             r.steps = d
           }
         }
      }
    }
  }
}