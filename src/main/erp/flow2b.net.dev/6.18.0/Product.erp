entity ProductRole {
  background = "#545790"
  field title: String
  field description: Text?
  field features: [Feature]? read by role
  field stories: [UserStory]? read by role
}

enum ProductType {
  case App {
    background = "#ed9"
  }
  case Project {
    background = "#efd"
  }
}

trait DevProduct { 
  background = "#545790"
  field title: String
  field description: Text?
  func type: ProductType
  field sandboxWorkspace: String?
  
  ref field milestones: [Milestone]? read by product {
    available(All).for(All)
  }
  func milestonesSelection: [Milestone]? = milestones.sortBy(if (status == Closed) 1 else 0, title)
  ref field features: [Feature]? read by products
  ref compute activeMilestonesCount = milestones.filter(status.rankCount).count
  field docs: [Article]? from Article.all.filter{parentArticle.isEmpty}
  field packageDocs: [DocPackage]? by product
  ref field backlog: Backlog? by products { 
    update = {
      if (let newBacklog = new) issues.foreach(backlog = newBacklog)
    }
  }
  ref field roadmap: Roadmap? by products { 
    update = {
      if (let newRoadmap = new) features.foreach(roadmap = newRoadmap)
    }
  }
  system field issues: [Issue]? read by product
  func canRead: Bool
  func canEdit: Bool
  func rank: Dec[2] = 1.00
  func onSave = {
    if (updated(backlog)) issues.foreach(backlog = this.backlog!)
    if (updated(roadmap)) features.foreach(roadmap = this.roadmap!)
  }
}


entity UniversalApp extends DevProduct {
  func isTangible = false
  func type: ProductType = ProductType.App
  field personalProjects: [PersonalProject]? by universalApps
  view traitItem = row{type, title}
  func subProducts = [this]
  field rank: Dec[2] = 1.00
  view form = nav{grid (labels = Right) {
    title
    rank
    backlog
    roadmap
    sandboxWorkspace
    milestones >> list {
      x(flow = false){status title}
    }
    features 
    docs
    packageDocs
    description
  }}
  func canRead: Bool = true
  func canEdit: Bool = false
}


