enum IssueType {
  case Bug {
    background = "#f99"
  }
  case Story {
    background = "#efd"
  }
  case Tech {
    background = "#ed9"
  }
}

enum IssueStatus(active: Bool, dev: Bool, qa: Bool, po: Bool, backlog: Bool, blocking: Bool) {
  case Draft(active = false, dev = false, qa = false, po = false, backlog = false, blocking = false) {
    background = "#999"
  }
  case QAReview(active = true, dev = false, qa = true, po = false, backlog = false, blocking = true) {
    background = "#ffb57f"
  }
  case Revision(active = true, dev = false, qa = false, po = false, backlog = false, blocking = true) {
    background = "#ffb57f"
  }
  case Entered(active = true, dev = false, qa = false, po = true, backlog = true, blocking = true) {
    background = "#ed9"
  }
  case Approved(active = true, dev = true, qa = false, po = false, backlog = true, blocking = true) {
    background = "#ccf"
  }
  case InProgress(active = true, dev = true, qa = false, po = false, backlog = true, blocking = true) {
    background = "#8bf"
  }
  case Implemented(active = true, dev = false, qa = true, po = false, backlog = true, blocking = false) {
    background = "#dea"
  }
  case Failed(active = true, dev = true, qa = false, po = false, backlog = true, blocking = true) {
    background = "#f99"
  }
  case Verified(active = false, dev = false, qa = false, po = false, backlog = false, blocking = false) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false, dev = false, qa = false, po = false, backlog = false, blocking = false) {
    background = "#999"
  }
  case Duplicate(active = false, dev = false, qa = false, po = false, backlog = false, blocking = false) {
    background = "#999"
  }
  case Postponed(active = false, dev = false, qa = false, po = false, backlog = false, blocking = true) {
    background = "#ecd"
  }
}


trait Issue extends Blockable {
  background = "#545790"
  object field generator: Int?
  const system ref field n: Int =? increment(Issue.generator)
  compute number: String = prefix + n
  func prefix: String
  compute title {
    value = number + " " + name
    update = {this.name = new}
  }
  func statuses: [IssueStatus] = IssueStatus.all.filter(_ != QAReview)!.toSet
  ref field name: String {
    label = "Title (keep it short)" 
    validate = if (name.length >= 90) "Title should be shorter than 90 symbols"
  }
  ref field product: DevProduct {
    default =? try? backlog?.oneProduct!
    from = DevProduct.all.filter(p => p.backlog == (try? backlog) || !(try? backlog))
    update = {
      this.backlog = new.backlog.alt(throw "Please create backlog for the product " + new)
    }
  }
  func products = [product]
  ref field backlog: Backlog {
    update = {
      this.product =? new.oneProduct
    }
  }
  ref field milestone: Milestone? from product.milestonesSelection by issues {
    init = {
      new.products = [product]
    }
  }
  func defaultStatus: IssueStatus = Entered
  ref field status: IssueStatus {
    default = defaultStatus
    from = statuses
    update = {
      owner = if (new == InProgress) Person.current else null
    } 
  }
  ref field feature: Feature? by stories from product.features.filter(status.canChoose)

  ref field effort: Effort? {
    label = "Effort for developers"
    validate = if (status.dev && !effort) "Efforts should be selected for the statues $status"
  }
  field blocksItems: [Blockable]? by blockedByIssues 
  field desires: [IDesire]? inline by issue 
  
  field owner: Actor? = Person.current  
  func isForDev: Bool = status.dev
  func isForPO = status.po
  func type: IssueType
  func active = status.active
  view ref = x (flow = false) {
    title blockStatus type effort status 
  }
  
  func activeBlocksItems: [Issue]? = blocksItems.filter(_.isForDev)*.as[Issue]
  func allDesires(er: Dec[2]): [RankedDesire]? = {
    (desires + additionalDesire).map(d => RankedDesire(desire = d, rank = d.rank*er)) + 
      activeBlocksItems.flatMap(bi => bi.allDesires(bi.effort?.rank.alt(1.00).min(er)))
  }
  func allProducts: [DevProduct] = activeBlocksItems*.allProducts + product
  func allMilestones(er: Dec[2]): [RankedMilestone]? = {
    (milestone.toSeq + blocksItems.filter(_.isForDev)*.as[Milestone])
      .map(m => RankedMilestone(milestone = m, rank = m.rank*er)) 
      + activeBlocksItems.flatMap(bi => bi.allMilestones(bi.effort?.rank.alt(1.00).min(er)))
  }

  system ref stored compute rank: Dec[2] = {
    let er = efforRank
    let products = allProducts.distinct
    let desires = allDesires(er)
    let milestones = allMilestones(er)
    (products*.rank.sum*er*0.05
      + desires.filter(desire.is[Desire]).groupBy(desire.as[Desire]!.actor).agg(_*.rank.max).values.sum
      + desires.filter(!desire.is[Desire]).groupBy(desire.issue.product).agg(_*.rank.max).values.sum
      + milestones.groupBy(milestone).agg(if(key.products.contains(this.product)) (_*.rank.max - this.product.rank).max(0.00) else _*.rank.max).values.sum
      )
  }
  
  
  func additionalDesire: IIDesire? = null
  
  func efforRank: Dec[2] = {
    if (let bi = blockedByActiveIssues) 0.90*effort?.rank.alt(1.00).min(bi*.efforRank.min)
    else effort?.rank.alt(1.00)
  }
  //func productEfforRank(p: DevProduct): Dec[2] = if(this.product == p) effort?.rank.alt(1.00).max(1.00) else 1.00
  
  event onSave = {
    owner?.join(this)
    if (let la = activities.last) {
      if (status == Revision 
          && Person.current == createdBy 
          && descUpdated
          && la.entities.first == this
          && !updated(status) 
         ) 
      {
        status = defaultStatus
      }
    }
    blocksItems*.touch
    blockedByIssues*.touch
    checkBlockedIssues([])
  }
  func checkBlockedIssues(issues: [Issue]?): Void = { 
    if (issues.contains(this)) {
      throw "Cycle in blocks for ${this} with $issues"
    }
    if (let bi = blocksItems*.as[Issue]) {
      let issues1 = issues + this
      bi.foreach(_.checkBlockedIssues(issues1))
    }
  }
  func descUpdated: Bool
  
  system stored compute sort: Dec[2] = {
    rank + (if (status == Approved || status == Entered) 0 else 2)*1000000
  }
  
  report Report {
    field backlog: Backlog? {auto} 
    
    field myDrafts: Bool
    field qa: Person? {
      label = "QA"
      from = Person.all.filter(is(QA))
    }
    field po: Person? {
      label = "PO"
      from = Person.all.filter(is(ProductOwner))
    }
    field dev: Person? {
      label = "Developer"
      from = Person.all.filter(is(Developer))
    }
    field stakeholder: Person? {
      label = "Stakeholder"
      from = Person.all.filter(is(Stakeholder))
    }
    field status: [IssueStatus]? {auto}
    view list = Issue.all.filter(
      (!qa || (status.qa && isFor(qa, QA))) &&
      (!po || (isForPO && po!.ownedBacklogs.contains(backlog))) &&
      (!dev || (isForDev && dev!.developingBacklogs.contains(backlog))) &&
      (!stakeholder || status.backlog) &&
      (!myDrafts || status == Draft && (owner == Person.current || createdBy == Person.current)))
    .sortBy(sort.desc, number)
  }
}

class RankedDesire {
  field desire: IIDesire
  field rank: Dec[2]
}

class RankedMilestone {
  field milestone: Milestone
  field rank: Dec[2]
}