class RetrievePaymentsJob extends SystemJob with IXeroPaymentSaver {
  impl field service: XeroIntegration
  
  impl func do = {
    // Xero Payments api endpoint doesn't support paging
    let res <- service.https("Payments").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]
    let cache = XeroCache(service = service)
    rb.payments.map { p =>
      savePayment(cache, p)
    }
  }
}

class RetrievePaymentJob extends SystemJob with IXeroPaymentSaver {
  impl field service: XeroIntegration
  field paymentID: String
  
  impl func do = {
    let res <- service.https("Payments/$paymentID").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]

    let cache = XeroCache(service = service)
    if(let p = rb.payments.first) {
      savePayment(cache, p)
    }
  }

}

class RetrieveInvoicePaymentsJob extends SystemJob {
  impl field service: XeroIntegration
  field invoiceID: String
  
  impl func do = {
    let res <- service.https("Invoices/$invoiceID").get

    let invoices = res.body!.parseJson[XeroInvoicesResponse].invoices
    
    invoices*.payments.map { p =>
      if(let pID = p.paymentID) RetrievePaymentJob(service = this.service, paymentID = pID).do
    }.allCompleted
  }
}

interface IXeroPaymentSaver {
  func service: XeroIntegration

  back func savePayment(cache: XeroCache, xeroPayment: XeroPayment): Future[Payment?] = {
    if (!service.setup.pullInvoicesFrom || xeroPayment.date! >= service.setup.pullInvoicesFrom!)
    if (let pay = service.findExtId(xeroPayment.paymentID, _.as[Payment])) {
      pay
    } else {
      let inv = service.findExtId(xeroPayment.invoice!.invoiceID, _.as[Order])
      // if inv is empty we will use contact as payer/payee
      let con = service.findExtId(xeroPayment.invoice?.contact?.contactID, _.as[LegalEntity])
      
      if(!inv && !con) throw "No invoice with id = ${xeroPayment.invoice!.invoiceID} and no contact with id = ${xeroPayment.invoice?.contact?.contactID}"

      let acc <- service.finAccount(cache, xeroPayment.xeroAccount!)
      let pay = inv?.payments.find { p =>
          !p.extId(service) && 
          //"p.date == xeroPayment.date! &&" is bad solution because date in Xero better than our
          p.account == acc &&
          ((p.amount - xeroPayment.amount!).abs < 1) // for precision issues 
        }
        .alt(
          if(xeroPayment.paymentType == accRecPayment) { 
            IncomingPayment(
              payer = con,
              source = inv,
              account = acc,
              amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
            )
          } else {
            OutgoingPayment(
              payee = con,
              source = inv, 
              account = acc,
              amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
            )
          }
        )

      pay.date = xeroPayment.date!
      pay.updateExtId(service, xeroPayment.paymentID)
      pay.save
    }
  }
}