interface IRetrieveInvoicesJob extends SystemJob {
  field service: XeroIntegration
  
  func updateRequest(req: HttpRequest): HttpRequest
  
  func filterFunc(xi: XeroInvoice): Bool = true

  func do = {
    nextPage(1, [])
  }
  
  back func nextPage(number: UInt, accInvoices: [XeroInvoice]?): Future[Any] = {
    var req = service.https("Invoices").param("page", number)

    let res <- updateRequest(req).get
    
    let rb = res.body!.parseJson[XeroInvoicesResponse]
    
    let invs = rb.invoices.filter(filterFunc(_))
    
    if(rb.invoices.count > 0) nextPage(number + 1, accInvoices + invs) else processInvoices(accInvoices + invs, 0)
  }


  back func processInvoices(invoices: [XeroInvoice]?, page: Int?): Future[Any] = {
    if(!invoices.isEmpty){
      SaveInvoicesJob(service = this.service, invoices = invoices.first(5), page = page).run()
      processInvoices(invoices.drop(5), page + 1)
    }
  }
}

class RetrieveInvoicesJob extends IRetrieveInvoicesJob {
  field dateFrom: Date?

  func updateRequest(req: HttpRequest) = {
    if(let dateFrom) req.header("If-Modified-Since", dateFrom.format("yyyy-MM-dd"))
    else req
  }
}


class RetrieveAllUnpaidInvoicesJob extends IRetrieveInvoicesJob {
  func filterFunc(xi: XeroInvoice): Bool = {
  	xi.status != paid
  }
  
  func updateRequest(req: HttpRequest) = {
    req.param("Statuses", "AUTHORISED,SUBMITTED") // ???: SUBMITTED?
  }
}


class SaveInvoicesJob extends SystemJob {
  field service: XeroIntegration
  field invoices: [XeroInvoice]?
  field page: Int?
  
  back func error(error: Any): JobError = {
    if(error.as[HttpResponse]?.code == 503){
      "Error repeat $repeatCount $error".log
      RepeatJob(times = 4, on = Date.now + 1_minute)
    } else ReportError(error = error)
  }
  
  func do = {   
  	invoices.map { i =>
      if(i.status != voided) {
        // invoice
        let _ <- saveInvoice(i)

        // credit notes
        // ???

        // payments
        i.payments.map { p =>
          if(let pID = p.paymentID) RetrievePaymentJob(service = this.service, paymentID = pID).do
        }.allCompleted
      }
    }.allCompleted
  }
  
  
  back func saveInvoice(xi: XeroInvoice): Future[Any] = {
    if(!service.findExtId(xi.invoiceID, _.as[Order])){
      let itms <- xi.lineItems.map { li =>
        let ires <- service.https("Items/$(li.itemCode)").get // ERROR: when itemCode contains spaces
        let itm = ires.body!.parseJson[XeroItemsResponse].items.first
        let prod = RetrieveItemsJob(service = this.service).saveItem(itm)!

        (item = itm, product = prod, lineItem = li)
      }.allCompleted

      let invCounterparty = service.findExtId(xi.contact!.contactID, _.as[LegalEntity])!

      if((xi.type == accRec) && !invCounterparty.vendor) {
        invCounterparty.makeVendor()
        invCounterparty.vendor!.gstStatus = Registered
      }
      // invCounterparty.log
      // itms.map(item.itemID, product.title)*.log

      let ord = if(xi.type == accRec) SalesOrder(
        customer = invCounterparty.makeCustomer
        vendor = service.legalEntity
      )else PurchaseOrder(
        customer = service.legalEntity
        vendor = invCounterparty.makeVendor
      )
      
      ord.save()
      // ord.log

      if(xi.type == accRec) itms.map { itm =>
        let si = SalesItem (
          order = ord.as[SalesOrder]!
          deliveryItem = DeliveryItem( 
            product = itm.product.as[ISubProduct]!,
            unit = itm.product.unit,
            qty = itm.lineItem.quantity
          )
          amountWithGst = itm.lineItem.unitAmount * itm.lineItem.quantity
          gstRate = itm.lineItem.taxType?.rate.as[UPercent[2]]
        )
        si.itemDesc = itm.lineItem.description
        si.save         
      } else itms.map { itm =>
        let pi = PurchaseItem (
          order = ord.as[PurchaseOrder]!
          deliveryItem = DeliveryItem(
            product = itm.product.as[ISubProduct]!,
            unit = itm.product.unit,
            qty = itm.lineItem.quantity
          )
          amountWithGst = itm.lineItem.unitAmount * itm.lineItem.quantity
          gstRate = itm.lineItem.taxType?.rate.as[UPercent[2]]
        )
        pi.itemDesc = itm.lineItem.description
        pi.save
      }
      
      ord.updateExtId(service, xi.invoiceID)
      if (xi.status == authorised) {
        let inv = ord.createInvoice(Date.now)
        inv.dueDate = xi.dueDate
        inv.save()
      }
    }
  }
}