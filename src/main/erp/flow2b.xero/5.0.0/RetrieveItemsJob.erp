class RetrieveItemsJob extends SystemJob {
  field service: XeroIntegration
  
  func do = {
    // Xero Items api endpoint doesn't support paging
    let res <- service.https("Items").get
    let rb = res.body!.parseJson[XeroItemsResponse]

    Stocktake(
      store = service.store,
      items = rb.items.map { itm =>
        let p: IBaseProduct? = saveItem(itm)
        (p, itm)
      }.filter { 
        _.p.as[IProduct] 
      }.map {
        StocktakeItem(
          product = _.p.as[IProduct]!,
          unit = _.p!.unit,
          qty = _.itm.quantityOnHand,
          differencePrice = _.itm.totalCostPool
        )
      }
    ).save
  }


  back func saveItem(xeroItem: XeroItem) = {    
    if(let prod = service.findExtId(xeroItem.itemID, _.as[IBaseProduct])
                  .or(service.rentIdSrc.findExtId(xeroItem.itemID, _.as[IBaseProduct]))
       			  .or(IBaseProduct.all.find(_.title == xeroItem.name)) // less duplicates
                  .or((if(xeroItem.isTrackedAsInventory || service.isRentalCompany) Good(
                         title = xeroItem.name!
                         description = xeroItem.description.or(xeroItem.purchaseDescription)
                       ) else  Service(
                         title = xeroItem.name!
                         description = xeroItem.description.or(xeroItem.purchaseDescription)
                       )).as[IBaseProduct]
                       // Strange: It doesn't work without 'as'. Also it doesn't work with 'alt' instead of 'or'.
                     )) { 

      if(let sp = xeroItem.salesDetails?.unitPrice) {
        prod.as[IBaseProduct]*.updateSalesPrice(service.legalEntity, SalesPrice(regular = sp, current = sp))
      }
      
      if(!xeroItem.isTrackedAsInventory && service.setup.isRentalCompany) {
        prod.status = NotForSale
        prod.rentStatus = ForRent
        prod.updateExtId(service.rentIdSrc, xeroItem.itemID)
        prod.updateExtCode(service.rentIdSrc, xeroItem.code)
      } else {
        prod.status = selectProductStatus(xeroItem)
        prod.updateExtId(service, xeroItem.itemID)
        prod.updateExtCode(service, xeroItem.code)
      }
      
      prod.refNum = xeroItem.code // instead of sku
      prod.save()
      prod
    }
  }
  
  func selectProductStatus(xi: XeroItem): ProductStatus = {
  	if(xi.isSold){
      if (xi.isPurchased) ForSale else ForClearance
    } else {
      if (xi.isPurchased) NotForSale else Obsolete
    }
  }
} 

class RetrieveMatchedItemsJob extends SystemJob {
  field service: XeroIntegration
  
  func do = {
    // Xero Items api endpoint doesn't support paging
    let res <- service.https("Items").get
    let rb = res.body!.parseJson[XeroItemsResponse]

	rb.items.map { itm =>
      if(!service.findExtId(itm.itemID, _.as[IBaseProduct]))
      if(let prod = IBaseProduct.all.find(_.title == itm.name)) {
        prod.updateExtId(service, itm.itemID)
        prod.updateExtCode(service, itm.code)
        prod.save()
      }
    }
  }
}