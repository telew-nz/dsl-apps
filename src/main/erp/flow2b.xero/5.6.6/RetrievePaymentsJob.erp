class RetrievePaymentsJob extends SystemJob with IXeroPaymentSaver {
  field service: XeroIntegration
  
  func do = {
    // Xero Payments api endpoint doesn't support paging
    let res <- service.https("Payments").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]

    rb.payments.map { p =>
      savePayment(p)
    }
  }
}

class RetrievePaymentJob extends SystemJob with IXeroPaymentSaver {
  field service: XeroIntegration
  field paymentID: String
  
  func do = {
    let res <- service.https("Payments/$paymentID").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]

    if(let p = rb.payments.first) {
      savePayment(p)
    }
  }

}

class RetrieveInvoicePaymentsJob extends SystemJob {
  field service: XeroIntegration
  field invoiceID: String
  
  func do = {
    let res <- service.https("Invoices/$invoiceID").get
    
    let rb = res.body!.parseJson[XeroInvoicesResponse]

    rb.invoices.filter {
      i => service.findExtId(i.invoiceID, _.as[Invoice])
    }*.payments.map { p =>
      if(let pID = p.paymentID) RetrievePaymentJob(service = this.service, paymentID = pID).do
    }.allCompleted
  }
}

interface IXeroPaymentSaver {
  func service: XeroIntegration

  back func savePayment(xeroPayment: XeroPayment): Payment = {
    //xeroPayment.log("payment")
    //xeroPayment.amount.log("pay amount")
    //xeroPayment.date.log("pay date")
    if (let pay = service.findExtId(xeroPayment.paymentID, _.as[Payment])) {
      pay
    } else {
      let inv = service.findExtId(xeroPayment.invoice?.invoiceID, _.as[Order]).alt(throw "Retreive XeroPayment error: There is no BankAccount with extId = ${xeroPayment.xeroAccount?.accountID}")
      let acc = service.findExtId(xeroPayment.xeroAccount?.accountID, _.as[BankAccount]).alt(throw "Retreive XeroPayment error: There is no Invoice with extId = ${xeroPayment.invoice?.invoiceID}")
      let pay = inv.payments.find { p =>
          !p.extId(service) && 
          //"p.date == xeroPayment.date! &&" is bad solution because date in Xero better than our
          p.account == acc &&
          ((p.amount - xeroPayment.amount!).abs < 1) // for precision issues 
        }
        .alt(
          if(xeroPayment.paymentType == accRecPayment) { 
            IncomingPayment(
              source = inv,
              account = acc,
              amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
            )
          } else {
            OutgoingPayment(
              source = inv, 
              account = acc,
              amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
            )
          }
        )

      pay.date = xeroPayment.date!
      pay.updateExtId(service, xeroPayment.paymentID)
      pay.save
    }
  }
}