interface ISystemJobsBatch {
  func state: JobsBatchState
  func startedJobsCount: Int?
  func finishedJobsCount: Int? = 0
  
  func jobFinished: Void
  func jobError: Void

  back func enqueue: Void
  back func enqueueAnotherJobFirst (job: SystemJob): Void
  back func reset(newJobs: [SystemJob]?): Void
}

trait SystemJobsBatch extends Entity with ISystemJobsBatch {
  impl func title = "SystemJobsBatch" // TODO:...
  field jobs: [SystemJob]? = []
  
  impl field state: JobsBatchState = NotStarted
  impl field startedJobsCount: Int?
  impl field finishedJobsCount: Int? = 0

  
  impl func enqueue = {
    if(jobs.isEmpty) return {}

    startedJobsCount = jobs.count
    finishedJobsCount = 0
    state = Started
    save
    jobs*.inBatch(this)*.enqueue
  }
  
  impl func enqueueAnotherJobFirst (job: SystemJob) = {
  	if (state == Error) return {}

    startedJobsCount += 1
    state = Started
    save

    job.inBatch(this).enqueueFirst
  }
  
  impl func jobFinished = {
    finishedJobsCount += 1
    if(finishedJobsCount == startedJobsCount && state == Started) state = Finished
    save
  }
  
  impl func jobError = {
    state = Error
    save
  }
  
  impl func reset(newJobs: [SystemJob]?) = {
    startedJobsCount = 0
    finishedJobsCount = 0
    state = NotStarted
    jobs = newJobs
    save
  }
}

enum JobsBatchState {
  case NotStarted
  case Started {background = "#ed9"}
  case Finished {color = "white" background = "#090"}
  case Error {background = "#f99"}
}

interface BatchedSystemJob extends SystemJob {
  back field batch: SystemJobsBatch?
  
  back func doBatched: Future[Any]
  back func batchedError(error: Any): JobError {
    default value = service.error(this, error)
  }
  
  back func setBatch(b: SystemJobsBatch): this = {
  	batch = b
    this
  }
  
  back func enqueueSubJob(job: SystemJob) = {
    if(let b = batch){
      b.enqueueAnotherJobFirst(job)
    } else {
      job.enqueueFirst
    }
  }
  
  impl func do = {
  	let res <- doBatched
    batch?.jobFinished
    res
  }
  
  impl func error(error: Any): JobError = {
    let err = batchedError(error)
    if(err.is[ReportError]) batch?.jobError
    err
  }

}

back class BatchedSystemJobWrapper extends BatchedSystemJob {
  field systemJob: SystemJob
  
  impl func toString = systemJob.toString + " (Batched)"
  
  impl func service = systemJob.service 
  impl func doBatched = systemJob.do
  impl func batchedError(error: Any) = systemJob.error(error)
  
  impl func dependsOnRegisters = systemJob.dependsOnRegisters
  override func jobActive = systemJob.jobActive
}

extend interface SystemJob {
  back func inBatch(b: SystemJobsBatch): BatchedSystemJob = {
  	this.as[BatchedSystemJob]?.setBatch(b).alt(BatchedSystemJobWrapper(systemJob = this, batch = b))
  }
}
