interface XeroBaseResponse {
  field id: String
  field status: String
  field providerName: String
  field dateTimeUTC: Date {jsonMap = XeroDate}
}

object XeroDate extends Mapper[Date, String] {
  
  func apply(v: Date): String = "/Date(${v.epoch.withoutUnit.unformattedString})/"
  
  
  func unapply(v: String): Date = {
    let numbStr = v.dropPrefix("/Date(").dropSuffix(")/")
    
    let sign: String = if(numbStr.contains("-")) "-" else "+"
    let mult: Int = (sign + "1").toNumber!
    let numbs = numbStr.split(sign)
    let numBase: Number = numbs.first.toNumber!
    let numOffset: String? = numbs.drop(1).first
    let offsetHours   = (numOffset[ ..2]).alt("0").toNumber.as[Duration[hour]] * mult
    let offsetMinutes = (numOffset[3..4]).alt("0").toNumber.as[Duration[minute]] * mult
    
    Date.fromEpoch(numBase).add(offsetHours).add(offsetMinutes)
  }
}

object XeroDateOpt extends Mapper[Date?, String?] {
  func apply(v: Date?): String? = if(let v) XeroDate.apply(v) 
  
  func unapply(v: String?): Date? = if(let v) XeroDate.unapply(v) 
}

class XeroContactsResponse extends XeroBaseResponse {
  externalCapitalizeFieldNames = true
  
  field contacts: [XeroContact]
}
                                                    
class XeroInvoicesResponse extends XeroBaseResponse {
  externalCapitalizeFieldNames = true
  
  field invoices: [XeroInvoice]
}