class XeroBankTransaction{
  extFieldNaming = UpperCamelCase 

  field bankTransactionID: String?
  field type: XeroBankTransactionType? {
    extMap[String?](apply = _?.id, unapply = v => XeroBankTransactionType.all.find(id == v))
  }
  field contact: XeroContact?
  field lineItems: [XeroBankTransactionLineItem]?
  field bankAccount: XeroBankAccount?
  field isReconciled: Bool?
  field date: Date? {extMap = XeroDateOpt}
  field reference: String?
  field currencyCode: Currency?
  field currencyRate: Dec?
  field url: Url?
  field status: XeroBankTransactionStatus? {
    extMap[String?](apply = _?.id, unapply = v => XeroBankTransactionStatus.all.find(id == v))
  }
  field lineAmountTypes: XeroLineAmountTypes {
    extMap[String?](apply = _.id, unapply = v => XeroLineAmountTypes.all.find(id == v)!)
  }
  field subTotal: Money?
  field totalTax: Money?
  field total: Money?
  field prepaymentID: String?
  field overpaymentID: String?
  field updatedDateUTC: Date? {extMap = XeroDateOpt}
  field hasAttachments: Bool?
  
  compute isNegative: Bool = (total! < 0)
  compute finalType: XeroBankTransactionType = if((type == receive &&  isNegative ) || 
                                                 (type == spend   && !isNegative)) spend else receive
  func totalMoney(currency: Currency): UMoney = {
    let t0 = total!.as[Money[currency]]
    if(isNegative) (-t0).positive! else t0.positive!
  }
}


enum XeroBankTransactionType (id: String) {
  case receive (id = "RECEIVE")
  case receiveOverpayment (id = "RECEIVE-OVERPAYMENT")
  case receivePrepayment (id = "RECEIVE-PREPAYMENT")
  case spend (id = "SPEND")
  case spendOverpayment (id = "SPEND-OVERPAYMENT")
  case spendPrepayment (id = "SPEND-PREPAYMENT")
  // The following values are only supported via the GET method at the moment
  case receiveTransfer (id = "RECEIVE-TRANSFER")
  case spendTransfer (id = "SPEND-TRANSFER")
}

class XeroBankTransactionLineItem {
  extFieldNaming = UpperCamelCase 
  
  field itemCode: String?
  field accountCode: String?
  field taxType: XeroTaxType? {
    extMap[String?](apply = _?.id, unapply = v => XeroTaxType.all.find(id == v))
  }
  field taxAmount: Money?
  field description: String?
  field quantity: Qty?
  field unitAmount: Money?
  field lineAmount: Money?

  // field tracking: [...]?
  func fullTotal(lineAmountTypes: XeroLineAmountTypes): Money? = {
    if (lineAmountTypes == Exclusive) {
      lineAmount + taxAmount
    } else {
      lineAmount
    }
  }
}

class XeroBankAccount {
  extFieldNaming = UpperCamelCase 

  field code: String?
  field accountID: String?
}

enum XeroBankTransactionStatus (id: String) {
  case authorised (id = "AUTHORISED")
  case deleted (id = "DELETED")
}