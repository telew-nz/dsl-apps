class XeroBankTransfer {
  extFieldNaming = UpperCamelCase 
  
  field bankTransferID: String
  field date: Date? {extMap = XeroDateOpt}
  
  field fromBankAccount: XeroBankAccount?
  field toBankAccount: XeroBankAccount?
  field amount: Money?
}

class RetrieveBankTransfersJob extends SystemJob {
  impl field service: XeroIntegration
  
  impl field errorAction = IncrementCounter
  
  impl func do = {
    // Xero Bank Transfers api endpoint doesn't support paging
    let res <- service.https("BankTransfers").get
    
    let rb = res.body!.parseJson[XeroBankTransfersResponse]
    
    let dateFrom = service.setup.pullInvoicesFrom
    let _ <- rb.bankTransfers.filter{tr => 
      (!dateFrom || (tr.date >= dateFrom)) && tr.amount.positive
    }.oneByOne { t =>
      saveBankTranser(t)
    }
  }
  
  
  back func saveBankTranser(xeroTran: XeroBankTransfer): Future[CashTransfer] = {
    //xeroTransaction.json.log("transaction")
    if(let pay = service.findExtId(xeroTran.bankTransferID, _.as[CashTransfer])) {
      pay
    } else {
      let accFrom = service.findExtId(xeroTran.fromBankAccount?.accountID, _.as[BankAccount]).alt(throw "Retreive BankTransfersJob error: There is no BankAccount with extId = ${xeroTran.fromBankAccount?.accountID}")
      let accTo = service.findExtId(xeroTran.toBankAccount?.accountID, _.as[BankAccount]).alt(throw "Retreive BankTransfersJob error: There is no BankAccount with extId = ${xeroTran.toBankAccount?.accountID}")
      
      let ct = CashTransfer(
        dateOut = xeroTran.date!
        dateIn = xeroTran.date!
        from = accFrom
        to = accTo
        outcome = xeroTran.amount.positive!
        income = xeroTran.amount.positive!
      ).save
      ct.updateExtId(service, xeroTran.bankTransferID)
      ct
    }    
  }
}