class RetrieveAssetsJob extends SystemJob {
  field service: XeroIntegration
  field pageNumber: UInt = 1
  field accAssetIds: [String]? = []
  
  func do = {
    let res <- service.assetsHttps("Assets").param("status", "REGISTERED").param("page", pageNumber).get // status=Registered
    let rb = res.body!.parseJson[XeroAssetsResponse]

    let allAssetIds = accAssetIds + rb.items*.assetId

    if(rb.pagination.pageCount > pageNumber) {
      RetrieveAssetsJob(
        service = this.service,
        pageNumber = this.pageNumber + 1,
        accAssetIds = allAssetIds
      ).run()
    } else {
      allAssetIds.map { aId =>
        RetrieveOneAssetJob(service = this.service, assetId = aId).run()
      }
    }
  } 
}


class RetrieveOneAssetJob extends SystemJob {
  field service: XeroIntegration
  field assetId: String
  
  func do = {
    let res <- service.assetsHttps("Assets/$assetId").get
    let xeroAsset = res.body!.parseJson[XeroAsset]
    saveAsset(xeroAsset)
  }
  
  back func saveAsset(xeroAsset: XeroAsset) = {
    if(!service.findExtId(xeroAsset.assetId, _.as[ProductItem])) {
      let existingGood = Good.all.find(title == xeroAsset.assetName && status == NotForSale).result.get
      let product = existingGood.alt(Good(
        title = xeroAsset.assetName! 
//        refNum = xeroAsset.assetNumber
        status = NotForSale
      ))

      if(let ds = xeroAsset.bookDepreciationSettings) {
        if(ds.depreciationMethod == StraightLine) {
          product.assetType = AssetType(
            depreciation = StraightLine(
              rate = ds.depreciationRate!
            )
          )
        }else if([XeroDepreciationMethod.DiminishingValue100,
                  XeroDepreciationMethod.DiminishingValue150,
                  XeroDepreciationMethod.DiminishingValue200]
                 .contains(ds.depreciationMethod!)){
          product.assetType = AssetType(
            depreciation = DiminishingValue(
              rate = ds.depreciationRate!
            )
          )
        } 
      }
      
      if(xeroAsset.serialNumber) product.trackItems = Sometimes
      
      product.save
      
      let productItem = ProductItem(
        product = product
        serialNum = xeroAsset.serialNumber
        refNum = xeroAsset.assetNumber
      )
      productItem.save
      productItem.updateExtId(service, xeroAsset.assetId)
      
      
      let writeUp = InventoryWriteUp(
        product = product
        store = service.store
        stockType = Asset
        productItems = [productItem] // ???
        date = xeroAsset.bookDepreciationDetail?.depreciationStartDate.alt(xeroAsset.purchaseDate!)
        price = xeroAsset.purchasePrice! // ???
      ) 
      writeUp.save   
    }
  }
}
