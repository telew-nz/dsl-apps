extend entity Order {
  event onSave = {
    if (!IUser.current.is[XeroIntegration] && !RegisterService.isCurrent && touched) {
      XeroIntegration.all.map { s =>
        PushInvoiceJob(service = s, order = this).run
      }
    }
  }
}


class PushInvoiceJob extends SystemJob {
  field service: XeroIntegration
  field order: Order

  func do = {
    if(order.issueState == InvoiceIssued &&
       order.state == Complete &&
       order.payments*.account.all(_.is[BankAccount]))
    if(let invoiceRevision = order.invoices.last) {
      let lastDueDate = order.invoices*.dueDate.last

      let _ <- invoiceRevision.items*.as[OrderProductItem]
        .map { li =>
          let isRent = li.deliveryItem.stockTypeSrc == Asset
          if (!li.product.extId(this.service.idSrc(isRent))) {
            PushItemJob(service = this.service, product = li.product, isRent = isRent).do()
          }
        }.allCompleted()

      let invoiceLineItems = invoiceRevision.items*.as[OrderProductItem].map { li =>
        let isRent = li.deliveryItem.stockTypeSrc == Asset
        XeroInvoiceLineItem(
          itemCode = li.product.as[IBaseProduct]!.extCode(service.idSrc(isRent))
          description = li.fullDesc
          quantity = li.invoiceQty!
          unitAmount = (if(order.isPurchase) li.invoiceAmountWithGst else li.amountWithGst) / li.invoiceQty!
          // discount in Xero works only for sales

          taxType = if(let gR = li.gstRate) { 
            if(gR == 0.15) {
              if (order.is[SalesOrder]) output2 else input2
            }else if (gR == 0) zeroRated else none
          } else none

          
          discountRate = if(!order.isPurchase) if(let a = li.amountNoGst) 100.00 * li.discountNoGst / a //%
          // sometimes discount doesn't work properly because precision
        )
      }

      let extInvId = order.extId(service)
      
      let _ <- if(!order.debtCounterparty?.extId(service)){
        PushContactJob(service = service, company = order.debtCounterparty!).do()
      }

      let xeroInv = if (order.deleted) XeroInvoice(
        invoiceID = extInvId
        status = voided
      )
      else XeroInvoice(
        invoiceID = extInvId

        type = if (order.isPurchase) accPay else accRec

        status = if (invoiceLineItems.all(taxType) && lastDueDate) authorised else draft
        
        lineAmountTypes = Inclusive

        contact = XeroContact(contactID = order.debtCounterparty!.extId(service))
        lineItems = invoiceLineItems
        currencyCode = invoiceRevision.currency
        date = invoiceRevision.date
        dueDate = lastDueDate
        
        totalDiscount = invoiceRevision.items*.as[OrderProductItem]*.discount.sum
        
        url = order.formUrl
      )

      //xeroInv.json.log("xeroInvoice")
      
      let linkPayRec = if (order.isPurchase) "AccountsPayable" else "AccountsReceivable"
      
      let _ <- if(let id = extInvId) {
        order.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$id")
        if(order.payments.isEmpty) { // invoice in Xero can't be updated if it has payment or credit note
          let r <- service.https("Invoices/$id").post(xeroInv.json)
          r.body!
        }
      } else if (!order.deleted) {
        let r <- service.https("Invoices").post(xeroInv.json)
        if(let rID = r.body!.parseJson[XeroInvoicesResponse]?.invoices.first.invoiceID) {
          order.updateExtId(service, rID)
          order.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$rID")
        } else {
          throw "XeroInvoice push error: ${r.body!}"
        }
      }
    }
  }
}
