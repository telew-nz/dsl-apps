extend entity LegalEntity extends HasExtId


class XeroContact {
  extFieldNaming = UpperCamelCase  
  
  field contactID: String?
  field contactStatus: XeroContactStatus? {
    jsonMap[String?](apply = _?.id, unapply = v => XeroContactStatus.all.find(id == v)!)
  }
  field name: String?
  field firstName: String?
  field lastName: String?
  field emailAddress: String?
  field website: String?
  field skypeUserName: String?
  
  field accountNumber: String?
  field bankAccountDetails: String?
  field taxNumber: String?
  field accountsReceivableTaxType: String?
  field accountsPayableTaxType: String?
  
  field defaultCurrencyString: String? {extName = "DefaultCurrency"} // for case when flow2b workspace doesn't include this user currency
  func  defaultCurrency: Currency? = Currency.all.find(name == defaultCurrencyString)
  
  field isSupplier: Bool?
  field isCustomer: Bool?
  
  field addresses: [XeroAddress]?
  field phones: [XeroPhone]?
  field contactPersons: [XeroContactPerson]?
}
                                                    
enum XeroContactStatus(id: String?) {
  case Active  (id = "ACTIVE")
  case Archived (id = "ARCHIVED")
}

                                                    
class XeroAddress {
  extFieldNaming = UpperCamelCase

  field addressType: XeroAddressType? {
    jsonMap[String?](apply = _?.id, unapply = v => XeroAddressType.all.find(id == v)!)
  }
  
  field addressLine1: String?
  field addressLine2: String?
  field addressLine3: String?
  field addressLine4: String?
  field country: String?
  field city: String?
  field region: String?
  field postalCode: String?
  field attentionTo: String? 
  
  func address: Address = {
    Address(
      country = country, city = city, region = region, postcode = postalCode,
      street = [addressLine1, addressLine2, addressLine3, addressLine4].filter(!isEmpty).join("\n").alt("???") 
    )
  }
  
  func coreLocationType = addressType.map(t => locationTypeMapping.apply(t)!)
  
  object func locationTypeMapping: [XeroAddressType -> LocationType] = [
    Street   -> Real,
    Delivery -> Real,
    Pobox    -> Post
  ]
}
                                                    
enum XeroAddressType(id: String?) {
  case Pobox  (id = "POBOX")
  case Street (id = "STREET")
  case Delivery (id = "DELIVERY")
}


class XeroPhone {
  extFieldNaming = UpperCamelCase

  field phoneType: XeroPhoneType? {
    jsonMap[String?](apply = _?.id, unapply = v => XeroPhoneType.all.find(id == v)!)
  }
  
  field phoneNumber: String?
  field phoneAreaCode: String?
  field phoneCountryCode: String?
  
  func corePhoneType: PhoneType? = phoneType.map(t => phoneTypeMapping.apply(t)!)
  
  func phoneString: String? = [phoneCountryCode, phoneAreaCode, phoneNumber].filter(!isEmpty).join(" ")
  
  object func phoneTypeMapping: [XeroPhoneType -> PhoneType] = [
    Default -> Phone,
    Ddi     -> Phone,
    Mobile  -> Mobile,
    Fax     -> Fax
  ]
}
  
enum XeroPhoneType(id: String?) {
  case Default(id = "DEFAULT")
  case Ddi(id = "DDI")
  case Mobile(id = "MOBILE")
  case Fax(id = "FAX")
}
                                                    
class XeroContactPerson {
  extFieldNaming = UpperCamelCase

  field firstName: String?
  field lastName: String?
  field emailAddress: String?
  
  func name = [firstName, lastName].filter(!isEmpty).join(" ")
}