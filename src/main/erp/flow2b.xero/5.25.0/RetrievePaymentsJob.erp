class RetrievePaymentsJob extends SystemJob with IXeroPaymentSaver {
  impl field service: XeroIntegration
  impl func force: Bool = false
  
  impl field errorAction = IncrementCounter
  
  impl func do = {
    // Xero Payments api endpoint doesn't support paging
    let res <- service.https("Payments").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]
    let cache = XeroCache(service = service)
    rb.payments.map { p =>
      savePayment(cache, p)
    }
  }
}

class RetrievePaymentJob extends SystemJob with IXeroPaymentSaver {
  impl field service: XeroIntegration
  field paymentID: String
  impl field force: Bool
  
  impl func do = {
    let res <- service.https("Payments/$paymentID").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]

    let cache = XeroCache(service = service)
    if(let p = rb.payments.first) {
      savePayment(cache, p)
    }
  }

}

class RetrieveInvoicePaymentsJob extends SystemJob {
  impl field service: XeroIntegration
  field invoiceID: String
  field withInvoiceOnly: Bool
  
  impl func do = {
    guard(!withInvoiceOnly || service.findExtId(invoiceID, _.as[Order])) else return {}
    
    let res <- service.https("Invoices/").param("IDs", invoiceID).get // !!!: if use "Invoices/$invoiceID" it doesn't work for BatchPayments
    																  //      because XeroAPI returns wrong PaymentID value (BatchPaymentID instead of PaymentID)
    																  // info: https://community.xero.com/developer/discussion/81118345/

    let invoices = res.body!.parseJson[XeroInvoicesResponse].invoices
    
    invoices*.payments.map { p =>
      if(let pID = p.paymentID) {
        RetrievePaymentJob(service = this.service, paymentID = pID, withInvoiceOnly = withInvoiceOnly, force = true).do
      }
    }.allCompleted
  }
  
  override back func error(error: Any): JobError = {
    if (error.as[HttpResponse]?.code == 404) {
      RepeatJob(times = 4, on = Date.now + 1_minute)
    } else {
      super.error(error)
    }
  }
}

interface IXeroPaymentSaver {
  func service: XeroIntegration
  func force: Bool
  field withInvoiceOnly = false

  back func savePayment(cache: XeroCache, xeroPayment: XeroPayment): Future[Payment?] = {
    guard (force || !service.setup.pullInvoicesFrom || xeroPayment.date! >= service.setup.pullInvoicesFrom!) else return null
    if (xeroPayment.status == deleted) return null
    
    if (let pay = service.findExtId(xeroPayment.paymentID, _.as[Payment])) return pay
    
    let inv = service.findExtId(xeroPayment.invoice!.invoiceID, _.as[Order])
    guard (inv || !withInvoiceOnly) else return null
    
    // if inv is empty we will use contact as payer/payee
    let con = service.findExtId(xeroPayment.invoice?.contact?.contactID, _.as[LegalEntity])
    if(!inv && !con) throw "$(xeroPayment.paymentID): No invoice with id = ${xeroPayment.invoice!.invoiceID} and no contact with id = ${xeroPayment.invoice?.contact?.contactID}"

    let acc <- service.finAccount(cache, xeroPayment.xeroAccount!)
    let pay = {
      inv?.payments.find { p =>
        !p.extId(service) && 
        //"p.date == xeroPayment.date! &&" is bad solution because date in Xero better than our
        p.account == acc &&
        ((p.amount - xeroPayment.amount!).abs < 1) // for precision issues 
      }
      .alt(
        if(xeroPayment.paymentType == accRecPayment) { 
          IncomingPayment(
            date = xeroPayment.date!
            payer = con,
            payee = service.legalEntity,
            currency = acc.currency,
            source = inv,
            account = acc,
            amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
          )
        } else {
          OutgoingPayment(
            date = xeroPayment.date!
            payee = con,
            payer = service.legalEntity,
            currency = acc.currency,
            source = inv, 
            account = acc,
            amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
          )
        }
      )
    }

    pay.date = xeroPayment.date!
    pay.updateExtId(service, xeroPayment.paymentID)
    pay.save

  }
}