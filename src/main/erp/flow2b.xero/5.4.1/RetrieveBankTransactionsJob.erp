class RetrieveBankTransactionsJob extends SystemJob {
  field service: XeroIntegration
  field pageNumber: UInt = 1
  
  func do = {
    let res <- service.https("BankTransactions").param("page", pageNumber).get
    
    let rb = res.body!.parseJson[XeroBankTransactionsResponse]
    
    let cache = XeroCache(service = service)
    let _ <- rb.bankTransactions.filter(tr => tr.type == spend || tr.type == receive).oneByOne { t =>
      saveBankTransaction(cache, t)
    }
    
    if(rb.bankTransactions.count > 0) RetrieveBankTransactionsJob(
      service = this.service,
      pageNumber = this.pageNumber + 1
    ).run()
  }
  
  
  back func saveBankTransaction(cache: XeroCache, xeroTransaction: XeroBankTransaction): Future[Payment] = {
    //xeroTransaction.json.log("transaction")
    if(let pay = service.findExtId(xeroTransaction.bankTransactionID, _.as[Payment])) {
      pay
    } else {
      let cont = service.findExtId(xeroTransaction.contact?.contactID, _.as[LegalEntity]).alt(throw "Retreive XeroBankTransaction error: There is no LegalEntity with extId = ${xeroTransaction.contact?.contactID}")
      let acc = service.findExtId(xeroTransaction.bankAccount?.accountID, _.as[BankAccount]).alt(throw "Retreive XeroBankTransaction error: There is no BankAccount with extId = ${xeroTransaction.bankAccount?.accountID}")
    
      let pay = {
        if(xeroTransaction.type == receive) { 
          IncomingPayment(
            account = acc,
            payer = cont,
            amount = xeroTransaction.total!.as[Money[acc.currency]]!
          )
        } else {
          OutgoingPayment( 
            account = acc,
            payee = cont,
            amount = xeroTransaction.total!.as[Money[acc.currency]]!
          )
        }
      }

      pay.date = xeroTransaction.date!
      pay.updateExtId(service, xeroTransaction.bankTransactionID)
      pay.updateExtUrl(service, "https://go.xero.com/Bank/ViewTransaction.aspx?bankTransactionID=${xeroTransaction.bankTransactionID}")
      pay.save

      let _ <- if(xeroTransaction.type == spend && !xeroTransaction.lineItems.isEmpty) {
        if(!cont.vendor) {
          cont.makeVendor()
          cont.vendor!.gstStatus = Registered
        }

        let oPay = pay.as[OutgoingPayment]!
        oPay.reasons = null // ??? is it enough to clean it or I should delete each Expense?
        oPay.save
        xeroTransaction.lineItems.oneByOne { li => 
          let exp <- service.expenseType(cache, li.accountCode!)

          PaymentExpense(
            payment = oPay,
            desc    = li.description
            expense = exp
            gstRate = li.taxType?.rate.as[UPercent[2]]
          ).save
        }
      } else if(xeroTransaction.type == receive && !xeroTransaction.lineItems.isEmpty) {
        let iPay = pay.as[IncomingPayment]!
        iPay.reasons = null // ??? is it enough to clean it or I should delete each Expense?
        iPay.save
        xeroTransaction.lineItems.oneByOne { li => 
          let rev <- service.revenueType(cache, li.accountCode!)

          PaymentRevenue(
            payment = iPay,
            desc    = li.description
            revenue = rev
            gstRate = li.taxType?.rate.as[UPercent[2]]
          ).save
        }
      }
      pay
    }    
  }
}
