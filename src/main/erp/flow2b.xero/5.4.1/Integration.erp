entity XeroIntegration extends SystemService with ExtIdSource[String] with OAuth1Rsa {
  field title: String
  field legalEntity: OurLegalEntity =? onlyOne
  field store: IStore =? onlyOne
  func isRentalCompany: Bool = setup.isRentalCompany

  func authTmpTokenUrl: Url = "https://api.xero.com/oauth/RequestToken"
  func authAuthorizeUrl: Url = "https://api.xero.com/oauth/Authorize"
  func authTokenExchangeUrl: Url = "https://api.xero.com/oauth/AccessToken"

  field authConsumerKey: String?
  
  field organisationId: String? // Should be got after save integration
  func webhookUrl = if(let organisationId) "https://ws.flow2b.com/api/v1/flow2b.xero.XeroWebhookRouter?id=$organisationId"
  
  func apiUrl: Url = "api.xero.com/api.xro/2.0/"
  func assetsApiUrl: Url = "api.xero.com/assets.xro/1.0/"
  func webUrl: Url = "http://xero.com/"

  back func basicHttps(path: String): HttpRequest = 
    HttpRequest(url = path, ssl = true)
      .oauth(this)
      .header("Accept", "application/json")
  back func https(path: String): HttpRequest = basicHttps("$apiUrl$path")
  back func assetsHttps(path: String): HttpRequest = basicHttps("$assetsApiUrl$path")
  
  back func error(error: Any): JobError = {
    if (let e = error.as[JobError]) e
    else if (error.as[HttpResponse]?.code == 503){
      //"Xero service limit error. Job will be repeated in a minute.".log
      RepeatJob(times = 4, on = Date.now + 1_minute)
    } else ReportError(error = error)
  }

  
  field webhookKey: Password?
  system field webhookEndpoint: XeroWebhookEndpoint inline by service
  system field rentIdSrc: RentIdSrc inline by service
  func idSrc(isRent: Bool): ExtIdSource[String] = {
    if (isRent) rentIdSrc.as[ExtIdSource[String]]!
    else this
  }
  
  func roles: [Role]? = [Admin]
  

  event onSave = {
    if(!setup.started && authConsumerKey) {
      if(!organisationId) RetrieveOrganisationJob(service = this).run()
      
      RetrieveMatchedItemsJob(service = this).run()
      if(setup.pullContacts) RetrieveContactsJob(service = this).run()
      if(setup.pullBankAccounts) RetrieveAccountsJob(service = this).run()
      if(setup.pullItems) RetrieveItemsJob(service = this).run()
      
      if(setup.pullInvoices) RetrieveInvoicesJob(service = this, dateFrom = setup.pullInvoicesFrom).run()
      if(setup.pullFixedAssets) RetrieveAssetsJob(service = this).run()
      if(setup.pushContacts) PushAllContacsJob(service = this).run()
      if(setup.pullBankTransactions) RetrieveBankTransactionsJob(service = this).run()
      //if(setup.pushInvoices) PushAllInvoicesJob(service = this).run()
      
      setup.started = true
      this.save()
    }
  }

  field setup: XeroIntegrationSetup
  
  view form = nav{
    tabs{
    grid(label = "Settings"){
      issuesView
      title
      legalEntity
      store
      serviceState
      button("Download .cer File", visible = id) {
        downloadPemFile("Flow2b-Xero.cer")
      }
      authConsumerKey
      setup >> field(editMode = Inherit) // FIXME: if created() .... throws error 
      panel(label="WebHook"){grid{
        webhookKey >> field(label="Key")
        webhookUrl >> field(label="URL")
      }}
    }}
  }

  object view list = XeroIntegration.all >> list{grid(labels = None){
    x {title serviceState}
  }}
  
  view test = nav(label = "$title (test)"){tabs{
    grid(label = "Test"){
      issuesView
      serviceState
      organisationId
      setup.started
      button("Retrieve Contacts") {
        UI.info("Retrieving contacts")
        RetrieveContactsJob(service = this).run
      }
      button("Push Contacts") {
        UI.info("Pushing contacts")
        LegalEntity.all*.touch
      }
      button("Push all invoices") {
        UI.info("Pushing invoices")
        Order.all.map { i =>
          PushInvoiceJob(order = i, service = this).run()
        }
      }

      setup.pullInvoicesFrom
      button("Retrieve invoices") {
        UI.info("Retrieving invoices")
        RetrieveInvoicesJob(service = this, dateFrom = setup.pullInvoicesFrom).run
      }

      button("Retrieve Bank Accounts") {
        UI.info("Retrieving bank accoutns")
        RetrieveAccountsJob(service = this).run()
      }

      button("Retrieve Payments") {
        UI.info("Retrieving payments")
        RetrievePaymentsJob(service = this).run()
      }

      button("Retrieve Items") {
        UI.info("Retrieving items")
        RetrieveItemsJob(service = this).run()
      }
      
      button("Sync Matched Items") {
        UI.info("Syncing matched items")
        RetrieveMatchedItemsJob(service = this).run()
      }

      button("Retrieve Assets") {
        UI.info("Retrieving assets")
        RetrieveAssetsJob(service = this).run()
      }
      
      button("Retrieve Bank Transaction") {
        UI.info("Retrieving bank transactions")
        RetrieveBankTransactionsJob(service = this).run()
      }
      
    }}}
  
  class XeroIntegrationSetup {
    
    field started: Bool = false
    
  	field pullContacts: Bool
    field pullBankAccounts: Bool = true
    field pullItems: Bool
    field pullInvoices: Bool
    field pullInvoicesFrom: Date?
    field pullFixedAssets: Bool
    
    field pushContacts: Bool
    //field pushInvoices: Bool
    field pullBankTransactions: Bool
    
    field isRentalCompany: Bool
    
    view form = panel(label = "Initial Setup"){grid{
      isRentalCompany
      
      pullContacts
      pullBankAccounts
      pullBankTransactions
      pullItems
      
      row{
       pullInvoices
       pullInvoicesFrom
      }
      
      pullFixedAssets
      
      pushContacts
      //pushInvoices
    }}
  }
  
  class PushAllContacsJob extends SystemJob {
  	field service: XeroIntegration
    
    func do = {
      LegalEntity.all.map { le =>
        if(le.as[Person]?.companies.isEmpty) {
          PushContactJob(service = this.service, company = le).run()
        }
      }
    }
  }
  
  /*class PushAllInvoicesJob extends SystemJob {
  	field service: XeroIntegration
    
    func do = {
      Order.all.map { i =>
        PushInvoiceJob(order = i, service = this.service).run()
      }
    }
  }*/
  
}

entity RentIdSrc extends PseudoEntity with ExtIdSource[String] {
  ref field service: XeroIntegration
  func mainEntity = service
  func title = "Hire $service"
}