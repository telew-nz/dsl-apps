extend trait IIncomeType extends HasExtId

extend entity XeroIntegration {
  back func expenseType(accCode: String): Future[ExpenseType] = {
    if (let et = findExtCode(accCode, _.as[ExpenseType])) {
      et
    } else {
      let accRes <- https("Accounts").get
      let accounts = accRes.body!.parseJson[XeroAccountsResponse].accounts
      let liAcc = accounts.find(code == accCode)!
      let et: ExpenseType = ExpenseType.all.find(title == liAcc.name).result.get
        .alt(ExpenseType(title = liAcc.name!, description = liAcc.description))
      updateExtCode(et, accCode)
      et
    }
  } 
  
  back func revenueType(accCode: String): Future[RevenueType] = {
    if (let et = findExtCode(accCode, _.as[RevenueType])) {
      et
    } else {
      let accRes <- https("Accounts").get
      let accounts = accRes.body!.parseJson[XeroAccountsResponse].accounts
      let liAcc = accounts.find(code == accCode)!
      let et: RevenueType = RevenueType.all.find(title == liAcc.name).result.get
        .alt(RevenueType(title = liAcc.name!, description = liAcc.description))
      updateExtCode(et, accCode)
      et
    }
  } 
  
  back func revenueTypeNoSales(accCode: String): Future[RevenueType?] = {
    if (let et = findExtCode(accCode, _.as[RevenueType])) {
      et
    } else {
      let accRes <- https("Accounts").get
      let accounts = accRes.body!.parseJson[XeroAccountsResponse].accounts
      let liAcc = accounts.find(code == accCode)!
      if (let et = RevenueType.all.find(title == liAcc.name).result.get
        .or(if (liAcc.name != "Sales") RevenueType(title = liAcc.name!, description = liAcc.description)))
      {    
        updateExtCode(et, accCode)
        et
      }
    }
  } 
}