class RetrieveInvoicesJob extends SystemJob {
  field service: XeroIntegration
  field dateFrom: Date?
  field pageNumber: UInt = 1
  field accInvoices: [XeroInvoice]? = []

  func do = {
    let res <- service.https("Invoices")
    			.param("Statuses", "PAID,AUTHORISED,SUBMITTED,DRAFT")
				.param("page", pageNumber)
    			.get
    let rb = res.body!.parseJson[XeroInvoicesResponse]
    
    let invs = rb.invoices.filter{ xi => 
      !dateFrom || (xi.date >= dateFrom) || (xi.status != paid)
    }
    let allInvs = accInvoices + invs
    
    if (rb.invoices.count > 0) {
      RetrieveInvoicesJob(
        service = this.service,
        dateFrom = this.dateFrom,
        pageNumber = this.pageNumber + 1,
        accInvoices = allInvs
      ).run()
    } else {
      allInvs.foreach{inv => 
        RetrieveInvoiceJob(service = this.service, invoice = inv).run()
      }
    }
  }
}


back class RetrieveInvoiceJob extends SystemJob {
  field service: XeroIntegration
  field invoice: XeroInvoice
  
  func do = {   
    if(invoice.status != voided) {
      // invoice
      let _ <- saveInvoice(invoice)

      // credit notes
      // ???

      // payments
      invoice.payments.map { p =>
        if (let pID = p.paymentID)  {
          RetrievePaymentJob(service = this.service, paymentID = pID).do
        }
      }.allCompleted
    }
  }
  
  
  back func saveInvoice(xi: XeroInvoice): Future[Order] = {
    if(let o = service.findExtId(xi.invoiceID, _.as[Order])) {      
      o
    } else {
      let invCounterparty: LegalEntity <- if(let c = service.findExtId(xi.contact!.contactID, _.as[LegalEntity])){
      	Future(c)
      } else {
        let res <- service.https("Contacts/${xi.contact!.contactID}").get
        let xc: XeroContact = res.body!.parseJson[XeroContactsResponse].contacts.first
        RetrieveContactsJob(service = this.service).saveContact(xc)
      }
      
      if((xi.type == accRec) && !invCounterparty.vendor) {
        invCounterparty.makeVendor()
        invCounterparty.vendor!.gstStatus = Registered
      }
      // invCounterparty.log
      // itms.map(item.itemID, product.title)*.log

      let ord: Order = if(xi.type == accRec) SalesOrder(
        customer = invCounterparty.makeCustomer
        vendor = service.legalEntity
      )else PurchaseOrder(
        customer = service.legalEntity
        vendor = invCounterparty.makeVendor
      )
      
      if(xi.type == accRec){
        if (let d = ord.deliveries.first.as[SalesDelivery]){
          d.source = service.store
          if (xi.status == paid) {
            d.status = Delivered
          }
        }
      } else {
        if(let d = ord.deliveries.first.as[PurchaseDelivery]){
          d.destination = service.store
          if (xi.status == paid) {
            d.status = Delivered
          }
        }
      }
      
      ord.date = xi.date.alt(Date.now)
           
      ord.save()
      
      let itms = xi.lineItems.filter(li => li.itemCode || li.accountCode)
      
      let _ <- if(xi.type == accRec) {
        itms.map { li =>
          let si: OrderItem <- if (let itmCode = li.itemCode) {
            let prod <- prodByCode(itmCode)
            SalesItem (
              order = ord.as[SalesOrder]!
              deliveryItem = DeliveryItem( 
                product = prod
                unit = prod.unit
                qty = li.quantity.alt(1)
              )
              itemDesc = if(prod.title != li.description) {let d: Text? = li.description
                                                           d}
              gstRate = li.taxType?.rate.as[UPercent[2]]
            ).save             
          } else {
            let ex <- service.revenueType(li.accountCode!)
            RevenueItem (
              order = ord.as[SalesOrder]!
              revenue = ex,
              desc = if(ex.title != li.description) {let d: Text? = li.description
                                                     d}
              gstRate = li.taxType?.rate.as[UPercent[2]]
            ).save
          }
          if (xi.lineAmountTypes == Inclusive) {
            si.amountWithGst = li.unitAmount * li.quantity
          } else {
            si.amountNoGst = li.unitAmount * li.quantity
          }
          si.save
        }.allCompleted 
      } else {
        itms.map { li =>
          let pi: OrderItem <- if (let itmCode = li.itemCode) {
            let prod <- prodByCode(itmCode)
            PurchaseItem (
              order = ord.as[PurchaseOrder]!
              deliveryItem = DeliveryItem( 
                product = prod
                unit = prod.unit
                qty = li.quantity.alt(1)
              )
              itemDesc = if(prod.title != li.description) {let d: Text? = li.description
                                                           d}
              gstRate = li.taxType?.rate.as[UPercent[2]]
            ).save             
          } else {
            let ex <- service.expenseType(li.accountCode!)
            ExpenseItem (
              order = ord.as[PurchaseOrder]!
              expense = ex,
              desc = if(ex.title != li.description) {let d: Text? = li.description
                                                     d}
              gstRate = li.taxType?.rate.as[UPercent[2]]
            ).save
          }
          if (xi.lineAmountTypes == Inclusive) {
            pi.amountWithGst = li.unitAmount * li.quantity
          } else {
            pi.amountNoGst = li.unitAmount * li.quantity
          }
          pi.save
        }.allCompleted
      }
      
      ord.updateExtId(service, xi.invoiceID)
      
      let linkPayRec = if (xi.type == accRec) "AccountsReceivable" else "AccountsPayable" 
      ord.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=${xi.invoiceID}")
      
      let inv = ord.createInvoice(xi.date.alt(Date.now))
      inv.date = xi.date.alt(Date.now)
      inv.dueDate = xi.dueDate
      inv.totalDue = ord.orderTotal
      inv.save()

      ord.save
    }
  }
  
  private back func prodByCode(code: String): Future[ISubProduct] = {
    if (let prod = service.findExtCode(code, _.as[ISubProduct])) {
      prod
    } else {
      let ires <- service.https("Items/$code").get // ERROR: when itemCode contains spaces
      let itm = ires.body!.parseJson[XeroItemsResponse].items.first
      let prod = RetrieveItemsJob(service = this.service).saveItem(itm)
      prod
    }
  }
}