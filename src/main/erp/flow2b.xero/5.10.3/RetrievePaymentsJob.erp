class RetrievePaymentsJob extends SystemJob with IXeroPaymentSaver {
  impl field service: XeroIntegration
  
  impl func do = {
    // Xero Payments api endpoint doesn't support paging
    let res <- service.https("Payments").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]
    let cache = XeroCache(service = service)
    rb.payments.map { p =>
      savePayment(cache, p)
    }
  }
}

class RetrievePaymentJob extends SystemJob with IXeroPaymentSaver {
  impl field service: XeroIntegration
  field paymentID: String
  
  impl func do = {
    let res <- service.https("Payments/$paymentID").get
    
    let rb = res.body!.parseJson[XeroPaymentsResponse]

    let cache = XeroCache(service = service)
    if(let p = rb.payments.first) {
      savePayment(cache, p)
    }
  }

}

class RetrieveInvoicePaymentsJob extends SystemJob {
  impl field service: XeroIntegration
  field invoiceID: String
  
  impl func do = {
    let res <- service.https("Invoices/$invoiceID").get

    let invoices = res.body!.parseJson[XeroInvoicesResponse].invoices
    
    invoices.filter {
      i => service.findExtId(i.invoiceID, _.as[Order])
    }*.payments.map { p =>
      if(let pID = p.paymentID) RetrievePaymentJob(service = this.service, paymentID = pID).do
    }.allCompleted
  }
}

interface IXeroPaymentSaver {
  func service: XeroIntegration

  back func savePayment(cache: XeroCache, xeroPayment: XeroPayment): Future[Payment] = {
    //xeroPayment.json.log("payment")
    //xeroPayment.amount.log("pay amount")
    //xeroPayment.date.log("pay date")
    if (let pay = service.findExtId(xeroPayment.paymentID, _.as[Payment])) {
      pay
    } else {
      let inv = service.findExtId(xeroPayment.invoice?.invoiceID, _.as[Order])
         .alt(throw "Retrieve XeroPayment error: There is no Invoice with extId = ${xeroPayment.invoice?.invoiceID}")
      let acc <- service.finAccount(cache, xeroPayment.xeroAccount!)
      let pay = inv.payments.find { p =>
          !p.extId(service) && 
          //"p.date == xeroPayment.date! &&" is bad solution because date in Xero better than our
          p.account == acc &&
          ((p.amount - xeroPayment.amount!).abs < 1) // for precision issues 
        }
        .alt(
          if(xeroPayment.paymentType == accRecPayment) { 
            IncomingPayment(
              source = inv,
              account = acc,
              amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
            )
          } else {
            OutgoingPayment(
              source = inv, 
              account = acc,
              amount = xeroPayment.amount!.as[UMoney[acc.currency]]!
            )
          }
        )

      pay.date = xeroPayment.date!
      pay.updateExtId(service, xeroPayment.paymentID)
      pay.save
    }
  }
}