class PushItemJob extends SystemJob {
  field service: XeroIntegration
  field product: IBaseProduct 
  
  func do = {
    let xeroID = product.extId(service)
    
    let xeroItem = XeroItem(
      itemID = xeroID
      code = product.extCode(service).alt(product.sku)
      name = if (product.title.length > 50) product.title[..50] else product.title
      description = product.invoiceDesc.alt(product.title)
      isTrackedAsInventory = product.isTangible && !product.is[Kit]
      inventoryAssetAccountCode = if(!xeroID && product.isTangible && !product.is[Kit]) "630"
      isSold = product.forSale || 
               (product.status == NotForSale && product.rentStatus == ForRent)
      isPurchased = [ProductStatus.ForSale, ProductStatus.NotForSale].contains(product.status)
      
      purchaseDetails = if(!xeroID) XeroItemPSDetails(
        cogsAccountCode = if(product.isTangible && !product.is[Kit]) "310"
        
        // cogsAccountCode = if(product.isTangible) "630"
        // ERROR: it doesn't work with err:
        //  "Inventory Asset Account must be used with a Cost of Goods Sold Account.",
        //  "The account cannot be an inventory asset account".
        //
        //  if only this line error is "The PurchasesAccountId account is invalid."
      
        
        // ???: I can't set unitPrice and taxType for Product. Only for OrderProductItem
        //      should I put OrderProductItem as XeroItem. I think I should leave it as is.
      )
      salesDetails = if(!xeroID) XeroItemPSDetails(accountCode = "200")      
    )

    
    if(let id = xeroID) {
      let r <- service.https("Items/$id").post(xeroItem.json)
      r.body!
    } else {
      let r <- service.https("Items").post(xeroItem.json)
      if(let rID = r.body!.parseJson[XeroItemsResponse]?.items.first.itemID) {
        product.updateExtId(service, rID)
        product.updateExtCode(service, xeroItem.code)
      } else {
      	throw "XeroItem push error: ${r.body!}"
      }
    }
  }
}