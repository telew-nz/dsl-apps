object XeroWebhookRouter extends WorkspaceRouter[XeroWebhookData] {
  back func parse(request: IncomingHttpRequest): XeroWebhookData = {
    request.body!.toString.parseJson[XeroWebhookData]!
  }
  back func keys(request: IncomingHttpRequest, data: XeroWebhookData): [String]? = {
    if(let i = request.param("id")) [i]
  }
}


inline entity XeroWebhookEndpoint extends WorkspaceEndpoint[XeroWebhookData] {
  field service: XeroIntegration by webhookEndpoint
  func keys = if(let id = service.organisationId) [id]
  func router = XeroWebhookRouter
  
  back func process(request: IncomingHttpRequest, data: XeroWebhookData): Future[Any] = {
    if(let secret = service.webhookKey) {
      let headerSignature = request.header("x-xero-signature")
      let encodedSignature = request.body!.toString.hmac(secret).sha256.base64
      if(headerSignature != encodedSignature) {
        HttpResponse(code = 401)// It is necessary for Xero Intent To Receive passing
      } else {
        data.events.filter(tenantId == service.organisationId).map { e =>
          if(e.eventCategory == "INVOICE") {
            if(let iID = e.resourceId) RetrieveInvoicePaymentsJob(service = this.service, invoiceID = iID).run
          }
        }

        HttpResponse(code = 200) // It is necessary for Xero Intent To Receive passing
      }
    }
  }
}

class XeroWebhookData {
  field events: [XeroEvent]?
  field lastEventSequence: Int?
  field firstEventSequence: Int?
  field entropy: String?
}

class XeroEvent {
  field resourceUrl: String?
  field resourceId: String?
  field eventDateUtc: String?
  field eventType: String?
  field eventCategory: String?
  field tenantId: String? // organisationID
  field tenantType: String?
}