class RetrieveItemsJob extends SystemJob {
  impl field service: XeroIntegration
  
  impl func do = {
    // Xero Items api endpoint doesn't support paging
    let res <- service.https("Items").get
    let rb = res.body!.parseJson[XeroItemsResponse]

    let cache = XeroCache(service = service)
    let itms <- rb.items.oneByOne { itm =>
      let p: ISubProduct <- saveItem(cache, itm)
      (p, itm)
    }
    let stocktakeItems = itms.filter {
      _.p.as[IProductInv] && _.itm.quantityOnHand
    }.map {
      StocktakeItem(
        product = _.p.as[IProductInv]!,
        unit = _.p.unit,
        qty = _.itm.quantityOnHand.positive,
        differencePrice = if(let q = _.itm.quantityOnHand) _.itm.totalCostPool / q
      )
    }
    
    if(!stocktakeItems.isEmpty) {
      Stocktake(
        store = service.store,
        items = stocktakeItems
      ).save
    }
  }


  back func saveItem(cache: XeroCache, xeroItem: XeroItem): Future[ISubProduct] = {
    if (
      let prod = service.findExtId(xeroItem.itemID, _.as[ISubProduct])
        .or(service.rentIdSrc.findExtId(xeroItem.itemID, _.as[ISubProduct]))
    ) return prod
    
    
    let t = xeroItem.title.dropPrefixes(["Hire", "Rent"]).trim.lower.replace("  ", " ")
    let prod = ISubProduct.all.find(_.title =%= t).result.get
      .alt{
        if(xeroItem.isTrackedAsInventory || service.isRentalCompany) Good(
          title = xeroItem.title
          description = xeroItem.description.filter(_ != xeroItem.title)
          .or(xeroItem.purchaseDescription.filter(_ != xeroItem.title))
        ).as[ISubProduct] else  Service(
          title = xeroItem.title
          description = xeroItem.description.filter(_ != xeroItem.title)
          .or(xeroItem.purchaseDescription.filter(_ != xeroItem.title))
        )
      }

    if(let sp = xeroItem.salesDetails?.unitPrice.positive) {
      prod.updateSalesPrice(service.legalEntity, SalesPrice(regular = sp, current = sp))
    }

    if(!xeroItem.isTrackedAsInventory && service.setup.isRentalCompany) {
      prod.status = NotForSale
      prod.rentStatus = ForRent
      prod.updateExtId(service.rentIdSrc, xeroItem.itemID)
      prod.updateExtCode(service.rentIdSrc, xeroItem.code)
    } else {
      prod.status = selectProductStatus(xeroItem)
      prod.updateExtId(service, xeroItem.itemID)
      prod.updateExtCode(service, xeroItem.code)
    }

    let _ <- if (let pc = xeroItem.purchaseDetails?.accountCode) {
      let et <- service.expenseType(cache, pc)
      prod.superProduct.expenseType = et
    }
    let _ <- if (let pc = xeroItem.salesDetails?.accountCode) {
      let et <- service.revenueTypeNoSales(cache, pc)
      prod.superProduct.revenueType = et
    }

    prod.refNum = xeroItem.code // instead of sku
    prod.save()
    prod
  }
  
  func selectProductStatus(xi: XeroItem): ProductStatus = {
  	if(xi.isSold){
      if (xi.isPurchased) ForSale else ForClearance
    } else {
      if (xi.isPurchased) NotForSale else Obsolete
    }
  }
} 

class RetrieveMatchedItemsJob extends SystemJob {
  impl field service: XeroIntegration
  
  impl func do = {
    // Xero Items api endpoint doesn't support paging
    let res <- service.https("Items").get
    let rb = res.body!.parseJson[XeroItemsResponse]

	rb.items.map { xeroItem =>
      let t = xeroItem.title.dropPrefixes(["Hire", "Rent"]).trim
      if(!service.findExtId(xeroItem.itemID, _.as[IBaseProduct])
         let prod = IBaseProduct.all.find(_.title =%= t)) 
      {
        if(!xeroItem.isTrackedAsInventory && service.isRentalCompany) {
          prod.updateExtId(service.rentIdSrc, xeroItem.itemID)
          prod.updateExtCode(service.rentIdSrc, xeroItem.code)
        } else {
          prod.updateExtId(service, xeroItem.itemID)
          prod.updateExtCode(service, xeroItem.code)
        }
        prod.save()
      }
    }
  }
}