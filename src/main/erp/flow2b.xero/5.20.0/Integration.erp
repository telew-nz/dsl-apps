entity XeroIntegration extends SystemService with ExtIdSource[String] with OAuth1Rsa {
  impl func title: String = "Xero $legalEntity"
  ref field legalEntity: OurLegalEntity by xeroIntegration{
    default =? onlyOne
  }
  field store: IStore =? onlyOne
  field startDate: Date = now
  func isRentalCompany: Bool = setup.isRentalCompany
  func syncMode: SyncMode = setup.syncMode

  func authTmpTokenUrl: Url = "https://api.xero.com/oauth/RequestToken"
  func authAuthorizeUrl: Url = "https://api.xero.com/oauth/Authorize"
  func authTokenExchangeUrl: Url = "https://api.xero.com/oauth/AccessToken"

  impl field authConsumerKey: String?
  
  field organisationId: String? // Should be got after save integration
  func webhookUrl = if(let organisationId) "https://ws.flow2b.com/api/v1/flow2b.xero.XeroWebhookRouter?id=$organisationId"
  
  func xeroApiUrl: Url = "api.xero.com/api.xro/2.0/"
  func assetsApiUrl: Url = "api.xero.com/assets.xro/1.0/"
  func webUrl: Url = "http://xero.com/"

  back func basicHttps(path: Url): HttpRequest = 
    HttpRequest(url = path, ssl = true)
      .oauth(this)
      .header("Accept", "application/json")
  back func https(path: Url): HttpRequest = basicHttps("$xeroApiUrl$path")
  back func assetsHttps(path: Url): HttpRequest = basicHttps("$assetsApiUrl$path")
  
  impl back func error(job: ISystemJob, error: Any): JobError = {
    if (let e = error.as[JobError]) {
      if (initialSyncState == Started && error.is[ReportError]) {
      	initialSyncState = Failed
        save
      }
      e
    } else if (let r = error.as[HttpResponse]) {
      if (r.code == 503) {
        // Xero service limit error. Job will be repeated.
        if (r.headers("X-Rate-Limit-Problem") == "Daily") {
          let date = Date.now + 24_hour
          Activity.comment("Daily limit is achieved. Will retry at $date\n(job: $job)")
          RepeatJob(times = 2, on = date)
        } else {
          let date = Date.now + 1_minute
          Activity.comment("Minute limit is achieved. Will retry at $date\n(job: $job)")
          RepeatJob(times = 2, on = date)
        }
      } else if (r.code == 400) {
        // It should not happen but it looks like there is an error in Xero side 
        // that it sometimes give this error on random items 
        RepeatJob(times = 4, on = Date.now + 1_minute)
      } else if (r.code == 500) {
        // Internal server error.
        let delta: Duration = 10_minute
        let date = Date.now + delta*(1 + 2 * job.repeatCount)
        Activity.comment("Xero Internal Server Error (500). Will retry at $date")
        RepeatJob(times = 4, on = date)
      } else {
        if (initialSyncState == Started) {
          initialSyncState = Failed
          save
        }
        ReportError(error = error)
      }
    } else {
      if (initialSyncState == Started) {
          initialSyncState = Failed
          save
      }
      ReportError(error = error)
    }
  }

  
  field webhookKey: Password?
  system field webhookEndpoint: XeroWebhookEndpoint inline by service
  system field rentIdSrc: RentIdSrc inline by service
  func idSrc(isRent: Bool): ExtIdSource[String] = {
    if (isRent) rentIdSrc.as[ExtIdSource[String]]
    else this
  }
  
  impl func roles: [Role]? = [Admin]

  impl event onSave = {
    if(!authConsumerKey || 
       serviceState != Active ||
       (!updated(serviceState) && initialSyncState != NotStarted)) return {}

    if (initialSyncState == Finished) {      
      SyncUpdatesJob(service = this).enqueue()
    } else {   
      initialSync()
    }
  }
  
  field initialSyncState: InitialSyncState = NotStarted
  
  back func initialSync(): Future[Any] = {
    if(!organisationId) RetrieveOrganisationJob(service = this).enqueue()

    RetrieveMatchedItemsJob(service = this).enqueue()
    if(setup.pullContacts) RetrieveContactsJob(service = this).enqueue()
    if(setup.pullBankAccounts) RetrieveAccountsJob(service = this).enqueue()
    if(setup.pullItems) RetrieveItemsJob(service = this).enqueue()

    if(setup.pullInvoices) RetrieveInvoicesJob(service = this).enqueue()
    if(setup.pullFixedAssets) RetrieveAssetsJob(service = this).enqueue()
    if(setup.pushContacts) PushAllContacsJob(service = this).enqueue()
    if(setup.pullBankTransactions) {
      RetrieveBankTransactionsJob(service = this).enqueue()
      RetrieveBankTransfersJob(service = this).enqueue()
    }
    //if(setup.pushInvoices) PushAllInvoicesJob(service = this).enqueue()

    InitialSyncFinishedJob(service = this).enqueue()
    
    initialSyncState = Started
    //setup.started = true
    this.save()
  }
  
  
  field setup: XeroIntegrationSetup
  
  impl view form = nav{
    tabs{
    grid(label = "Settings"){
      issuesView
      legalEntity
      store
      serviceState
      button("Download .cer File", visible = id) {
        downloadPemFile("Flow2b-Xero.cer")
      }
      authConsumerKey
      startDate
      initialSyncState >> field(editMode=AlwaysRead)
      setup >> field(editMode = Inherit) // FIXME: if created() .... throws error 
      panel(label="WebHook"){grid{
        webhookKey >> field(label="Key")
        webhookUrl >> field(label="URL")
      }}
    }}
  }

  impl object view list = XeroIntegration.all >> list{grid(labels = None){
    x {title serviceState}
  }}
  
  
  class XeroIntegrationSetup {
    
    // field started: Bool = false

    field syncMode: SyncMode = PushAndPull
    
  	field pullContacts: Bool
    field pullBankAccounts: Bool = true
    field defaultPurchaseAccountCode = "300"
    field defaultSalesAccountCode = "200"
    field pullItems: Bool
    field pullInvoices: Bool
    field pullInvoicesFrom: Date?
    field pullDraftInvoices: Bool = true
    field pullFixedAssets: Bool
    
    field pushContacts: Bool
    //field pushInvoices: Bool
    field drawingsCurrentAccount: CurrentAccount? {
      visible = pullBankTransactions
    }
    field pullBankTransactions: Bool
    
    field isRentalCompany: Bool
    
    impl view form = panel(label = "Initial Setup"){grid{
      syncMode
      isRentalCompany
      
      pullContacts
      pullBankAccounts
      pullBankTransactions
      drawingsCurrentAccount
      defaultPurchaseAccountCode
      defaultSalesAccountCode
      pullItems
      
      row{
        pullInvoices
        pullInvoicesFrom
        pullDraftInvoices
      }
      
      pullFixedAssets
      
      pushContacts >> field(visible=syncMode.push)
      //pushInvoices
    }}
  }
  /*class PushAllInvoicesJob extends SystemJob {
  	field service: XeroIntegration
    
    func do = {
      Order.all.map { i =>
        PushInvoiceJob(order = i, service = this.service).enqueue()
      }
    }
  }*/
  
}

enum SyncMode(push: Bool, pull: Bool) {
  case PushAndPull(push=true, pull=true) = "Push&Pull"
  case PullOnly(push=false, pull=true)
}

extend trait OurLegalEntity {
  field xeroIntegration: XeroIntegration? {views = []}
  extend override func hasInvoiceIntegration: Bool = xeroIntegration.exists(userEnabled && serviceState != Disabled)
}

class PushAllContacsJob extends SystemJob {
  impl field service: XeroIntegration

  impl func do = {
    LegalEntity.all.map { le =>
      if(le.as[Person]?.companies.isEmpty) {
        PushContactJob(service = this.service, company = le).enqueueFirst()  // it is important to enqueue *First* because InitialSyncFinishedJob
      }
    }
  }
}

class SyncUpdatesJob extends SystemJob {
  impl field service: XeroIntegration
  
  impl func do = {
    guard(service.syncMode.push) else return {}
    
    //Contacts
    LegalEntity.all.map { le =>
      if(!le.our && shouldBeSynced(le)) {
        PushContactJob(service = this.service, company = le).enqueue()
      }
    }
    
    //Items
    IBaseProduct.all.map { p =>
      if (let pe = p.as[IBaseProduct with Entity] where shouldBeSynced(pe)) {
        if (service.extId(p)) {
          PushItemJob(service = this.service, product = p).enqueue
        }
        if (service.rentIdSrc.extId(p)) {
          PushItemJob(service = this.service, product = p, isRent = true).enqueue
        }
      }
    }
    
    //Invoices
    Order.all.map { i =>
      if(shouldBeSynced(i)){
        PushInvoiceJob(order = i, service = this.service).enqueue()
      }
    }
  }
  
  compute serviceFirstRevisionDate = service.revisions*.begin.min
  func shouldBeSynced(e: Entity): Bool = {
    e.revisions*.begin.max > serviceFirstRevisionDate
  }

}

class InitialSyncFinishedJob extends SystemJob {
  impl field service: XeroIntegration

  impl func do = if(service.serviceState == Active) {
    service.initialSyncState = Finished
    service.save
  }
}


enum InitialSyncState {
  case NotStarted
  case Started {background = "#ed9"}
  case Finished {color = "white" background = "#090"}
  case Failed {background = "#f99"}
}


entity RentIdSrc extends PseudoEntity with ExtIdSource[String] {
  ref field service: XeroIntegration
  impl func mainEntity = service
  impl func title = "Hire $service"
}