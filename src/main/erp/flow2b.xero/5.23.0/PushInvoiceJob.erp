/*extend trait Order {
  impl event onSave = {
    if (!IUser.current.is[XeroIntegration] && !RegisterService.isCurrent && touched) {
      XeroIntegration.all.map { s =>
        PushInvoiceJob(service = s, order = this).enqueue
      }
    }
  }
}*/

extend trait Invoice {
  impl event onSave = {
    if (!IUser.current.is[XeroIntegration] && !RegisterService.isCurrent
        let o = order.as[Order] where
        (deleted || created || 
         updated(date) || updated(dueDate) ||
         o.updated(state) || o.updated(referenceNumber) || 
         o.as[SalesOrder]?.updated(_.payments) || o.as[SalesOrder]?.updated(_.customer) || o.as[SalesOrder]?.updated(_.vendor) ||
         o.as[PurchaseOrder]?.updated(_.payments) || o.as[PurchaseOrder]?.updated(_.customer) || o.as[PurchaseOrder]?.updated(_.vendor)
    )) {
      XeroIntegration.all.map { s =>
        PushInvoiceJob(service = s, order = o).enqueue
      }
    }
  }
}

class PushInvoiceJob extends SystemJob {
  impl field service: XeroIntegration
  field order: Order
  field isSync: Bool

  impl func do = {
    
    guard(service.syncMode.push) else return {}
    
    guard(
      order.issueState == InvoiceIssued && 
      (order.state == Complete || order.state == Closed)
      let invoiceRevision = order.invoices.last where invoiceRevision.date >= service.startDate
    ) else return {}
   
    guard(order.payments*.account.all(_.is[BankAccount])) else return doDeleteInvoice
      
    let lastDueDate = order.invoices*.dueDate.last

    let _ <- invoiceRevision.items*.as[OrderProductItem]
    .oneByOne { li =>
      let isRent = li.deliveryItem.moveOutStockType == Asset
      if (!li.product.extId(this.service.idSrc(isRent))) {
        PushItemJob(service = this.service, product = li.product, isRent = isRent).do
      }
    }

      
      
    let invoiceLineItems = invoiceRevision.items*.as[OrderProductItem].map { li =>
      let isRent = li.deliveryItem.moveOutStockType == Asset
      XeroInvoiceLineItem(
        itemCode = li.product.extCode(service.idSrc(isRent))
        quantity = li.invoiceQty!,
        description = li.fullDesc,
        unitAmount = (if(order.isPurchase) li.invoiceAmountWithGst else li.amountWithGst) / li.invoiceQty!
        // discount in Xero works only for sales

        taxType = if(let gR = li.gstRate) { 
          if(gR == 0.15) {
            if (order.is[SalesOrder]) output2 else input2
          }else if (gR == 0) zeroRated else none
        }else none

        discountRate = if(!order.isPurchase) if(let a = li.amountNoGst) 100.00 * li.discountNoGst / a //%
        // sometimes discount doesn't work properly because precision
      )
    }
      
    let invoiceLineDiscountItems = if(order.isPurchase) {
      invoiceRevision.items*.as[PurchaseDiscountItem].map { ldi =>
        XeroInvoiceLineItem(
          quantity = 1,
          description = ldi.desc.alt("discount"),
          accountCode = "300",
          unitAmount = ldi.invoiceAmountWithGst,
          taxType = if(let gR = ldi.gstRate) { 
            if(gR == 0.15) input2 else if (gR == 0) zeroRated else none
          }else none
        )
      }
    } else {
      invoiceRevision.items*.as[SalesDiscountItem].map { ldi =>
        XeroInvoiceLineItem(
          quantity = 1,
          description = ldi.desc.alt("discount"),
          accountCode = "200",
          unitAmount = ldi.invoiceAmountWithGst,
          taxType = if(let gR = ldi.gstRate) { 
            if(gR == 0.15) {
              output2
            }else if (gR == 0) zeroRated else none
          }else none
        )
      }
    }

    let extInvId = order.extId(service)
      
    let _ <- if(!order.debtCounterparty?.extId(service)){
      PushContactJob(service = service, company = order.debtCounterparty!).do()
    }

    let xeroInv = if (order.deleted) XeroInvoice(
      invoiceID = extInvId
      status = voided
    )
    else XeroInvoice(
      invoiceID = extInvId

      type = if (order.isPurchase) accPay else accRec

      status = if (invoiceLineItems.all(taxType) && lastDueDate) submitted /*authorised*/ else draft

      lineAmountTypes = Inclusive

      invoiceNumber = order.number
      contact = XeroContact(contactID = order.debtCounterparty!.extId(service))
      lineItems = invoiceLineItems + invoiceLineDiscountItems
      currencyCode = invoiceRevision.currency
      // /* dateString used instead of */date = invoiceRevision.date
      dateString = invoiceRevision.date
      // /* dueDateString used instead of */dueDate = lastDueDate
      dueDateString = lastDueDate
      
      reference = order.referenceNumber

      totalDiscount = invoiceRevision.items*.as[OrderProductItem]*.discount.sum

      url = order.formUrl
    )

    // xeroInv.json.log("xeroInvoice")
      
    let linkPayRec = if (order.isPurchase) "AccountsPayable" else "AccountsReceivable"

    if (let id = extInvId) {
      // id.log("ext id")
      order.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$id")
      //if(order.payments.filter(service.extId(_)).isEmpty) { // invoice in Xero can't be updated if it has payment or credit note
      // This condition is bad now because updated error handling. It is better to see error.
      let r <- service.https("Invoices/$id").post(xeroInv.json)
      r.body!
    } else if (!order.deleted) {
      let r <- service.https("Invoices").post(xeroInv.json)
      if(let rID = r.body!.parseJson[XeroInvoicesResponse]?.invoices.first.invoiceID) {
        order.updateExtId(service, rID)
        order.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$rID")
      } else {
        throw "XeroInvoice push error: ${r.body!}"
      }
    }
      
    // !!!: Pushing Payments to Xero can cause payments duplication on Xero side
    /*let _ <- if(invoice.extId(service) && xeroInv.status == authorised) invoice.payments.map { p =>
        PushPaymentJob(service = this.service, payment = p, invoice = this.invoice).run()
      }*/
  }
  
  override back func error(error: Any): JobError = {
    if (let e = error.as[JobError]) return e
    guard(let r = error.as[HttpResponse] where r.code == 400) else return ReportError(error = error)
    
	if (r.body!.parseJson[XeroError]?.elements*.validationErrors
        .find(_.message == "Invoice not of valid status for modification")
    ) {
      if (!isSync) {
        let header = "Order changes can't be pushed to Xero (because restrictions in XeroAPI)."
        let messages = r.body!.parseJson[XeroError]?.elements*.validationErrors*.message.join("\n")
        let link = "modify it manually in Xero"
        Activity.current!.setMainEntity(order)
        Activity.comment("${header}\n<pre><code>${messages}\n</code></pre>\nPlease <a href='${order.xeroUrl}' target='_blank'>${link}</a>")
      }
      
      IgnoreError.as[JobError] // ???: why it doesn't work without .as[JobError] ?
      						   // Compilation worker error for flow2b.xero:5.17.6:dev: null
    } else ReportError(error = error)
  }

  back func doDeleteInvoice: Future[Any] = {
    guard(
      order.payments*.account.all(_.is[CashAccount] || _.is[CardAccount])
      let id = order.extId(service)
    ) else return {}
    
    let xeroInv = XeroInvoice(
      invoiceID = id
      status = deleted
    )
    
    let r <- service.https("Invoices/$id").post(xeroInv.json)
    r.body!
  }
}
