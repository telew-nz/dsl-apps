class RetrieveContactsJob extends SystemJob {
  impl field service: XeroIntegration
  field pageNumber: UInt = 1
  

  impl func do = {
    let res <- service.https("Contacts").param("page", pageNumber).get
    let rb = res.body!.parseJson[XeroContactsResponse]
    
    rb.contacts.map { c =>
      saveContact(c)
    }
    
    if(rb.contacts.count > 0) RetrieveContactsJob(
      service = this.service, 
      pageNumber = this.pageNumber + 1
    ).enqueueFirst()
  }
  
  back func saveContact(xeroContact: XeroContact): LegalEntity = {
    if (let company = service.findExtId(xeroContact.contactID, _.as[LegalEntity])) {
      company
    } else {
      let companyPersonName = [xeroContact.firstName, xeroContact.lastName].filter(!isEmpty).join(" ")
      
      let company = LegalEntity.all.find(_.isName(xeroContact.name)).result.get
            .or(if (let companyPersonName) 
                if (companyPersonName == xeroContact.name)
                Person(name = companyPersonName, currency = xeroContact.defaultCurrency))
            .alt(Company(title = xeroContact.name, currency = xeroContact.defaultCurrency))

      if(let cID = xeroContact.contactID) company.addExtId(service, cID)
      company.save()

      let person: Person? = company.as[Company]?.people.first?.person
                            .or(company.as[Person])
                            .or(if (let pName = companyPersonName)
                                  Person(name = pName, currency = xeroContact.defaultCurrency))

      person.map { p =>
        p.save()
        if (company.is[Company] && company.as[Company]?.people.first.isEmpty) CompanyPerson(person = p, company = company).save()
      }

      xeroContact.emailAddress.map { e => 
        (if(let person) person else company).addEmail(e) // ??? alt
      }

      xeroContact.website.map { w =>
        //???: WebsiteContact.add(company, w)
        company.contacts*.as[WebsiteContact].find(url == w).alt(WebsiteContact(addressee = company, url = w)).save
      }

      xeroContact.phones.map { p =>
        if(let phoneStr = p.phoneString) {
          company.addPhone(p.corePhoneType!, phoneStr)
        }
      }

      xeroContact.addresses.map { a =>
        var addr = a.address
        if(!addr.isEmpty) {
          addr.company = xeroContact.name // ???
          addr.person  = person?.name     // ???
          company.addLocation(a.coreLocationType!, addr)
        }
      }

      xeroContact.contactPersons.map { p =>
        let cPerson = company.people*.person.find(_.name == p.name)
                      .or( if(let pName = p.name) {
                        let cp = Person(name = pName, currency = xeroContact.defaultCurrency)
                        cp.save()
                        CompanyPerson(person = cp, company = company).save()
                        cp
                      })

        if (let pEmail = p.emailAddress){
          (if(let cPerson) cPerson else company).addEmail(p.emailAddress) // ??? alt
        }
      }

      if(xeroContact.isSupplier && !company.our) company.makeVendor
      if(xeroContact.isCustomer && !company.our) company.makeCustomer
      company.addBankAccount(xeroContact.bankAccountDetails)

      company
    }
  }
}



extend entity XeroIntegration {
  back func getOrRetrieveContact(xeroContactID: String): Future[LegalEntity] = {
    if(let c = this.findExtId(xeroContactID, _.as[LegalEntity])) return Future(c)

    let res <- this.https("Contacts/${xeroContactID}").get
    let xc: XeroContact = res.body!.parseJson[XeroContactsResponse].contacts.first
    RetrieveContactsJob(service = this).saveContact(xc)
  }
}