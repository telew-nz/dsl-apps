extend trait Order {
  impl event onSave = {
    if (!IUser.current.is[XeroIntegration] && !RegisterService.isCurrent && touched) {
      XeroIntegration.all.map { s =>
        PushInvoiceJob(service = s, order = this).enqueue
      }
    }
  }
}


class PushInvoiceJob extends SystemJob {
  impl field service: XeroIntegration
  field order: Order

  impl func do = {
    
    //order.issueState.log("order.issueState")
    //order.state.log("order.state")
    //order.payments*.account.all(_.is[BankAccount]).log("order.payments*.account.all(_.is[BankAccount])")
    //order.invoices.last.log("order.invoices.last")
    
    guard(
      order.issueState == InvoiceIssued && 
      (order.state == Complete || order.state == Closed) &&
      order.payments*.account.all(_.is[BankAccount])
      let invoiceRevision = order.invoices.last where invoiceRevision.date >= service.startDate   
    ) else return {}
   
      
    let lastDueDate = order.invoices*.dueDate.last

    let _ <- invoiceRevision.items*.as[OrderProductItem]
    .oneByOne { li =>
      let isRent = li.deliveryItem.moveOutStockType == Asset
      if (!li.product.extId(this.service.idSrc(isRent))) {
        PushItemJob(service = this.service, product = li.product, isRent = isRent).do
      }
    }

      
      
    let invoiceLineItems = invoiceRevision.items*.as[OrderProductItem].map { li =>
      let isRent = li.deliveryItem.moveOutStockType == Asset
      XeroInvoiceLineItem(
        itemCode = li.product.extCode(service.idSrc(isRent))
        quantity = li.invoiceQty!,
        description = li.fullDesc,
        unitAmount = (if(order.isPurchase) li.invoiceAmountWithGst else li.amountWithGst) / li.invoiceQty!
        // discount in Xero works only for sales

        taxType = if(let gR = li.gstRate) { 
          if(gR == 0.15) {
            if (order.is[SalesOrder]) output2 else input2
          }else if (gR == 0) zeroRated else none
        }else none

        discountRate = if(!order.isPurchase) if(let a = li.amountNoGst) 100.00 * li.discountNoGst / a //%
        // sometimes discount doesn't work properly because precision
      )
    }
      
    let invoiceLineDiscountItems = if(order.isPurchase) {
      invoiceRevision.items*.as[PurchaseDiscountItem].map { ldi =>
        XeroInvoiceLineItem(
          quantity = 1,
          description = ldi.desc.alt("discount"),
          accountCode = "300",
          unitAmount = ldi.invoiceAmountWithGst,
          taxType = if(let gR = ldi.gstRate) { 
            if(gR == 0.15) input2 else if (gR == 0) zeroRated else none
          }else none
        )
      }
    } else {
      invoiceRevision.items*.as[SalesDiscountItem].map { ldi =>
        XeroInvoiceLineItem(
          quantity = 1,
          description = ldi.desc.alt("discount"),
          accountCode = "200",
          unitAmount = ldi.invoiceAmountWithGst,
          taxType = if(let gR = ldi.gstRate) { 
            if(gR == 0.15) {
              output2
            }else if (gR == 0) zeroRated else none
          }else none
        )
      }
    }

    let extInvId = order.extId(service)
      
    let _ <- if(!order.debtCounterparty?.extId(service)){
      PushContactJob(service = service, company = order.debtCounterparty!).do()
    }

    let xeroInv = if (order.deleted) XeroInvoice(
      invoiceID = extInvId
      status = voided
    )
    else XeroInvoice(
      invoiceID = extInvId

      type = if (order.isPurchase) accPay else accRec

      status = if (invoiceLineItems.all(taxType) && lastDueDate) authorised else draft

      lineAmountTypes = Inclusive

      contact = XeroContact(contactID = order.debtCounterparty!.extId(service))
      lineItems = invoiceLineItems + invoiceLineDiscountItems
      currencyCode = invoiceRevision.currency
      date = invoiceRevision.date
      dueDate = lastDueDate
      
      reference = order.referenceNumber

      totalDiscount = invoiceRevision.items*.as[OrderProductItem]*.discount.sum

      url = order.formUrl
    )

      // xeroInv.json.log("xeroInvoice")
      
    let linkPayRec = if (order.isPurchase) "AccountsPayable" else "AccountsReceivable"

    if (let id = extInvId) {
      // id.log("ext id")
      order.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$id")
      if(order.payments.filter(service.extId(_)).isEmpty) { // invoice in Xero can't be updated if it has payment or credit note
        let r <- service.https("Invoices/$id").post(xeroInv.json)
        r.body!
      }
    } else if (!order.deleted) {
      let r <- service.https("Invoices").post(xeroInv.json)
      if(let rID = r.body!.parseJson[XeroInvoicesResponse]?.invoices.first.invoiceID) {
        order.updateExtId(service, rID)
        order.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$rID")
      } else {
        throw "XeroInvoice push error: ${r.body!}"
      }
    }
      
    // !!!: Pushing Payments to Xero can cause payments duplication on Xero side
    /*let _ <- if(invoice.extId(service) && xeroInv.status == authorised) invoice.payments.map { p =>
        PushPaymentJob(service = this.service, payment = p, invoice = this.invoice).run()
      }*/
  }
}
