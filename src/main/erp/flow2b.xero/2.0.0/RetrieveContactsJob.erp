class RetrieveContactsJob extends SystemJob {
  field service: XeroIntegration
  
  func do = {
    nextPage(1)
  }
  
  back func nextPage(number: UInt): Future[Any] = {
    let res <- service.https("Contacts").param("page", number).get
    let rb = res.body!.parseJson[XeroContactsResponse]
    
    rb.contacts.map { c =>
      saveContact(c)
    }
    
    if(rb.contacts.count > 0) nextPage(number + 1)
  }
  
  
  back func saveContact(xeroContact: XeroContact) = {
  	let company = service.findExtId(xeroContact.contactID, _.as[Company])
                  .alt(Company(title = xeroContact.name, currency = xeroContact.defaultCurrency))
    
    company.updateExtId(service, xeroContact.contactID)
    company.save()
    
    let person: Person? = company.people.first?.person
                          .or(if (let pName = [xeroContact.firstName, xeroContact.lastName].filter(!isEmpty).join(" "))
                                Person(name = pName, currency = xeroContact.defaultCurrency))
    
    person.map { p =>
      p.save()
      if (company.people.first.isEmpty) CompanyPerson(person = p, company = company).save()
    }
    
    xeroContact.emailAddress.map { e => 
      EmailContact.add(if(let person) person else company, e)
    }
    
    xeroContact.website.map { w =>
      //???: WebsiteContact.add(company, w)
      company.contacts*.as[WebsiteContact].find(url == w).alt(WebsiteContact(addressee = company, url = w)).save
    }
    
    xeroContact.phones.map { p =>
      if(let phoneStr = p.phoneString) {
        PhoneContact.add(company, p.corePhoneType!, phoneStr)
      }
    }
    
    xeroContact.addresses.map { a =>
      var addr = a.address
      if(!addr.isEmpty) {
        addr.company = xeroContact.name // ???
        addr.person  = person?.name     // ???
        Location.add(company, a.coreLocationType!, addr)
      }
    }
    
    xeroContact.contactPersons.map { p =>
      let cPerson = company.people*.person.find(_.name == p.name)
      				.or( if(let pName = p.name) {
                      let cp = Person(name = pName, currency = xeroContact.defaultCurrency)
                      cp.save()
                      CompanyPerson(person = cp, company = company).save()
                      cp
                    })
      
      if (let pEmail = p.emailAddress){
        EmailContact.add(if(let cPerson) cPerson else company, p.emailAddress)
      }
    }
    
    if(xeroContact.isSupplier) company.makeVendor
    if(xeroContact.isCustomer) company.makeCustomer
    BankAccountPaymentMethod.add(company, xeroContact.bankAccountDetails)
  }
}
