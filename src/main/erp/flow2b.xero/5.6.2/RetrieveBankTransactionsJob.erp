class RetrieveBankTransactionsJob extends SystemJob {
  field service: XeroIntegration
  field pageNumber: UInt = 1
  field dateFrom: Date?
  
  func do = {
    let res <- service.https("BankTransactions").param("page", pageNumber).get
    
    let rb = res.body!.parseJson[XeroBankTransactionsResponse]
    
    let cache = XeroCache(service = service)
    let _ <- rb.bankTransactions.filter{tr => 
      (tr.type == spend || tr.type == receive) &&
      (!dateFrom || (tr.date >= dateFrom))
    }.oneByOne { t =>
      saveBankTransaction(cache, t)
    }
    
    if(rb.bankTransactions.count > 0) RetrieveBankTransactionsJob(
      service = this.service,
      pageNumber = this.pageNumber + 1
    ).enqueueFirst()
  }
  
  
  back func saveBankTransaction(cache: XeroCache, xeroTransaction: XeroBankTransaction): Future[Payment] = {
    //xeroTransaction.json.log("transaction")
    if(let pay = service.findExtId(xeroTransaction.bankTransactionID, _.as[Payment])) {
      pay
    } else {
      let cont = service.findExtId(xeroTransaction.contact?.contactID, _.as[LegalEntity]).alt(throw "Retreive XeroBankTransaction error: There is no LegalEntity with extId = ${xeroTransaction.contact?.contactID}")
      let acc = service.findExtId(xeroTransaction.bankAccount?.accountID, _.as[BankAccount]).alt(throw "Retreive XeroBankTransaction error: There is no BankAccount with extId = ${xeroTransaction.bankAccount?.accountID}")
    
      let pay = {
        if(xeroTransaction.type == receive) { 
          IncomingPayment(
            date = xeroTransaction.date!,
            account = acc,
            payer = cont,
            amount = xeroTransaction.total!.as[Money[acc.currency]]!,
            reasons = []
          )
        } else {
          OutgoingPayment( 
            date = xeroTransaction.date!,
            account = acc,
            payee = cont,
            amount = xeroTransaction.total!.as[Money[acc.currency]]!,
            reasons = []
          )
        }
      }

      pay.updateExtId(service, xeroTransaction.bankTransactionID)
      pay.updateExtUrl(service, "https://go.xero.com/Bank/ViewTransaction.aspx?bankTransactionID=${xeroTransaction.bankTransactionID}")
      pay.save

      let _ <- if(xeroTransaction.type == spend && !xeroTransaction.lineItems.isEmpty) {

        let oPay = pay.as[OutgoingPayment]!
        oPay.reasons = null // ??? is it enough to clean it or I should delete each Expense?
        oPay.save
        xeroTransaction.lineItems.filter(unitAmount).oneByOne { li => 
          let xeroAcc <- cache.account(li.accountCode!)
          let words = xeroAcc.name.lower.split(" ").toSet
          if (xeroAcc.type == wagesExpense || words.contains("salary") || words.contains("salaries") || words.contains("wage") || words.contains("wages")) {
            let st <- service.salaryType(cache, li.accountCode!)
            Salary(
              payment = oPay, amount = li.total
              salaryType = st
            ).as[IReason]
          } else if (xeroAcc.type == expense || xeroAcc.type == overheads || xeroAcc.type == overheads || xeroAcc.type == directCosts) {
            if (cont.our) {
              if (pay.desc) pay.desc += "\n\n"
              pay.desc += "$(xeroAcc.name) ${li.total}"
              null[IReason]
            } else {
              if(!cont.vendor) {
                cont.makeVendor()
              }
              if (li.taxType?.rate) {
                cont.vendor!.gstStatus = Registered
              }
              let exp <- service.expenseType(cache, li.accountCode!)
              PaymentExpense(
                payment = oPay,
                desc    = li.description
                expense = exp
                gstRate = li.taxType?.rate.as[UPercent[2]]
                amount = li.total
              ).as[IReason]
            }
          } else if (xeroAcc.type == equity) {
            Withdrawal(payment = oPay, amount = li.total)
          //} else if (xeroAcc.type == currLiab || xeroAcc.type == liability) {
          } else if (service.setup.drawingsCurrentAccount && (words.contains("drawings") || words.contains("drawing") || words.contains("withdrawal") || words.contains("withdrawals")) ) {
            Withdrawal(
              payment = oPay, amount = li.total
              currentAccount = service.setup.drawingsCurrentAccount! 
            )
          } else if (words.contains("paye")) {
            TaxPayment(payment = oPay, amount = li.total, tax = PayrollTax)
          } else if (words.contains("gst")) {
            TaxPayment(payment = oPay, amount = li.total, tax = Gst)
          } else {
            if (pay.desc) pay.desc += "\n\n"
            pay.desc += "$(xeroAcc.name) ${li.total}"
            null[IReason]
          }
        }
      } else if(xeroTransaction.type == receive && !xeroTransaction.lineItems.isEmpty) {
        let iPay = pay.as[IncomingPayment]!
        iPay.reasons = null // ??? is it enough to clean it or I should delete each Expense?
        iPay.save
        xeroTransaction.lineItems.filter(unitAmount).oneByOne { li => 
          let xeroAcc <- cache.account(li.accountCode!)
          let words = xeroAcc.name.lower.split(" ").toSet
          if (xeroAcc.type == revenue || xeroAcc.type == otherIncome || xeroAcc.type == sales) {
            let rev <- service.revenueType(cache, li.accountCode!)

            PaymentRevenue(
              payment = iPay,
              desc    = li.description
              revenue = rev
              gstRate = li.taxType?.rate.as[UPercent[2]]
              amount = li.total
            ).as[IReason]
          } else if (words.contains("paye")) {
            TaxReturn(payment = iPay, amount = li.total, tax = PayrollTax)
          } else if (words.contains("gst")) {
            TaxReturn(payment = iPay, amount = li.total, tax = Gst)
          } else if (xeroAcc.type == equity) {
            AdditionalCapital(payment = iPay, amount = li.total)
          } else if ((xeroAcc.type == currLiab || xeroAcc.type == liability || xeroAcc.type == termLiab) && (words.contains("capital") || words.contains("fund") || words.contains("funds"))) {
            AdditionalCapital(
              payment = iPay, amount = li.total
              currentAccount = 
                CurrentAccount.all.find(a => a.counterparty == cont && a.currency == acc.currency).result.get
                  .alt(CurrentAccount(counterparty = cont, legalEntity = service.legalEntity, currency = acc.currency).save)        
            )
          } else {
            if (pay.desc) pay.desc += "\n\n"
            pay.desc += "$(xeroAcc.name) ${li.total}"
            null[IReason]
          }
        }
      }
      pay
    }    
  }
}
