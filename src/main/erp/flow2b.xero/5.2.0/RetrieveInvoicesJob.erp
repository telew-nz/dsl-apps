class RetrieveInvoicesJob extends SystemJob {
  field service: XeroIntegration
  field dateFrom: Date?

  func do = {
    nextPage(1, [])
  }
  
  back func nextPage(number: UInt, accInvoices: [XeroInvoice]?): Future[Any] = {
    let res <- service.https("Invoices")
    			.param("Statuses", "PAID,AUTHORISED,SUBMITTED,DRAFT")
				.param("page", number)
    			.get
    let rb = res.body!.parseJson[XeroInvoicesResponse]
    
    let invs = rb.invoices.filter{ xi => 
      !dateFrom || (xi.date >= dateFrom) || (xi.status != paid)
    }
    
    if (rb.invoices.count > 0) {
      nextPage(number + 1, accInvoices + invs)
    } else {
      let allInvs = accInvoices + invs
      allInvs.foreach{inv => 
        RetrieveInvoiceJob(service = this.service, invoice = inv).run()
      }
    }
  }

}


class RetrieveInvoiceJob extends SystemJob {
  field service: XeroIntegration
  field invoice: XeroInvoice
  
  func do = {   
    if(invoice.status != voided) {
      // invoice
      let _ <- saveInvoice(invoice)

      // credit notes
      // ???

      // payments
      let _ <- invoice.payments.map { p =>
        if(let pID = p.paymentID) RetrievePaymentJob(service = this.service, paymentID = pID).do
      }.allCompleted
    }
  }
  
  
  back func saveInvoice(xi: XeroInvoice): Future[Any] = {
    if(!service.findExtId(xi.invoiceID, _.as[Order])){      
      let optItms <- xi.lineItems.map { li => 
        if(let itmCode = li.itemCode) {
          let ires <- service.https("Items/$(li.itemCode)").get // ERROR: when itemCode contains spaces
          let itm = ires.body!.parseJson[XeroItemsResponse].items.first
          let prod = RetrieveItemsJob(service = this.service).saveItem(itm)!

          Option.some(product = prod, lineItem = li)
        } else if(let accCode = li.accountCode){
          let res <- service.https("Accounts").get
          let ac = res.body!.parseJson[XeroAccountsResponse].accounts.find(code == accCode)!

          let existingService <- Service.all.find(title == ac.name! && description == ac.description && status == Obsolete).result
          let prod = existingService.alt(Service(title = ac.name!, description = ac.description, status = Obsolete))
          prod.save
          
          let _ <- if(accCode != 200){
          	let catOpt <- ProductCategory.all.find(name == ac.name).result
            let cat = catOpt.alt(ProductCategory(name = ac.name!))
            cat.save
            prod.categories = prod.categories + cat
            prod.save
          }
          
          Option.some(product = prod, lineItem = li)
        } else Future(Option.none[(IBaseProduct, XeroInvoiceLineItem)])
      }.allCompleted
      
      let itms = optItms.filter(_.isDefined).map(_!)
      let invCounterparty: LegalEntity <- if(let c = service.findExtId(xi.contact!.contactID, _.as[LegalEntity])){
      	Future(c)
      } else {
        let res <- service.https("Contacts/${xi.contact!.contactID}").get
        let xc: XeroContact = res.body!.parseJson[XeroContactsResponse].contacts.first
        RetrieveContactsJob(service = this.service).saveContact(xc)
      }
      
      if((xi.type == accRec) && !invCounterparty.vendor) {
        invCounterparty.makeVendor()
        invCounterparty.vendor!.gstStatus = Registered
      }
      // invCounterparty.log
      // itms.map(item.itemID, product.title)*.log

      let ord = if(xi.type == accRec) SalesOrder(
        customer = invCounterparty.makeCustomer
        vendor = service.legalEntity
      )else PurchaseOrder(
        customer = service.legalEntity
        vendor = invCounterparty.makeVendor
      )
      
      if(xi.type == accRec){
        if(let d = ord.deliveries.first.as[SalesDelivery]){
          d.source = service.store
          if (xi.status == paid) {
            d.status = Delivered
          }
        }
      } else {
        if(let d = ord.deliveries.first.as[PurchaseDelivery]){
          d.destination = service.store
          if (xi.status == paid) {
            d.status = Delivered
          }
        }
      }
      
      ord.date = xi.date.alt(Date.now)
           
      ord.save()

      if(xi.type == accRec) itms.map { itm =>
        let si = SalesItem (
          order = ord.as[SalesOrder]!
          deliveryItem = DeliveryItem( 
            product = itm.product.as[ISubProduct]!,
            unit = itm.product.unit,
            qty = itm.lineItem.quantity.alt(1)
          )
          //amountWithGst = itm.lineItem.unitAmount * itm.lineItem.quantity
          gstRate = itm.lineItem.taxType?.rate.as[UPercent[2]]
        )
        
        if (xi.lineAmountTypes == Inclusive) {
          si.amountWithGst = itm.lineItem.unitAmount * itm.lineItem.quantity
        } else {
          si.amountNoGst = itm.lineItem.unitAmount * itm.lineItem.quantity
        }
        if(itm.product.title != itm.lineItem.description) si.itemDesc = itm.lineItem.description
        si.save         
      } else itms.map { itm =>
        let pi = PurchaseItem (
          order = ord.as[PurchaseOrder]!
          deliveryItem = DeliveryItem(
            product = itm.product.as[ISubProduct]!,
            unit = itm.product.unit,
            qty = itm.lineItem.quantity.alt(1)
          )
          gstRate = itm.lineItem.taxType?.rate.as[UPercent[2]]
        )
        if (xi.lineAmountTypes == Inclusive){
          pi.amountWithGst = itm.lineItem.unitAmount * itm.lineItem.quantity
        } else {
          pi.amountNoGst = itm.lineItem.unitAmount * itm.lineItem.quantity
        }
        if(itm.product.title != itm.lineItem.description) pi.itemDesc = itm.lineItem.description
        pi.save
      }
      
      ord.updateExtId(service, xi.invoiceID)
      
      let linkPayRec = if (xi.type == accRec) "AccountsReceivable" else "AccountsPayable" 
      ord.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=${xi.invoiceID}")
      
      let inv = ord.createInvoice(xi.date.alt(Date.now))
      inv.date = xi.date.alt(Date.now)
      inv.dueDate = xi.dueDate
      inv.totalDue = ord.orderTotal
      inv.save()
    }
  }
}