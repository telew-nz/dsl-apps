class RetrieveBankTransactionsJob extends SystemJob {
  field service: XeroIntegration
  
  func do = {
    nextPage(1)
  }
  
  back func nextPage(number: UInt): Future[Any] = {
    let accRes <- service.https("Accounts").get
    let accounts = accRes.body!.parseJson[XeroAccountsResponse].accounts
    
    let res <- service.https("BankTransactions").param("page", number).get
    
    let rb = res.body!.parseJson[XeroBankTransactionsResponse]
    
    rb.bankTransactions.map { t =>
      saveBankTransaction(t, accounts)
    }
    
    if(rb.bankTransactions.count > 0) nextPage(number + 1)
  }
  
  
  back func saveBankTransaction(xeroTransaction: XeroBankTransaction, accounts: [XeroAccount]) = {
    //xeroTransaction.json.log("transaction")
    if(let cont = service.findExtId(xeroTransaction.contact?.contactID, _.as[LegalEntity])){
      if(let acc = service.findExtId(xeroTransaction.bankAccount?.accountID, _.as[BankAccount])){
        if(let pay = service.findExtId(xeroTransaction.bankTransactionID, _.as[Payment])
           .or(
             if(xeroTransaction.type == receive) { 
               IncomingPayment(
                 account = acc,
                 payer = cont,
                 amount = xeroTransaction.total!.as[Money[acc.currency]]!
               )
             } else if(xeroTransaction.type == spend) {
               OutgoingPayment( 
                 account = acc,
                 payee = cont,
                 amount = xeroTransaction.total!.as[Money[acc.currency]]!
               )
             })) {
          
          pay.date = xeroTransaction.date!
          pay.updateExtId(service, xeroTransaction.bankTransactionID)
          pay.updateExtUrl(service, "https://go.xero.com/Bank/ViewTransaction.aspx?bankTransactionID=${xeroTransaction.bankTransactionID}")
          pay.save


          if(xeroTransaction.type == spend && !xeroTransaction.lineItems.isEmpty) {
            
            if(!cont.vendor) {
              cont.makeVendor()
              cont.vendor!.gstStatus = Registered
            }
            
            let oPay = pay.as[OutgoingPayment]!
            oPay.reasons = null // ??? is it enough to clean it or I should delete each Expense?
            oPay.save
            xeroTransaction.lineItems.map { li => 
              let liAcc = accounts.find(code == li.accountCode)
              let aName = liAcc?.name
              let aDesc = liAcc?.description
              let exp0 = ExpenseType.all.find(title == aName && description == aDesc).result.get
              let exp = exp0.alt(ExpenseType(title = aName!, description = aDesc))
              PaymentExpense(
                payment = oPay,
                desc    = li.description
                expense = exp
                gstRate = li.taxType?.as[UPercent[2]]
              ).save
            }
          }

        }
      } else throw "Retreive XeroBankTransaction error: There is no BankAccount with extId = ${xeroTransaction.bankAccount?.accountID}"
    } else throw "Retreive XeroBankTransaction error: There is no LegalEntity with extId = ${xeroTransaction.contact?.contactID}"
  }
}
