extend enum ProductUnit {
  case Part(symbol = "part", scale = 4, base = null, k = 1)
}

class RetrieveInvoicesJob extends SystemJob {
  impl field service: XeroIntegration
  field pageNumber: UInt = 1
  field accInvoices: [XeroInvoice]? = []

  impl func do = {
    let res <- service.https("Invoices")
    			.param("Statuses", "PAID,AUTHORISED,SUBMITTED,DRAFT")
				.param("page", pageNumber)
    			.get
    let rb = res.body!.parseJson[XeroInvoicesResponse]
    
    let dateFrom = service.setup.pullInvoicesFrom
    let invs = rb.invoices.filter{ xi => 
      !dateFrom || (xi.date >= dateFrom) || (xi.status != paid)
    }
    let allInvs = accInvoices + invs
    
    if (rb.invoices.count > 0) {
      RetrieveInvoicesJob(
        service = this.service,
        pageNumber = this.pageNumber + 1,
        accInvoices = allInvs
      ).enqueueFirst()
    } else {
      allInvs.foreach{inv => 
        RetrieveInvoiceJob(service = this.service, invoice = inv).enqueueFirst()
      }
    }
  }
}


back class RetrieveInvoiceJob extends SystemJob {
  impl field service: XeroIntegration
  field invoice: XeroInvoice
  impl func toString = "RetrieveInvoiceJob $(invoice.invoiceNumber) $(invoice.invoiceID)"
  impl func do = {   
    if (invoice.status != voided) {
      // invoice
      let order <- saveInvoice(invoice)

      // credit notes
      // ???

      // payments
      let _ <- if (order.created) {
        invoice.payments.oneByOne { p =>
          if (let pID = p.paymentID)  {
            RetrievePaymentJob(service = this.service, paymentID = pID).do
          }
        }
      }
      order
    } 
  }
  
  
  back func saveInvoice(xi: XeroInvoice): Future[Order] = {
    let cache = XeroCache(service = service)
    if(let o = service.findExtId(xi.invoiceID, _.as[Order])) {      
      o
    } else {
      let invCounterparty: LegalEntity <- if(let c = service.findExtId(xi.contact!.contactID, _.as[LegalEntity])){
      	Future(c)
      } else {
        let res <- service.https("Contacts/${xi.contact!.contactID}").get
        let xc: XeroContact = res.body!.parseJson[XeroContactsResponse].contacts.first
        RetrieveContactsJob(service = this.service).saveContact(xc)
      }
      
      if((xi.type == accRec) && !invCounterparty.vendor) {
        invCounterparty.makeVendor()
        invCounterparty.vendor!.gstStatus = Registered
      }
      // invCounterparty.log
      // itms.map(item.itemID, product.title)*.log

      let ord: Order = if(xi.type == accRec) SalesOrder(
        referenceNumber = xi.invoiceNumber
        customer = invCounterparty.makeCustomer
        vendor = service.legalEntity
      )else PurchaseOrder(
        referenceNumber = xi.invoiceNumber
        customer = service.legalEntity
        vendor = invCounterparty.makeVendor
      )

      ord.date = xi.date.alt(Date.now)
      ord.accepted = ord.date
      if(xi.type == accRec){
        if (let d = ord.deliveries.first.as[SalesDelivery]){
          d.source = service.store
          if (xi.status == paid) {
            d.status = Delivered
            d.dispatchDate = ord.date
            d.deliveryDate = ord.date
          }
        }
      } else {
        if(let d = ord.deliveries.first.as[PurchaseDelivery]){
          d.destination = service.store
          if (xi.status == paid) {
            d.status = Delivered
            d.dispatchDate = ord.date
            d.deliveryDate = ord.date
          }
        }
      }
           
      ord.save()
      
      let itms = xi.lineItems.filter(li => li.itemCode || li.accountCode)
      
      let _ <- if(xi.type == accRec) {
        itms.oneByOne { li =>
          let si: OrderItem <- {
            if (li.unitAmount < 0) {
              SalesDiscountItem(
                order = ord.as[SalesOrder]!
                gstRate = li.taxType?.rate
              )
            } else {
              let prod: ISubProduct? <- prodByCode(cache, li.itemCode)
              if (let p = prod) {
                if (li.quantity.as[Int] != li.quantity && p.unit != Part) {
                  makePart(p)
                }
                SalesItem (
                  order = ord.as[SalesOrder]!
                  deliveryItem = DeliveryItem( 
                    product = p
                    unit = p.unit
                    qty = li.quantity.positive.alt(1)
                  )
                  itemDesc = if(p.title != li.description) {let d: Text? = li.description
                                                               d}
                  gstRate = li.taxType?.rate
                ).save             
              } else {
                let ex <- service.revenueType(cache, li.accountCode)
                RevenueItem (
                  order = ord.as[SalesOrder]!
                  revenue = ex,
                  desc = if(ex.title != li.description) {let d: Text? = li.description
                                                         d}
                  gstRate = li.taxType?.rate
                ).save
              }
            }
          }
          
          let am = li.unitAmount * li.quantity
          let disc = ((am*li.discountRate).round(halfDown, 0).as[Money[4]]/100)
          if (let am = am.positive) {
            if (xi.lineAmountTypes == Inclusive) {
              si.amountWithGst = am
              si.discountWithGst = disc.positive
            } else {
              si.amountNoGst = am
              si.discountNoGst = disc.positive
            }
          } else {
            if (xi.lineAmountTypes == Inclusive) {
              si.discountWithGst = (disc - am).positive
            } else {
              si.discountNoGst = (disc - am).positive
            }
          }
          
          si.save
        } 
      } else {
        itms.oneByOne { li =>
          let pi: OrderItem <- {
            if (li.unitAmount < 0) {
              PurchaseDiscountItem(
                order = ord.as[PurchaseOrder]!
                gstRate = li.taxType?.rate
              )
            } else {
              let prod: ISubProduct? <- prodByCode(cache, li.itemCode)
              if (let p = prod) {
                if (li.quantity.as[Int] != li.quantity && p.unit != Part) {
                  makePart(p)
                }
                PurchaseItem (
                  order = ord.as[PurchaseOrder]!
                  deliveryItem = DeliveryItem( 
                    product = p
                    unit = p.unit
                    qty = li.quantity.positive.alt(1)
                  )
                  itemDesc = if(p.title != li.description) {let d: Text? = li.description
                                                               d}
                  gstRate = li.taxType?.rate
                ).save             
              } else {
                let ex <- service.expenseType(cache, li.accountCode)
                ExpenseItem (
                  order = ord.as[PurchaseOrder]!
                  expense = ex,
                  desc = if(ex.title != li.description) {let d: Text? = li.description
                                                         d}
                  gstRate = li.taxType?.rate
                ).save
              }
            }
          }
          let am = li.unitAmount * li.quantity
          let disc = ((am*li.discountRate).round(halfDown, 0).as[Money[4]]/100)
          if (let am = am.positive) {
            if (xi.lineAmountTypes == Inclusive) {
              pi.amountWithGst = am
              pi.discountWithGst = disc.positive
            } else {
              pi.amountNoGst = am
              pi.discountNoGst = disc.positive
            }
          } else {
            if (xi.lineAmountTypes == Inclusive) {
              pi.discountWithGst = (disc - am).positive
            } else {
              pi.discountNoGst = (disc - am).positive
            }
          }
          
          pi.save
        }
      }
      
      ord.updateExtId(service, xi.invoiceID)
      
      let linkPayRec = if (xi.type == accRec) "AccountsReceivable" else "AccountsPayable" 
      ord.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=${xi.invoiceID}")
      
      let inv = ord.createInvoice(xi.date.alt(Date.now))
      inv.date = xi.date.alt(Date.now)
      inv.dueDate = xi.dueDate
      inv.totalDue = ord.orderTotal
      inv.save()

      ord.saveMain
    }
  }
  private back func makePart(p: ISubProduct): Void = {
     if (let pp = p.superProduct.as[ISuperProduct with IAltUnits]) {
       pp.unit = Part
       pp.save
     } else if (let pp = p.superProduct.as[Service]) {
       pp.unit = Part
       pp.save
     } else {
       throw "Cannot update unit for product $p"
     }
     DeliveryItem.all.filter(product == p).update(unit = Part)
  }
  
  private back func prodByCode(cache: XeroCache, code: String?): Future[ISubProduct?] = {
    if (let code) {
      if (let prod = service.findExtCode(code, _.as[ISubProduct])) {
        Future(prod)
      } else {
        {
          let ires <- service.https("Items/$code").get
          let itm = ires.body!.parseJson[XeroItemsResponse].items.first
          let pr <- RetrieveItemsJob(service = this.service).saveItem(cache, itm)
          Option.some(pr)
        }.recover{err =>
          if (err.as[HttpResponse]?.code == 404) {
            let p : ISubProduct? = null
            let pp: ISubProduct?? = Option.some[ISubProduct?](p)
            pp
          } else {
            null
          }
        }
      }
    } else {
      Future(null[ISubProduct])
    }
  }
}