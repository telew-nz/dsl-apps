extend entity XeroIntegration {
  field invoiceIdForPayments: String?
  
  view test = nav(label = "$title (test)"){tabs{
    grid(label = "Test"){
      issuesView
      serviceState
      syncMode
      organisationId
      
      row{
        setupState >> field(editMode = AlwaysRead)
        setupProgress
      }
      //setup.started
      
      button("Reset Initial Setup") {
        UI.info("Setup reset")
        ResetInitialSetupJob(service = this).enqueue()
      }
      
      button("Retrieve Contacts") {
        UI.info("Retrieving contacts")
        RetrieveContactsJob(service = this).enqueue()
      }
      button("Push Contacts") {
        UI.info("Pushing contacts")
        LegalEntity.all*.touch
      }
      

      panel(label="Invoices"){grid{
        button("Push all invoices") {
          UI.info("Pushing invoices")
          Order.all.map { i =>
            PushInvoiceJob(order = i, service = this).enqueue()
          }
        }
        row{ 
          setup.pullInvoicesFrom
          setup.pullDraftInvoices
        }
        button("Retrieve invoices") {
          UI.info("Retrieving invoices")
          //runTest("Retrieving invoices", tstF = { _ => 
            RetrieveInvoicesJob(service = this).enqueue
          //})
        }
      }}

      button("Retrieve Bank Accounts") {
        UI.info("Retrieving bank accoutns")
        RetrieveAccountsJob(service = this).enqueue()
      }

      button("Retrieve Payments") {
        UI.info("Retrieving payments")
        RetrievePaymentsJob(service = this).enqueue()
      }

      button("Retrieve Items") {
        UI.info("Retrieving items")
        RetrieveItemsJob(service = this).enqueue()
      }

      button("Sync Matched Items") {
        UI.info("Syncing matched items")
        RetrieveMatchedItemsJob(service = this).enqueue()
      }

      button("Retrieve Assets") {
        UI.info("Retrieving assets")
        RetrieveAssetsJob(service = this).enqueue()
      }

      button("Retrieve Bank Transaction") {
        UI.info("Retrieving bank transactions")
        RetrieveBankTransactionsJob(service = this).enqueue()
      }
      button("Retrieve Bank Transfers") {
        UI.info("Retrieving bank transfers")
        RetrieveBankTransfersJob(service = this).enqueue()
      }

      panel(label="Retrieve Invoice payments"){grid{
        invoiceIdForPayments >> field(label="Xero invoice ID")
        button("Retrieve Invoice Payments"){
          if(let invoiceIdForPayments){
            UI.info("Retrieving payments for invoice: $invoiceIdForPayments")
            //runTest("Retrieving payments for invoice: $invoiceIdForPayments", () => { 
            RetrieveInvoicePaymentsJob(service = this, invoiceID=invoiceIdForPayments).enqueue()
            //})
          } else {
            UI.info("Input invoice id for payments")
          }
        }
      }}

    }}}
  
  // ???: why it doesn't work?
  front func runTest(tstMsg: String, tstF: () => Any) = {
  	UI.info(tstMsg)
    XTestJob(service = this, msg = tstMsg, f = tstF).enqueue()
  }


  
}

class XTestJob extends SystemJob { 
  field msg: String
  field f: () => Any

  impl field service: XeroIntegration

  impl func do = {
    Activity.current!.setMainEntity(service)
    Activity.comment(msg)
    f()
  }
}


class ResetInitialSetupJob extends SystemJob {
  impl field service: XeroIntegration

  impl func do = {
    service.initialSyncBatch?.reset([].as[[SystemJob]?])
    //service.setup.started = false
    //service.save
  }
}