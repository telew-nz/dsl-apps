entity XeroIntegration extends SystemService with ExtIdSource[String] with OAuth1Rsa {
  field title: String
  field legalEntity: OurLegalEntity =? onlyOne

  func authTmpTokenUrl: Url = "https://api.xero.com/oauth/RequestToken"
  func authAuthorizeUrl: Url = "https://api.xero.com/oauth/Authorize"
  func authTokenExchangeUrl: Url = "https://api.xero.com/oauth/AccessToken"

  field authConsumerKey: String?
  
  field organisationId: String? // Should be got after save integration
  func webhookUrl = if(let organisationId) "https://ws.flow2b.com/api/v1/flow2b.xero.XeroWebhookRouter?id=$organisationId"
  
  func apiUrl: Url = "api.xero.com/api.xro/2.0/"
  func webUrl: Url = "http://xero.com/"

  back func https(path: String): HttpRequest = 
    HttpRequest(url = "$apiUrl$path", ssl = true)
      .oauth(this)
      .header("Accept", "application/json")
  
  field webhookKey: Password?
  system field webhookEndpoint: XeroWebhookEndpoint inline by service
  
  func roles: [Role]? = [Admin]
  
  
  event onSave = {
  	if(!organisationId) RetrieveOrganisationJob(service = this).run()
  }
  
  
  view form = nav{
    tabs{
    grid(label = "Settings"){
      title
      legalEntity
      serviceState
      button("Download .cer File", visible = id) {
        downloadPemFile("Flow2b-Xero.cer")
      }
      authConsumerKey
      webhookKey
      webhookUrl
    }
      grid(label = "Test"){
        button("Push all invoices") {
          UI.info("Pushing invoices")
          Invoice.all.map { i =>
            PushInvoiceJob(invoice = i, service = this).run()
          }
        }

        button("Retrieve Bank Accounts") {
          UI.info("Retrieving bank accoutns")
          RetrieveAccountsJob(service = this).run()
        }
        
        button("Retrieve Payments") {
          UI.info("Retrieving payments")
          RetrievePaymentsJob(service = this).run()
        }

        button("Retrieve Items") {
          UI.info("Retrieving items")
          RetrieveItemsJob(service = this).run()
        }

      }}
    
    button("Retrieve Contacts") {
      UI.info("Retrieving contacts")
      RetrieveContactsJob(service = this).run
    }
    button("Push Contacts") {
      UI.info("Pushing contacts")
      LegalEntity.all*.touch
    }}

  object view list = XeroIntegration.all >> list{grid(labels = None){
    x {title serviceState}
  }}
}