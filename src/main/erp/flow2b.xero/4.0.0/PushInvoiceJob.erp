extend entity Invoice {
  event onSave = {
    if (!IUser.current.is[XeroIntegration] && !RegisterService.isCurrent && touched) {
      XeroIntegration.all.map { s =>
        PushInvoiceJob(service = s, invoice = this).run
      }
    }
  }
}


class PushInvoiceJob extends SystemJob {
  field service: XeroIntegration
  field invoice: Invoice

  func do = {
    if(invoice.issueState == InvoiceIssued)
    if(let invoiceRevision = invoice.revisions.last) {

      let _ <- invoiceRevision.items*.as[OrderProductItem]*.product*.as[IBasicProduct].map { p =>
        PushItemJob(service = this.service, product = p).do()
      }.allCompleted()

      let invoiceLineItems = invoiceRevision.items*.as[OrderProductItem].map { li =>
        XeroInvoiceLineItem(
          itemCode = li.product.sku
          quantity = li.invoiceQty!
          unitAmount = (if(invoice.isPurchase) li.invoiceAmountNoGst else li.amountNoGst) / li.invoiceQty!
          // discount in Xero works only for sales

          taxType = if(li.gstRate == 15) {
            if (invoice.is[SalesInvoice]) output2 else input2
          }else if (li.gstRate == 0) zeroRated
          else if (li.gstRate == null) none
          else null
          
          discountRate = if(!invoice.isPurchase) if(let a = li.amountNoGst) 100.00 * li.discountNoGst / a //%
          // sometimes discount doesn't work properly because precision
        )
      }

      let extInvId = invoice.extId(service)
      
      let _ <- if(!invoice.orderCounterparty?.extId(service)){
        PushContactJob(service = service, company = invoice.orderCounterparty!).do()
      }

      let xeroInv = if (invoice.deleted) XeroInvoice(
        invoiceID = extInvId
        status = voided
      )
      else XeroInvoice(
        invoiceID = extInvId

        type = if (invoice.isPurchase) accPay else accRec

        status = if (invoiceLineItems.all(taxType) && invoiceRevision.dueDate) authorised else draft

        contact = XeroContact(contactID = invoice.orderCounterparty!.extId(service))
        lineItems = invoiceLineItems
        currencyCode = invoiceRevision.currency
        date = invoiceRevision.date
        dueDate = invoiceRevision.dueDate
        
        totalDiscount = invoiceRevision.items*.as[OrderProductItem]*.discount.sum
      )

      //xeroInv.json.log("xeroInvoice")
      
      let linkPayRec = if (invoice.isPurchase) "AccountsPayable" else "AccountsReceivable"
      
      let _ <- if(let id = extInvId) {
        invoice.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$id")
        if(invoice.payments.isEmpty) { // invoice in Xero can't be updated if it has payment or credit note
          let r <- service.https("Invoices/$id").post(xeroInv.json)
          r.body!
        }
      } else if (!invoice.deleted) {
        let r <- service.https("Invoices").post(xeroInv.json)
        if(let rID = r.body!.parseJson[XeroInvoicesResponse]?.invoices.first.invoiceID) {
          invoice.updateExtId(service, rID)
          invoice.updateExtUrl(service, "https://go.xero.com/$linkPayRec/View.aspx?InvoiceID=$rID")
        } else {
          throw "XeroInvoice push error: ${r.body!}"
        }
      }
    }
  }
}
