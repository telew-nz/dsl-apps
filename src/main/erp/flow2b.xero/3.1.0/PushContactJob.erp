class PushContactJob extends SystemJob {
  field service: XeroIntegration
  field company: Company
  
  func do = {
    let person: Person? = company.people.first?.person
    let email = person?.contacts*.as[EmailContact].first?.email
      			.or(company.contacts*.as[EmailContact].first?.email)
    
    let xeroContact = XeroContact(
      contactID = company.extId(service)
      contactStatus = if(company.deleted) Archived else Active
      name = company.title
      defaultCurrencyString = company.currency?.name
      isSupplier = company.isVendor
      isCustomer = company.isCustomer
      firstName = person?.firstName
      lastName  = person?.lastName
      
      emailAddress = email
      website = company.contacts*.as[WebsiteContact].first?.url // it doesn't work (in Xero API?)
      
      addresses = company.locations*.as[Location].flatMap { l =>
        l.types.map { lt =>
          let addr = l.address
          let aLines = addr.street.split("\n")*.trim.filter(_ != "")
          XeroAddress(
            addressType = locationTypeBackMapping.apply(lt).alt(Street)
            addressLine1 = aLines.first
            addressLine2 = aLines.drop(1).first
            addressLine3 = aLines.drop(2).first
            addressLine4 = aLines.drop(3).join("\n")
            country = addr.country
            city = addr.city
            region = addr.region
            postalCode = addr.postcode
          )
        }
      }
      
      //???: it seems there is one phone for one type in Xero. How should I process it?
      phones = company.contacts*.as[PhoneContact].map { ph =>
        let phoneList = ph.phone.split(" ")
        XeroPhone(
          phoneType = phoneTypeBackMapping.apply(ph.type).alt(Default)
          phoneNumber = phoneList.last
          phoneAreaCode = phoneList.dropLast(1).last
          phoneCountryCode = phoneList.dropLast(2).last
        )
      }
      
      contactPersons = company.people.filter(_.person != person).map { p =>
      	XeroContactPerson(
          firstName = p.person.firstName
          lastName  = p.person.lastName
          emailAddress = p.person.contacts*.as[EmailContact].first?.email
        )
      } + company.contacts*.as[EmailContact].filter(_.email != email).map { m =>
        XeroContactPerson(emailAddress = m.email)
      }
    )
    
    if(let id = xeroContact.contactID) {
      let r <- service.https("Contacts/$id").post(xeroContact.json)
      r.body!
    } else {
      let r <- service.https("Contacts").post(xeroContact.json)
      if(let cId = r.body!.parseJson[XeroContactsResponse]?.contacts.first?.contactID) {
        company.updateExtId(service, cId)
      } else {
      	throw "XeroContact push error: ${r.body!}"
      }
    }
  }


  object func phoneTypeBackMapping: [PhoneType -> XeroPhoneType] = [
    Phone  -> Default,
    Mobile -> Mobile,
    Fax    -> Fax
  ]
  
  object func locationTypeBackMapping: [LocationType -> XeroAddressType] = [
    Real -> Street,
    Post -> Pobox
  ]
}


extend entity Company {
  event onSave = {
    if (!IUser.current.is[XeroIntegration] && touched && !our) {
      XeroIntegration.all.map { s =>
        PushContactJob(service = s, company = this).run
      }
    }
  }
}

extend entity Person {
  event onSave = {
    companies*.company*.touch
  }
}

// ??? Address, PhoneContact, EmailContact...etc ?
