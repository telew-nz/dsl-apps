extend trait Invoice extends HasExtId


extend entity Invoice {
  event onSave = {
    if (!IUser.current.is[XeroIntegration] && touched) {
      XeroIntegration.all.map { s =>
        PushInvoiceJob(service = s, invoice = this).run
      }
    }
  }
}


class PushInvoiceJob extends SystemJob {
  field service: XeroIntegration
  field invoice: Invoice
  
  func do = {
    
    let _ <- invoice.items*.as[OrderProductItem]*.product.map { p =>
      PushItemJob(service = this.service, product = p).do()
    }.allCompleted()
    
    let xeroInv = XeroInvoice(
      invoiceID = invoice.extId(service)
      
      type = if (invoice.is[SalesInvoice]) accRec else accPay
      
      contact = XeroContact(contactID = invoice.orderCounterparty?.as[Company]?.extId(service))
      
      lineItems = invoice.items*.as[OrderProductItem].map { li =>
      	XeroInvoiceLineItem(
          //description = li.product.title
          itemCode = li.product.sku
          quantity = li.invoiceQty!
          unitAmount = li.invoiceAmountNoGst / li.invoiceQty!
          //TODO: push products as Xero Items and set itemCode
        )
      }
      
      currencyCode = invoice.currency
      
      date = invoice.date
      dueDate = invoice.dueDate
      invoiceNumber = invoice.manualNumber
    )
    
    if(let id = xeroInv.invoiceID) {
      let r <- service.https("Invoices/$id").post(xeroInv.json)
      r.body!
    } else {
      let r <- service.https("Invoices").post(xeroInv.json)
      if(let rID = r.body!.parseJson[XeroInvoicesResponse]?.invoices.first.invoiceID) {
        invoice.updateExtId(service, rID)
      } else {
      	throw "XeroInvoice push error: ${r.body!}"
      }
    }
  }
}

class XeroInvoice {
  externalCapitalizeFieldNames = true  
  
  field invoiceID: String?
  field type: XeroInvoiceType {
    jsonMap[String](apply = _.id, unapply = v => XeroInvoiceType.all.find(id == v)!)
  }
  field contact: XeroContact
  field lineItems: [XeroInvoiceLineItem]?
  field currencyCode: Currency?
  field date: Date {jsonMap = XeroDate}
  field dueDate: Date? {jsonMap = XeroDateOpt}
  field invoiceNumber: String?
}

enum XeroInvoiceType(id: String) {
  case accPay  (id = "ACCPAY")
  case accRec (id = "ACCREC")
}

class XeroInvoiceLineItem {
  externalCapitalizeFieldNames = true  
  
  field itemCode: String?
  field description: String
  field quantity: Qty
  field unitAmount: Money?
}