class RetrieveBankTransactionsJob extends SystemJob {
  impl field service: XeroIntegration
  field pageNumber: UInt = 1
  
  impl func do = {
    let res <- service.https("BankTransactions").param("page", pageNumber).get
    //res.body.log("transactions")
    let rb = res.body!.parseJson[XeroBankTransactionsResponse]
    
    let dateFrom = service.setup.pullInvoicesFrom
    let cache = XeroCache(service = service)
    let _ <- rb.bankTransactions.filter{tr => 
      tr.status != deleted &&
      (tr.type == spend || tr.type == receive) &&
      (!dateFrom || (tr.date >= dateFrom))
    }.oneByOne { t =>
      saveBankTransaction(cache, t)
    }
    
    if(rb.bankTransactions.count > 0) RetrieveBankTransactionsJob(
      service = this.service,
      pageNumber = this.pageNumber + 1
    ).enqueueFirst()
  }
  
  
  back func saveBankTransaction(cache: XeroCache, xeroTransaction: XeroBankTransaction): Future[Any] = {
    //xeroTransaction.json.log("transaction")
    if(let pay = service.findExtId(xeroTransaction.bankTransactionID, _.as[Payment])) return pay
    
    let loanAccount <- if(xeroTransaction.lineItems.count == 1) {
      let xeroOnlyAcc <- cache.account(xeroTransaction.lineItems.first!.accountCode!)
      LoanAccount.all.find(name =%= xeroOnlyAcc.name).result
    }
    if(let loanAccount) return saveAsCashTransfer(xeroTransaction, loanAccount)

    let cont <- service.getOrRetrieveContact(xeroTransaction.contact!.contactID!)
    let acc  <- service.getOrRetrieveBankAccount(xeroTransaction.bankAccount!.accountID!)
    //service.findExtId(xeroTransaction.contact?.contactID, _.as[LegalEntity]).alt(throw "Retreive XeroBankTransaction error: There is no LegalEntity with extId = ${xeroTransaction.contact?.contactID}")
    //service.findExtId(xeroTransaction.bankAccount?.accountID, _.as[BankAccount]).alt(throw "Retreive XeroBankTransaction error: There is no BankAccount with extId = ${xeroTransaction.bankAccount?.accountID}")
    
    let neg   = xeroTransaction.isNegative
    let total = xeroTransaction.totalMoney(acc.currency)
    let type  = xeroTransaction.finalType
    
    let pay = {
      if(type == receive) { 
        IncomingPayment(
          date = xeroTransaction.date!,
          account = acc,
          payer = cont,
          payee = service.legalEntity,
          amount = total,
          reasons = []
        )
      } else {
        OutgoingPayment( 
          date = xeroTransaction.date!,
          account = acc,
          payee = cont,
          payer = service.legalEntity,
          amount = total,
          reasons = []
        )
      }
    }

    pay.updateExtId(service, xeroTransaction.bankTransactionID)
    pay.updateExtUrl(service, "https://go.xero.com/Bank/ViewTransaction.aspx?bankTransactionID=${xeroTransaction.bankTransactionID}")
    pay.save

    let lat = xeroTransaction.lineAmountTypes
    let lineItemsWithAmount = xeroTransaction.lineItems.filter(lineAmount)
    
    // check LineItems amount sum > total
    let liAmountSum = lineItemsWithAmount.map((if (neg) -fullTotal(lat) else fullTotal(lat)).positive).sum
    if(liAmountSum > total) return {
      let _ <- lineItemsWithAmount.oneByOne { li =>
        let xeroAcc <- cache.account(li.accountCode!)
      	if (pay.desc) pay.desc += "\n\n"
      	pay.desc += "$(xeroAcc.name) ${li.fullTotal(lat)}"
      }
      pay.save
      pay
    }
    
    let _ <- if(type == spend && !xeroTransaction.lineItems.isEmpty) {

      let oPay = pay.as[OutgoingPayment]!
      oPay.reasons = null // ??? is it enough to clean it or I should delete each Expense?
      oPay.save
      lineItemsWithAmount.oneByOne { li => 
        if (let liTotal = (if (neg) -li.fullTotal(lat) else li.fullTotal(lat)).positive) {
          let xeroAcc <- cache.account(li.accountCode!)
          let words = xeroAcc.name.lower.split(" ").toSet
          if (xeroAcc.type == wagesExpense || words.contains("salary") || words.contains("salaries") || words.contains("wage") || words.contains("wages")) {
            let st <- service.salaryType(cache, li.accountCode!)
            Option.some(Salary(
              payment = oPay, amount = liTotal
              salaryType = st
            ).as[IReason])
          } else if ((xeroAcc.type == overheads || xeroAcc.type == expense) && (words.contains("bank") || words.contains("banks")) && (words.contains("fee") || words.contains("fees") || words.contains("charge") || words.contains("charges")) ) {
            BankFees(
              payment = oPay, amount = liTotal
            ).as[IReason]
          } else if (xeroAcc.type == expense || xeroAcc.type == overheads || xeroAcc.type == overheads || xeroAcc.type == directCosts) {
            if (cont.our) {
              if (pay.desc) pay.desc += "\n\n"
              pay.desc += "$(xeroAcc.name) ${liTotal}"
              null[IReason]
            } else {
              if(!cont.vendor) {
                cont.makeVendor()
              }
              if (li.taxType?.rate) {
                cont.vendor!.gstStatus = Registered
              }
              let exp <- service.expenseType(cache, li.accountCode)
              Option.some(PaymentExpense(
                payment = oPay,
                desc    = li.description
                expense = exp
                gstRate = li.taxType?.rate
                amount = liTotal
              ).as[IReason])
            }
          } else if (xeroAcc.type == equity) {
            Withdrawal(payment = oPay, amount = liTotal)
            //} else if (xeroAcc.type == currLiab || xeroAcc.type == liability) {
          } else if (service.setup.drawingsCurrentAccount && (words.contains("drawings") || words.contains("drawing") || words.contains("withdrawal") || words.contains("withdrawals")) ) {
            Withdrawal(
              payment = oPay, amount = liTotal
              currentAccount = service.setup.drawingsCurrentAccount! 
            )
          } else if (words.contains("paye")) {
            TaxPayment(payment = oPay, amount = liTotal, tax = PayrollTax)
          } else if (words.contains("gst")) {
            TaxPayment(payment = oPay, amount = liTotal, tax = Gst)
          } else {
            if (pay.desc) pay.desc += "\n\n"
            pay.desc += "$(xeroAcc.name) ${liTotal}"
            null[IReason]
          }
        }
      }
    } else if(type == receive && !xeroTransaction.lineItems.isEmpty) {
      let iPay = pay.as[IncomingPayment]!
      iPay.reasons = null // ??? is it enough to clean it or I should delete each Expense?
      iPay.save
      lineItemsWithAmount.oneByOne { li => 
        if (let liTotal = (if (neg) -li.fullTotal(lat) else li.fullTotal(lat)).positive) {
          let xeroAcc <- cache.account(li.accountCode!)
          let words = xeroAcc.name.lower.split(" ").toSet
          if (xeroAcc.type == revenue || xeroAcc.type == otherIncome || xeroAcc.type == sales) {
            let rev <- service.revenueType(cache, li.accountCode)
            Option.some(PaymentRevenue(
              payment = iPay,
              desc    = li.description
              revenue = rev
              gstRate = li.taxType?.rate
              amount = liTotal
            ).as[IReason])
          } else if (words.contains("paye")) {
            TaxReturn(payment = iPay, amount = liTotal, tax = PayrollTax)
          } else if (words.contains("gst")) {
            TaxReturn(payment = iPay, amount = liTotal, tax = Gst)
          } else if (xeroAcc.type == equity) {
            AdditionalCapital(payment = iPay, amount = liTotal)
          } else if ((xeroAcc.type == currLiab || xeroAcc.type == liability || xeroAcc.type == termLiab) && (words.contains("capital") || words.contains("fund") || words.contains("funds"))) {
            AdditionalCapital(
              payment = iPay, amount = liTotal
              currentAccount = 
              CurrentAccount.all.find(a => a.counterparty == cont && a.currency == acc.currency).result.get
              .alt(CurrentAccount(counterparty = cont, legalEntity = service.legalEntity, currency = acc.currency).save)        
            )
          } else {
            if (pay.desc) pay.desc += "\n\n"
            pay.desc += "$(xeroAcc.name) ${liTotal}"
            null[IReason]
          }
        }
      }
    }
    pay

  }
  
  
  back func saveAsCashTransfer(xeroTransaction: XeroBankTransaction, loanAccount: LoanAccount): Future[Any] = {
    if(let ct = service.findExtId(xeroTransaction.bankTransactionID, _.as[CashTransfer])) return ct

    let accBank = service.findExtId(xeroTransaction.bankAccount?.accountID, _.as[BankAccount]).alt(throw "Retreive XeroBankTransaction error: There is no BankAccount with extId = ${xeroTransaction.bankAccount?.accountID}")

    let total = xeroTransaction.totalMoney(accBank.currency)
    let type = xeroTransaction.finalType

    
    let ct = CashTransfer(
      dateOut = xeroTransaction.date!
      dateIn = xeroTransaction.date!
      from = if(type == receive) loanAccount else accBank
      to = if(type == receive) accBank else loanAccount 
      outcome = total
      income = total
    ).save
    ct.updateExtId(service, xeroTransaction.bankTransactionID)
    ct
  }
}
