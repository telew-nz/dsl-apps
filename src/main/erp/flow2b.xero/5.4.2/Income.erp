extend trait IIncomeType extends HasExtId

back class XeroCache {
  field service: XeroIntegration
  field _accounts: [XeroAccount]?
  func accounts: Future[[XeroAccount]] = if (let _accounts) _accounts
  else {
    let accRes <- service.https("Accounts").get
    let accounts = accRes.body!.parseJson[XeroAccountsResponse].accounts
    _accounts = accounts
    accounts
  }
  func account(code: String): Future[XeroAccount] = {
    let accs <- accounts
    accs.find(a => a.code == code)!
  }
}

extend entity XeroIntegration {
  back func expenseType(cache: XeroCache, accCode: String): Future[ExpenseType] = {
    if (let et = findExtCode(accCode, _.as[ExpenseType])) {
      et
    } else {
      let liAcc <- cache.account(accCode)
      let et: ExpenseType = ExpenseType.all.find(title == liAcc.name).result.get
        .alt(ExpenseType(title = liAcc.name!, description = liAcc.description))
      updateExtCode(et, accCode)
      et
    }
  } 
  
  back func revenueType(cache: XeroCache, accCode: String): Future[RevenueType] = {
    if (let et = findExtCode(accCode, _.as[RevenueType])) {
      et
    } else {
      let liAcc <- cache.account(accCode)
      let et: RevenueType = RevenueType.all.find(title == liAcc.name).result.get
        .alt(RevenueType(title = liAcc.name!, description = liAcc.description))
      updateExtCode(et, accCode)
      et
    }
  } 
  
  back func revenueTypeNoSales(cache: XeroCache, accCode: String): Future[RevenueType?] = {
    if (let et = findExtCode(accCode, _.as[RevenueType])) {
      et
    } else {
      let liAcc <- cache.account(accCode)
      if (let et = RevenueType.all.find(title == liAcc.name).result.get
        .or(if (liAcc.name != "Sales") RevenueType(title = liAcc.name!, description = liAcc.description)))
      {    
        updateExtCode(et, accCode)
        et
      }
    }
  } 
}