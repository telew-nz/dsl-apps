extend entity Company extends HasExtId

class RetrieveContactsJob extends SystemJob {
  field service: IXeroIntegration
  
  func do = {
    nextPage(1)
  }
  
  back func nextPage(number: UInt): Future[Any] = {
    let res <- service.https("Contacts").param("page", number).get
    let rb = res.body!.parseJson[XeroContactsResponse]
    rb.contacts*.process(service)
    
    if(rb.contacts.count > 0) nextPage(number + 1)
  }
}


interface XeroBaseResponse {
  field id: String
  field status: String
  field providerName: String
  field dateTimeUTC: Date {jsonMap = XeroDate}
}

object XeroDate extends Mapper[Date, String] {
  func apply(v: Date): String = "/Date(${v.epoch.withoutUnit})/"
  func unapply(v: String): Date = Date.fromEpoch((v[7 .. -1)).toNumber)
}

class XeroContactsResponse extends XeroBaseResponse {
  externalCapitalizeFieldNames = true
  
  field contacts: [XeroContactResponse]
}
                                                    
class XeroContactResponse {
  externalCapitalizeFieldNames = true  
  
  field contactID: String
  field contactStatus: XeroContactStatus? {
    jsonMap[String?](apply = _?.id, unapply = v => XeroContactStatus.all.find(id == v)!)
  }
  field name: String
  field firstName: String?
  field lastName: String?
  field emailAddress: String?
  field skypeUserName: String?
  
  field accountNumber: String?
  field bankAccountDetails: String?
  field taxNumber: String?
  field accountsReceivableTaxType: String?
  field accountsPayableTaxType: String?
  
  field defaultCurrencyString: String? {extName = "DefaultCurrency"} // for case when flow2b workspace doesn't include this user currency
  func  defaultCurrency: Currency? = Currency.all.find(name == defaultCurrencyString)
  
  field isSupplier: Bool
  field isCustomer: Bool
  
  field addresses: [XeroAddress]?
  field phones: [XeroPhone]?
  field contactPersons: [XeroContactPerson]?
  
  back func process(service: IXeroIntegration) = {
  	let company = service.findExtId(contactID, _.as[Company])
                  .alt(Company(title = this.name, currency = defaultCurrency))
    
    company.updateExtId(service, contactID)
    company.save()
    
    let person: Person? = company.people.first?.person
                          .or(if (let pName = [firstName, lastName].filter(!isEmpty).join(" "))
                                Person(name = pName, currency = defaultCurrency))
    
    person.map { p =>
      p.save()
      if (company.people.first.isEmpty) CompanyPerson(person = p, company = company).save()
    }
    
    emailAddress.map { e => 
      EmailContact.add(if(let person) person else company, e)
    }
    
    phones.map { p =>
      if(let phoneStr = p.phoneString) {
        PhoneContact.add(company, p.corePhoneType!, phoneStr)
      }
    }
    
    addresses.map { a =>
      var addr = a.address
      addr.company = name
      Location.add(company, a.coreLocationType!, addr)
    }
    
    contactPersons.map { p =>
      let cPerson = company.people*.person.find(_.name == p.name)
      				.or( if(let pName = p.name) {
                      let cp = Person(name = pName, currency = defaultCurrency)
                      cp.save()
                      CompanyPerson(person = cp, company = company).save()
                      cp
                    })
      
      if (let pEmail = p.emailAddress){
        EmailContact.add(if(let cPerson) cPerson else company, p.emailAddress)
      }
    }
    
    if(isSupplier) company.makeVendor
    if(isCustomer) company.makeCustomer
    BankAccountPaymentMethod.add(company, bankAccountDetails)
  }
}
                                                    
enum XeroContactStatus(id: String?) {
  case Active  (id = "ACTIVE")
  case Archived (id = "ARCHIVED")
}

                                                    
class XeroAddress {
  externalCapitalizeFieldNames = true

  field addressType: XeroAddressType? {
    jsonMap[String?](apply = _?.id, unapply = v => XeroAddressType.all.find(id == v)!)
  }
  
  field addressLine1: String?
  field addressLine2: String?
  field addressLine3: String?
  field addressLine4: String?
  field country: String?
  field city: String?
  field region: String?
  field postalCode: String?
  field attentionTo: String? 
  
  func address: Address = {
    Address(
      country = country, city = city, region = region, postcode = postalCode,
      street = [addressLine1, addressLine2, addressLine3, addressLine4].filter(!isEmpty).join("\n")   
    )
  }
  
  func coreLocationType = addressType.map(t => locationTypeMapping.apply(t)!)
  
  object func locationTypeMapping: [XeroAddressType -> LocationType] = [
    Street   -> Real,
    Delivery -> Real,
    Pobox    -> Post
  ]
}
                                                    
enum XeroAddressType(id: String?) {
  case Pobox  (id = "POBOX")
  case Street (id = "STREET")
  case Delivery (id = "DELIVERY")
}


class XeroPhone {
  externalCapitalizeFieldNames = true

  field phoneType: XeroPhoneType? {
    jsonMap[String?](apply = _?.id, unapply = v => XeroPhoneType.all.find(id == v)!)
  }
  
  field phoneNumber: String?
  field phoneAreaCode: String?
  field phoneCountryCode: String?
  
  func corePhoneType: PhoneType? = phoneType.map(t => phoneTypeMapping.apply(t)!)
  
  func phoneString: String? = [phoneCountryCode, phoneAreaCode, phoneNumber].filter(!isEmpty).join(" ")
  
  object func phoneTypeMapping: [XeroPhoneType -> PhoneType] = [
    Default -> Phone,
    Ddi     -> Phone,
    Mobile  -> Mobile,
    Fax     -> Fax
  ]
}
  
enum XeroPhoneType(id: String?) {
  case Default(id = "DEFAULT")
  case Ddi(id = "DDI")
  case Mobile(id = "MOBILE")
  case Fax(id = "FAX")
}
                                                    
class XeroContactPerson {
  externalCapitalizeFieldNames = true

  field firstName: String?
  field lastName: String?
  field emailAddress: String?
  field includeInEmails: Bool
  
  func name = [firstName, lastName].filter(!isEmpty).join(" ")
}