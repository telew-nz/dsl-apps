class PushItemJob extends SystemJob {
  impl field service: XeroIntegration
  field product: IBaseProduct 
  field isRent: Bool
  
  impl func do = {
    let idSrc = service.idSrc(isRent)
    let xeroID = product.extId(idSrc)
    
    let xeroItem = XeroItem(
      itemID = xeroID
      code = product.extCode(idSrc).alt(product.sku)
      name = (if (isRent) (if (!xeroID) "Hire " + product.title) else product.title)[..50]
      description = product.invoiceDesc.alt(product.title)
      isTrackedAsInventory = !isRent && product.isTangible && !product.is[Kit]
      inventoryAssetAccountCode = if(!xeroID && !isRent && product.isTangible && !product.is[Kit]) "630"
      isSold = product.forSale || 
               (product.status == NotForSale && product.rentStatus == ForRent)
      isPurchased = [ProductStatus.ForSale, ProductStatus.NotForSale].contains(product.status)
      
      purchaseDetails = if(!xeroID) XeroItemPSDetails(
      cogsAccountCode = if(!isRent && product.isTangible && !product.is[Kit]) "310"
        
        // I can't set unitPrice and taxType for Product. Only for OrderProductItem.
        //   Should I put OrderProductItem as XeroItem? I think I should leave it as is.
      )
      salesDetails = if(!xeroID) XeroItemPSDetails(accountCode = "200") 
    )
    
    if(let id = xeroID) {
      let r <- service.https("Items/$id").post(xeroItem.json)
      r.body!
    } else {
      let newCode <- uniqItemCode(xeroItem.code, 0)
      xeroItem.code = newCode!
      let r <- service.https("Items").post(xeroItem.json)
      if(let rID = r.body!.parseJson[XeroItemsResponse]?.items.first.itemID) {
        product.updateExtId(idSrc, rID)
        product.updateExtCode(idSrc, xeroItem.code)
      } else {
      	throw "XeroItem push error: ${r.body!}"
      }
    }
  }
  
  back func uniqItemCode(code: String, addNum: Int?): Future[String?] = {
  	let c: String = if(addNum == 0) code else "${code}-${addNum}"    
    let ires <- service.https("Items/$(c)").get.recover(_.as[HttpResponse])
    if (ires.code == 200) {
      uniqItemCode(code, addNum + 1)
    }else if (ires.code == 404) {
      Future(c)
    }else {
      throw ires
      Future("")
    }
  }
  
}