enum VoteDirection(value: Int) {
  case Up(value = 1) {
    color = "white"
    background = "#090"
  }
  case Down(value = -1) {
    color = "white"
    background = "#c00"
  }
}

inline trait Votes {
  compute score: Int? = votes*.direction*.value.sum
  field votes: [Vote]? inline by entity
    
  view voteWidget = row {
    score
    button("Vote Up" visible = votes.find(person == Person.current && direction == Up).isEmpty, color = "green") {
      vote(Up)
    }
    button("Vote Down" visible = votes.find(person == Person.current && direction == Down).isEmpty, color = "red") {
      vote(Down)
    }
  }
  
  func vote(direction: VoteDirection) = {
    votes = votes.filter(person != Person.current) + Vote(direction = direction)
    save
  }
}

inline entity Vote {
  field entity: Votes inline
    
  field direction: VoteDirection
  field person: Person = Person.current!
}