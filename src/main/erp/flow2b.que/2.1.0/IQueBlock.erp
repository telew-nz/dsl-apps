trait IQueBlock[RSP extends IQueRsp] extends IQue[RSP] {
  field _question: String?
  ref compute name: String = blockVersion.name
  impl ref compute question: String = _question.or(blockVersion.question).alt(name)
  field _fontStyle: FontStyle?
  ref compute fontStyle: FontStyle = _fontStyle.alt(blockVersion.fontStyle)
  field blockTemplate: QrTemplate {
    available(Ref).with(versions)
    from = QrTemplate.all.filter(state != Obsolete)
    update = {
      this.blockVersion =? blockTemplate.lastVersion
    }
  }
  ref field blockVersion: QrVersion {
    from = blockTemplate.versions.sortBy(_.n.desc)
    update = {
      let parValues = blockParams.map(param.name -> value).toMap
      this.blockParams = []
      new.params.map{p => 
        QueBlockParam(param = p, block = this, value = parValues(p.name))
      }
    }
  }
  ref field blockParams: [QueBlockParam]? inline by block
}

/*
trait IQueBlockParam extends InlineEntity {
  ref field block: IQueBlock
  ref field name: String
  func value: String?
}
entity QueBlockParamConst extends IQueBlockParam {
  singular = "Constant"
  impl ref field value: String?
  impl view form = x {name value >> field(stretch = 1)}
}
*/
inline entity QueBlockParam {
  singular = "Parameter"
  system ref field block: IQueBlock
  system ref field param: QrVersionParam
  ref field value: String?
  impl view form = x {param value >> field(stretch = 1)}
}
