trait IVisabilityOwner extends AnyEntity {
  func version: QrVersion
  ref field visibility: [IVisability]? inline by owner {
    validate = validateVisibility
  }
  func validateVisibility = ""
}

trait IVisability extends InlineEntity {
  system field owner: IVisabilityOwner
  func isVisible(rsp: IQueRsp): Bool
  func clone(owner: IVisabilityOwner): IVisability
}

trait IVisabilityCombinator extends IVisability with IVisabilityOwner {
  impl func version = owner.version
  impl func clone(owner: IVisabilityOwner): IVisability = {
    let r = this.copy(owner = owner, visibility = [])
    r.visibility = this.visibility*.clone(r)
    r
  }
  impl func validateVisibility = if (!visibility) "Conditions cannot be empty"
}

entity Not extends IVisabilityCombinator {
  impl func isVisible(rsp: IQueRsp): Bool = !visibility.all(_.isVisible(rsp))
  impl view form = y(frame = true) {
    label("Not") 
    visibility >> field(frame = false)
  }
}


entity Or extends IVisabilityCombinator {
  impl func isVisible(rsp: IQueRsp): Bool = visibility.exists(_.isVisible(rsp))
  impl view form = y (frame = true) {
    label("Or") 
    visibility >> field(frame = false)
  }
}

entity And extends IVisabilityCombinator {
  impl func isVisible(rsp: IQueRsp): Bool = visibility.all(_.isVisible(rsp))
  impl view form = y (frame = true) {
    label("And") 
    visibility >> field(frame = false)
  }
}