entity QueChoice extends IQueField[QueRspChoice] {
  singular = "Choice"
  field options: [QueChoiceOption]? inline by que 
  ref field multichoice: Bool
  ref field other: Bool
  impl func needVersion = !optional && updated(optional) || updated(options) || !multichoice && updated(multichoice) || !other && updated(other)
  impl func makeRsp(qr: IQr): QueRspChoice = {
    let rsp = QueRspChoice(qr = qr, que = this)
    options.foreach(o => QueRspChoiceOption(rsp = rsp, option = o))
    rsp
  }
  impl view form = y {
    label("Choice")
    header
    x{multichoice other}
    options >> field(frame = false)
    footer
  }
  
  override func clone(v: QrVersion) = {
    let r = this.copy(version = v, visibility = [], options = [])
    r.visibility = visibility*.clone(r)
    r.options = options*.clone(r)
    r
  }
}

entity QueChoiceOption extends PseudoEntity {
  singular = "Option"
  impl func mainEntity = que.version
  object func numbers = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "M", "N", "O", "P"]
  func n: UInt = que.options.indexOf(this)!
  ref compute number: String = numbers(n) + "."
  impl func title = "$que $number"
  system field que: QueChoice
  ref field name: String
  impl view form = x{number >> field(fontStyle = Label) name >> field(stretch = 1)}
  
  func clone(q: QueChoice) = {
    this.copy(que = q)
  }
}

entity QueRspChoice extends IQueRsp {
  system impl field que: QueChoice
  impl func responded: Bool = options.exists(selected) || (que.other && isOther && other)
  field options: [QueRspChoiceOption]? inline by rsp
  compute otherNumber: String = QueChoiceOption.numbers.apply(options.count + 1) + "."
  field isOther: Bool
  field other: Text?

  impl view form = y(margin = TopBottom, visible = isVisible, spacing = false) {
    header
    options >> field(editMode = AlwaysRead, frame = false)
    x(visible = que.other){ 
      isOther >> field(editMode = AlwaysEdit, label = "") 
      otherNumber >> field(fontStyle = Label) 
      "Other"
    }
    other >> field(visible = que.other && isOther, editMode = AlwaysEdit)
  }
}
inline entity QueRspChoiceOption {
  system field rsp: QueRspChoice by options
  system field option: QueChoiceOption
  field selected: Bool {
    update = {
      if (new && !rsp.que.multichoice) {
        rsp.isOther = false
        rsp.options.foreach{o => if (o != this) o.selected = false}
      }
    }
  }
  impl view form = x{
    selected >> field(editMode = AlwaysEdit, label = "") 
    option.number >> field(fontStyle = Label) 
    option.name >> field (editMode = AlwaysRead) 
  }
}