entity QueBlock extends IQue[QueRspBlock] {
  singular = "Block"
  field _question: String?
  impl ref compute question: String = _question.alt(blockTemplate.title)
  
  field blockTemplate: QrTemplate {
    available(Ref).with(versions)
    from = QrTemplate.all.filter(state != Obsolete)
    update = {
      this.blockVersion =? blockTemplate.versions.sortBy(_.n.desc).first
    }
  }
  ref field blockVersion: QrVersion {
    from = blockTemplate.versions.sortBy(_.n.desc)
  }
  
  impl func makeRsp(qr: IQr) = QueRspBlock(qr = qr, que = this)
  impl view form = y{
    x{number >> field(fontStyle = Label) blockTemplate blockVersion >> field(title = "v$n", visible = try? blockTemplate, stretch = 1)}
    question >> field(visible = _question || ui.edit && ui.isSelected)
    blockParams >> field(frame = false, visible = ui.isSelected)
    footer
  }
  field blockParams: [IQueBlockParam]? inline by block
  
}

trait IQueBlockParam extends InlineEntity {
  field block: QueBlock
  field name: String
  func value: String?
}
entity QueBlockParamConst extends IQueBlockParam {
  singular = "Constant"
  impl field value: String?
  impl view form = x {name value >> field(stretch = 1)}
}

entity QueRspBlock extends IQueRsp with IQr {
  system impl field que: QueBlock
  impl func version = que.blockVersion
  override func inProgress: Bool = responses.exists(_.isVisible && _.inProgress)
  impl func responded: Bool = responses.all(!_.isVisible || _.responded)
  impl func queNumPrefix = number
  
  impl func qrParams = que.blockParams.map(name -> value)
  
  impl view form = y(visible = isVisible, margin = TopBottom) {
    x{number >> field(fontStyle = Label) question}
    x(frame = true) {
      responses >> field(editMode = AlwaysRead, frame = false)
    }
  }
}
