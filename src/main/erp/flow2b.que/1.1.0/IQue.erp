trait IQue[RSP extends IQueRsp] extends PseudoEntity {
  func n: UInt = version.questions.indexOf(this)!
  impl func title = "$version $number"
  ref compute number: String = n + "."
  field version: QrVersion
  impl func mainEntity = version
  
  func question: String
  
  func makeRsp(qr: IQr): IQueRsp
  func response(qr: IQr): RSP = qr.responses.find(_.que == this)!.as[RSP]
  func clone(v: QrVersion) = {
    let r = this.copy(version = v, visibility = [])
    r.visibility = visibility*.clone(r)
    r
  }
  
  field visibility: [IVisability]? inline by ownerQue
  view footer = visibility >> field(visible = visibility || ui.isSelected, frame = false)
}

trait IQueRsp extends InlineEntity {
  system field qr: IQr
  func que: IQue
  ref compute number: String = qr.queNumPrefix + que.number
  func inProgress: Bool = responded
  func responded: Bool
  
  compute question: String = {
    if (let pr = qr.qrParams) {
      var s = que.question
      qr.qrParams.foreach{pp =>
        s = s.replace("\$" + pp.#0, pp.#1)!
      }
      s
    } else {
      que.question
    }
  }
  
  func isVisible = que.visibility.all(_.isVisible(this))
}