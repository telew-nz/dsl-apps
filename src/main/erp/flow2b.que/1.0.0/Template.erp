entity QrTemplate extends HasN with NewEngine {
  singular = "Questionnaire Template"
  plural = "Questionnaire Templates"
  
  object field gen: Int?
  ref field state: TempateState = TopLevel
  impl func numPrefix = "QRT"
  impl func nextN = increment(QrTemplate.gen)
  
  ref field name: String
  field versions: [QrVersion]? read by template
  impl func title = name
  
  impl view form = nav{
    grid(labels = None){
      x {state name >> field(stretch = 1) number >> field(fontStyle = Label)}
      
      versions
    }
  }
  
  report Report {
    impl view list = QrTemplate.all >> nav{list{x{
      state name number >> field(fontStyle = Label)
    }}}
  }
}

enum TempateState {
  case TopLevel{background = "#dea" icon = "chevron-up"}
  case Embedded {background = "#8bf" icon = "toolbox"}
  case Obsolete {background = "#999" icon = "times-circle"}
}

entity QrVersion extends HasNumber with NewEngine {
  singular = "Questionnaire Version"
  plural = "Questionnaire Versions"

  impl func number = "$(template.number).v$n"
  ref field template: QrTemplate
  ref field n: Dec = if (let lv = template.versions.reverse.drop(1).first) (lv.n + 1)! else 1.00
  field questions: [IQue]? inline by version
  
  func sameQue[R extends IQue](que: R): R = questions.find(_.n == que.n)!.as[R]
  impl func title = "$template v$n"
  
  impl view form = nav{
    grid(labels = None){
      x {template >> field(editMode = AlwaysRead) n >> field(stretch = 1) number >> field(fontStyle = Label)}
      questions >> list(mode = EditSelect) {form}
    }
  }
  
  impl event onSave = {
    if (dataUpdated || deleted) {
      if (IQr.all.exists(version == this)) {
        throw "Cannot modify used version $(this)"
      }
    }
    if (created && !questions let prevV = template.versions.reverse.drop(1).first) {
      questions = prevV.questions*.clone(this)
    }
  }
}


