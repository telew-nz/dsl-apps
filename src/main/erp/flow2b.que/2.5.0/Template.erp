entity QrTemplate extends HasN with NewEngine {
  singular = "Questionnaire Template"
  plural = "Questionnaire Templates"
  
  object field gen: Int?
  ref field state: TempateState = TopLevel
  impl func numPrefix = "QRT"
  impl func nextN = increment(QrTemplate.gen)
  
  ref field name: String
  field versions: [QrVersion]? read by template
  ref compute lastVersion: QrVersion? = versions.sortBy(n.desc).first
  
  impl func title = name
  
  impl view form = nav{
    grid(labels = None){
      x {state name >> field(stretch = 1) number >> field(fontStyle = Label)}
      versions
    }
  }
  
  report Report {
    impl view list = QrTemplate.all >> nav{list{x{
      state name number >> field(fontStyle = Label)
    }}}
  }
}

enum TempateState {
  case TopLevel{background = "#dea" icon = "chevron-up"}
  case Embedded {background = "#8bf" icon = "toolbox"}
  case Obsolete {background = "#999" icon = "times-circle"}
}

entity QrVersion extends HasNumber with NewEngine {
  singular = "Questionnaire Version"
  plural = "Questionnaire Versions"

  impl func number = "$(template.number).v$n"
  ref field template: QrTemplate
  ref field fontStyle: FontStyle = Normal
  
  func prevVersion: QrVersion? = template.versions.reverse.drop(1).first
  field name: String = prevVersion?.name.alt(template.name)
  field question: String? 
  
  ref field n: Dec = if (let lv = template.versions.reverse.drop(1).first) (lv.n + 1)! else 1.00
  field questions: [IQue]? inline by version
  field params: [QrVersionParam]? inline by version {
    label = "Parameters"
  }
  field blocks: [IQueBlock]? read by blockVersion 
  compute usedIn: [QrVersion]? {
    availableFor = Inline
    value = back{blocks*.version.distinct}
  }
  
  func sameQue[R extends IQue](que: R): R = questions.find(_.n == que.n)!.as[R]
  impl func title = "$template v$n"
  
  impl view form = nav{
    grid {
      x {fontStyle template >> field(editMode = AlwaysRead) n >> field(stretch = 1) number >> field(fontStyle = Label)}
      name
      usedIn
      question
      params
      questions >> list(mode = EditSelect) {form}
    }
    button("Propagate", visible = id && isLast) {
      let r <- back {
        propagate()
      }
      if (r) {
        UI.info("Propageted")
      } else {
        UI.info("No need to propagate")
      }
    }
  }
  
  back func propagate(): Bool = {
    guard (isLast) else return false
    
    guard (
      let blocks = IQueBlock.all
        .filter(block => block.blockVersion.template == this.template && block.version.isLast && !block.blockVersion.isLast)
        .result.get
    ) else return false
    
    blocks*.version.distinct.foreach {version =>
      let v = if (version.isUsed) {
        let vv = version.makeNewVersion 
        vv.propagate()
        vv
      } else {
        version
      }
      v.questions.foreach {q =>
        if (let block = q.as[IQueBlock] where block.blockVersion.template == this.template) {
          block.blockVersion = this
          block.save
        }
      }
    }
    
    true
  }
  
  func isLast: Bool = template.lastVersion == this
  back func isUsed: Bool = IQr.all.exists(version == this)
  impl event onSave = {
    if (updated(questions) || updated(params) || questions.filter(needVersion) || deleted) {
      if (isUsed) {
        throw "Cannot modify used version $(this)"
      }
    }
    if (created && !questions let prevV = template.versions.reverse.drop(1).first) {
      clone(prevV)
    }
  }
  back func clone(prev: QrVersion) = {
    questions = prev.questions*.clone(this)
    params = prev.params*.clone(this)
  }
  back func makeNewVersion: QrVersion = {
    if (!isLast) {
      throw "Cannot make version from not last version: $(this)" 
    }
    let v = QrVersion(template = template, n = (n + 1)!)
    v.clone(this)
    v
  }
}

inline entity QrVersionParam extends PseudoEntity {
  singular = "Parameter"
  impl func mainEntity = version
  impl func title = "$version.$name"
  ref system field version: QrVersion
  ref field name: String
  
  func clone(v: QrVersion) = this.copy(version = v)
}
