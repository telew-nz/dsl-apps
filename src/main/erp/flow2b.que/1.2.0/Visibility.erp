trait IVisability extends InlineEntity {
  system field ownerQue: IQue
  func isVisible(rsp: IQueRsp): Bool
  func clone(ownerQue: IQue): IVisability
}

entity ShowIfYes extends IVisability {
  ref field que: QueBool {
    from = ownerQue.version.questions*.as[QueBool]
  }
  impl func isVisible(rsp: IQueRsp): Bool = que.response(rsp.qr).value == Yes
  impl view form = x {label("Show if") que >> field (title = number) label("yes")}
  
  impl func clone(ownerQue: IQue): IVisability = {
    this.copy(ownerQue = ownerQue, que = ownerQue.version.sameQue(que))
  }
}

entity ShowIfNo extends IVisability {
  ref field que: QueBool {
    from = ownerQue.version.questions*.as[QueBool]
  }
  impl func isVisible(rsp: IQueRsp): Bool = que.response(rsp.qr).value == No
  impl view form = x {label("Show if") que >> field (title = number) label("no")}
  
  impl func clone(ownerQue: IQue): IVisability = {
    this.copy(ownerQue = ownerQue, que = ownerQue.version.sameQue(que))
  }
}

entity ShowIfChosen extends IVisability {
  ref field que: QueChoice {
    from = ownerQue.version.questions*.as[QueChoice]
  }
  ref field option: QueChoiceOption {
    from = que.options
  }
  impl func isVisible(rsp: IQueRsp): Bool = que.response(rsp.qr).options.exists(_.option == this.option && _.selected)
  impl view form = x {label("Show if") que >> field (title = number) option >> field(title = number) label("chosen")}
  
  impl func clone(ownerQue: IQue): IVisability = {
    let q = ownerQue.version.sameQue(que)
    this.copy(ownerQue = ownerQue, que = q, option = q.options.find(_.n == this.option.n)!)
  }
}