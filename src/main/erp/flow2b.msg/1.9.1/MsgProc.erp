trait MsgProc extends AnyEntity {
  back func priority: Dec[2]?
  
  back func canProc(msg: ExtMsg): Bool
  
  //Return the same message if unprocessed or modified message to continue processing
  // null - stop processing
  back func proc(msg: ExtMsg): Future[ExtMsg?]
}


trait MsgProcActivity extends MsgProc {
  impl func proc(msg: ExtMsg): Future[ExtMsg?] = {
    if (canProc(msg)) {
      let a <- fillActivity(msg)
      if (!a) {
        msg
      } else {
        null
      }
    } else {
      msg
    }
  } 
  back func fillActivity(msg: ExtMsg): Future[Bool] = msg.fillActivity(this)
  back func parseSubject = false
  back func refs(msg: ExtMsg): [Entity]? {
    default value = {
      if (let aa = msg.refActivities.first) [aa.mainEntity]
      else if (parseSubject && !msg.flow2b) {
        Entity.findReferences(msg.subject)
      }
    }
  }
  back func attachs(msg: ExtMsg, item: Entity): [File]? {
    default value = msg.attachs*.make
  }
  back func item(msg: ExtMsg, from: Contact?, recipients: [Contact], refs: [Entity]?): Future[Entity?] {
    default value = {
      if (let r = refs.onlyOne) return r 

      Ticket(
        channel = msg.channel
        status = if (msg.isSpam) Canceled else Entered
        subject = (if (msg.isSpam) "SPAM: ") + msg.subject.alt("No Subject")
        roles = if (let r = recipients*.as[Dashboard]*.role.toSet) r else recipients*.as[RoleContactGroup]*.role.toSet
      ).save
    }
  }
}
back object MsgProcDefault extends MsgProcActivity {
  impl func priority = 0.0
  impl func parseSubject = true
  impl func canProc(msg: ExtMsg): Bool = true
}
      


