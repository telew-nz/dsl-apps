generator notify[T] {
  field preferred: ( => Dsl)?
  field supported: ( => Dsl)?
  field text: => Dsl
  field to: => Dsl
  field from: ( => Dsl)?
  field subject: ( => Dsl)?
  
  impl func generate = 
'object $name extends NotifyTemplate[$T] {
  impl func title = "$(name.fromCamelCase)"

$(if (let preferred) 'impl func preferred = $(preferred())')
$(if (let supported) 'impl func supported = $(supported())')

  impl func text(data: $T, channel: CommChannel) = {
    let f: ($T, channel: CommChannel) => Text? = ($(text()))
    f(data, channel)
  }
  
$(if (let subject) 
 'impl func subject(data: $T, channel: CommChannel) = {
    let f: ($T, channel: CommChannel) => Text? = ($(subject()))
    f(data, channel)
  }'
)
$(if (let from) 
 'impl func from(data: $T, channel: CommChannel) = {
    let f: ($T, channel: CommChannel) => Contact? = ($(from()))
    f(data, channel)
  }'
)
  
  impl func to(data: $T) = {
    let f: ($T) => [Addressee]? = ($(to()))
    f(data)
  }
}

'
  
/********************
 * trigger
 ********************/
  
  generator trigger {
    field on: (=> Dsl)? // Date
    field when: (=> Dsl)? //onSave
  
    func fullName: Dsl = this[notify].name + name
  impl func generate: Dsl = {
    let r = if (let on) { 
'
extend entity $T {
  system field _$fullName: $fullName inline by item = $fullName()
}
inline entity $fullName extends DeferredJob {
  field item: $T
  impl func service = NotificationService
  impl func jobDate = {
    let f: $T => Date? = ($(on()))
    if (let d = f(item) where d > now) d
  }
  impl func do = {
    $(this[notify].name).send(item)
  }
}
'
    } else if (let when) {
'extend entity $T {
  impl event onSave = {
    if ($(when())) {
      $(this[notify].name).send(this)
    }
  }
}'
    } 
    r!
  }
}
}

