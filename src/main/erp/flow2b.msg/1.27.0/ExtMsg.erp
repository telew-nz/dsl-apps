back class ExtMsg {
  field channel: CommChannel
  field date: Date
  field messageId: String?
  field refMessageIds: [String]?
  field refActivities: [Activity]? inline = refMessageIds.mapOpt{refMessageId =>
    Activity.findByMessageId(refMessageId)
  }
  
  field isSpam: Bool
  field from: ExtMsgContact
  field to: ExtMsgContact
  field cc: [ExtMsgContact]?
  
  
  field subject: String?
  field richText: Text?
  field plainText: PlainText?  
  
  field flow2b: ExtMsgFlow2b?
  field attachs: [ExtMsgAttach]?
  field unsubscribes: [Url]?
  
  impl func toString = "ExtMsg($messageId: $subject from $from to $to)"
  
  func proc: Future[Void] = {
    let procs = MsgProc.all.sortBy(_.priority.desc).result.get
    let p <- procNext(this, procs)
    if (!p) {
      throw "No processor found for message $(this) of $(procs.filter(_.canProc(this)))"
    }
  }
  object func procNext(msg: ExtMsg, procs: [MsgProc]?): Future[Bool] = {
    if (let p = procs.first where p.canProc(msg)) {
      let msg <- p.proc(msg)
      if (let msg) {
        procNext(msg, procs.drop(1))
      } else {
        true
      }
    } else if (let procs) {
      procNext(msg, procs.drop(1))
    } else {
      false
    }
  }
  
  
  func fillActivity(proc: MsgProcActivity): Future[Bool] = {
    let recipients00: [Contact]? = channel.findContacts(to.address)
    let recipients0 = recipients00*.as[User]
       .or(recipients00*.as[ActorContact]*.addressee*.systemContact)
    let recipients: [Contact]? = {
      if (let recipients1 = recipients0*.as[Dashboard]) recipients1
      else if (let recipients0) recipients0 
      else channel.defaultRecipients()
    }
    guard (let recipients) else return proc.noRecipients
    
    let a = Activity.current!
    
    
    let men: Text = recipients*.atMention.join(" ").as[Text]

    var mhtml: Html = men
    if (!recipients0) {
      let ts: Html? = to.toString
      mhtml += "<br>To: $ts"    
    }
    if (let cc) {
      let ccs: Html = cc.join(', ')
      mhtml += "<br>Cc: $ccs" 
    }
    mhtml = "<p>$mhtml</p>"
    if (let copyOf = Activity.findByMessageId(messageId)) return {
      //a.from = copyOf.from
      //a.comment = mhtml
      //a.entities = copyOf.entities
      true
    } 
    a.channel = channel
    a._subject = subject

    let refs = proc.refs(this)
    let from = if (flow2b?.workspace == "13_1") { // && flow2b?.dslType == "flow2b.net.dev.Incident") {
      Flow2bSupport.as[Contact]
    } else proc.makeFromContact(this)
    let item0 <- proc.item(this, from, recipients, refs)
    guard (let item = item0) else return false
    
    if (!item.deleted) {
      item.touch
      item.save
    }
    a.from = from?.save
    a.messageId = messageId
    
    a.from?.join(item)
    var files = proc.attachs(this, item)
    
    let text: Text? = if (let html = richText) {
      let d = html.parseHtml
      if (refs) clean(d)
      let body = d.select("body")!.first
      body.prepend(mhtml)
      let ret = d.innerHtml
      if (ret.length > 30000) {
        files = [FileGeneric(name = "Content.html", contentType = "text/html", content = html.toData)] + files
        a.comment = mhtml
      } else {
        a.comment = ret
      }
    } else {
      var r: Text? = plainText
      r = mhtml + r
      if (r.length > 30000) {
        files = [FileGeneric(name = "Content.txt", contentType = "text/plain", content = plainText.toData)] + files
        a.comment = mhtml
      } else {
        a.comment = r
      }
    }
    a.entities = ([item] 
      + a.from?.realEntity.toSeq
      + (if (!refs.onlyOne) refs)
      + files
      + a.entities.filter(!_.is[SystemService])).distinct
    true
  }
  
  func clean(elem: HtmlElement): Void = {
    if (let quotes = elem.select("blockquote:last-child, gmail_quote")) {
      quotes*.delete
      clean(elem)
    }
  }
}


back class ExtMsgFlow2b(workspace: String, dslType: String, id: String) {
  compute url = "$(System.url)#$(workspace)/$(dslType)/form/$id"
}
back class ExtMsgAttach(name: String, contentType: String?, content: Data?) {
  func make: File = {
    File.obj(name).new(name = name, contentType = contentType, content = content).save
  }
}
                                                      