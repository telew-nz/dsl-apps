generator trigger[T] {
  field on: Dsl /*T => Date?*/
  field do: Dsl
  
  impl func generate = 
"
extend entity $T {
  system field _$name: $name inline by item = $name()
}
inline entity $name extends DeferredJob {
  field item: $T
  impl func service = NotificationService
  impl func jobDate = {
    let f: $T => Date? = ($on)
    if (let d = f(item) where d > now) d
  }
  impl func do = {
    let f: $T => Future[Void] = ($do)
    f(item)
  }
}
"
}
/*
extend entity BridalAppointment {
  impl event onSave = {
    if (created) {
      BridalAppSmsConf.send(this)
    }
  }
  
  system field appt7days: BridalAppt7Days inline by appt = BridalAppt7Days()
}

inline entity BridalAppt7Days extends DeferredJob {
  field appt: BridalAppointment
  impl func service = NotificationService
  impl func jobDate = {
    let d = appt.period.start - 7_day
    if (d > Date.now) d
  }
  impl func do = {
    BridalAppSms7DaysReminder.send(appt)
  }
}*/