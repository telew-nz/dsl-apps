
  
entity ClientinputCategory
{  field title : String
   field useCase : String
     
  func toString = title
}

 entity ClientInput 
{ field title : String
  field userInputCategories : UserinputCategory
  field details : String
  field relatedFeature : Feature
  field backlogcategory : BacklogCategory  
  field comments : String
  field relatedUserInput : UserInput
  field priority : PriorityCategory
  field People : People
  field relatedUsecase : UseCase
  field organisation : Organisation //Todo automate org(s) from people ref
      
} 

entity Feature 
{ field title : String
   field details : Text
   field relatedFeature : [Feature]
   field featureCategory : FeatureCategory
   field phase : FeaturePhase
   field status : FeatureStatus
   field forPeople : People
   field forOrgnisation : Organisation
   field teamWorking : [People]
   field roleResponsible : Role
   field comments : [String] 
   field deal : [Deal] by featuresRequired
}

entity Backlog 
{
  field title : String
  field backlogType : [BacklogType]
  field userInputs : UserInput
  field feature : Feature
  field contact : People
  field details : Text 
  field prioirty : Int
  field type : UserinputCategory
  field category : BacklogCategory
  field status : Status
  field relatedBacklog : Backlog
  field people : People
  field orgnisation : Organisation
}

entity Release 
{  field title : String
   field status : ReleaseStatus
   field backlog : Backlog
   field feature : Feature
   field relatedRelease : Release
   field details : Text
   field comments : [String] 
}


entity ActionItemEntity 
{
  field done: Bool
  field title : String
  field details : Text
  field actioningPerson : [People]
  field status :ActionItemStatus
  field role : Role
  field dueDate : Date
  field urgency : Urgency
  field userInputs : UserInput
  field feature : Feature
  field type : UserinputCategory
  field category : BacklogCategory
  field relatedBacklog : Backlog
  field createdBy : People
  field relatedActionItem : [ActionItemEntity]
  view ref = row{done => field(editMode = AlwaysEdit, label = ""), title}
}
entity Tool 
{ field title : String
  field toolPricing : [ToolPricing]
  field toolCategory : ToolCategory
  field organisation : Organisation 
}
 
class ToolPricing
{ field priceModel : PriceModel
  field price : Int
}
  
entity Workflow extends TCNS
  
  
entity Limitation extends TCNS
    
entity Requirement extends TCNS

entity Industry extends TCNS
  
entity Methodology extends TCNS


entity RenewalManagement extends TCNS
 {
   field Type : RenewalType
   field renewalDate : Date
   field organisation : Organisation
 }


entity Actor{
  field title : String// manual actor name
  field organisationalRole : [OrganisationalRole] //the role in an orgnisation as an actor
  field organisation : Organisation// the organisation itself an actor
  field person : People// person as an actor
  field system : String //system or system component as an actor
}

entity Error{
  field title : String
}