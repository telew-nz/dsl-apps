class PhoneValidationJob extends SystemJob {
  impl field service: AWSService
  
  field phoneNumber: Phone
  field countryCode: String
  
  impl func do = {
    validate()
  }
  
  back func validate(): Future[PhoneValidationResult] = {
    let variants = CountryCodes.generatePhoneVariants(countryCode, phoneNumber)
    let phoneInfo <- validatePhones(variants)
    
    phoneInfo
  }
  
  private back func validatePhones(phones: [Phone]?): Future[PhoneValidationResult] = {
  	if (phones.isEmpty) return PhoneValidationResult()
    
    let phoneNumber = phones.first!
    let isE164 = phoneNumber.startsWith("+")
    
    let validateRequest = NumberValidateRequest(
      isoCountryCode = countryCode
      phoneNumber = phoneNumber
    )
    let res <- service.https("v1/phone/number/validate").post(validateRequest.json).recover(_.as[HttpResponse])
    let vr = res.body!.parseJson[NumberValidateResponse] 

    if(res.code == 200 &&
       vr.phoneType != "INVALID" &&
       (isE164 || vr.countryCodeIso2 == countryCode)) 
    PhoneValidationResult(
      phone = vr.cleansedPhoneNumberE164, 
      countryCode = vr.countryCodeIso2, 
      carrier = vr.carrier)
    else validatePhones(phones.drop(1))
  }
}

class NumberValidateRequest {
  extFieldNaming = UpperCamelCase
  
  field isoCountryCode: String?
  field phoneNumber: String
}

class NumberValidateResponse {
  extFieldNaming = UpperCamelCase

  field countryCodeIso2: String?
  field carrier: String?
  field cleansedPhoneNumberE164: String?
  field phoneType: String?
}
