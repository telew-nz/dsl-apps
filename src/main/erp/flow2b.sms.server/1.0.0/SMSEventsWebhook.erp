object SMSEventsWebhookRouter extends WorkspaceRouter[SMSEventsWebhookData] {
  impl back func parse(request: IncomingHttpRequest): SMSEventsWebhookData = {
    request.body!.parseJson[SMSEventsWebhookData]
  }
  impl back func keys(request: IncomingHttpRequest, data: SMSEventsWebhookData): [String]? = ["sms_events"]
}

entity SMSEventsService extends SystemService {
  impl func title = "SMS Events Service"
  field smsEventsWebhookEndpoint: SMSEventsWebhookEndpoint inline by service
}

inline entity SMSEventsWebhookEndpoint extends WorkspaceEndpoint[SMSEventsWebhookData] {
  impl field service: SMSEventsService by smsEventsWebhookEndpoint
  
  impl func keys = ["sms_events"]
  impl func router = SMSEventsWebhookRouter
  
  impl back func process(request: IncomingHttpRequest, data: SMSEventsWebhookData): Future[Any] = {
    //data.json.log("smsEventData")
    
    guard(data.eventType.lower.startsWith("_sms.")) else return {
      Future(HttpResponse(code = 200, request = HttpRequest(url = request.url, ssl = request.ssl)))
    }
    
    let l <- SMSLog.all.find(_.messageID == data.attributes.messageID).result
    
    let _ <- if(let l) {
      let isDelivered = (data.eventType.lower == "_sms.success" && 
                         data.attributes.recordStatus.lower in ["delivered", "successful"])
      
      l.numberOfParts = data.attributes.numberOfMessageParts
        
      let _ <- if(isDelivered) {
      	if(l.deliveredParts) l.deliveredParts += 1 else l.deliveredParts = 1
        if(l.deliveredParts >= l.numberOfParts) {
          l.awsCost = data.metrics.priceInMillicentsUSD.as[Money[USD]].as[Money[5]] / 100000.0
          l.status = Delivered
          
          Query(ISMSClientService.implObjects.first!).inWorkspace(l.workspaceID)
          	.updateDeliveryStatus(data.attributes.messageID, Delivered).result
        }
      } else {
        l.status = Failed
        Activity.comment("SMS Delivery FAILED: ${data.json}")
        
        Query(ISMSClientService.implObjects.first!).inWorkspace(l.workspaceID)
          .updateDeliveryStatus(data.attributes.messageID, Failed).result
      }
      
      l.save()
    } else Activity.comment("No sms message (SMSLog) with id = ${data.attributes.messageID}")
    
    HttpResponse(code = 200, request = HttpRequest(url = request.url, ssl = request.ssl))
  }
}  
/**/
class SMSEventsWebhookData {
  field eventType: String {extName="event_type"}
  field application: SMSEventsApplication
  field attributes: SMSEventAttributes
  field metrics: SMSEventMetrics
}

class SMSEventsApplication {
  field appID: String {extName="app_id"}
}

class SMSEventAttributes {
  field messageID: String {extName="message_id"}
  field recordStatus: String {extName="record_status"}
  field numberOfMessageParts: Int {extName="number_of_message_parts"}
}

class SMSEventMetrics {
  field priceInMillicentsUSD: Int {extName="price_in_millicents_usd"}
}
/**/