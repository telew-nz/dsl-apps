trait AWSSMSService extends AWSService {
  impl field awsAccessKeyID: String
  impl field awsSecretAccessKey: Password
  
  field pinpointAppID: String

  impl func awsRegion = "ap-southeast-2"
  impl func awsService = "pinpoint"
  impl func awsServiceScope = "mobiletargeting"
}


object SMSService extends SystemService with ISMSService with AWSSMSService {
  impl func title = "SMS Server Service"
  
  impl back func validatePhone(phone: Phone, countryCode: String): Future[PhoneValidationResult] = PhoneValidationJob(
    service = this,
    phoneNumber = phone, 
    countryCode = countryCode
  ).validate()
  
  impl back func send(destinationNumber: Phone, message: PlainText, pConfig: PinpointClientConfig): Future[String?] =     
    SendSMSJob(
      service = this
      destinationNumber = destinationNumber
      message = message
      pinpointConfig = pConfig
    ).send()
  

  impl back func tst(id: String): Future[Any] = {
    guard(let wsId = Workspace.crossId) else return { Future(0) }
    
    TstJob(
      foreignId = id,
      workspaceId = wsId
    ).enqueue()
  }

  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
    
    awsAccessKeyID
    awsSecretAccessKey
    
    pinpointAppID
  }}
}

class TstJob extends SystemJob {
  impl func service = SMSService
  
  field foreignId: String
  field workspaceId: UInt
  
  impl func do = {
    /*
    foreignId.log("foreignID")
    workspaceId.log("wsID")
    
    let phones <- Activity.all.inWorkspace(workspaceId).find(_.id == foreignId)?.deliveries*.contact*.as[IPhoneContact].map(_?.phone).result
    phones.log("phones")
    */
    //let r <- Activity.all.inWorkspace(workspaceId).find(_.id == foreignId)?.dateTime.result
    
    //r.log("activity datetime")
    
    //Query(ISMSClientService.implObjects.first!).inWorkspace(workspaceId).activities*.dateTime.log("activities datetime")
    //Activity.current!.comment("activity comment")
  }
}
