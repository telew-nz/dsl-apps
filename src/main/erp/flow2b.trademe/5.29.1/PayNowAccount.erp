entity PayNowAccount extends FinAccount with ScheduledJob {
  ref const field integration: ITrademeIntegration by payNowAccount
  impl func title = "$integration: Pay Now & Afterpay"
  impl func service = integration
  impl func schedule = if (retrieveStatement) "0 30 11 * * ?" //Every day
  system field lastUpdate: Date?
  
  field retrieveStatement: Bool = true
  impl func currency: Currency = NZD
  impl func legalEntity = integration.legalEntity
  impl func hasBankData = true
  impl func ledgerAccount: LedgerAccount = Cash
  
  impl func do = if (retrieveStatement) {
    let d = {
      if (let lu = lastUpdate) Date.now.add(10_minute).sub(lu).to[Duration[hour]] 
      else 5.as[Duration[day]]
    }
    let dd = d.to[Duration[day]].round(ceil, 0)
    let trs0 <- nextPage(number = 1, if (let dd) dd.noUnit else 1)
    
    let trs = if (let lastUpdate) {
      trs0.filter(date > lastUpdate)
    } else {
      let sd = Date.now
      let trs1 = trs0.filter(date >= sd)
      if (let tr = trs1.sortBy(date).first) {
        initBalance = InitBalance(date = tr.date, balance = tr.balance - tr.stmAmount).save
      }
      trs1
    }
    
    lastUpdate = Date.now
    save
    BankImporter.import(this, trs)
  }.recover {err =>
    if (err.as[HttpResponse]?.code == 400) {
      retrieveStatement = false
      save
      []
    }
  }
  
  back func nextPage(number: UInt, days: Int): Future[[PayNowData]?] = {
    let result <- service.https("MyTradeMe/PayNowLedger/All.json").param("days", days).param("page", number).get
    let page = result.body!.parseJson[PayNowPage]
    if (number > 20) {
      throw "Too many pages"
    }
    let nps <- if (page.hasNext) {
      nextPage(number + 1, days)
    } 
    page.list + nps
  }
  
  impl view form = nav{
    grid{
      integration 
      retrieveStatement
      initBalance
      balance
    }
    ledgerBtn
  }
}

back class PayNowPage extends IPage[PayNowData] {
  extFieldNaming = UpperCamelCase
  impl field list: [PayNowData]?
}

back class PayNowData extends BankStatementItem {
  extFieldNaming = UpperCamelCase
  field type: PayNowType {
    jsonMap[Int?](apply = _.id, unapply = i => {PayNowType.all.find(id == i)!})
  }
  impl field date: Date {jsonMap = TrademeDate}
  
  field description: String?
  field credit: UMoney?
  field debit: UMoney?
  field balance: Money?
  field listingId: Int?
  field offerId: Int?
  field purchaseId: Int?
  field listingTitle: String?
  impl field fee: UMoney?
  field settlementId: Int?
  field ledgerId: Int
  impl func stmAmount = if (let cr = credit) cr else -debit
  impl func data(account: FinAccount) = {
    BankData(type = type.name, bankId = ledgerId, memo = description, balance = balance, reference = "P$purchaseId")
  }
}

enum PayNowType(id: Int?) {
  case Sale(id = 0)
  case PaymentToMemberBankAccount(id = 1)
  case FailedPaymentToMemberBankAccount(id = 2)
  case Refund(id = 3)
  case Transfer(id = 4)
  case Chargeback(id = 5)
  case Other(id = 6)
}
