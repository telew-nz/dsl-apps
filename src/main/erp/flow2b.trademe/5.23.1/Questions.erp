extend enum DashboardIssue {
  case UnansweredTrademeQuestion(role = Salesperson, priority = major)
}

entity TrademeQuestion extends HasN with DashboardItem {
  const ref field listing: TrademeListing by questions
  func nextN: Int? = increment(Ticket.gen)
  func numPrefix: String = "TMQ"
  
  func title = "$number $customer $listing"
  
  const ref field status: QuestionStatus = Asked
  const field question: PlainText
  const system field listingQuestionId: Int
  const ref field customer: Customer
  
  field answer: PlainText?
  func itemPriority: Priority = major
  func itemRoles = [Salesperson]
  func activeRoles = if (status.active) [Salesperson]
  func issues: [DashboardIssue]? = if (status.active && !answer) [UnansweredTrademeQuestion]
  func fixes(issue: DashboardIssue) = if (issue == UnansweredTrademeQuestion) [
    Fix(text = "Answer the question"),
    Fix(text = "Ignore the question", acts = [
      Act(label = "Ignore", do = {
        Query(this).foreach {i =>
          i.status = Ignored
          i.save
        }.result
      })
    ])
  ]
  
  view form = nav {
    grid(labels = Top) {
      issuesView
      x(flow = false){
        status >> field(compact)
        listing >> field(stretch = 1, fontStyle = H2, title = title)
        number >> field(fontStyle = H3)
      }
      customer
      question
      answer >> field(visible = status != Answered)
      answer >> field(editMode = AlwaysRead, visible = status == Answered)
    }
    extension("nav")
  }
  event onSave = {
    if ((status == Asked || status == Ignored) && answer) {
      PostAnswerJob(question = this).run
    }
  }
  view ref = x(flow = false){status title}
}
enum QuestionStatus(active: Bool) {
  case Asked(active = true) {
    background = "#ed9"
    icon = "play"
  }
  case Answered(active = false) {
    color = "white"
    background = "#090"
    icon = "check-circle"
  }
  case Ignored(active = false) {
    background = "#999"
    icon = "times-circle"
  }
}

inline entity RetrieveQuestionsJob extends ScheduledJob {
  field service: ITrademeIntegration by retrieveQuestionsJob
  func schedule = "30 */5 * * * ?" //Every 5 minutes
  field lastUpdate: Date?
  func do: Future[Any] = {
    nextPage(number = 1)
  }
  back func nextPage(number: UInt): Future[Any] = {
    let result <- service.https("Listings/questions/unansweredquestions.json").param("page", number).get
    let page = result.body!.parseJson[QuestionsPage]
    page.list*.make(service)

    if (page.hasNext) {
      nextPage(number + 1)
    } else {
      Future(1)
    }
  }
}

class PostAnswerJob extends SystemJob {
  field question: TrademeQuestion
  func service = question.listing.template.service
  func do: Future[Any] = {
    let _ <- service.https("Listings/$(question.listing.listingId)/questions/$(question.listingQuestionId)/answerquestion.json")
      .post(Answer(answer = question.answer!).json)  
    question.status = Answered
    question.save
  }
}

back class QuestionsPage extends IPage[Question] {
  extFieldNaming = UpperCamelCase
  field list: [Question]?
}

back class Question {
  extFieldNaming = UpperCamelCase
  field listingId: Int
  field listingQuestionId: Int
  field comment: String
  field isSellerComment: Bool
  field askingMember: TrademeAccount
  
  func make(service: ITrademeIntegration): TrademeQuestion? = if (!isSellerComment) {
    if (!TrademeQuestion.all.find(q => q.listing.listingId == this.listingId && q.listingQuestionId == this.listingQuestionId).result.get) {
      if (let l = TrademeListing.all.find(l => l.listingId == this.listingId).result.get) {
        TrademeQuestion(
          listing = l
          listingQuestionId = listingQuestionId
          customer = askingMember.make(service).save
          question = comment
        ).saveMain
      }
    }
  }
}

back class Answer {
  field answer: PlainText
}
