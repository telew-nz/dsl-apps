entity TrademeListing extends DeferredJob {
  const ref field product: ISubProduct by trademeListings
  const field template: TrademeTemplate
  ref const field status: ListingStatus = Entered
  func active = status == Active
  const field qtySold: Int?
  const field listingId: Int?
  func entityNumbers = [listingId.toString]
  compute url: Url? = if (let l = listingId) "$(template.integration.webUrl)Browse/Listing.aspx?id=$l" else ""
  const field expiryDate: Date?
  func title = product.title
  func service: ITrademeIntegration = template.integration
  func jobDate = if (active) expiryDate?.add(10_minute) else null
  func do = {
    status = Expired
    save()
    if (product.trademeStatus == Listed &&
        service.manageListings &&
       !product.trademeListings.exists(l => l.status == Active && l.template == this.template) 
    ) {
      let result <- service.https("Selling/Relist.json").post(RelistRequest(listingId = listingId!).json)
      result.body!.parseJson[ListingResponse].process{response =>
        let l = TrademeListing(
          product = product, template = template, status = Active, 
          expiryDate = response.listing!.endDate,
          listingId = response.listingId)
        l.save()
        UpdateListingJob(listing = l).run()
      }
    }
  }
  view form = nav{grid{
    product
    template
    status
    qtySold
    listingId
    expiryDate
    url
    button("Update") {
      let _ <- back {
        UpdateListingJob(listing = this).run()
      }
      UI.info("Job is posted")
    }
    //button("Relist") {
    //  run()
    //  UI.info("Job is posted")
    //}
  }}
  view ref = x {status title}
  report Report {
    field product: ISubProduct? 
    field template: TrademeTemplate?
    field status: [ListingStatus]? = [ListingStatus.Active]
    view list = TrademeListing.all.filter(product ==? this.product && template ==? this.template && (!this.status || this.status.contains(status))) >> nav{table{
      status product qtySold expiryDate
    }}
  }
}

class RelistRequest {
  extFieldNaming = UpperCamelCase
    
  field listingId: Int
  field returnListingDetails: Bool = true
}

enum ListingStatus(valid: Bool) {
  case Entered(valid = true){background = "#ed9"}
  case Active(valid = true){background = "#dea"}
  case Parked(valid = true) {background = "#ddd"}
  case Withdrawn(valid = false) {background = "#ddd"}
  case Exhausted(valid = false) {background = "#ddd"}
  case Expired(valid = false) {background = "#ddd"}
  case Invalid(valid = false) {background = "#f99"}
}
