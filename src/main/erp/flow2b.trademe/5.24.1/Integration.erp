trait ITrademeIntegration extends SystemService with OAuth1Hmac with ExtIdSource[Int] with ISalesChannel with SalesOrderUpdater[Int] {
  field title: String = "Trade Me"
  func roles: [Role]? = [Admin]
  func authParams = ["scope" -> "MyTradeMeRead,MyTradeMeWrite"]
  
  const field initComplete: Bool

  field initialDownload: TrademeInitialDownload? inline by service
  func extUrl: Url
  func webUrl: Url
  func https(path: String): HttpRequest = HttpRequest(url = "$extUrl$path", ssl = true).oauth(this)
  
  field manageListings: Bool = false
  field templates: [TrademeTemplate]? read by integration {deleteCascade = true}
  system field retrieveSoldItemsJob: RetrieveSoldItemsJob inline by service
  system field retrieveQuestionsJob: RetrieveQuestionsJob inline by service
  ref field legalEntity: OurLegalEntity {
    available(Ref).with(priceModels)
    default =? onlyOne
  }
  field approvedDealsSeller: Bool
  
  field finAccount: TrademeFinAccount inline by integration {
    label = "Member Account"
  }
  field pingAccount: PingAccount inline by integration
  field payNowAccount: PayNowAccount inline by integration
  field trademe: Vendor {
    label = "Trademe Company"
    default <- {
      let comp <- Company.all.find(title.contains("Trade Me") || title.contains("Trademe")).result
      let v = comp.alt(
        Company(
          title = "Trade Me", currency = NZD, legalInfo = LegalInfo(name = "Trade Me Limited"),
          altNames = ["Trademe"]
        )
      ).makeVendor
      v.gstStatus = Registered
      v
    }
  }
  func uploadOrderState(order: SalesOrder): Void = {
    PushSalesOrderState(service = this, so = order).enqueue
  }
  back func error(error: Any): JobError = {
    if (let e = error.as[JobError]) e
    else if(error.as[HttpResponse]?.code == 503) {
      touch
      saveMain
      let date = Date.now + 1_hour
      Activity.comment("Server unavailable, will try again at $date")
      RepeatJob(times = 4, on = date, reason = error)
    } else if(error.as[HttpResponse]?.code == 429) {
      touch
      saveMain
      let date = Date.now.start(of = hour) + 1_hour + 1_minute
      Activity.comment("API limit is reached, will try again at $date")
      RepeatJob(times = 1, on = date, reason = error)
    } else {
      ReportError(error = error)
    }
  }

  
  view form = nav{
    tabs {
      grid(label = "Main") {
        issuesView
        title
        legalEntity
        serviceState
        manageListings
        authorizeView
        approvedDealsSeller
        trademe
        templates
        initialDownload
      }
      grid(label = "Member Account") {
        finAccount.form.unnav
      }
      grid(label = "Ping") {
        pingAccount.form.unnav
      }
    }
    button("↻ Sales") {
      retrieveSoldItemsJob.enqueue()
      UI.info("Job is posted")
    }
    button("↻ Questions") {
      retrieveQuestionsJob.enqueue()
      UI.info("Job is posted")
    }
    button("↻ Member Account") {
      finAccount.enqueue()
      UI.info("Job is posted")
    }
  }
  view test = nav{
    grid{
      button("Update Categories") {
        UpdateCategoriesJob(service = this).enqueue()
        UI.info("Job is posted")
      }
      button("Retrieve Latest Sales") {
        retrieveSoldItemsJob.enqueue()
        UI.info("Job is posted")
      }  
      button("Retrieve Questions") {
        retrieveQuestionsJob.enqueue()
        UI.info("Job is posted")
      }
      button("Download Listings") {
        DownloadListingsJob(service = this).enqueue
        UI.info("Job is posted")
      }
      button("Update All Listings") {
        templates*.enqueue()
        UI.info("Job is posted")
      }
    }
  }
  
  event onSave = {
    if (!TrademeCategory.all.first(1).result.get) {
      UpdateCategoriesJob(service = this).enqueue()
    }
    if (serviceState == Active && initialDownload && !initComplete) {
      DownloadListingsJob(service = this).enqueue
    }
    if (manageListings && serviceState == Active && updated(serviceState)) {
      retrieveSoldItemsJob.enqueue()
      retrieveQuestionsJob.enqueue()
      TrademeQuestion.all.filter(status != Answered && answer).foreach {q =>
        PostAnswerJob(question = q).enqueue()
      }
      finAccount.enqueue()
      templates*.enqueue()
    }
  }
}

inline entity TrademeInitialDownload {
  field service: ITrademeIntegration by initialDownload
  field products: Bool = true
  field photos: Bool = true
  field template: TrademeTemplate
  field stocktakeStore: IStore =? IStore.onlyOne
  view form = grid{
    row {products photos}
    template
    stocktakeStore
  }  
}

entity TrademeIntegration extends ITrademeIntegration {
  func authTmpTokenUrl: Url = "https://secure.trademe.co.nz/Oauth/RequestToken"
  func authAuthorizeUrl: Url = "https://secure.trademe.co.nz/Oauth/Authorize"
  func authTokenExchangeUrl: Url = "https://secure.trademe.co.nz/Oauth/AccessToken"
    
  func authConsumerKey: String = "A4FA0ACAFE93D0DD7AF5BA7D04D5395F"
  func authConsumerSecret: String = "F8E7FC4A2164F73BBAEB4435A26B5522"
    
  func extUrl = "api.trademe.co.nz/v1/"
  func webUrl: Url = "http://www.trademe.co.nz/"
  object view list = TrademeIntegration.all >> list{grid(labels = None){
    x {title serviceState}
  }}
}
