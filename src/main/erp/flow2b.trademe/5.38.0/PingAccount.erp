entity PingAccount extends FinAccount {
  ref const field integration: ITrademeIntegration by pingAccount
  impl func title = "$integration: Ping Account"
  func service = integration
  impl func currency: Currency = NZD
  impl func legalEntity = integration.legalEntity

  impl func ledgerAccount: LedgerAccount = Cash
  impl func hasBankData = true
  override func isContraAccount(item: BankStatementItem, data: BankData): Bool = {
    let l = data.fullMemo.lower + data.thierName.lower
    item.stmAmount > 0 && (l.contains("trade me wellington") || l.contains("trade me limited")) && !l.contains("pay now")
  }
  
  impl view form = nav{
    grid{
      integration      
      initBalance
      balance
    }
    ledgerBtn
  }
}

back class PingCsvData extends BankStatementItem {
  impl field date: Date {format = "yyyy-MM-dd'T'HH:mm:ss.SSSSSSS"}
  field memo: String
  field sCredit: String
  compute credit = m(sCredit)
  field sDebit: String
  compute debit = m(sDebit)
  field sBalance: String
  compute balance = m(sBalance)
  field referenceId: String
  field sku: String?
  field sSaleAmount: String
  compute saleAmount = m(sSaleAmount)
  field sFee: String
  impl compute fee = if (credit) m(sFee).as[UMoney] else -m(sFee).as[UMoney]
  
  impl func stmAmount = if (let credit) credit else debit
  
  func m(s: String): Money? = {
    let n = s.dropPrefix("-").dropPrefix("\$").toNum
    if (s.startsWith("-")) -n else n
  }
  impl func data(account: FinAccount): BankData = {
    BankData(memo = memo, reference = referenceId, code = sku)
  }
  
  func isDouble(o: PingCsvData): Bool = {
    date == o.date && stmAmount == -o.stmAmount 
  }
  
  object func filterPurchases(items: [PingCsvData]?): [PingCsvData]? = {
    if (items.count < 2) {
      items
    } else {
      var prev: PingCsvData? = null
      items.sliding(2).filter{i =>
        let b = !i.first.isDouble(i(2)) && (!prev || !prev!.isDouble(i.first))
        prev = i.first
        b
      }*.first + (if (!prev!.isDouble(items.last!)) [items!.last])
    }
  }
}
 
extend enum BankStatementType {
  case TrademePingCsv(
    canProcess = file.is("csv") && data.toString.lines(CSV).first == "Date,Transaction,Credit,Debit,Balance,ReferenceId,SKU,NetSaleAmount,Fee", 
    process = ProcessResult(
      account = PingAccount.all.result.get.onlyOne,
      items = PingCsvData.filterPurchases(data.toString.lines(CSV).drop(1).mapOpt(splitTo[PingCsvData](CSV)))), 
    knowOurAccount = true
  )
}