inline entity RetrieveSoldItemsJob extends ScheduledJob {
  field service: ITrademeIntegration by retrieveSoldItemsJob
  func schedule = "0 30 * * * ?" //Every hour
  field lastUpdate: Date?
  func do: Future[Any] = {
    let d = if (let lu = lastUpdate) Date.now.add(10_minute).sub(lu).to[Duration[hour]] else 24000.as[Duration[hour]]
    let dd = d.to[Duration[day]] 
    this.lastUpdate = Date.now
    save()
    nextPage(number = 1, filter = {
      if (d < 1_hour) "LastHour"
      else if (d < 24_hour) "Last24Hours"
      else if (dd < 3_day) "Last3Days"
      else if (dd < 7_day) "Last7Days"
      else if (dd < 30_day) "Last30Days"
      else "Last45Days"
    })
  }
  
  back func nextPage(number: UInt, filter: String): Future[Any] = {
    service.https("MyTradeMe/SoldItems/$filter.json").param("page", number).get.flatMap{result =>
      let page = result.body!.parseJson[SoldItemsPage]
      page.list*.process(service)
      if (page.totalCount > page.page*page.pageSize) {
        nextPage(number + 1, filter)
      } else {
        Future(1)
	  }
    }
  }
}

class SoldItemsPage {
  extFieldNaming = UpperCamelCase
  field totalCount: Int?
  field page: Int
  field pageSize: Int?
  field list: [SoldItem]?
}

class SoldItem {
  extFieldNaming = UpperCamelCase
  field listingId: Int
  field salePrice: Money
  field selectedShipping: String
  field buyerDeliveryAddress: String?
  field messageFromBuyer: String?
  field successFees: Money?
  field shippingPrice: Money?
  field offerId: Int?
  field invoiceId: Int?
  field buyer: TrademeAccount inline
  field deliveryAddress: TrademeLocation?
  field quantitySold: Int
  field purchaseId: Int
  field price: Money
  field orderId: Int?
  field referenceNumber: String?
  field soldDate: Date {jsonMap = TrademeDate}
  back func process(service: ITrademeIntegration): Void = {
    if (!SalesItem.all.exists(trademePurchaseId == purchaseId)) {
      if (let listing = TrademeListing.all.find(listingId == this.listingId)) {
        let so = {
          if (let oo = if (orderId) SalesOrder.all.find(trademeOrderId == orderId) else null) oo
          else {
            let oo = SalesOrder(
              trademeOrderId = orderId, date = soldDate, referenceNumber = "$referenceNumber", salesChannel = service,
              vendor = service.legalEntity,
              customer = buyer.person.makeCustomer,
              deliveries = []
            )
            oo.joinAll(Salesperson)*.notify()
            oo
          }
        }
        let shipTo: ILocation? = {
          if (let a = deliveryAddress, let addr = a.address) {
            if (buyer.person.name == buyer.nickname) {
              buyer.person.name = a.name
            }
            let addr1: Address = if (buyer.person.title != a.name) a.name + " " + addr else addr
            buyer.person.locations.find(_.address == addr1)
              .alt{
                let l = Location(actor = buyer.person, address = addr1)
                if (let phone = a.phoneNumber) {
                  PhoneContact(addressee = l, phone = phone)
                }
                l
              }
          } else null
        }

        listing.qtySold = listing.qtySold + quantitySold
        listing.save()
        let p = listing.product
        let template: TrademeTemplate = listing.template
        var qty = quantitySold.as[Qty[p.unit]]
        if (p.superProduct.isTangible) {
          let regs: [StockRegister]? = StockRegister.current
            .filter(p.subProducts.contains(good) && (!template.stores || template.stores.contains(store)) && available > 0)
          regs.foreach {i =>
            if (qty > 0) {
              let delivery = so.deliveries*.as[SalesDelivery].find(source == i.store)
                .alt(SalesDelivery(primary = so.deliveries.isEmpty, policy = template.deliveryPolicy, salesOrders = [so], source = i.store, shipTo = shipTo))
              let q = qty!.min(i.available!)
              SalesItem(
                order = so,
                trademePurchaseId = purchaseId, trademeListing = listing,
                deliveryItem = DeliveryItem(delivery = delivery, product = i.good, unit = i.good.unit, qty = q),
                amount = price*q
              ).save
              qty = qty - q
            }
          }
        }
        if (qty > 0) {
          let delivery = so.deliveries.first.alt(SalesDelivery(primary = so.deliveries.isEmpty, policy = template.deliveryPolicy, salesOrders = [so], 
                                                               source = IStore.all.first.result.get!, shipTo = shipTo))
          let good = p.subProducts.first!
          SalesItem(
            order = so,
            trademePurchaseId = purchaseId, trademeListing = listing,
            deliveryItem = DeliveryItem(delivery = delivery, product = good, unit = good.unit, qty = qty!)
            amount = price*qty!
          ).save
        }
      } else {
        //"Listing ${this.listingId} is not presented in flow2b".log
      }
    }
  }
}

extend entity SalesItem {
  system const field trademeListing: TrademeListing? by soldItems
  system const field trademePurchaseId: Int?
  compute trademePurchase: Url? = if (let p = trademePurchaseId) "$(trademeListing?.template?.integration?.webUrl)MyTradeMe/PurchaseSummary.aspx?asid=$p&isBuyer=False"
  
}

extend entity SalesOrder {
  system const field trademeOrderId: Int?
}


