entity TrademeTemplate extends ScheduledJob with ISalesOrderImportProvider[Int] with ISalesChannel {
  ref field title: String
  ref field integration: ITrademeIntegration
  func service = integration
  field paymentMethods: [PaymentMethod]
  field otherPaymentMethod: String? {
    visible = paymentMethods.contains(Other) 
    validate = if (paymentMethods.contains(Other) && !otherPaymentMethod) "Other Payment Method details are required"
  }
  field pickup: Pickup
  field shippingOptions: [ShippingOption]? inline by template
  field stores: [IStore]? {singular = "Store"}
  field paymentTerms: IPaymentTerms?
  field listingType: ListingType = Quantity
  field extraCharge: Percent?
  field maximumExtraCharge: Money[NZD]?
  field productCategories: [ProductCategory]? by trademeTemplates
  field updatePricesEvery: Duration[hour, 0]?
  field listingDuration: Duration[day, 0]? = 7
  field shippingCharge: ShippingCharge = PerItem
  field deliveryPolicy: DeliveryPolicy?
  field descriptionFooter: Text? = "Listed using flow2b.com"
  func schedule = if (let p = updatePricesEvery) "0 3 */${p.unformattedString} * * ?" else ""
  
  field startPrice: TrademePrice? {visible = listingType == Auction}
  field reservePrice: TrademePrice? {visible = listingType == Auction}
  field buyNowPrice: TrademePrice? {visible = listingType == Auction}
  
  func salesChannel = this
  func legalEntity = integration.legalEntity
  func paymentMethodAccounts = if (let bankAccount = integration.bankAccount) ["PAYNOW" -> bankAccount]
  func deliveryMethodProducts = shippingOptions.filter(product).map(type.name -> product!).toMap
  
  view form = nav{
    tabs {
      grid(label = "Main"){
        integration
        title
        listingType
        listingDuration  
        productCategories
        descriptionFooter
      }
      grid (label = "Prices") {
        extraCharge
        maximumExtraCharge
        startPrice
        reservePrice
        buyNowPrice
      }
      grid (label = "Products") {
        stores
      }
      grid (label = "Payment") {
        paymentTerms
        paymentMethods
        otherPaymentMethod
      }
      grid (label = "Delivery") {
        deliveryPolicy
        pickup
        shippingOptions >> list {grid(labels = Top) {
          x{type, price >> field(canEditUnit = true)}
          row {pickupLocation >> field(compact = true) ruralPickup signatureRequired}
          method
          product
        }}
        shippingCharge
      }
      grid (label = "Advanced") {
        updatePricesEvery
      }
    }
    button("Listings") {
      TrademeListing.Report(template = this).list.open
    }
    button("Update All Listings") {
      run()
      UI.info("Job is posted")
    }
  }
  
  //func onSave = {
  //  listings*.product*.touch
  //}
  func do = {
    TrademeListing.all
      .filter(template == this && (active || status == Entered))
      .foreach(UpdateListingJob(listing = _).run())
  }
}



enum ListingType {
  case Quantity
  case Auction
}

enum ShippingCharge {
  case PerItem
  case PerOrder
}

enum PaymentMethod(id: Int?) {
  case BankDeposit(id = 1)
  case CreditCard(id = 2) = "Pay Now (Credit/Debit Cards)"
  case Cash(id = 4)
  case Other(id = 16)
  case Ping(id = 32)
  case Afterpay(id = 64)
}

enum Pickup(id: Int) {
  case Allow(id = 1) = "Can Pickup"
  case Demand(id = 2) = "Must Pickup"
  case Forbid(id = 3) = "No Pickups"
}

inline entity ShippingOption {
  externalCapitalizeFieldNames = true
  field template: TrademeTemplate {transient}
  field type: ShippingOptionType {
    jsonMap[Int?](apply = id, unapply = i => ShippingOptionType.all.find(id == i)!)
    update = {
      if (new == TradeMe) {
        price = 0
        method = ""
      }
    }
  }
  field currency: Currency {
    transient
    default = Currency.default
  }
  field pickupLocation: PickupLocation {
    transient
    default = Auckland
    visible = type == TradeMe
  }
  field signatureRequired: Bool {
    transient
    visible = type == TradeMe
  }
  field ruralPickup: Bool {
    transient
    visible = type == TradeMe
  }
  field price: Money[currency]? {visible = type == Custom}
  field method: String? {visible = type == Custom, validate = if (type == Custom && !method) "Please enter Method" }
  field product: IProduct? {
    transient
    visible = type == Custom || type == TradeMe
    validate = if (!product && (type == Custom || type == TradeMe)) "Product should be set for the delivery type"
  }
  
}

enum ShippingOptionType(id: Int?) {
  case Free(id = 3)
  case TradeMe(id = 5)
  case Custom(id = 4)
  case Undecided(id = 1)
  case Pickup(id = 2)
}
