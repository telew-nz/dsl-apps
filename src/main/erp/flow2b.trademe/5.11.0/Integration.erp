trait ITrademeIntegration extends SystemService with OAuth1Hmac with ExtIdSource[Int] with ISalesChannel {
  field title: String
  func roles: [Role]? = [Admin]
  func authParams = ["scope" -> "MyTradeMeRead,MyTradeMeWrite"]
  
  const field initComplete: Bool

  field initialDownload: TrademeInitialDownload? inline by service
  func extUrl: Url
  func webUrl: Url
  func https(path: String): HttpRequest = HttpRequest(url = "$extUrl$path", ssl = true).oauth(this)
  
  field templates: [TrademeTemplate]? read by integration
  system field retrieveSoldItemsJob: RetrieveSoldItemsJob inline by service
  ref field legalEntity: OurLegalEntity {
    available(Ref).with(priceModels)
    default =? onlyOne
  }
  field bankAccount: BankAccount?
  field approvedDealsSeller: Bool
  view form = nav{
    grid{
      issuesView
      title
      legalEntity
      serviceState
      authorizeView
      approvedDealsSeller
      bankAccount
      templates
      initialDownload
    }
 
  }
  view test = nav{
    grid{
      button("Update Categories") {
        UpdateCategoriesJob(service = this).run()
        UI.info("Job is posted")
      }
      button("Retrieve Latest Sales") {
        retrieveSoldItemsJob.run()
        UI.info("Job is posted")
      }  
      button("Download Listings") {
        DownloadListingsJob(service = this).run
        UI.info("Job is posted")
      }
      button("Update All Listings") {
        templates*.run()
        UI.info("Job is posted")
      }
    }
  }
  
  event onSave = {
    if (!TrademeCategory.all.first(1).result.get) {
      UpdateCategoriesJob(service = this).run()
    }
    if (serviceState == Active && initialDownload && !initComplete) {
      DownloadListingsJob(service = this).run
    }
    if (serviceState == Active && updated(serviceState)) {
      retrieveSoldItemsJob.run()
      templates*.run()
    }
  }
}

inline entity TrademeInitialDownload {
  field service: ITrademeIntegration by initialDownload
  field products: Bool = true
  field photos: Bool = true
  field template: TrademeTemplate
  field stocktakeStore: IStore =? IStore.onlyOne
  view form = grid{
    row {products photos}
    template
    stocktakeStore
  }  
}

entity TrademeIntegration extends ITrademeIntegration {
  func authTmpTokenUrl: Url = "https://secure.trademe.co.nz/Oauth/RequestToken"
  func authAuthorizeUrl: Url = "https://secure.trademe.co.nz/Oauth/Authorize"
  func authTokenExchangeUrl: Url = "https://secure.trademe.co.nz/Oauth/AccessToken"
    
  func authConsumerKey: String = "A4FA0ACAFE93D0DD7AF5BA7D04D5395F"
  func authConsumerSecret: String = "F8E7FC4A2164F73BBAEB4435A26B5522"
    
  func extUrl = "api.trademe.co.nz/v1/"
  func webUrl: Url = "http://www.trademe.co.nz/"
  object view list = TrademeIntegration.all >> list{grid(labels = None){
    x {title serviceState}
  }}
}
