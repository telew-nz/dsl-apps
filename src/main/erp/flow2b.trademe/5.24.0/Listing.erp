extend enum DashboardIssue {
  case InsufficientBalance(role = BusAdmin, priority = default)
}
extend entity SalesItem {
  system field trademeListing: TrademeListing? by salesItems
}
entity TrademeListing extends DeferredJob with DashboardItem {
  const ref field product: ISubProduct by trademeListings
  const field template: TrademeTemplate
  ref const field status: ListingStatus = Entered
  func active = status == Active
  system const field qtySold: Int?
  system const field listingId: Int?
  system const field hasBids: Bool
  system const field views: Int?
  system const field watchers: Int?
  system const field bids: Int?
  system const field startDate: Date?
  system const field endDate: Date?
  const field questions: [TrademeQuestion]? by listing
  const system field salesItems: [SalesItem]? by trademeListing
  compute salesOrders = salesItems*.order
  func entityNumbers = [listingId.toString]
  compute url: Url? = if (let l = listingId) "$(template.integration.webUrl)Browse/Listing.aspx?id=$l" else ""
  func duration: Duration? = if (let startDate, let endDate) endDate - startDate
  func title = product.title
  func service: ITrademeIntegration = template.integration
  func jobDate = if (active) endDate?.add(10_minute) else null
  func issues = if (status == InsufficientBalance) [InsufficientBalance]
  func fixes(issue: DashboardIssue): Future[[Fix]?] = if (issue == InsufficientBalance) [
    Fix(text = (if (listingId) "Cannot be update" else "Cannot be listed") +  "due to insufficient balance", acts = [
      Act(label = "Credit Account", do = UI.openUrl("https://www.trademe.co.nz/Payments/ChooseMethod.aspx"))
    ]) 
  ]
  func do = {
    status = Expired
    save()
    RetrieveListingStats(listing = this).enqueue
    
    if (product.trademeStatus == Listed &&
        service.manageListings &&
        !product.trademeListings.exists(l => l.status == Active && l.template == this.template) &&
        product.trademeTemplates.contains(this.template)
    ) {
      let result <- service.https("Selling/Relist.json").post(RelistRequest(listingId = listingId!).json)
      result.body!.parseJson[ListingResponse].process{response =>
        let l = TrademeListing(
          product = product, template = template, status = Active, 
          endDate = response.listing!.endDate,
          listingId = response.listingId)
        l.save()
        UpdateListingJob(listing = l).enqueue()
      }
    }
  }
  view form = nav{
    grid{
      product
      template
      status
      qtySold
      row {views watchers bids}
      listingId
      row {startDate endDate}
      url
      questions
      salesOrders

      //button("Relist") {
      //  enqueue()
      //  UI.info("Job is posted")
      //}
    }
    button("Update") {
      let _ <- back {
        UpdateListingJob(listing = this).enqueue()
      }
      UI.info("Job is posted")
    }
    button("â†» Stats") {
      RetrieveListingStats(listing = this).enqueue()
      UI.info("Job is posted")
    }
  }
  view ref = x {status title}
  report Report {
    field product: ISubProduct? 
    field template: TrademeTemplate?
    field status: [ListingStatus]? = [ListingStatus.Active]
    view list = TrademeListing.all.filter(product ==? this.product && template ==? this.template && (!this.status || this.status.contains(status))) >> nav{table{
      status product qtySold endDate
    }}
  }
}

class RelistRequest {
  extFieldNaming = UpperCamelCase
    
  field listingId: Int
  field returnListingDetails: Bool = true
}

enum ListingStatus(valid: Bool) {
  case Entered(valid = true){background = "#ed9"}
  case InsufficientBalance(valid = false) {background = "#f99"}
  case Active(valid = true){background = "#dea"}
  case Parked(valid = true) {background = "#ddd"}
  case Withdrawn(valid = false) {background = "#ddd"}
  case Exhausted(valid = false) {background = "#ddd"}
  case Expired(valid = false) {background = "#ddd"}
  case Invalid(valid = false) {background = "#f99"}
}
