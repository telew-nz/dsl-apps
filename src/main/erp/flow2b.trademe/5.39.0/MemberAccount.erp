entity TrademeFinAccount extends FinAccount with ScheduledJob with HasLowBalance {
  ref const field integration: ITrademeIntegration by finAccount
  impl func title = "$integration: Member Account"
  impl func service = integration
  impl func schedule = "0 30 * * * ?" //Every hour
  system field lastUpdate: Date?
  impl func currency: Currency = NZD
  impl func legalEntity = integration.legalEntity
  
  field promoExpense: ExpenseType? {
    label = "Promotion Expense"
  }
  field feeExpense: ExpenseType?
  
  impl func itemRoles = [BusAdmin, Accountant]
  override func issueTypes = super.issueTypes - ITTooLowBalance + ITTooLowBalanceTrademe
  
  impl func hasBankData = true
  impl func ledgerAccount: LedgerAccount = Cash
  impl func defaultLowBalance: LowBalance? = LowBalance()
  impl event onSave = {
    if (!created && balance > origin(balance)) {
      TrademeListing.all.filter(status == InsufficientBalance).foreach(l => UpdateListingJob(listing = l).enqueue())
    }
  }
  impl func do = {
    let d = {
      if (let lu = lastUpdate) Date.now.add(10_minute).sub(lu).to[Duration[hour]] 
      else 5.as[Duration[day]]
    }
    let dd = d.to[Duration[day]] 
    let trs0 <- nextPage(number = 1, filter = {
      if (d < 24_hour) "Last24Hours"
      else if (dd < 7_day) "Last7Days"
      else if (dd < 14_day) "Last14Days"
      else if (dd < 28_day) "Last28Days"
      else if (dd < 45_day) "Last45Days"
      else "Last60Days"
    })
    
    let trs = if (let lastUpdate) {
      trs0.filter(date > lastUpdate)
    } else {
      let sd = Date.now
      let trs1 = trs0.filter(date >= sd)
      if (let tr = trs1.sortBy(date).first) {
        InitBalance(finAccount = this, date = tr.date, balance = tr.balance - tr.amount).save
      }
      trs1
    }
    
    lastUpdate = Date.now
    save
    let ms <- BankImporter.import(ImportRequest(account = this, items = trs))
    ms*.as[OutgoingPayment].foreach{op =>
      let tp = op.bankData?.type
      if (let e = {
        if (tp.contains("Fee")) feeExpense 
        else if (tp.contains("Promo")) promoExpense
      }) {
        op.reasons = []
        PaymentExpense(payment = op, expense = e, amount = op.amount, gstRate = 0.15).save
      }
    }
  }
  
  back func nextPage(number: UInt, filter: String): Future[[FinAccountTr]?] = {
    let result <- service.https("MyTradeMe/MemberLedger/$filter.json").param("page", number).get
    let page = result.body!.parseJson[FinAccountPage]
    if (number > 20) {
      throw "Too many pages"
    }
    let nps <- if (page.hasNext) {
      nextPage(number + 1, filter)
    } 
    page.list + nps
  }
  
  impl view form = nav{
    grid{
      issuesView
      integration

      feeExpense
      promoExpense

      lowBalance
      initBalance >> field(editMode = AlwaysRead)
      balance
    }
    ledgerBtn
  }
}

object ReconTrademeMemberTransfer extends IReconRule {
  impl func title = "Transfer to Trademe Member Account"
  impl func pr = 30
  impl func backDescr = "If the counterpary name or memo contains trade me wellington or trade me limited in an outgoing payment, it's a transfer to trademe account"
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    let l = payment.bankData.fullMemo.lower + payment.bankData.thierName.lower
    
    if (payment.is[OutgoingPayment] && (l.contains("trade me wellington") || l.contains("trade me limited")) 
        let contraAccount = TrademeFinAccount.all.result.get.onlyOne
    ) {
       ReconTransfer.make(movements, payment, contraAccount)
    }
  }
}

object ReconTrademeMemberPayee extends IReconRule {
  impl func title = "Expenses from Trademe member account"
  impl func pr = 100
  impl func backDescr = "If it's an outgoing payment from trademe member account, set the payee to trademe"
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    if (let op = payment.as[OutgoingPayment] let acc = op.account.as[TrademeFinAccount]) {
      op.payee = acc.integration.trademe.legalEntity
      op.save
    }
  }
}


back class FinAccountPage extends IPage[FinAccountTr] {
  extFieldNaming = UpperCamelCase
  impl field list: [FinAccountTr]?
}


back class FinAccountTr extends BankStatementItem {
  extFieldNaming = UpperCamelCase
  impl field date: Date {extMap = TrademeDate}
  field type: FinTrType {
    extMap[Int?](apply = _.id, unapply = i => {FinTrType.all.find(id == i)!})
  }
  field description: String?
  field credit: UMoney?
  field debit: UMoney?
  field balance: Money?
  field referenceId: Int?
  field purchaseId: Int?
  field sku: String?
  field ledgerId: Int
  func amount = if (let cr = credit) cr else -debit
  impl func data(account: FinAccount) = {
    BankData(type = type.name, bankId = ledgerId, memo = description, balance = balance, amount = amount)
  }
}

enum FinTrType(id: Int?) {
  case Other(id = 0)
  case ListingFee(id = 1)
  case HighVolumeFee(id = 2)
  case SuccessFeeBid(id = 3)
  case SuccessFeeOffer(id = 4)
  case SuccessFeeBuyNow(id = 5)
  case GalleryPromotion(id = 100)
  case GalleryPlusPromotion(id = 101)
  case BoldPromotion(id = 102)
  case SubtitlePromotion(id = 103)
  case HighlightPromotion(id = 104)
  case FeaturePromotion(id = 105)
  case FeatureComboPromotion(id = 106)
  case HomepageFeaturePromotion(id = 107)
  case SuperFeaturePromotion(id = 108)
  case SuperFeatureComboPromotion(id = 109)
  case TenDayAuctionFee(id = 110)
  case MultiPhotoFee(id = 111)
  case ScheduledEndDateFee(id = 112)
  case ReserveFee(id = 113)
  case SecondaryCategoryPromotion(id = 114)
  case JobPack5(id = 200)
  case JobPack10(id = 201)
  case JobPack20(id = 202)
  case JobPack30(id = 204)
  case JobPack50(id = 203)
  case JobPack100(id = 205)
  case WithdrawalFee(id = 300)
  case QuotableValueReportFee(id = 301)
  case MonthlyStoreFee(id = 302)
  case CreditViaCreditCard(id = 400)
  case CreditViaBankTransfer(id = 401)
  case CreditViaCheque(id = 402)
  case RebateForListingFee(id = 500)
  case RebateForHighVolumeFee(id = 501)
  case RebateForSuccessFeeBid(id = 502)
  case RebateForSuccessFeeOffer(id = 503)
  case RebateForSuccessFeeBuyNow(id = 504)
  case RebateForGalleryPromotion(id = 505)
  case RebateForGalleryPlusPromotion(id = 506)
  case RebateForBoldPromotion(id = 507)
  case RebateForSubtitlePromotion(id = 508)
  case RebateForHighlightPromotion(id = 509)
  case RebateForFeaturePromotion(id = 510)
  case RebateForFeatureComboPromotion(id = 511)
  case RebateForHomepageFeaturePromotion(id = 512)
  case RebateForSuperFeaturePromotion(id = 513)
  case RebateForSuperFeatureComboPromotion(id = 514)
  case RebateForTenDayAuctionFee(id = 515)
  case RebateForMultiPhotoFee(id = 516)
  case RebateForScheduledEndDateFee(id = 517)
  case RebateForReserveFee(id = 518)
  case RebateForSecondaryCategoryPromotion(id = 519)
  case RefundOfListingFee(id = 600)
  case RefundOfSuccessFee(id = 601)
  case RefundOfGalleryPromotion(id = 602)
  case RefundOfGalleryPlusPromotion(id = 603)
  case RefundOfBoldPromotion(id = 604)
  case RefundOfSubtitlePromotion(id = 605)
  case RefundOfHighlightPromotion(id = 606)
  case RefundOfFeaturePromotion(id = 607)
  case RefundOfFeatureComboPromotion(id = 608)
  case RefundOfHomepageFeaturePromotion(id = 609)
  case RefundOfSuperFeaturePromotion(id = 610)
  case RefundOfSuperFeatureComboPromotion(id = 611)
  case RefundOfTenDayAuctionFee(id = 612)
  case RefundOfMultiPhotoFee(id = 613)
  case RefundOfScheduledEndDateFee(id = 614)
  case RefundOfReserveFee(id = 615)
  case RefundOfSecondaryCategoryPromotion(id = 616)
  case DiscountOfListingFee(id = 617)
  case DiscountOfSuperfeature(id = 618)
  case DiscountOfHighlight(id = 619)
  case DiscountOfFeature(id = 620)
  case DiscountOfBoldTitle(id = 621)
  case DiscountOfFeatureCombo(id = 622)
  case DiscountOfSubtitle(id = 623)
  case RebateForGoldTradeSuccessFee(id = 624)
}

object ITTooLowBalanceTrademe extends IssueType[TrademeFinAccount] {
  impl func title = "Too Low Balance for Trademe Account"
  impl func roles(item: TrademeFinAccount) = [BusAdmin]
  impl func hasIssue(item: TrademeFinAccount) = ITTooLowBalance.hasIssue(item)
  impl func fixes(item: TrademeFinAccount) = [
    Fix(text = "Credit trademe account", acts = [Act(label = "Credit", do = UI.openUrl("https://www.trademe.co.nz/Payments/ChooseMethod.aspx"))]),
    Fix(text = "Set up auto billing", acts = [Act(label = "Set up", do = UI.openUrl("https://www.trademe.co.nz/MyTradeMe/AutoBilling.aspx"))]),
    Fix(text = "If you have already set up auto billing, you can ignore the issue and clean the low balance level", acts = [Act(label = "Ignore", do = {
      item.lowBalance = null
      UI.save(item)
    })])
  ]
}
