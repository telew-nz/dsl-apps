entity TrademeTemplate extends ScheduledJob {
  ref field title: String
  ref field integration: TrademeIntegration
  func service = integration
  field paymentMethods: [PaymentMethod]
  field otherPaymentMethod: String? {
    visible = paymentMethods.contains(Other) 
    isValid = !paymentMethods.contains(Other) || otherPaymentMethod 
  }
  field pickup: Pickup
  field shippingOptions: [ShippingOption]? inline by template
  field listings: [TrademeListing]? read by template
  field stores: [Store]?
  field extraCharge: Percent = 0.1
  field maximumExtraCharge: Money[NZD] = 149_NZD
  field productCategories: [ProductCategory]? by trademeTemplates
  field updatePricesEvery: Duration[hour, 0]?
  field listingDuration: Duration[day, 0]? = 7
  field shippingCharge: ShippingCharge = PerItem
  field descriptionFooter: Text? = "Listed using flow2b.com"
  func schedule = if (let p = updatePricesEvery) "0 3 */${p.unformattedString} * * ?" else ""
  
    
  view form = nav{grid{
    title
    paymentMethods
    otherPaymentMethod
    extraCharge
    maximumExtraCharge

    pickup
    shippingOptions >> list {grid(labels = Top) {
      x{type, price >> field(canEditUnit = true)}
      method
    }}
    shippingCharge
    listingDuration
      
    descriptionFooter
    productCategories
    updatePricesEvery
    button("Update All Listings") {
      run()
      UI.info("Job is posted")
    }
    listings
  }}
  
  //func onSave = {
  //  listings*.product*.touch
  //}
  func do = {
    listings.filter(active).foreach(UpdateListingJob(listing = _).run())
  }
}

enum ShippingCharge {
  case PerItem
  case PerOrder
}

enum PaymentMethod(id: Int?) {
  case BankDeposit(id = 1)
  case CreditCard(id = 2)
  case Cash(id = 4)
  case SafeTrader(id = 8)
  case Other(id = 16)
}

enum Pickup(id: Int) {
  case Allow(id = 1) = "Can Pickup"
  case Demand(id = 2) = "Must Pickup"
  case Forbid(id = 3) = "No Pickups"
}

inline entity ShippingOption {
  jsonCapitalizeFieldNames = true
  field template: TrademeTemplate {jsonIgnore}
  field type: ShippingOptionType {jsonMap[Int?](apply = id, unapply = i => ShippingOptionType.all.find(id == i)!)}
  field currency: Currency = (Currency.default) {jsonIgnore}
  field price: Money[currency]? {visible = type == Custom}
  field method: String? {visible = type == Custom, isValid = type != Custom || method}
}

enum ShippingOptionType(id: Int?) {
  case Free(id = 3)
//  case TradeMe(id = 5)
  case Custom(id = 4)
  case Undecided(id = 1)
  case Pickup(id = 2)
}
