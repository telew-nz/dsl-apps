class UpdateListingJob extends SystemJob {
  func service: TrademeIntegration = listing.template.integration
  field listing: TrademeListing
  func toString = "Update Listing $listing"
  func do = {
    let p = this.listing.product
    let template = this.listing.template
    let qty: Number? = {
      if (p.superProduct.isTangible) StockRegister.current
        .filter(p.subProducts.contains(good) && (!template.stores || template.stores.contains(store)))
        .agg(available.sum)
      else 0
    }
    if ((p.superProduct.isTangible && qty <= 0) || listing.product.trademeStatus == Inactive) {
      if (let listingId = this.listing.listingId) {
        let result <- service.https("Selling/Withdraw.json").post(WithdrawRequest(listingId = listingId).json)
        result.body!.parseJson[ListingResponse]
          .process{response => 
            this.listing.status = Withdrawn
            this.listing.save() 
          }
      } else {
        Future.apply(0)
      }
    } else {
      let price <- p.trademeSalesPrice(template)
      if (price) {
        if (let lid = this.listing.listingId) {
          let info <- service.https( "Selling/Listings/$lid.json").get
          let r = info.body!.parseJson[ListingRequest]
          updateRequest(r, qty!, price!)
          let result <- service.https("Selling/Edit.json").post(r.json)
          let response = result.body!.parseJson[ListingResponse]
          if (let e = response.errorDescription) {
            if (e == "Listing id $(listing.listingId.unformattedString) is not valid" || e == "Could not find $(listing.listingId.unformattedString)") {
              listing.status = Invalid
              listing.save()
              let newListing = TrademeListing(product = listing.product, template = listing.template).save()
              UpdateListingJob(listing = newListing).run()
            } else throw e
          } else if (!response.success) {
            if (response.description.contains("have already been sold") && service.serviceState == Active) {
              service.retrieveSoldItemsJob.run()
              UpdateListingJob(listing = listing).run()
            } else throw response.description
          } else { 
            this.listing.listingId = response.listingId
            this.listing.expiryDate = response.listing!.endDate
            this.listing.status = Active
            this.listing.save() 
            0
          }
        } else {
          let r = ListingRequest()
          updateRequest(r, qty!, price!)
          r.duration = template.listingDuration
            
          let result <- service.https("Selling.json").post(r.json)
          let response = result.body!.parseJson[ListingResponse]
          if (let e = response.errorDescription) throw e
          else if (!response.success) throw response.description
          else { 
            this.listing.listingId = response.listingId
            this.listing.expiryDate = response.listing!.endDate
            this.listing.status = Active
            this.listing.save() 
            0
          }
        }
      } else {
        Future.apply(0)
      }
    }
  }
  
  func updateRequest(r: ListingRequest, qty: Qty, price: Money): Void = {
    let p = this.listing.product
    let template = this.listing.template
      
    if (!listing.qtySold) {
      r.title = p.trademeTitle
      r.category = p.superProduct.categories*.trademeCategory.first!.number
      //secondCategory = p.categories*.trademeCategory.drop(1).first?.number
      r.description = 
        if (let f = template.descriptionFooter) p.trademeDescription.lines! + [""] + template.descriptionFooter.lines
        else p.trademeDescription.lines!
      r.pickup = template.pickup
      r.shippingOptions = template.shippingOptions
      r.sku = p.superProduct.sku
      r.isFlatShippingCharge = template.shippingCharge == PerOrder
      
      r.paymentMethods = template.paymentMethods
      r.otherPaymentMethod = template.otherPaymentMethod
    }
    r.startPrice = price
    r.buyNowPrice = price
    r.quantity = qty.min((1000 - this.listing.qtySold).as[Qty[p.unit]])
  }
}

class ListingRequest {
  jsonCapitalizeFieldNames = true
    
  field category: String?
  field title: String?
  field subtitle: String?
  field description: [String?]
  field startPrice: Money?
  field reservePrice: Money?
  field buyNowPrice: Money?
  field duration: Duration[day, 0]? {jsonRequired}
  field isBrandNew = true
  field authenticatedMembersOnly = false
  field sendPaymentInstructions = false
  field isOrNearOffer = false
  field isClassified = false
  field quantity: Int?
  field isFlatShippingCharge: Bool
  field isPriceOnApplication: Bool
  field hasAgreedWithLegalNotice: Bool
  field isBold: Bool
  field isFatured: Bool
  field hasGallery: Bool
  field hasGalleryPlus: Bool
  field isHighlighted: Bool
  field hasSuperFeature: Bool
  field isClearance: Bool
  field isBranded: Bool
  field externalReferenceId: String?
  field photoIds: [Int]?
  field homePhoneNumber: String?
  field mobilePhoneNumber: String?
  field sku: String? {jsonName = "SKU" }
  field shortDescription: String?
  field secondCategory: String?
  field paymentMethods: [PaymentMethod]? {jsonMap[[Int]?](
    apply = id, 
    unapply = ids => {
      let r: [PaymentMethod]? = ids.map(i => PaymentMethod.all.find(id == i)!).toSet
      r
    })
  }
  field otherPaymentMethod: String?
  field pickup: Pickup? {
    jsonMap[Int?](apply = _?.id, unapply = i => {
      let r: Pickup? = if (let ii = i) Pickup.all.find(id == ii)! else null
      r
    })
  }
  field shippingOptions: [ShippingOption]? inline
  field listingId: Int?
  field returnListingDetails: Bool = true
  field remainingGalleryPlusRelists: Int?
  field promotionId: Int?
  field wasPrice: Money?
  field excludeFromShippingPromotion: Bool
}

class WithdrawRequest {
  jsonCapitalizeFieldNames = true
  field listingId: Int
  field type: Int = 2
  field reason: String = "The item has been sold with another channel"
}

class ListingResponse {
  field success: Bool
  field description: String?
  field errorDescription: String?
  field listingId: Int?
  field listing: ListingResponseDetails?
  func process(f: ListingResponse => Void): Void = {
    if (let e = errorDescription) throw e
    else if (!success) throw description
    else f(this)
  }
}

class ListingResponseDetails {
  field endDate: Date {jsonMap = TrademeDate}
}

object TrademeDate extends Mapper[Date, String] {
  func apply(v: Date): String = "/Date(${v.epoch.withoutUnit})/"
  func unapply(v: String): Date = Date.fromEpoch((v[6 .. -1)).toNumber)
}
