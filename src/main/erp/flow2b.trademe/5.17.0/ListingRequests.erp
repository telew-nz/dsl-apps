class ListingRequest {
  extFieldNaming = UpperCamelCase
    
  field category: String?
  field title: String?
  field subtitle: String?
  field description: [String?]
  field startPrice: Money?
  field reservePrice: Money?
  field buyNowPrice: Money?
  field duration: Duration[day, 0]? {extRequired}
  field isBrandNew = true
  field authenticatedMembersOnly = false
  field sendPaymentInstructions = false
  field isOrNearOffer = false
  field isClassified = false
  field quantity: Int?
  field isFlatShippingCharge: Bool
  field isPriceOnApplication: Bool
  field hasAgreedWithLegalNotice: Bool
  field isBold: Bool
  field isFatured: Bool
  field hasGallery: Bool
  field hasGalleryPlus: Bool
  field isHighlighted: Bool
  field hasSuperFeature: Bool
  field isClearance: Bool
  field isBranded: Bool
  field externalReferenceId: String?
  field photoIds: [Int]?
  field homePhoneNumber: String?
  field mobilePhoneNumber: String?
  field sku: String? {extName = "SKU" }
  field shortDescription: String?
  field secondCategory: String?
  field paymentMethods: [PaymentMethod]? {jsonMap[[Int]?](
    apply = id, 
    unapply = ids => {
      let r: [PaymentMethod]? = ids.map(i => PaymentMethod.all.find(id == i)!).toSet
      r
    })
  }
  field otherPaymentMethod: String?
  field pickup: Pickup? {
    jsonMap[Int?](apply = _?.id, unapply = i => {
      let r: Pickup? = if (let ii = i) Pickup.all.find(id == ii)! else null
      r
    })
  }
  field shippingOptions: [ShippingOption]? inline
  field listingId: Int?
  field returnListingDetails: Bool = true
  field remainingGalleryPlusRelists: Int?
  field promotionId: Int?
  field wasPrice: Money?
  field excludeFromShippingPromotion: Bool
  field shippingCalculatorInputs: ShippingCalculatorInputs?
}

class WithdrawRequest {
  extFieldNaming = UpperCamelCase
  field listingId: Int
  field type: Int = 2
  field reason: String = "The item has been sold with another channel"
}

class ListingResponse {
  extFieldNaming = UpperCamelCase
  field success: Bool
  field description: String?
  field errorDescription: String?
  field listingId: Int?
  field listing: ListingResponseDetails?
  func process(f: ListingResponse => Void): Void = {
    if (let e = errorDescription) throw e
    else if (!success) throw description
    else f(this)
  }
  func error: String? = errorDescription.or(if (!success) description else "")
}

class UploadPhoto {
  extFieldNaming = UpperCamelCase
  
  field photoData: String
  field fileName: String
  field fileType: String
}

class UploadPhotoResponse {
  extFieldNaming = UpperCamelCase
  field status: Int
  field photoId: Int
}

class ShippingCalculatorInputs {
  extFieldNaming = UpperCamelCase
  field isBoxType: Bool = true
  field width: Qty?
  field height: Qty?
  field depth: Qty?
  field isSignatureRequired: Bool
  field pickupLocalityId: Int?
  field isRural: Bool
  field weightOption: WeightOption {
    jsonMap[Int](apply = _.id, unapply = i => {WeightOption.all.find(id == i)!})
  }
}
enum WeightOption(id: Int, low: Qty?, high: Qty) {
  case Kg0To3(id = 1, low = 0, high = 3)
  case Kg3To5(id = 2, low = 3, high = 5)
  case Kg5To10(id = 3, low = 5, high = 10)
  case Kg10To15(id = 4, low = 10, high = 15)
  case Kg15To20(id = 5, low = 15, high = 20)
  case Kg20To25(id = 6, low = 20, high = 25)
}
enum PickupLocation(id: Int) {
  case Northland(id = 1)
  case Auckland(id = 2)
  case Waikato(id = 3)
  case Tauranga(id = 4)
  case Rotorua(id = 5) = "Rotorua - Whakatane"
}
                 
class ListingResponseDetails {
  extFieldNaming = UpperCamelCase
  field endDate: Date {jsonMap = TrademeDate}
}

object TrademeDate extends Mapper[Date, String] {
  func apply(v: Date): String = "/Date(${v.epoch.withoutUnit})/"
  func unapply(v: String): Date = Date.fromEpoch((v[7 .. -1)).toNumber)
}
                                                    
object TrademeOptDate extends Mapper[Date?, String?] {
  func apply(v: Date?): String? = if (let v) "/Date(${v.epoch.withoutUnit})/"
  func unapply(v: String?): Date? = if (let v) Date.fromEpoch((v[7 .. -1)).toNumber)
}