extend trait ICustomerBaseProduct {  
  event onSave = {
    if (let cp = this.as[ICustomerProduct]) cp.updateTrademe()
    else this.as[ICustomerSuperProduct]!.customerProducts*.touch
  }
  
  func collectTrademePhotos: [Image]? = collectPhotos
}
extend trait ICustomerProduct {    
  const field trademeListings: [TrademeListing]? by product {deleteCascade = true}
  field trademeTemplates: [TrademeTemplate]?
  field trademeStatus: TrademeProductStatus? {
    validate = if (trademeStatus == Listed) {
      if (!description) "Description should be presented for trademe listed products"
    }
  }
  func findTrademeTemplates: [TrademeTemplate]? = {
    if (trademeTemplates) trademeTemplates
    else if (let c = superProduct.categories.filter(trademeTemplates).first) c.trademeTemplates
    else []
  }
  
  func collectTrademePhotos: [Image]? = {
    if (let ps = trademePhotos) ps
    else if (this.is[ICustomerSuperProduct]) collectPhotos 
    else (collectPhotos + customerSuperProduct.photos.drop(1)).distinct
  }
  
  field trademeTitle: String?
  field trademeDescription: PlainText?
  field trademeCategories: [TrademeCategory]? {
    from = TrademeCategory.all.filter(leaf)
  }
  field trademePhotos: [Image]?
  
  extend view customerProductView = extend{
    trademeStatus
    trademeTemplates
    trademeListings
    trademeTitle
    trademeCategories
    trademePhotos >> field(height = 10, label = "")
    trademeDescription
  }

  event onSave = {
    updateTrademe()
  }
  back func updateTrademe(): Void = {
    let templates = if (description && trademeStatus == Listed) this.findTrademeTemplates else []
    trademeListings.filter(status.valid && !templates.contains(template)).foreach{l =>
      UpdateListingJob(listing = l).run()
    }
    templates.foreach{t =>
      trademeListings.find(status.valid && template == t)
        .or{
          let qty: Number? = if (isTangible) calcStock(t.service.legalEntity, t.stores)?.available
          if (isTangible && qty > 0) TrademeListing(product = this, template = t).save()
        }.map{listing =>
          UpdateListingJob(listing = listing).run()
          1
        }
    }    
  }
}

extend entity File extends HasExtId

extend interface IPrice {
  back func trademeSalesPrice(template: TrademeTemplate): Future[SalesPrice] = {
    let p <- salesPrice(Currency.all.find(code == "NZD")!, true)
    SalesPrice(
      regular = trademePrice(template, p.regular),
      current = trademePrice(template, p.current)
    )
  }
  back func trademePrice(template: TrademeTemplate, price: Money?): Money? = {
    price + (price*template.extraCharge.withoutUnit).min(template.maximumExtraCharge)
  }
}

enum TrademeProductStatus {
  case Listed {background = "#dea"}
//  case Auto {background = "#ed9"}
  case Inactive {background = "#ddd"}
}



extend entity Good {
  extend view form = trademeStatus
}


extend entity ProductCategory {
  field trademeTemplates: [TrademeTemplate]?
  field trademeCategories: [TrademeCategory]? {
    from = TrademeCategory.all.filter(leaf)
  }
}
