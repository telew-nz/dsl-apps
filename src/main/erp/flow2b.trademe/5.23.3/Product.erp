extend trait IBaseProduct {  
  event onSave = {
    if (touched) {
      if (!this.is[ISubProduct]) {
        this.as[ISuperProduct]!.subProducts*.touch
      }
    }
  }
  
  func _collectTrademePhotos: [Image]? = collectPhotos
}
extend trait ISubProduct {    
  system const field trademeListings: [TrademeListing]? by product {deleteCascade = true}
  field trademeStatus: TrademeProductStatus? {
    validate = if (trademeStatus && trademeStatus != Inactive) {
      if (!trademeDescription) "Description is empty"
      else if (!trademeCategories) "No trademe categories"
      else if (!trademeTemplates) "No trademe templates"
    }
  }
  
  field _trademeTemplates: [TrademeTemplate]?
  compute trademeTemplates: [TrademeTemplate]? {
    availableFor = Inline
    value = {
      if (let tt = _trademeTemplates) tt 
      else superProduct.categories*.trademeTemplates.distinct
    }
    update = {
      _trademeTemplates = if (new != superProduct.categories*.trademeTemplates.distinct) new
    }
  }
  
  func _collectTrademePhotos: [Image]? = {
    if (this.is[ISuperProduct]) collectPhotos 
    else (collectPhotos + superProduct.photos.drop(1)).distinct
  }
  
  field _trademeTitle: String?
  compute trademeTitle: String {
    value = _trademeTitle.alt(title)
    update = {
      _trademeTitle = if (new != title) new
    }
  }
  field _trademeDescription: PlainText?
  compute trademeDescription: PlainText? {
    value = _trademeDescription.or(description)
    update = {
      let pd: PlainText? = description
      _trademeDescription = if (new.trim != pd.trim) new
    }
  }
  field _trademeCategories: [TrademeCategory]? 
  compute trademeCategories: [TrademeCategory]? {
    availableFor = Inline
    from = TrademeCategory.all.filter(leaf)
    value = if (let tcs = _trademeCategories) tcs else superProduct.categories*.trademeCategories.distinct
    update = {
      _trademeCategories = if (new != superProduct.categories*.trademeCategories.distinct) new
    }
  }
  field _trademePhotos: [Image]?
  compute trademePhotos: [Image]? {
    availableFor = Inline
    value = if (let tcs = _trademePhotos) tcs else _collectTrademePhotos
    update = {
      _trademePhotos = if (new != _collectTrademePhotos) new
    }
  }
  func hasAuction = trademeTemplates.exists(listingType == Auction)
  field trademeStartPrice: Money[NZD]? {
    visible = hasAuction
  }
  field trademeReservePrice: Money[NZD]? {
    visible = hasAuction
  }
  field trademeBuyNowPrice: Money[NZD]?
  extend view subProductTabView = grid(label = "Trademe"){
    trademePhotos >> field(height = 10, label = "")
    trademeTitle
    trademeStatus
    trademeTemplates
    trademeCategories
    row {trademeBuyNowPrice trademeStartPrice trademeReservePrice}
    trademeDescription
    button("Relist", visible = trademeStatus == NoRelist) {
      back {
        updateTrademe(true)
      }
    }
    trademeListings
  }

  event onSave = {
    if (touched) {
      updateTrademe(false)
    }
  }
  back func updateTrademe(force: Bool): Void = {
    let templates = if (description && (trademeStatus == Listed || force)) this.trademeTemplates else []
    trademeListings.filter(status.valid && !templates.contains(template)).foreach{l =>
      if (!l.hasBids) {
        UpdateListingJob(listing = l).run()
      }
    }
    templates.foreach{t =>
      trademeListings.find(status.valid && template == t)
        .or{
          let qty: Number? = if (isTangible) calcStock(null, Inventory, t.service.legalEntity, t.stores)?.available
          if (isTangible && qty > 0) TrademeListing(product = this, template = t).save()
        }.map{listing =>
          if (listing.service.manageListings) {
            UpdateListingJob(listing = listing).run()
          }
          1
        }
    }    
  }
}

extend entity File extends HasExtId

extend interface IPrice {
  back func trademeSalesPrice(template: TrademeTemplate): Future[SalesPrice] = {
    let p <- salesPrice(Currency.all.find(code == "NZD")!, true)
    SalesPrice(
      regular = trademePrice(template, p.regular),
      current = trademePrice(template, p.current)
    )
  }
  back func trademePrice(template: TrademeTemplate, price: Money?): Money? = {
    var extra: Money? = price*template.extraCharge.withoutUnit
    if (let m = template.maximumExtraCharge) extra = extra.min(m)
    price + extra.round(ceil, 0)
  }
}

enum TrademeProductStatus {
  case Listed {background = "#dea"}
//  case Auto {background = "#ed9"}
  case NoRelist {background = "#ed9"}
  case Inactive {background = "#ddd"}
}

extend entity ProductCategory {
  field _trademeTemplates: [TrademeTemplate]? {views = []}
  compute trademeTemplates: [TrademeTemplate]? {
    availableFor = Inline
    value = if (let tt = _trademeTemplates) tt else superCategory?.trademeTemplates
    update = {
      _trademeTemplates = if (new != superCategory?.trademeTemplates) new
    }
  }
  
  field _trademeCategories: [TrademeCategory]? {views = []}
  compute trademeCategories: [TrademeCategory]? {
    availableFor = Inline
    value = if (let tt = _trademeCategories) tt else superCategory?.trademeCategories
    from = TrademeCategory.all.filter(leaf)
    update = {
      _trademeCategories = if (new != superCategory?.trademeCategories) new
    }
  }
  
}
