back class UpdateListingJob extends SystemJob {
  func service: ITrademeIntegration = listing.template.integration
  field listing: TrademeListing
  func toString = "Update Listing $listing"
  func do = {
    let p = this.listing.product
    let template = this.listing.template
    let qty: Number? = {
      if (p.superProduct.isTangible) StockRegister.current
        .filter(p.subProducts.contains(good) && legalEntity == service.legalEntity && (!template.stores || template.stores.contains(store)))
        .agg(available.sum)
      else 0
    }
    if ((p.superProduct.isTangible && qty <= 0) || listing.product.trademeStatus == Inactive) {
      withdraw
    } else {
      if (let pr = service.legalEntity.price(p.superProduct)) {
        let price <- pr.trademeSalesPrice(template)
        if (price.current) {
          let _ <- if (let newPhotos = this.listing.product.collectPhotos.filter(!service.extId(_) && _.extension.lower.in(["bmp", "gif", "jpg", "jpeg", "png"]))) {
            newPhotos.map(uploadPhoto(_)).allCompleted
          }
          if (let lid = this.listing.listingId) {
            let info <- service.https("Selling/Listings/$lid.json").get
            let r = info.body!.parseJson[ListingRequest]
            updateRequest(r, qty!, price.current!, price.regular)
            let result <- service.https("Selling/Edit.json").post(r.json).recover(a => a.as[HttpResponse])
            let response = result.body!.parseJson[ListingResponse]
            if (let e = response.error) {
              if (e == "Listing id $(listing.listingId.unformattedString) is not valid" || e == "Could not find $(listing.listingId.unformattedString)") {
                listing.status = Invalid
                listing.save()
                let newListing = TrademeListing(product = listing.product, template = listing.template).save()
                UpdateListingJob(listing = newListing).run()
              } else if (e.contains("have already been sold") && service.serviceState == Active) {
                service.retrieveSoldItemsJob.run()
                UpdateListingJob(listing = listing).run()
              } else throw e
            } else { 
              this.listing.listingId = response.listingId
              this.listing.expiryDate = response.listing!.endDate
              this.listing.status = Active
              this.listing.save() 
            }
          } else {
            let r = ListingRequest()
            updateRequest(r, qty!, price.current!, price.regular)
            r.duration = template.listingDuration

            let result <- service.https("Selling.json").post(r.json)
            let response = result.body!.parseJson[ListingResponse]
            if (let e = response.error) {
              throw e
            } else { 
              this.listing.listingId = response.listingId
              this.listing.expiryDate = response.listing!.endDate
              this.listing.status = Active
              this.listing.save() 
            }
          }
        } 
      }
    }
  }
  
  func updateRequest(r: ListingRequest, qty: Qty, price: Money, regularPrice: Money?): Void = {
    let p = this.listing.product
    let template = this.listing.template
      
    if (!listing.qtySold) {
      r.title = p.title
      r.category = p.superProduct.categories*.trademeCategory.first!.number
      //secondCategory = p.categories*.trademeCategory.drop(1).first?.number
      let d: PlainText = p.description!
      r.description = 
        if (let f = template.descriptionFooter) {
          let footer: PlainText = f
          d.lines(rules = None) + [""] + f.lines(rules = None)
        } else d.lines(rules = None)
      r.pickup = template.pickup
      r.shippingOptions = template.shippingOptions
      r.sku = p.superProduct.sku
      r.isFlatShippingCharge = template.shippingCharge == PerOrder
      
      r.paymentMethods = template.paymentMethods
      r.otherPaymentMethod = template.otherPaymentMethod
    }
    r.photoIds = p.collectPhotos.mapOpt(service.extId(_))
    r.startPrice = price
    r.buyNowPrice = price
    if (service.approvedDealsSeller) {
      r.wasPrice = if (regularPrice > price) regularPrice
      r.isClearance = regularPrice > price
    }
    r.quantity = qty.min((1000 - this.listing.qtySold)!.as[Qty[p.unit]]!)
  }
  
  func withdraw = {
    if (let listingId = this.listing.listingId) {
      let result <- service.https("Selling/Withdraw.json").post(WithdrawRequest(listingId = listingId).json)
      let response = result.body!.parseJson[ListingResponse]
      if (let e = response.error) {
        if (e == "Listing id $(listing.listingId.unformattedString) is not valid" || e == "Could not find $(listing.listingId.unformattedString)") {
          listing.status = Invalid
          listing.save()
        } else throw e
      } else {
        this.listing.status = Withdrawn
        this.listing.save() 
      }
    } 
  }
 
  func uploadPhoto(photo: Image): Future[Void] = {
    let content <- photo.content
    let r = UploadPhoto(photoData = content!.base64, fileName = photo.name, fileType = photo.extension!)
    let result <- service.https("Photos/Add.json").post(r.json)
    let response = result.body!.parseJson[UploadPhotoResponse]
    if (response.status != 1) throw "Cannot upload photo $photo. Status: ${response.status}"
    photo.updateExtId(service, response.photoId)
  }
}


