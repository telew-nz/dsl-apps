entity TrademeListing extends DeferredJob {
  const ref field product: TrademeProduct by trademeListings
  const field template: TrademeTemplate by listings
  ref const field status: ListingStatus = Entered
  func active = status == Active
  const field qtySold: Int?
  const field listingId: Int?
  compute url: Url? = if (let l = listingId) "$(template.integration.webUrl)Browse/Listing.aspx?id=$l" else ""
  const field expiryDate: Date?
  const field soldItems: [SalesItem]? inline by trademeListing {deleteCascade = false}
  compute salesOrders: [ISalesOrder]? = soldItems*.order
  func title = product.title
  func service: ITrademeIntegration  = template.integration
  func jobDate = if (active) expiryDate?.add(10_minute) else null
  func do = {
    status = Expired
    save()
    /*let l = TrademeListing(product = product, template = template, status = Active)
    l.save()
    UpdateListingJob(listing = l).run()*/
    let result <- service.https("Selling/Relist.json").post(RelistRequest(listingId = listingId!).json)
    result.body!.parseJson[ListingResponse].process{response =>
      let l = TrademeListing(
        product = product, template = template, status = Active, 
        expiryDate = response.listing!.endDate,
        listingId = response.listingId)
      l.save()
      UpdateListingJob(listing = l).run()
    }
  }
  view form = nav{grid{
    product
    template
    status
    qtySold
    listingId
    expiryDate
    url
    salesOrders
    button("Update") {
      UpdateListingJob(listing = this).run()
      UI.info("Job is posted")
    }
    //button("Relist") {
    //  run()
    //  UI.info("Job is posted")
    //}
  }}
  view ref = x {status title}
}

class RelistRequest {
  jsonCapitalizeFieldNames = true
    
  field listingId: Int
  field returnListingDetails: Bool = true
}

enum ListingStatus(valid: Bool) {
  case Entered(valid = true){background = "#ed9"}
  case Active(valid = true){background = "#dea"}
  case Parked(valid = true) {background = "#ddd"}
  case Withdrawn(valid = false) {background = "#ddd"}
  case Exhausted(valid = false) {background = "#ddd"}
  case Expired(valid = false) {background = "#ddd"}
  case Invalid(valid = false) {background = "#f99"}
}
