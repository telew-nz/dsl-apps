inline entity RetrieveSoldItemsJob extends ScheduledJob {
  field service: ITrademeIntegration by retrieveSoldItemsJob
  func schedule = "0 30 * * * ?" //Every hour
  field lastUpdate: Date?
  func do: Future[Any] = {
    let d = if (let lu = lastUpdate) Date.now.add(10_minute).sub(lu).to[Duration[hour]] else 24000.as[Duration[hour]]
    let dd = d.to[Duration[day]] 
    this.lastUpdate = Date.now
    save()
    nextPage(number = 1, filter = {
      if (d < 1_hour) "LastHour"
      else if (d < 24_hour) "Last24Hours"
      else if (dd < 3_day) "Last3Days"
      else if (dd < 7_day) "Last7Days"
      else if (dd < 30_day) "Last30Days"
      else "Last45Days"
    })
  }
  
  back func nextPage(number: UInt, filter: String): Future[Any] = {
    let result <- service.https("MyTradeMe/SoldItems/$filter.json").param("page", number).get
    let page = result.body!.parseJson[SoldItemsPage]
    page.list.foreach {i =>
      if (let l = TrademeListing.all.find(l => l.listingId == i.listingId).result.get) {
        i.listing = l
        RetrieveSoldItemJob(service = service, item = i).enqueue
      }
    }

    if (page.hasNext) {
      nextPage(number + 1, filter)
    } else {
      Future(1)
    }
  }
}

back class RetrieveSoldItemJob extends SystemJob {
  field service: ITrademeIntegration
  field item: SoldItem
  func do: Future[Any] = {
    item.make(item.listing.template)
  }
}

back interface IPage[I] {
  extFieldNaming = UpperCamelCase
  field totalCount: Int?
  field page: Int
  field pageSize: Int?
  func list: [I]?
  
  func hasNext = totalCount > page*pageSize
}

back class SoldItemsPage extends IPage[SoldItem] {
  extFieldNaming = UpperCamelCase
  field list: [SoldItem]?
}

back class SoldItem extends ESalesOrder[Int] with ESalesOrderItem[Int] with EIncomingPayment[Int] {
  extFieldNaming = UpperCamelCase
  field listingId: Int
  field salePrice: UMoney
  field selectedShipping: String
  field buyerDeliveryAddress: String?
  field messageFromBuyer: String?
  field successFees: UMoney?
  field shippingPrice: UMoney?
  field offerId: Int?
  field invoiceId: Int?
  field buyer: TrademeAccount
  field deliveryAddress: TrademeLocation?
  field quantitySold: UInt
  field purchaseId: Int
  field price: UMoney
  field orderId: Int?
  field referenceNumber: String?
  field soldDate: Date {jsonMap = TrademeDate}
  field isPayNowPurchase: Bool
  field isPaymentPending: Bool
  field shippingType: ShippingOptionType {jsonMap[Int?](apply = id, unapply = i => ShippingOptionType.all.find(id == i)!)}
  field tmPaymentMethod: PaymentMethod {
    extName = "PaymentMethod"
    jsonMap[Int?](apply = id, unapply = i => PaymentMethod.all.find(id == i)!)
  }
  func paymentMethod = tmPaymentMethod.name
  
  field listing: TrademeListing
  
  func extId = purchaseId
  func number = referenceNumber
  func orderDate = soldDate
  func currencyCode = "NZD"
  func billingAddress = deliveryAddress
  func customerExtId = buyer.memberId
  func customer = buyer
  func payments = if (isPayNowPurchase) [this]
  func qty = quantitySold
  func amount: Money = price*quantitySold + shippingPrice
  func itemAmount = price*quantitySold
  func paymentDate = soldDate
  func customerNote = messageFromBuyer
  func items = [this.as[ESalesOrderItem[Int]]!] + if (shippingPrice) [TMDeliveryItem(item = this)]
  func product(pr: ISalesOrderImportProvider[Int]) = {
    listing.product
  }
  
  func make(pr: ISalesOrderImportProvider[Int]): Future[SalesOrder] = {
    let so <- super.make(pr)
    if (so.created) {
      listing.qtySold = listing.qtySold + quantitySold
      listing.save
    }
    so
  }
}

back class TMDeliveryItem(item: SoldItem) extends ESalesOrderDeliveryItem[Int] {
  func extId = -item.purchaseId
  func amount = item.shippingPrice
  func deliveryMethod = item.shippingType.name
}


