back class TrademeAccount extends ECustomer[Int] {
  extFieldNaming = UpperCamelCase
  field memberId: Int
  field nickname: String
  func title = nickname
  field isAddressVerified: Bool
  field dateAddressVerified: Date? {jsonMap = TrademeOptDate}
  field dateJoined: Date? {jsonMap = TrademeOptDate}
  field email: Email?
  field uniqueNegative: Int? {label = "Negative Feedbacks"}
  field uniquePositive: Int? {label = "Positive Feedbacks"}
  field feedbackCount: Int?
  field isDealer: Bool
  
  func personNickname = nickname
  func extId = memberId
  func emails = email.toSeq
  func phones = []
  func billingAddresses = []
  func deliveryAddresses = []
  func personFullName = []
  
  func make(service: ExtIdSource[Int]): Customer = {
    let customer = super.make(service)
    TrademeAccountContact.add(customer.legalEntity, nickname)
    customer
  }
  
  func fromContact(customer: Customer): Contact? = {
    customer.legalEntity.contacts*.as[TrademeAccountContact].first
  }
}

entity TrademeAccountContact extends ActorContact {
  singular = "Trademe Account"
  plural = "Trademe Account"
  ref field nickname: String
  func address: String = nickname
  view form = x{
    h3("Trademe Account")
    nickname
  }
  back object func add(addressee: Addressee, nickname: String): TrademeAccountContact = {
    addressee.contacts*.as[TrademeAccountContact].find(a => a.nickname == nickname)
      .alt(TrademeAccountContact(addressee = addressee, nickname = nickname).save)
  }
}

back class TrademeLocation extends EAddress {
  extFieldNaming = UpperCamelCase
  field name: String? 
  field address1: String?
  field address2: String?
  field suburb: String?
  field city: String?
  field postcode: String?
  field country: String?
  field phoneNumber: Phone?
  func address: Address = Address(
    person = name, street = "$address1\n$address2".trim
    suburb = suburb, city = city, postcode = postcode, country = country
  )

  func phones = phoneNumber.toSeq
  func emails = []
}
