entity TrademeTemplate extends ScheduledJob with ISalesOrderImportProvider[Int] with ISalesChannel {
  ref field name: String
  ref field integration: ITrademeIntegration
  impl func title = "$integration: $name"
  impl func service = integration
  field paymentMethods: [PaymentMethod]
  field otherPaymentMethod: String? {
    visible = paymentMethods.contains(Other) 
    validate = if (paymentMethods.contains(Other) && !otherPaymentMethod) "Other Payment Method details are required"
  }
  impl field stores: [IStore]? {singular = "Store"}
  field orderTerms: IOrderTerms?
  impl func orderTerms(order: ESalesOrder[Int]): IOrderTerms? = orderTerms
  field listingType: ListingType = Quantity
  field extraCharge: Percent?
  field maximumExtraCharge: Money[NZD]?
  field productCategories: [ProductCategory]? by _trademeTemplates
  field updatePricesEvery: Duration[hour, 0]?
  field listingDuration: Duration[day, 0]? = 7
  field allowSecondCategory: Bool {label = "Allow listing in the second category (trademe will charge for this)"}
  field descriptionFooter: Text? = "Listed using flow2b.com"
  impl func schedule = if (let p = updatePricesEvery) "0 3 */${p.unformattedString} * * ?" else ""
  
  field startPrice: TrademePrice? {visible = listingType == Auction}
  field reservePrice: TrademePrice? {visible = listingType == Auction}
  field buyNowPrice: TrademePrice? {visible = listingType == Auction}
  
  impl func salesChannel = this
  impl func legalEntity = integration.legalEntity
  impl func paymentMethodAccounts = [
    "Ping" -> integration.pingAccount, 
    "CreditCard" -> integration.payNowAccount, 
    "Afterpay" -> integration.payNowAccount
  ]
  func uploadOrderState(order: SalesOrder): Void = {
  }
  impl func deliveryMethodProducts = shippings*.options.filter(product).map(type.name -> product!).toMap
  
  field shippings: [TrademeShipping] inline by template
  func shipping(shippingClass: ShippingClass?): TrademeShipping = {
    shippings.find(s => s.shippingClass == shippingClass).alt(shippings.first)
  }
  
  impl view form = nav{
    tabs {
      grid(label = "Main"){
        integration
        name
        listingType
        listingDuration
        orderTerms
        productCategories
        allowSecondCategory
        descriptionFooter
      }
      grid (label = "Prices") {
        extraCharge
        maximumExtraCharge
        startPrice
        reservePrice
        buyNowPrice
      }
      grid (label = "Products") {
        stores
      }
      grid (label = "Payment") {
        paymentMethods
        otherPaymentMethod
      }
      grid (label = "Shipping", labels = None) {
        shippings
      }
      grid (label = "Advanced") {
        updatePricesEvery
      }
    }
    button("Listings") {
      TrademeListing.Report(template = this).list.open
    }
    
  }
  
  //func onSave = {
  //  listings*.product*.touch
  //}
  impl func do = {
    TrademeListing.all
      .filter(template == this && (active || status == Entered))
      .foreach(UpdateListingJob(listing = _).enqueue())
  }
}

inline entity TrademeShipping {
  field template: TrademeTemplate by shippings
  field shippingClass: ShippingClass?
  field pickup: Pickup
  field options: [ShippingOption]? inline by shipping
  field charge: ShippingCharge = PerItem
  field _descFooter: PlainText? 
  compute descFooter: PlainText?  {
    label = "Description footer"
    value = {
      _descFooter.or(template.descriptionFooter)
    }
    update = {
      _descFooter = if (new != template.descriptionFooter) new
    }
  }
  
  impl view form = grid {
    shippingClass
    pickup
    options >> list {grid(labels = Top) {
      x{type, price >> field(canEditUnit = true)}
      row {pickupLocation >> field(compact = true) ruralPickup signatureRequired}
      method
      product
    }}
    charge
    descFooter
  }
}



enum ListingType {
  case Quantity
  case Auction
}

enum ShippingCharge {
  case PerItem
  case PerOrder
}

enum PaymentMethod(id: Int?) {
  case BankDeposit(id = 1)
  case CreditCard(id = 2) = "Pay Now (Credit/Debit Cards)"
  case Cash(id = 4)
  case Other(id = 16)
  case Ping(id = 32)
  case Afterpay(id = 64)
}

enum Pickup(id: Int) {
  case Allow(id = 1) = "Can Pickup"
  case Demand(id = 2) = "Must Pickup"
  case Forbid(id = 3) = "No Pickups"
}

inline entity ShippingOption {
  extFieldNaming = UpperCamelCase
  field shipping: TrademeShipping inline by options {transient}
  field type: ShippingOptionType {
    jsonMap[Int?](apply = id, unapply = i => ShippingOptionType.all.find(id == i)!)
    update = {
      if (new == TradeMe) {
        price = 0
        method = ""
      }
    }
  }
  field currency: Currency {
    transient
    default = Currency.default
  }
  field pickupLocation: PickupLocation {
    transient
    default = Auckland
    visible = type == TradeMe
  }
  field signatureRequired: Bool {
    transient
    visible = type == TradeMe
  }
  field ruralPickup: Bool {
    transient
    visible = type == TradeMe
  }
  field price: Money[currency]? {visible = type == Custom}
  field method: String? {visible = type == Custom, validate = if (type == Custom && !method) "Please enter Method" }
  field product: IProduct? {
    transient
    visible = type == Custom || type == TradeMe
    validate = if (!product && (type == Custom || type == TradeMe)) "Product should be set for the delivery type"
  }
  
}

enum ShippingOptionType(id: Int?) {
  case Free(id = 3)
  case TradeMe(id = 5)
  case Custom(id = 4)
  case Undecided(id = 1)
  case Pickup(id = 2)
}
