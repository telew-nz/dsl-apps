trait TrademeProduct {
  func trademeTitle: String = title
  func trademeDescription: Text? = description
  func description: Text?
  func superProduct: ISuperProduct
  func subProducts: [IProduct]?
  func trademeSalesPrice(template: TrademeTemplate): Money = superProduct.salesPrice!*(template.extraCharge.withoutUnit + 1)
  func unit: ProductUnit
    
  field trademeListings: [TrademeListing]? read by product
  field trademeTemplates: [TrademeTemplate]?
  field trademeStatus: TrademeProductStatus = Inactive
  func findTrademeTemplates: [TrademeTemplate]? = {
    if (trademeTemplates) trademeTemplates
    else if (let c = superProduct.categories.filter(trademeTemplates).first) c.trademeTemplates
    else []
  }
    
  func onSave: Void = {
    updateTrademe()
  }
  func updateTrademe(): Void = {
    this.findTrademeTemplates.foreach{t =>
      if (trademeDescription && trademeStatus == Listed) {
        let listing = trademeListings.find(status.valid && template == t).alt(TrademeListing(product = this, template = t).save())
        UpdateListingJob(listing = listing).run()
      }
    }
  }
}

enum TrademeProductStatus {
  case Listed {background = "#dea"}
//  case Auto {background = "#ed9"}
  case Inactive {background = "#ddd"}
}


extend trait IBasicProduct extends TrademeProduct 

extend entity ProductCategory {
  field trademeTemplates: [TrademeTemplate]?
  field trademeCategory: TrademeCategory? {
    visible = trademeTemplates
    isValid = !trademeTemplates || trademeCategory
    from = TrademeCategory.all.filter(leaf)
  }
}
