entity TrademeListing extends DeferredJob {
  const ref field product: TrademeProduct by trademeListings
  const field template: TrademeTemplate by listings
  const field status: ListingStatus = Active
  func active = status == Active
  const field firstSaleDate: Date?
  const field qtySold: Int?
  const field listingId: Int?
  const field expiryDate: Date?
  func title = product.title
  func service: TrademeIntegration  = template.integration
  func jobDate = expiryDate?.add(1_minute)
  func do = {
    relist
  }
  func relist = {
    let result <- service.https("Selling/Relist.json").post(RelistRequest(listingId = listingId!).json)
    result.body!.parseJson[ListingResponse].process {response =>
      this.expiryDate = response.listing!.endDate
      this.save()
    }
  }
  view form = nav{grid{
    product
    template
    status
    qtySold
    listingId
    expiryDate
    button("Update") {
      UpdateListingJob(listing = this).run()
      UI.info("Job is posted")
    }
    button("Relist") {
      run()
      UI.info("Job is posted")
    }
  }}
}

class RelistRequest {
  jsonCapitalizeFieldNames = true
    
  field listingId: Int
  field returnListingDetails: Bool = true
}

enum ListingStatus(valid: Bool) {
  case Active(valid = true){background = "#dea"}
  case Parked(valid = true) {background = "#ddd"}
  case Withdrawn(valid = false) {background = "#ddd"}
  case Exhausted(valid = false) {background = "#ddd"}
  case Invalid(valid = false) {background = "#f99"}
}






