class UpdateListingJob extends SystemJob {
  func service: TrademeIntegration = listing.template.integration
  field listing: TrademeListing
  func do = {
    let p = this.listing.product
    let template = this.listing.template
    let qty: Number? = {
      if (p.superProduct.isTangible) StockRegister.current
        .filter(p.subProducts.contains(good) && (!template.stores || template.stores.contains(store)))
        .agg(available.sum)
      else 0
    }
    if (p.superProduct.isTangible && qty <= 0) {
      if (let listingId = this.listing.listingId) {
        let result <- service.https("Selling/Withdraw.json").post(WithdrawRequest(listingId = listingId))
        result.body!.parseJson[ListingResponse]
          .process{response => 
            this.listing.status = Withdrawn
          }
      } else {
        Future.apply(0)
      }
    } else {
      let request = ListingRequest(
        title = p.trademeTitle
        category = p.superProduct.categories*.trademeCategory.first!.number
        //secondCategory = p.categories*.trademeCategory.drop(1).first?.number
        description = p.trademeDescription.lines!
        startPrice = p.trademeSalesPrice(template),
        buyNowPrice = p.trademeSalesPrice(template),
        paymentMethods = template.paymentMethods
        otherPaymentMethod = template.otherPaymentMethod
        pickup = template.pickup
        shippingOptions = template.shippingOptions
        sku = p.superProduct.sku
        quantity = qty.min((1000 - this.listing.qtySold).as[Qty[p.unit]])
        listingId = this.listing.listingId
      )
      let result <- service.https(if (this.listing.listingId) "Selling/Edit.json" else "Selling.json").post(request.json)
      let response = result.body!.trace.parseJson[ListingResponse]
      if (let e = response.errorDescription) {
        if (e == "Listing id $(listing.listingId.unformattedString) is not valid") {
          listing.status = Invalid
          listing.save()
          let newListing = TrademeListing(product = listing.product, template = listing.template).save()
          UpdateListingJob(listing = newListing).run()
        } else throw e
      } else if (!response.success) throw response.description
      else { 
        this.listing.listingId = response.listingId
        this.listing.expiryDate = response.listing!.endDate
      }
    }
  }
}

class ListingRequest {
  jsonCapitalizeFieldNames = true
    
  field category: String?
  field title: String?
  field description: [String]
  field startPrice: Money?
  field reservePrice: Money?
  field buyNowPrice: Money?
  field duration: Duration[day]? = (2) {jsonRequired}
  field isBrandNew = true
  field isClassified = false
  field quantity: Int?
  field isFlatShippingCharge: Bool
  field sku: String? {jsonName = "SKU" }
  field wasPrice: Money?
  field shortDescription: String?
  field secondCategory: String?
  field paymentMethods: [PaymentMethod]? {jsonMap(id)}
  field otherPaymentMethod: String?
  field pickup: Pickup? {jsonMap(_?.id)}
  field shippingOptions: [ShippingOption]? inline
  field listingId: Int?
  field returnListingDetails: Bool = true
}

class WithdrawRequest {
  field listingId: Int
  field type: Int = 2
  field reason: String = "The item has been sold with another channel"
}

class ListingResponse {
  field success: Bool
  field description: String?
  field errorDescription: String?
  field listingId: Int?
  field listing: ListingResponseDetails?
  func process(f: ListingResponse => Void): Void = {
    if (let e = errorDescription) throw e
    else if (!success) throw description
    else f(this)
  }
}

class ListingResponseDetails {
  field endDate: Date {jsonMap = TrademeDate}
}

object TrademeDate extends Mapper[Date, String] {
  func apply(v: Date): String = "/Date(${v.epoch.withoutUnit})/"
  func unapply(v: String): Date = Date.fromEpoch((v[6 .. -1)).toNumber)
}
