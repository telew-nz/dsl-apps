entity TrademeTemplate {
  field title: String
  field integration: TrademeIntegration
  field paymentMethods: [PaymentMethod]
  field otherPaymentMethod: String? {
    visible = paymentMethods.contains(Other) 
    isValid = !paymentMethods.contains(Other) || otherPaymentMethod 
  }
  field pickup: Pickup
  field shippingOptions: [ShippingOption]? inline by template
  field listings: [TrademeListing]? read by template
  field stores: [Store]?
  field extraCharge: Percent = 0.1
    
  view form = nav{grid{
    title
    paymentMethods
    otherPaymentMethod
    pickup
    shippingOptions >> list {grid(labels = Top) {
      x{type, price >> field(canEditUnit = true)}
      method
    }}
    extraCharge
    listings
  }}
  
  func onSave: Void = {
    listings*.product*.touch
  }
}

enum PaymentMethod(id: Int?) {
  case BankDeposit(id = 1)
  case CreditCard(id = 2)
  case Cash(id = 4)
  case SafeTrader(id = 8)
  case Other(id = 16)
}

enum Pickup(id: Int?) {
  case Allow(id = 1) = "Can Pickup"
  case Demand(id = 2) = "Must Pickup"
  case Forbid(id = 3) = "No Pickups"
}

inline entity ShippingOption {
  jsonCapitalizeFieldNames = true
  field template: TrademeTemplate {jsonIgnore}
  field type: ShippingOptionType {jsonMap(id)}
  field currency: Currency = (Currency.default) {jsonIgnore}
  field price: Money[currency]?
  field method: String?
}

enum ShippingOptionType(id: Int?) {
  case Free(id = 3)
  case TradeMe(id = 5)
  case Custom(id = 4)
  case Undecided(id = 1)
  case Pickup(id = 2)
}
