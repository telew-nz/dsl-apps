enum OpportunityState {
  case Open {background = "#8bf" icon = "spinner"}
  case Blocked {background = "#f99" icon = "stop-circle"}
  case Dormant {background = "#ecd" icon = "bed"}
  case Lost {color = "white" background = "#c00" icon = "skull-crossbones"}
  case Won {color = "white" background = "#090" icon = "glass-cheers"}
  case Canceled {background = "#999" icon = "times-circle"}
} 

enum AwaitingFollowUpStatus {
  case AwaitingFollowUp {background = "#fcc" icon = "bell"}
}

extend enum DashboardIssue {
  case FollowUp(role = null, priority = major)
}

trait IOpportunity[Stage extends Enum] extends Entity with NewEngine with DashboardItem {
  background = "#a73e6c"
  singular = "Opportunity"
  plural = "Opportunities"
  
  impl func splitPerUser(role: String): Bool = true
  impl func itemRoles = [Salesperson]
  impl func activeRoles = if (active) itemRoles
  override func itemOrder = ("Opp", nextFollowUpDate, number)
  object field generator: Int?
  const system ref field n: Int =? increment(IOpportunity.generator)
  compute number: String = prefix + n.format(3, 0)
  impl func entityNumbers = [number]
  override func entitySubject = OurActor.our!.title
  func prefix: String
  ref field _state: OpportunityState = Open
  func isBlocked = false
  ref compute state: OpportunityState {
    value = if (isBlocked && _state == Open) Blocked else _state
    update = {
      _state = new
    }
  }
  impl func issues: [DashboardIssue]? = if (awaitingFollowUp) [FollowUp]
  compute status {
    deprecated(use = "state")
    value = state
  }
  compute contacts: [ActorContact]? {
    value = actor?.contacts
    update = {
      if (let actor) actor.contacts = new
    }
  }
  field nextFollowUpDate: Date?
  compute nextFollowUpDateEditor: Date[day]? {
    value = nextFollowUpDate
    update = {nextFollowUpDate = new}
  }
  ref field owner: User? {
    from = User.all.filter(u => this.itemRoles.toSeq.exists(r => u.is(r)))
  }
  impl func itemUser = owner
  ref field actor: Actor? by opportunities {
    available(Inline).for(Inline)
    deleteCascade = false
  }

  field _currency: Currency?
  compute currency: Currency = _currency.alt(actor?.getCurrency.alt(our))
  func estimatedAmount: UMoney[currency]?
  func probability: UPercent?
  list compute orderedAmount: UMoney? = salesOrders*.total.sum
  list compute paidAmount: Money? = salesOrders*.paidAmount.sum
  compute people: [CompanyPerson]? {
    value = actor?.people
    visible = actor
    update = {
      actor!.people = new
    }
    singular = "Person"
  }
  compute roles {
    value = people
    deprecated(use = "people")
  }
  impl func multiupdate = actor.toSeq

  field salesOrders: [SalesOrder]? read by opportunity {
    visible = actor.nonEmpty
    init = {new.customer = actor.alt(throw "Actor is empty").legalEntities.first.makeCustomer?.as[Customer]}
  }
  
  func clickNextStage: Stage? = null
  back event onDeliveryEvent(activity: Activity, delivery: ActivityDelivery, event: ActivityDeliveryEvent): Void = {
    if (event.type == Click) {
      if (let clickNextStage) {
        stage = clickNextStage
        if (state in [Lost, Dormant]) state = Open
        notify(Salesperson)
        Activity.current!.from = delivery.contact.as[Contact]
        if (activity.mainEntity != this) {
          Activity.comment("<p>Link opened on $(activity.mainEntity.mention.as[Html]):</p><p>$(event.url)</p>")
        } else {
          Activity.comment("<p>Link opened:</p><p>$(event.url)</p>")
        }
        saveMain
      }
    } 
  }

  field source: OpportunitySource? 
  var stage: Stage
  func lost: Bool = _state == Lost
  func won: Bool = _state == Won
  func active: Bool = _state == Open || (_state == Blocked && awaitingFollowUp)
  ref compute awaitingFollowUp: AwaitingFollowUpStatus? {
    value = if ((nextFollowUpDate && _state in [Open, Blocked] && nextFollowUpDate <= Date.now) || (!nextFollowUpDate && state == Open)) {
      AwaitingFollowUp
    }
  }
  field description: Text? 
  impl func title: String = number + " " + actor
  
  view peopleView = people >> list{form.removeField(_.company)}
  view followUpView = x(label = "Follow Up") {
    awaitingFollowUp
    nextFollowUpDateEditor >> field (editMode = AlwaysEdit)
    button("Tomorrow") {
      nextFollowUpDateEditor = Date.now + 1_day
      UI.save(this)
    }
    button("In a Week") {
      nextFollowUpDateEditor = Date.now + 1_week
      UI.save(this)
    }
    button("In a Month") {
      nextFollowUpDateEditor = Date.now + 1_month
      UI.save(this)
    }
  }
  func stateView: Layout[this]
  view headerView = grid(labels = Top) {
    issuesView
    x{stateView actor >> field(stretch = 1, fontStyle = H3) number}
    owner
    followUpView
  }
  view footerView = grid(labels = Top) {
    source
    tickets
    salesOrders
    description
    contacts >> list(frame = false){form.as[Layout[ActorContact]].removeField(_.addressee)}
    peopleView
  }
  impl view ref = x {stateView title number >> field (fontStyle = Label)}
  impl view traitItem = dash
  impl view dash = y {
    x{number >> field(fontStyle = Label) actor >> field(stretch = 1, title = title) }
    x{stateView probability owner}
  }
  
  report Report {
    field awaitingFollowUpOnly: Bool
    field salesperson: User? {
      from = User.all.filter(is(Salesperson))
    }
    field state: [OpportunityState]?
    field probabilityHigher: UPercent?
    field probabilityLower: UPercent?
    impl view list = IOpportunity.all.filter(
         isFor(salesperson, Salesperson) && (!this.state || this.state.contains(state)) 
      && probabilityHigher ?< probability && (!probability || probability <? probabilityLower)
      && (!this.awaitingFollowUpOnly || awaitingFollowUp)
    ).sortBy(nextFollowUpDate, n) >> nav{
      list{}
    }
  }
}
extend trait SalesOrder {
  field opportunity: IOpportunity? {
    from = customer?.legalEntity?.opportunities
    views = []
  }
  extend view posView = opportunity
}