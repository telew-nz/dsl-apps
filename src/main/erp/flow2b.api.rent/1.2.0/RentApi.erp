inline entity RentApi extends IEndpoint {
  impl field service: RentApiService by rentApi
  
  back func postCalcPrice(body: ApiPriceRequest): Future[ApiPriceResponse] = {
    guard (let prod = ISubProduct.all.find(_.sku == body.sku).result.get) else return throw "Product with $(body.sku) not found"
    guard (let price = service.legalEntity.price(service.priceLevel, Rent, service.currency, prod)?.as[IPriceRent]) else return throw "Product price not found $prod"
    
    let model = price.model
    let dispatch = ScheduleDate(date = body.start, schedule = service.schedule)
    let stock = prod.calcStock(null, Asset, service.legalEntity, [])
    let ret = ScheduleDate(date = body.end, schedule = service.schedule)
    let dur = price.rentDur(dispatch, ret, null, false)
    let request = PriceRequest(currency = service.currency, inclGst = service.legalEntity.pricesIncludingGst, level = service.priceLevel)
    let item = PriceOrderItem(prod = prod, qty = body.qty, rentPeriod = RentPeriod(dispatch = dispatch, ret = ret, dur = dur))
    let pr <- price.amount(request, item)
    
    ApiPriceResponse(
      start = body.start, end = body.end, sku = body.sku, qty = body.qty,
      dur = dur, periodCode = dur.unit!.as[DurUnit]!.name, periodName = dur.unit.toString!
      amount = pr.current, avQty = stock?.outlook.positive
    )
  }
  back func postCalcPrices(body: ApiPricesRequest): Future[ApiPricesResponse] = {
    let items <- body.items.oneByOne(postCalcPrice(_))
    ApiPricesResponse(items = items)
  }
}

class ApiPriceRequest {
  field start: Date
  field end: Date
  field sku: String
  field qty: UQty
}

class ApiPriceResponse {
  field start: Date
  field end: Date
  field sku: String
  field qty: UQty
  field dur: UDuration
  field periodCode: String
  field periodName: String
  
  field amount: UMoney? {extRequired}
  field avQty: UQty? {extRequired}
}

class ApiPricesRequest {
  field items: [ApiPriceRequest]?
}
class ApiPricesResponse {
  field items: [ApiPriceResponse]?
}