inline entity RentApi extends IEndpoint {
  impl field service: RentApiService by rentApi
  
  back func postCalcPrice(body: PriceRequest): Future[PriceResponse] = {
    guard (let prod = ISubProduct.all.find(_.sku == body.sku).result.get) else return throw "Product with $(body.sku) not found"
    guard (let price = service.legalEntity.priceRent(prod)) else return throw "Product price not found $prod"
    
    let model = price.model
    let dispatch = ScheduleDate(date = body.start, schedule = service.schedule)
    let stock = prod.calcStock(null, Asset, service.legalEntity, [])
    let ret = ScheduleDate(date = body.end, schedule = service.schedule)
    let dur = price.rentDur(dispatch, ret, null, false)
    let pr <- price.rentAmount(model.currency, service.legalEntity.pricesIncludingGst, null, body.qty, RentPeriod(dispatch = dispatch, ret = ret, dur = dur))
    
    PriceResponse(
      start = body.start, end = body.end, sku = body.sku, qty = body.qty,
      dur = dur, periodCode = dur.unit!.as[DurUnit]!.name, periodName = dur.unit.toString!
      amount = pr.current, avQty = stock?.outlook.positive
    )
  }
  back func postCalcPrices(body: PricesRequest): Future[PricesResponse] = {
    let items <- body.items.oneByOne(postCalcPrice(_))
    PricesResponse(items = items)
  }
}

class PriceRequest {
  field start: Date
  field end: Date
  field sku: String
  field qty: UQty
}

class PriceResponse {
  field start: Date
  field end: Date
  field sku: String
  field qty: UQty
  field dur: UDuration
  field periodCode: String
  field periodName: String
  
  field amount: UMoney? {extRequired}
  field avQty: UQty? {extRequired}
}

class PricesRequest {
  field items: [PriceRequest]?
}
class PricesResponse {
  field items: [PriceResponse]?
}