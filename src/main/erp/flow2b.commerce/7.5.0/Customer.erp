trait ICustomer extends PseudoEntity {
  func getCurrency: Currency
  func legalEntity: LegalEntity
  func isTheir = false
}

extend trait OurLegalEntity extends ICustomer
entity Customer extends ICustomer {
  compute title {
    value = legalEntity.title
    update = {
      legalEntity.title = new
    }
  }
  
  func getCurrency: Currency = legalEntity.getCurrency
  ref field legalEntity: LegalEntity inline by customer {deleteCascade = false}
  func mainEntity = legalEntity
  func isTheir = legalEntity.isTheir
  
  view form = grid(labels = Top) {
    extension
  }
  report Report {
    view list = Customer.all >> nav {list{grid(labels = None) {
      legalEntity.title
    }}}
  }
}

extend trait LegalEntity {
  field customer: Customer? inline by legalEntity
  compute isCustomer: Bool {
    label = "Customer"
    value = customer
    update = {
      if (new) customer = Customer() else customer = null
    }
  }
  func iCustomer: ICustomer? = our?.as[ICustomer].or(customer)
  func makeICustomer: ICustomer = {
    iCustomer.alt(Customer(legalEntity = this))
  }
  func makeCustomer: Customer = {
    if (let o = our) throw "Cannot make customer for our company"
    iCustomer?.as[Customer].alt(Customer(legalEntity = this))
  }
}
extend entity Company {
  extend view form = extend("tabs") {
    grid(labels = Top, label = "Customer", visible = customer || ui.edit) {
      isCustomer
      customer!.form
    }
  }  
}
extend entity Person {
  extend view form = extend("tabs") {
    grid(labels = Top, label = "Customer", visible = customer || ui.edit) {
      isCustomer
      customer!.form
    }
  }
}
