extend trait IBaseProduct {
  func productVendors: [ProductVendor]?
  compute salesPrice: Number? = (productVendors.find(vendor == Actor.our)?.price) {
    update = {
      productVendors.find(vendor == Actor.our)
        .alt(ProductVendor(product = superProduct, vendor = Actor.our!))
        .price = new
    }
  }
  func vendor(actor: Actor): ProductVendor? = productVendors.find(vendor == actor)
  func price(order: IOrder): Money[order.orderCurrency]? = {
    productVendors.find(s => s.vendor == order.vendor)?.getPrice(order.orderCurrency, order.orderDate)
  }
}

extend trait ISuperProduct {
  func productVendors: [ProductVendor]? = vendors
  ref field vendors: [ProductVendor]? inline by product  
  ref field accessories: [Accessory]? inline by product
  field principals: [Accessory]? inline by accessory
}

extend trait IProduct  {
  func productVendors: [ProductVendor]? = superProduct.vendors
  func minStock: Qty[unit]? = 0
}