trait IBaseProduct {
  func isValid: Bool = true
  func superProduct: ISuperProduct
  
  func productVendors: [ProductVendor]?
  compute salesPrice: Number? = (productVendors.find(vendor == Actor.our)?.price) {
    update = {
      productVendors.find(vendor == Actor.our)
        .alt(ProductVendor(product = superProduct, vendor = Actor.our!))
        .price = new
    }
  }
  func vendor(actor: Actor): ProductVendor? = productVendors.find(vendor == actor)
  func price(order: IOrder): Money[order.orderCurrency]? = {
    productVendors.find(s => s.vendor == order.vendor)?.getPrice(order.orderCurrency, order.orderDate)
  }
  
  func unit: ProductUnit
  func altUnits: [ProductAltUnit]? = []
  func units: [ProductUnit] = (unit + altUnits*.unit).toSet
}

trait ISuperProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
  
  func subProducts: [IProduct]?
  func superProduct: ISuperProduct = this
  func isTangible: Bool
  func isService: Bool
  ref field vendors: [ProductVendor]? inline by product
  func productVendors: [ProductVendor]? = vendors
  
  ref field accessories: [Accessory]? inline by product
  field principals: [Accessory]? inline by accessory
}

trait IProduct extends IBaseProduct {
  plural = "Products"
  singular = "Product"
  width = 0.45
    
  func productVendors: [ProductVendor]? = superProduct.vendors
  func isTangible: Bool
  func isService: Bool
  func minStock: Qty[unit]? = 0
}

trait IGood extends IProduct {
  func isTangible = true
  func isService = false
}

trait IIntangibleGood extends IProduct {
  func unit: ProductUnit = Item
  func isTangible = false
  func isService = false
}

trait IService extends IProduct {
  func unit: ProductUnit = Item
  func isTangible = false
  func isService = true
}