trait ICustomer extends PseudoEntity with NewEngine {
  func getCurrency: Currency
  func legalEntity: LegalEntity
  func isTheir = false
}

extend trait OurLegalEntity extends ICustomer
entity Customer extends ICustomer {
  impl compute title {
    value = legalEntity.title
    update = {
      legalEntity.title = new
    }
  }
  func defaultReceiver: Customer? = null
  func defaultPayer: Customer? = null
  
  impl func getCurrency: Currency = legalEntity.getCurrency
  impl ref field legalEntity: LegalEntity inline by customer {deleteCascade = false}
  impl func mainEntity = legalEntity
  impl func isTheir = legalEntity.isTheir
  
  impl view form = grid(labels = Top) {
    stateView >> field(label = "")
    extension("top")
    extension
  }
  view stateView = x{}
  impl view traitItem = grid(labels = None) {
    x {legalEntity.title >> field(stretch = 1) stateView}
  }
  report Report {
    impl view list = Customer.all >> nav {list{traitItem}}
  }
  
}

extend trait LegalEntity {
  ref field customer: Customer? inline by legalEntity
  compute isCustomer: Bool {
    label = "Customer"
    value = customer
    update = {
      if (new) customer = Customer() else customer = null
    }
  }
  func iCustomer: ICustomer? = our?.as[ICustomer].or(customer)
  func makeICustomer: ICustomer = {
    iCustomer.alt(Customer(legalEntity = this))
  }
  func makeCustomer: Customer = {
    if (let o = our) throw "Cannot make customer for our company"
    iCustomer?.as[Customer].alt(Customer(legalEntity = this))
  }
}
extend entity Company {
  extend view form = extend("tabs") {
    grid(labels = Top, label = "Customer", visible = customer || ui.edit) {
      isCustomer
      customer!.form
    }
  }  
}
extend entity Person {
  extend view form = extend("tabs") {
    grid(labels = Top, label = "Customer", visible = customer || ui.edit) {
      isCustomer
      customer!.form
    }
  }
}
