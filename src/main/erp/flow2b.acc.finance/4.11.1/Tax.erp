analytic Tax(dataType = "Tax")

acctemplate Tax {
  key field currency: Currency
  key field tax: Tax
  field rate: Percent[2]??
  field taxedAmount: Money[currency]? 
  field origin: Journal?
  field isAdjustment: Bool
  field isInstantPayment: Bool
  field isTaxPayment: Bool
}

extend register LTax {
  stored compute baseTaxedAmount: Money[legalEntity.getCurrency]? <- taxedAmount.to[Money[legalEntity.getCurrency]](date)
  
  func toTaxedAmount = TaxedAmount(rate = rate, isAdjustment = isAdjustment, 
     tax = amount, baseTax = baseAmount, taxedAmount = taxedAmount, baseTaxedAmount = baseTaxedAmount)
}

account TaxesPayable(template = "Tax", number = 220, type = Liability)
account TaxesPaid(template = "Tax", number = 630, type = Expense)

enum Tax {
  case IncomeTax
  case Gst = "GST"
  case PayrollTax
  case WithholdingTax
}

class TaxedAmount {
  field rate: Percent[2]??
  field isAdjustment: Bool
  field tax: Money?
  field baseTax: Money?
  field taxedAmount: Money?
  field baseTaxedAmount: Money?
  func fullAmount = tax + taxedAmount
  func baseFullAmount = baseTax + baseTaxedAmount
  func add(o: TaxedAmount) = TaxedAmount(rate = rate, isAdjustment = isAdjustment,
    tax = tax + o.tax, baseTax = baseTax + o.baseTax, 
    taxedAmount = taxedAmount + o.taxedAmount, baseTaxedAmount = baseTaxedAmount + o.baseTaxedAmount)
  func mul(k: Number?): TaxedAmount = TaxedAmount(rate = rate, isAdjustment = isAdjustment,
    tax = tax*k, baseTax = baseTax*k, 
    taxedAmount = taxedAmount*k, baseTaxedAmount = baseTaxedAmount*k)
}
