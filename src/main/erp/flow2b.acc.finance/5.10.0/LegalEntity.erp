extend trait LegalEntity {
  view debtStatement {
    printable = true
    label = "Debt Statement"
    layout = nav{grid(labels = None){
      h1("Debt Statement")
      title
      debtReport(money = true)
    }}
  }
  back func unpaidAmount(origin: DebtOrigin): Money? = {
     LMoneyDebt.current
      .filter(balance && counterparty == this)
      .flatMap(debtItems)
      .filter(o => o.origin == origin)
     *.amount.agg(sum)
      .result.get
  }
  view debtReport(money: Bool) = LDebt.current
    .filter(balance  
       && money == account.money
       && counterparty == this)
    .flatMap(debtItems)
    .map{
      let baseAmount <- amount.to[Money[this.getCurrency]](Date.now)
      (origin, dueDate = dueDate, debtOverdue, amount, baseAmount)
    }
    .total(amount = baseAmount.sum)
  
    >> total {
      row(fontSize = 1) {label("Total"), space, amount}
      table (action = origin?.form?.open) {
        origin?.title >> field(width = 0.35, label = "") 
        x(width = 0.4, label = "Due Date") {
          dueDate?.date 
          debtOverdue >> field(label = "Overdue", visible = debtOverdue > 0)
          label ("overdue", fontStyle = Label, visible = debtOverdue > 0)
        }
        amount >> field(width = 0.25)
      }
    }
  func calcDebtBalance: Future[DebtBalance] = {
    let debt <- LMoneyDebt.current
      .filter(counterparty == this)
      .map(balance.to[Money[this.getCurrency]](now))
      .agg(sum)
    DebtBalance(currency = getCurrency, debt = debt, 
                debitAllowance = customer?.allowance?.amount, 
                creditAllowance = -vendor?.allowance?.amount)
  }
  compute debtBalance {
    value <- calcDebtBalance
    views = []
  }
}



enum ChargeType {
  case Cash {background = "#b6e2c6"}
  case Account {background = "#dec4ee"}
}

extend entity Customer {
  field allowance: DebtAllowance? {
    label = "Customer Account Debt Allowance"
    views = []
    init = {new.currency = this.getCurrency}
  }
  compute debtBalance {
    value <- legalEntity.calcDebtBalance
    views = []
  }
  extend view form = extend {
    allowance
    legalEntity.debtReport(money = true) >> field(label = "Money Debt")
    button("Reconcilation") {
      DebtRecon(counterparty = legalEntity).list.open
    }
    legalEntity.debtReport(money = false) >> field(label = "Delivery Debt")
  }
  func calcChargeType: ChargeType = if (allowance) Account else Cash
  ref compute chargeType: ChargeType {
    value = calcChargeType
    views = [] 
  }
  event onSave = {
    if (updated(allowance) || (allowance && allowance!.updated(amount))) {
      DebtOrigin.all.filter(debtCounterparty == this.legalEntity)*.touch
    }
  }
}

class DebtAllowance {
  field currency: Currency
  field amount: Money[currency] {canEditUnit}
  
  field dueUnit: DateUnit = day
  field dueIn: Duration[dueUnit, 0] {
    canEditUnit
    default = 20_day
    label = "Due in after the statement"
  }
  field stmUnit: DateUnit = month
  field stmEvery: Duration[stmUnit, 0] {
    canEditUnit
    default = 1_month
    label = "Statement every"
  }
  
  view form = grid {
    row{amount stmEvery dueIn}
  }
  func dueDate(date: Date): Date = {
    date.end(of = stmUnit) + dueIn
  }
}


extend entity Vendor {
  field allowance: DebtAllowance? {
    views = []
    label = "Debt Allowance"
    init = {new.currency = this.getCurrency}
  }
  compute debtBalance {
    value <- legalEntity.calcDebtBalance
    views = []
  }
  
  extend view form = extend {
    allowance
    legalEntity.debtReport(money = true) >> field(label = "Money Debt")
    button("Reconcilation") {
      DebtRecon(counterparty = legalEntity).list.open
    }
    legalEntity.debtReport(money = false) >> field(label = "Delivery Debt")
  }
  func calcChargeType: ChargeType = if (allowance) Account else Cash
  ref compute chargeType: ChargeType {
    value = calcChargeType
    views = [] 
  }
  event onSave = {
    if (updated(allowance) || (allowance && allowance!.updated(amount))) {
      DebtOrigin.all.filter(debtCounterparty == this.legalEntity)*.touch
    }
  }
}
 