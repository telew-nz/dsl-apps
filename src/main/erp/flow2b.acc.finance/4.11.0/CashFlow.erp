enum CashFlowType(isIncome: Bool) { 
  case CashProvided{background = "#dea" color = "black"}
  case CashUsed{background = "#fcc" color = "black"}
  case CashUsedOrProvided{background = "#ed9" color = "black" label = "Cash Used or Provided"}
  case Error {background = "#fb786d" color = "#500"}
}

enum CashFlowCategory(type: CashFlowType) {
  case Sales(type = CashProvided) {background = "#dea"}
  case InterestRevenue(type = CashProvided) {background = "#dea"}
  case Purchases(type = CashUsed) {background = "#b6d7e2"}
  case GeneralExpenses(type = CashUsed) {background = "#fcc"}
  case Taxes(type = CashUsed) {background = "#fcc"}
  case Exchange(type = CashUsedOrProvided) {background = "#ed9", label = "Currency Exchange"}
  case CurrentAccounts(type = CashUsedOrProvided) {background = "#ed9"}
  case Notes(type = CashUsedOrProvided) {background = "#ed9"}
  case Capital(type = CashUsedOrProvided) {background = "#dec4ee"}
  case Errors(type = Error) {background = "#fb786d" color = "#500"}
}

report CashFlow {
  background = "#d68400"
  field legalEntity: OurLegalEntity? 
  field from: Date = Date.now[Date[millisecond]].start(year)
  field to: Date = Date.now[Date[millisecond]].end(year)
  field currency: Currency?
  func baseCurrency = currency.or(legalEntity?.getCurrency).alt(Currency.our)
    
  view list = LCash.between(from, to)
    .filter(start.legalEntity ==? this.legalEntity && start.currency ==? this.currency && start.financeAccount.ledgerAccount != CurrentAccounts)
    .map{i =>
      let start <- i.start.balance.to[Money[this.baseCurrency]](this.from)
      let end <- (i.start.balance + i*.items*.amount.sum).to[Money[this.baseCurrency]](this.to)
      (start, end, i.items)
    }
    .total(start.sum, end.sum).map((start, end, items*.items))
    .flatQuery{i =>
      i.items.query.filter(!isCorrection)
       .map{j => 
         let amount <- j.baseAmount.to[Money[this.baseCurrency]](j.date)
         (category = j.cashFlowCategory, amount)
        }
       .total(increase = amount.sum)
       .flatMap{j =>
         j.items
           + if (let loss = i.end - i.start - j.increase) [(category = CashFlowCategory.Exchange, amount = loss.as[Money[this.baseCurrency]])] 
             else null
       }
       .groupBy(category).agg(amount.sum)
       .sortBy(category) 
       .groupBy(category.type).subtotal(amount = amount.sum)
       .total(increase = amount.sum, start = i.start, end = i.end)
    }
  >> nav{
    total {
      group {
        row (position = Head) {label("Begining Cash Balance"), start}
        row {label("Increase or Decrease in Cash"), increase >> field(showPlus = true)}
        row {label("Ending Cash Balance"), end}
      }
      subtotal {
        row {type, amount >> field(showPlus = true)}
        table {
          category >> field(width = 0.5, background = ""), amount  >> field(showPlus = true, width = 0.3)
        }
      }
    }
  }
}


