class OriginAmount extends HasDate {
  field date: Date
  field origin: DebtOrigin?
  field amount: Money
}

enum OverdueState {
  case NoOverdue {background = "#dea"}
  case Overdue {background = "#e99"}
}

trait DebtOrigin extends Entity with Journal {
  func debtCurrency: Currency
  func debtAmount: Money[debtCurrency]?
  func debtCounterparty: LegalEntity?
  func debtBalance: DebtBalance? = debtCounterparty?.debtBalance
  system stored compute debtAllowance: Money[debtCurrency]?
  
  func calcDebtAllowance: Money? = {
    if (front) {
      if (id) debtAllowance 
      else if (let debtBalance) debtBalance.debtAllowance(debtAmount)
    } else {
      debtAllowance
    }
  }
  
  compute unreconAmount: Money[debtCurrency]? = debtAmount + calcReconAmount
  func calcReconAmount = {
    if (front) {
      if (id) reconAmount else calcDebtAllowance 
    } else reconAmount
  }
  ref system stored compute reconAmount: Money[debtCurrency]? {
    value = back {
      debtLedgers*.backLinkAmounts.sum - fwdLinks*.backLinkAmount(this).sum + debtAllowance
    }
  }
  func isPurchase: Bool
  func unrecon: Bool = unreconAmount
  func recon: Bool = !unreconAmount
  
  field manLinks: [DebtOrigin]? by manLinks {
    label = "Links"
    singular = "Link"
    plural = "Links"
    from = DebtOrigin.all.filter(o => o.debtCurrency == debtCurrency && o.debtCounterparty == debtCounterparty)
  }
  func mainOrigin: DebtOrigin = this
  func allOrigins: [DebtOrigin]? = [this]
  func allManLinks: [DebtOrigin]? = manLinks
  
  back func debtLedgers: [LMoneyDebt]? = []
  back func debtCashFlows: [CashFlowAmount]?
  const system field fwdLinks: [LMoneyDebt]? by backLinks {deleteCascade = false}
  back func debtOrigins: [DebtOrigin]? = fwdLinks*.origin + debtLedgers*.backLinks

  event onSave = {
    if (registerUpdated) {
      (allManLinks + origin(manLinks))*.allOrigins.filter(m => m.journalDate <= this.journalDate)*.debtLedgers*.touch
    }
  }
  compute debtOriginAmounts: [OriginAmount]? {
    availableFor = Inline
    value = back {
      fwdLinks.map{d => 
        OriginAmount(date = d.date, origin = d.origin, amount = -d.backLinkAmount(this).as[Money[d.currency]]!)
      } + debtLedgers.flatMap{l =>
        l.backLinks.zip(
          l.backLinkAmounts, 
          map = OriginAmount(date = l.date, origin = left, amount = right.as[Money[l.currency]]!)
        )
      } + if (let debtAllowance = calcDebtAllowance) [OriginAmount(date = journalDate, amount = debtAllowance)]
    }
  }
  back func paymentCashFlows: [CashFlowAmount]? = {
    debtOriginAmounts.flatMap{d => 
      if (let o = d.origin) {
        if (let cfs = o.debtCashFlows) {
          cfs
            .distribute(d.amount, by = _.amount)
            .map(CashFlowAmount(cashFlow = item.cashFlow, amount = value!))          
        } else {
          [CashFlowAmount(cashFlow = Errors, amount)]
        }
      } else {
        [CashFlowAmount(cashFlow = Debts, amount)]
      }
    }//.groupBy(cashFlow).agg(CashFlowAmount(cashFlow = key, amount.sum!)).values
  }
 
}

class DebtBalance(currency: Currency, debt: Money[currency]?, creditAllowance: Money[currency]?, debitAllowance: Money[currency]?) {
  func allowedDebit: Money[currency]? = (debitAllowance - debt).max(0)
  func allowedCredit: Money[currency]? = (creditAllowance - debt).min(0)
  func debtAllowance(amount: Money?): Money[currency]? = {
    if (amount.unit == currency) {
      if (amount < 0) -amount.max(allowedCredit)
      else -amount.min(allowedDebit)
    }
  }
}