analytic Counterparty(dataType = "LegalEntity")
  
acctemplate Debt {
  key field currency: Currency
  key field counterparty: LegalEntity
  field origin: Journal?
}

acctemplate Counterparty {
  key field counterparty: LegalEntity?
}

class OriginAmount {
  field origin: Journal?
  field dueDate: Date?
  field amount: Money
}

trait DebtOrigin extends Journal {
  func dueDate: Date?
}

extend register LDebt {
  stored compute origins: [OriginAmount]? = {
    if (let p = prev?.origins.find(origin == this.origin)?.amount.as[Money[currency]]) {
      if (let rest = p + amount) prev?.origins.filter(origin != this.origin) + OriginAmount(origin = origin, amount = rest)
      else prev?.origins.filter(origin != this.origin)
    } else if (let a = amount) prev?.origins + OriginAmount(origin = origin, amount = a)
    else prev?.origins
  }
}

account AccountsReceivable(template = "Debt", number = 110, type = Asset)
account PrepaidExpenses(template = "Debt", number = 130, type = Asset)
account AllowanceForDoubtfulDebts(template = "Debt", number = 190, type = Asset, label = "Allowance for Doubtful Debts")
  
account AccountsPayable(template = "Debt", number = 210, type = Liability) 
account UnearnedRevenues(template = "Debt", number = 230, type = Liability)
  
account IntercompanyDebts(template = "Debt", number = 300, type = AssetOrLiability) 
account Loans(template = "Debt", number = 310, type = AssetOrLiability) 
account CurrentAccounts(template = "Cash", number = 320, type = AssetOrLiability) 
account BadDebts(template = "Counterparty", number = 670, type = Expense)

entity CurrentAccount extends FinanceAccount {
  background = "#d68400"
  func ledgerAccount: LedgerAccount = CurrentAccounts
  func title = "$legalEntity: $(name.alt(counterparty))"
  ref field counterparty: Actor
  ref field name: String?
  view form = nav{grid{
    legalEntity
    counterparty
    name
    currency
    balance
  }}
}

report Debt {
  background = "#d68400"
  field moneyOnly: Bool = true
  field debtType: LedgerAccountType? {from = [LedgerAccountType.Asset, LedgerAccountType.Liability]}
  field legalEntity: LegalEntity? {
    default = LegalEntity.ours.onlyOne
    from = LegalEntity.ours
  }
  field counterparty: LegalEntity?
  field currency: Currency?
  func baseCurrency = currency.or(legalEntity?.getCurrency).alt(Currency.our)
  field date: Date?
    
  view list = LDebt.at(date)
    .filter(
         balance
      && (!moneyOnly || (account != UnearnedRevenues && account != PrepaidExpenses))
      && legalEntity ==? this.legalEntity 
      && currency ==? this.currency 
      && account?.type ==? this.debtType
      && counterparty ==? this.counterparty
    )
    .map{i =>
      let baseAmount <- i.balance.to[Money[baseCurrency]](this.date.alt(Date.now))
      let currency = i.currency
      let origins = i.origins.map(OriginAmount(origin = origin, dueDate = origin?.as[DebtOrigin]?.dueDate, amount = amount.as[Money[currency]]))
      (i.counterparty, i.account, amount = i.balance, baseAmount, 
         dueDate = origins*.dueDate.min, 
         origins = if (origins.all(!origin)) [] else origins
      )
    }
    .groupBy(counterparty).subtotal(amount = baseAmount.sum, dueDate = dueDate.min) 
    .total(amount = amount.sum, dueDate = dueDate.min)
   >> nav {
      total {
        row {label("Total"), dueDate, amount}
        subtotal {
          row{counterparty, dueDate, amount}
          subtotal {
            row (fontSize = 1) {account, dueDate,  amount}
            table (action = origin?.form?.open) {
              origin?.title >> field(width = 0.5, label = "") 
              dueDate >> field(width = 0.3)
              amount >> field(width = 0.3)
            }
          }
        }
      }
   }
}
