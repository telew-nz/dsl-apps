
enum ChargeType {
  case Cash {background = "#b6e2c6"}
  case Account {background = "#dec4ee"}
}

entity CptAcc { 
  singular = "Customer Account"
  impl func title = "CAC${cpt.n} $cpt $currency"
  ref field legalEntity: OurLegalEntity =? onlyOne
  ref field cpt: LegalEntity by cptAccs {label = "Counterparty"}
  ref field currency: Currency = (try? cpt.getCurrency).alt(our)
  field terms: CptAccTerms by cptAccs
  field debitAllowance: Money[currency]? {
    canEditUnit
    label = "Customer Debit Allowance"
    //visible = counterparty.customer
  }
  field creditAllowance: Money[currency]? {
    canEditUnit
    label = "Vendor Credit Allowance"
    //visible = counterparty.vendor
  }
  
  impl event onSave = {
    if (created || updated(debitAllowance) || updated(creditAllowance) || updated(terms)) {
      DebtOrigin.all.filter(_.debtCounterparty == this.cpt).update(debtAllowance = 0)
      LMoneyDebt.current.filter(_.counterparty == this.cpt)*.touch
    }
  }
}


entity CptAccTerms {
  singular = "Customer Account Terms"
  
  impl field title: String
  field start: Date {
    default = Date.now.start(of = month) - 1_minute 
    label = "First statement date"
  }
  field stmUnit: DateUnit = month
  field stmEvery: Duration[stmUnit, 0] {
    canEditUnit
    default = 1_month
    label = "Statement every"
  }
  field dueUnit: DateUnit = day
  
  field dueIn: Duration[dueUnit, 0] {
    canEditUnit
    default = 20_day
    label = "Due in after the statement"
  }
  func dueDate(date: Date): Date = {
    period(date).end + dueIn
  }
  func period(date: Date): Period = {
    date.period(start, stmEvery)
  }
  
  func prevPeriod(date: Date): Period = {
    (date - stmEvery).period(start, stmEvery)
  }
  
  field cptAccs: [CptAcc]? read by terms {
    label = "Accounts"
  }
  
  impl view form = nav{grid {
    title
    start
    stmEvery
    dueIn
    
    cptAccs
  }}
//  object func default: Future[CptAccTerms?] = CptAccTerms.all.first.result
}
