extend trait Actor {
  view debtStatement {
    printable = true
    label = "Debt Statement"
    layout = nav{grid(labels = None){
      h1("Debt Statement")
      title
      debtReport(money = true)
    }}
  }
  func debt: Future[Money?] = debt(getCurrency)
  func debt(currency: Currency): Future[Money?] = {
    LDebt.current
      .filter(balance && counterparty == this)
      .map(balance.to[Money[currency]](Date.now))
      .agg(sum)
  }
  view debtReport(money: Bool) = LDebt.current
    .filter(balance  
       && money == account.money
       && counterparty == this)
    .flatMap(debt =>
       debt.origins.map(OriginAmount(origin = origin, dueDate = origin?.as[DebtOrigin]?.debtDueDate, amount = amount.as[Money[debt.currency]]))
    )
    .map{
      let baseAmount <- amount.to[Money[this.getCurrency]](Date.now)
      (origin, dueDate = dueDate, debtOverdue, amount, baseAmount)
    }
    .total(amount = baseAmount.sum)
  
    >> total {
      row(fontSize = 1) {label("Total"), space, space, amount}
      table (action = origin?.form?.open) {
        origin?.title >> field(width = 0.5, label = "") 
        debtOverdue >> field(label = "Overdue", width = 0.15)
        dueDate
        amount >> field(width = 0.3)
      }
    }
}