enum CashFlowType(isIncome: Bool) { 
  case CashProvided{background = "#dea" color = "black"}
  case CashUsed{background = "#fcc" color = "black"}
  case CashUsedOrProvided{background = "#ed9" color = "black" label = "Cash Used or Provided"}
  case Error {background = "#fb786d" color = "#500"}
}

enum CashFlowCategory(type: CashFlowType) {
  case Sales(type = CashProvided) {background = "#dea"}
  case Purchases(type = CashUsed) {background = "#b6d7e2"}
  case GeneralExpenses(type = CashUsed) {background = "#fcc"}
  case Exchange(type = CashUsedOrProvided) {background = "#ed9", label = "Currency Exchange"}
  case Trading(type = CashUsedOrProvided) {background = "#ed9", label = "Currency Trading"}
  case Notes(type = CashUsedOrProvided) {background = "#ed9"}
  case Capital(type = CashUsedOrProvided) {background = "#dec4ee"}
  case Errors(type = Error) {background = "#fb786d" color = "#500"}
}

report CashFlow {
  field legalEntity: LegalEntity? = (LegalEntity.ours.onlyOne) {from = LegalEntity.ours}
  field from: Date = Date.now[Date[millisecond]].start(year)
  field to: Date = Date.now[Date[millisecond]].end(year)
  field currency: Currency?
  func baseCurrency = currency.or(legalEntity?.getCurrency).alt(Currency.our)
    
  view list = LCash.between(from, to)
    .filter(start.legalEntity ==? this.legalEntity && start.currency ==? this.currency)
    .map{i =>
      let start <- i.start.balance.to[Money[this.baseCurrency]](this.from)
      (start, i.items)
    }
    .total(start.sum).map((start, items*.items))
    .flatQuery{i =>
      i.items.query.filter(!isCorrection && (cashFlowCategory != Exchange || this.currency) )
       .map{j => 
         let amount <- j.baseAmount.to[Money[this.baseCurrency]](j.date)
         (category = j.cashFlowCategory, amount)
        }
       .union {
         if (this.currency) null else LBasic.between(from, to).filter(start.account == ExchangeGainOrLoss)
           *.items
           .map((category = CashFlowCategory.Exchange, -amount))
       }
       .union{
          let start: Money[baseCurrency]? <- LCurrencyTrading.at(this.from)
            .map(balance.to[Money[baseCurrency]](this.from))
            .agg{sum.as[Money[baseCurrency]]
            }.result
          let end : Money[baseCurrency]? <- (LCurrencyTrading.at(this.to)
            .map(balance.to[Money[baseCurrency]](this.to))
            .agg{sum.as[Money[baseCurrency]]
            }.result)
          if (this.currency) null else [(category = CashFlowCategory.Trading, amount = start - end)]
        }
       .groupBy(category).agg(amount.sum)
       .sortBy(category) 
       .groupBy(category.type).subtotal(amount = amount.sum)
       .total(increase = amount.sum, start = i.start, end = i.start + amount.sum)
    }
  >> nav{
    total {
      group {
        row (position = Head) {label("Begining Cash Balance"), start}
        row {label("Increase or Decrease in Cash"), increase >> field(showPlus = true)}
        row {label("Ending Cash Balance"), end}
      }
      subtotal {
        row {type, amount >> field(showPlus = true)}
        table {
          category >> field(width = 0.5, background = ""), amount  >> field(showPlus = true, width = 0.3)
        }
      }
    }
  }
}


