extend trait LegalEntity {
  view debtStatement {
    printable = true
    label = "Debt Statement"
    layout = nav{grid(labels = None){
      h1("Debt Statement")
      title
      debtReport(money = true)
    }}
  }
  back func unpaidAmount(origin: DebtOrigin): Money? = {
     LMoneyDebt.current
      .filter(balance && counterparty == this)
      .flatMap(debtItems)
      .filter(o => o.origin == origin)
     *.amount.agg(sum)
      .result.get
  }
  view debtReport(money: Bool) = LDebt.current
    .filter(balance  
       && money == account.money
       && counterparty == this)
    .flatMap(debtItems)
    .map{
      let baseAmount <- amount.to[Money[this.getCurrency]](Date.now)
      (origin, dueDate = dueDate, debtOverdue, amount, baseAmount)
    }
    .total(amount = baseAmount.sum)
  
    >> total {
      row(fontSize = 1) {label("Total"), space, space, amount}
      table (action = origin?.form?.open) {
        origin?.title >> field(width = 0.35, label = "") 
        debtOverdue >> field(label = "Overdue", width = 0.15)
        dueDate >> field(width = 0.25)
        amount >> field(width = 0.25)
      }
    }
  compute debtBalance: DebtBalance = {
    let debt <- LMoneyDebt.current
      .filter(counterparty == this)
      .map(balance.to[Money[this.getCurrency]](now))
      .agg(sum)
    DebtBalance(currency = getCurrency, debt = debt, debitAllowance = customer?.debtAllowance, creditAllowance = -vendor?.debtAllowance)
  }
}



enum ChargeType {
  case Cash {background = "#b6e2c6"}
  case Account {background = "#dec4ee"}
}

extend entity Customer {
  field debtAllowance: Money[this.getCurrency]? {views = [] label = "Account Debt Allowance"}
  compute debtBalance {
    value = legalEntity.debtBalance
    views = []
  }
  extend view form = extend {
    debtAllowance
    legalEntity.debtReport(money = true) >> field(label = "Money Debt")
    button("Reconcilation") {
      DebtRecon(counterparty = legalEntity).list.open
    }
    legalEntity.debtReport(money = false) >> field(label = "Delivery Debt")
  }
  func calcChargeType: ChargeType = if (debtAllowance) Account else Cash
  ref compute chargeType: ChargeType {
    value = calcChargeType
    views = [] 
  }
}

extend entity Vendor {
  field debtAllowance: Money[this.getCurrency]? {views = [] label = "Account Debt Allowance"}
  compute debtBalance {
    value = legalEntity.debtBalance
    views = []
  }
  
  extend view form = extend {
    debtAllowance
    legalEntity.debtReport(money = true) >> field(label = "Money Debt")
    button("Reconcilation") {
      DebtRecon(counterparty = legalEntity).list.open
    }
    legalEntity.debtReport(money = false) >> field(label = "Delivery Debt")
  }
  func calcChargeType: ChargeType = if (debtAllowance) Account else Cash
  ref compute chargeType: ChargeType {
    value = calcChargeType
    views = [] 
  }
  
}
 