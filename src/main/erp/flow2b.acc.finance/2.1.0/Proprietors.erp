account Capital(number = 301, type = Equity, structureSpecific = true) {
  key field owner: LegalEntity
}

account AdditionalCapital(number = 310, type = Equity, structureSpecific = true) {
  key field owner: LegalEntity?
}

account Withdrawals(number = 371, type = Equity, closeWithPeriod = true, structureSpecific = true) {
  key field owner: LegalEntity
}

extend register LWithdrawals {
  register capitalClosing: LCapital? = if (isClosing) LCapital(journal = journal, owner = owner, trAmount = balance) else null
}

extend entity Person {
  func specificAccounts: [LedgerAccount] = [Capital, Withdrawals]
  func canCloseIncomeSummary = true
  func incomeSummaryClosing(journal: Journal, balance: Money[getCurrency]): [Ledger]? = {
    [LCapital(journal = journal, trAmount = -balance, owner = this)]
  }
}

inline entity SoleProprietor extends LegalStructure {
  field person: Person
  func canCloseIncomeSummary = true
  func specificAccounts: [LedgerAccount] = [Capital, Withdrawals]
  func incomeSummaryClosing(journal: Journal, balance: Money[currency]): [Ledger]? = {
    [LCapital(journal = journal, trAmount = -balance, owner = person)]
  }
}

inline entity Partnership extends LegalStructure {
  func specificAccounts: [LedgerAccount] = [Capital, AdditionalCapital, Withdrawals]
  func canCloseIncomeSummary = false
  //TODO:
  func incomeSummaryClosing(journal: Journal, balance: Money[currency]): [Ledger]? = {
    []
    //LCapital.at(journal.journalDate - 1_millisecond)
    //  .map(LCapital(journal = journal, owner = _.owner, trAmount = -balance))
      //.distribute(balance, by = _.balance)
      //.map(LCapital(journal = journal, owner = item.owner, trAmount = -value))
  }
}