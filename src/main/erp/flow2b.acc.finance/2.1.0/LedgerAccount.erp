analytic FinanceAccount(dataType = "FinanceAccount")
analytic Counterparty(dataType = "LegalEntity")
analytic Product(dataType = "IProduct")
analytic Owner(dataType = "LegalEntity")
analytic ExpenseType(dataType = "IExpenseType")

account Cash(number = 100, type = Asset) {
  func currency: Currency = financeAccount.currency
  key field financeAccount: FinanceAccount {label = "Account"}
  field cashFlowCategory: CashFlowCategory
}

account AccountsReceivable(number = 110, type = Asset) {
  key field currency: Currency
  key field counterparty: LegalEntity
}

account PrepaidExpenses(number = 130, type = Asset) {
  key field currency: Currency
  key field counterparty: LegalEntity
}

account NotesReceivable(number = 150, type = Asset) {
  key field currency: Currency
  key field counterparty: LegalEntity
}

account AccountsPayable(number = 210, type = Liability) {
  key field currency: Currency
  key field counterparty: LegalEntity
}

account UnearnedRevenues(number = 230, type = Liability) {
  key field currency: Currency
  key field counterparty: LegalEntity
}

extend register LUnearnedRevenue {
  func cashFlowAccount: LedgerAccount = Sales
}

account NotesPayable(number = 250, type = Liability) {
  key field currency: Currency
  key field counterparty: LegalEntity
}

account Sales(number = 400, type = Revenue) {
  key field counterparty: LegalEntity?
  key field product: IProduct?
  func unit: ProductUnit = product?.unit.alt(Item)
  field qty: Qty[unit]? {label = "Quantity", visible = product}
}

extend register LSales {
  field qtyBalance: Qty[unit] = if (isClosing) 0 else prev?.qty + qty
}

account GeneralExpenses(number = 500, type = Expense) {
  key field expenseType: IExpenseType
}

