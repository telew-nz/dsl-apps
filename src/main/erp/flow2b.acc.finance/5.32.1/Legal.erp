trait LegalStructure extends InlineEntity {
  field company: OurCompany by legalStructure
  func currency = company.getCurrency
  func specificAccounts: [LedgerAccount]? = []
  func canCloseIncomeSummary: Bool
  func incomeSummaryClosing(journal: Journal, balance: Money[currency]): [Ledger]?
  func title = company.title
  func gstBasis: GstBasis?
}

enum GstBasis {
  case Payment
  case Invoice
}
 
extend trait LegalEntity {
  func legalName: String = legalInfo.name.alt(title)
  func legalInfo: LegalInfo
  field altNames: [String]? {
    label = "Alternative Names"
    singular = "Name"
  }
  func isName(name: String?): Bool = {
    name.trim && (title =%= name || legalInfo.name =%= name || altNames.exists(_ =%= name))
  }
  func addName(name: String?): Void = if (let name = name.trim) {
    if (!isName(name)) {
      altNames = altNames + [name]
      save
    }
  }
  back object func filterByName(name: String?): [LegalEntity]? = if (let name = name.trim) {
    LegalEntity.all.filter(isName(name)).result.get
  }
  view gstView = group {
  }
  view gstCustomerView = group {
  }
}
  
class LegalInfo {
  field name: String? {label = "Legal Name"}
  impl view form = grid{
    name 
  }
}

