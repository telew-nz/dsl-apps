analytic Counterparty(dataType = "LegalEntity")


acctemplate Counterparty {
  key field counterparty: LegalEntity?
}
acctemplate InterDebts(type = singleAccount) {
  key field currency: Currency
  key field counterparty: LegalEntity?
}

account InterDebts(
  template = "InterDebts", money = true,
  debit = acc(Asset, 80, "IntercompanyDebtsReceivable"), 
  credit = acc(Liability, 80, "IntercompanyDebtsPayable")
) 

//account AllowanceForDoubtfulDebts(template = "Debt", number = 190, type = Asset, money = true, label = "Allowance for Doubtful Debts")
  

//account Loans(template = "Debt", number = 310, type = AssetOrLiability, money = true) 
account CurrentAccounts(template = "Cash", credit = acc(Equity, 20)) 
account BadDebts(template = "Counterparty", debit = acc(Expense, 70))

class DebtItem(origin: Journal, amount: Money, dueDate: Date?) {
  compute overdueState: OverdueState = if (debtOverdue > 0) Overdue else NoOverdue
  compute debtOverdue: Duration[day]? {
    value = if (let d = dueDate) (Date.now - d).days.floor(0)
  }
}

trait LDebt extends Ledger {
  func origin: Journal = journal  
  func counterparty: LegalEntity
  func debtItems: [DebtItem]?
}

