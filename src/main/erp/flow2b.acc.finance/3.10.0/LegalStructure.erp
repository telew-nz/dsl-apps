account Withdrawals(template = "Counterparty", number = 471, type = Equity, closeWithPeriod = true, structureSpecific = true) 

inline trait LegalStructure {
  field company: Company by legalStructure
  func currency = company.getCurrency
  func specificAccounts: [LedgerAccount]
  func canCloseIncomeSummary: Bool
  func incomeSummaryClosing(journal: Journal, balance: Money[currency]): [Ledger]?
  func title = company.title
  func incomeTaxBasis: IncomeTaxBasis?
  func gstBasis: GstBasis?
}

enum IncomeTaxBasis {
  case Cash
  case Accrual
}

enum GstBasis {
  case Payment
  case Invoice
}

enum GstStatus {
  case Registered
  case NotRegistered
}

extend trait LegalEntity {
  override ref compute hasGst: Bool {
    value = legalInfo.hasGst
    views = []
  }
  func legalInfo: LegalInfo
}
  
class LegalInfo {
  field name: String? {label = "Legal Name"}
  field address: Address? 
  field gstStatus: GstStatus?
  func hasGst = gstStatus == Registered
  view form = grid{
    name 
    address
  }
}

extend entity Company {
  field legalInfo: LegalInfo
  field legalStructure: LegalStructure? inline by company {
    visible = isOur
    isValid = !isOur || legalStructure
  }
  
  func forceLegalStructure: LegalStructure = legalStructure.alt(throw "Set legal structure for $(this)")
  func specificAccounts: [LedgerAccount] = forceLegalStructure.specificAccounts
  func canCloseIncomeSummary: Bool = legalStructure?.canCloseIncomeSummary.alt(false)
  func incomeSummaryClosing(journal: Journal, balance: Money[getCurrency]): [Ledger]? = {
    forceLegalStructure.incomeSummaryClosing(journal, balance)
  }
}

extend entity Person {
  func legalInfo: LegalInfo = soleTrader.alt(LegalInfo())
  field soleTrader: LegalInfo?
}

