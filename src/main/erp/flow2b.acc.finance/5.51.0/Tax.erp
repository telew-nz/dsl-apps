analytic Tax(dataType = "Tax")

acctemplate Tax(type = singleAccount) {
  impl key field currency: Currency
  key field tax: Tax
  field trType: TaxTrType
  field rate: Percent[2]??
  field taxedAmount: Money[currency]? 
}

enum TaxTrType {
  case Accrual    //Debt from/to authority
  case Adjustment //Adjustment to previous reports
  case Payment    //Payment from/to authority
  case GstOnImport = "GST on Import"
}

extend register LTax {
//  func origin: DebtOrigin = journal.as[DebtOrigin]!
  stored compute baseTaxedAmount: Money[legalEntity.getCurrency]? <- taxedAmount.to[Money[legalEntity.getCurrency]](date)
  
  func toTaxedAmount = TaxedAmount(rate = rate, trType = trType, 
     tax = amount, baseTax = baseAmount, taxedAmount = taxedAmount, baseTaxedAmount = baseTaxedAmount)
  
  stored compute taxedAmountBalance: Money[currency]? = prev?.taxedAmountBalance + taxedAmount
  
  func isInstantPayment: Bool = if (let o = journal.as[DebtOrigin]) o.isInstant else true
  func isTaxPayment = trType == Payment
  func isAdjustment = trType == Adjustment
  
  override func makeContra: Void = {
    super.makeContra
    taxedAmount = -taxedAmount
  }
}


enum Tax (trTypes: [TaxTrType]) {
  case IncomeTax(trTypes = [Accrual, Adjustment, Payment])
  case Gst(trTypes = [Accrual, Adjustment, Payment, GstOnImport]) = "GST"
  case ProvisionalTax(trTypes = [Accrual, Adjustment, Payment])
  case PayrollTax(trTypes = [Accrual, Adjustment, Payment])
  case WithholdingTax(trTypes = [Accrual, Adjustment, Payment])
  
  back func agg(le: OurLegalEntity, period: Period, currency: Currency, filter: LTax => Bool): TaxedAmount = {
    let r = LTax
      .between(period.start, period.end)*.items
      .filter(i => i.tax == this && i.legalEntity == le && i.currency == currency && filter(i))
      .agg(taxedAmount.sum, amount.sum).result.get
    TaxedAmount(tax = r.amount, taxedAmount = r.taxedAmount) 
  }
  back func balance(le: OurLegalEntity, date: Date, currency: Currency): TaxedAmount = {
    let b = LTax
      .at(date)
      .find(i => i.tax == this && i.legalEntity == le && i.currency == currency)
      .result.get
    TaxedAmount(tax = b?.balance, taxedAmount = b?.taxedAmountBalance)
  }
}

class TaxedAmount {
  field rate: Percent[2]??
  field trType: TaxTrType?
  field tax: Money?
  field baseTax: Money? = tax
  field taxedAmount: Money?
  field baseTaxedAmount: Money? = taxedAmount
  func fullAmount = tax + taxedAmount
  func baseFullAmount = baseTax + baseTaxedAmount
  
  func isAdjustment = trType == Adjustment
  func add(o: TaxedAmount) = TaxedAmount(rate = rate, trType = trType,
    tax = tax + o.tax, baseTax = baseTax + o.baseTax, 
    taxedAmount = taxedAmount + o.taxedAmount, baseTaxedAmount = baseTaxedAmount + o.baseTaxedAmount)
  func highPrecision: TaxedAmount = TaxedAmount(
    rate = rate, trType = trType,
    tax = tax.as[Money[16]], baseTax = baseTax.as[Money[16]], 
    taxedAmount = taxedAmount.as[Money[16]], baseTaxedAmount = baseTaxedAmount.as[Money[16]]
  )
  func round(tax: LTax) = round(tax.currency, tax.legalEntity.getCurrency)
  func round(currency: Currency, baseCurrency: Currency) = TaxedAmount(
    rate = rate, trType = trType,
    tax = tax.as[Money[currency]], baseTax = baseTax.as[Money[baseCurrency]], 
    taxedAmount = taxedAmount.as[Money[currency]], baseTaxedAmount = baseTaxedAmount.as[Money[baseCurrency]]
  )
  func mul(k: Number?): TaxedAmount = {
    if (k == 1) this
    else {
      let ta = taxedAmount*k
      let bta = baseTaxedAmount*k
      TaxedAmount(
        rate = rate, trType = trType,
        tax = if (let rate) ta*rate, baseTax = if (let rate) bta*rate, 
        taxedAmount = ta, baseTaxedAmount = bta)
    }
  }
  
  impl func toString = "TaxedAmount($trType $rate * $taxedAmount = $tax)"
}