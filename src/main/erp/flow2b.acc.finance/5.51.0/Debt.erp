analytic Counterparty(dataType = "LegalEntity")
extend trait Ledger {
  impl func canRead = aCounterparty?.isTheir
}

acctemplate Counterparty {
  key field counterparty: LegalEntity?
}
acctemplate InterDebts(type = singleAccount) {
  impl key field currency: Currency
  key field counterparty: LegalEntity?
}

class DebtItem(origin: Journal, amount: Money, dueDate: Date?) {
  compute overdueState: OverdueState = if (debtOverdue > 0) Overdue else NoOverdue
  compute debtOverdue: Duration[day]? {
    value = if (let d = dueDate) (Date.now - d).days.round(floor, 0)
  }
}

trait LDebt extends Ledger {
  func origin: Journal = journal  
  func counterparty: LegalEntity
  func debtItems: [DebtItem]?
}

/*report DebtRecon {
  singular = "Debt Reconciliation"
  field counterparty: LegalEntity
  impl view list = LMoneyDebt.all
  .filter(d => d.counterparty == this.counterparty && (d.amount < 0 || d.origin.unrecon || d.origin.debtAllowance))
  .flatMap {d =>
    if (d.amount < 0) {
      (if (let ua = d.origin.unreconAmount) [
        DebtReconRow(legalEntity = d.legalEntity, date = d.date, credit = d.origin, currency = d.currency, amount = -ua, debitMsg = "Unreconciled")
      ]) +
      d.origin.debtOriginAmounts.map{ o =>
        DebtReconRow(legalEntity = d.legalEntity, date = o.date, credit = d.origin, currency = d.currency amount = o.amount, debit = o.origin, debitMsg = if (!o.origin) "Account Debt Allowance")
      }
    } else {
      (if (let ua = d.origin.unreconAmount) [
        DebtReconRow(legalEntity = d.legalEntity, date = d.date, creditMsg = "Unreconciled", currency = d.currency, amount = ua, debit = d.origin)
      ]) + if (let ua = d.origin.debtAllowance) [
        DebtReconRow(legalEntity = d.legalEntity, date = d.date, creditMsg = "Account Debt Allowance", currency = d.currency, amount = ua, debit = d.origin)
      ]
    }
  }.sortBy(date.desc) >> nav{table {

      legalEntity 
      group(label = "Debit"){
        y(margin = None, width = 0.3, label = "Document"){debit >> field(title = title) debitMsg} 
        debitAmount >> field(label = "Amount", color = if (amount != debitAmount) "#dc7300" else "black")
      } 
      amount >> field(align = Center, color = if (amount != debitAmount && amount != creditAmount) "red" else "black")

      group(label = "Credit"){
        creditAmount >> field(label = "Amount", align = Left, color = if (amount != creditAmount) "#dc7300" else "black")
        y(margin = None, width = 0.3, label = "Document"){credit >> field(title = title) creditMsg} 
      } 
      date
    }
  }}
}

class DebtReconRow {
  field legalEntity: OurLegalEntity
  field date: Date
  field debit: DebtOrigin?
  field debitAmount: Money? = debit?.debtAmount
  field debitMsg: String?
  field credit: DebtOrigin?
  field creditAmount: Money? = -credit?.debtAmount
  field creditMsg: String?
  field currency: Currency
  field amount: Money[currency]?
}*/