analytic Counterparty(dataType = "LegalEntity")
  
acctemplate Debt {
  key field currency: Currency
  key field counterparty: LegalEntity?
  field origin: Journal?
  field isSetoff: Bool
}

acctemplate Counterparty {
  key field counterparty: LegalEntity?
}

class OriginAmount {
  field origin: Journal?
  field dueDate: Date?
  field amount: Money?
  compute overdueState: OverdueState = if (debtOverdue > 0) Overdue else NoOverdue
  compute debtOverdue: Duration[day]? {
    value = if (let d = dueDate) (Date.now - d).days.floor(0)
  }
}

enum OverdueState {
  case NoOverdue {background = "#dea"}
  case Overdue {background = "#e99"}
}

trait DebtOrigin extends Journal {
  func debtDueDate: Date?
  func isPurchase: Bool = false
}

extend register LDebt {
  stored compute origins: [OriginAmount]? = {
    if (let p = prev?.origins.find(origin == this.origin)?.amount.as[Money[currency]]) {
      if (let rest = p + amount) prev?.origins.filter(origin != this.origin) + OriginAmount(origin = origin, amount = rest)
      else prev?.origins.filter(origin != this.origin)
    } else if (let a = amount) prev?.origins + OriginAmount(origin = origin, amount = a)
    else prev?.origins
  }
}


account AccountsReceivable(template = "Debt", number = 110, type = Asset, money = true)
account PrepaidExpenses(template = "Debt", number = 130, type = Asset)
account AllowanceForDoubtfulDebts(template = "Debt", number = 190, type = Asset, money = true, label = "Allowance for Doubtful Debts")
  
account AccountsPayable(template = "Debt", number = 210, type = Liability, money = true) 
account UnearnedRevenues(template = "Debt", number = 230, type = Liability)
  
account IntercompanyDebts(template = "Debt", number = 300, type = AssetOrLiability, money = true) 
account Loans(template = "Debt", number = 310, type = AssetOrLiability, money = true) 
account CurrentAccounts(template = "Cash", number = 320, type = AssetOrLiability) 
account BadDebts(template = "Counterparty", number = 670, type = Expense)



