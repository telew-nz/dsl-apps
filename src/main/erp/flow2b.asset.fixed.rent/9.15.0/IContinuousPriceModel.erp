trait IContinuousPriceModel extends IPriceModel {
  impl func isSalesModel = false
  impl func isRentModel = true
  func schedule: ISchedule?
  
  //func overnightCharge: UQty[DurUnit]?
  func currency: Currency
  func pricesIncludingGst: Bool
  func durations: [RentDuration]
  func rounding: Rounding?
  
  
  func dispatchRoundMode: RoundMode
  func precision: UDuration
  func returnRoundMode: RoundMode
  

  impl func allDurUnits: [DurUnit]? = durations*.rentUnit.toSet
   
  /*impl func nightsCount(deliveryDate: Date, returnDate: Date): UQty[Night]? = {
    if (hasNight) {
      (returnDate.date - deliveryDate.date).days.as[UQty[Night]]
    }
  }*/
  
  
  func duration(unit: DurUnit): UDuration? = {
    durations.find(u => u.rentUnit == unit)?.duration
  }
  
  /*impl func rentPeriods(date: Date, schedule: ISchedule, retSchedule: ISchedule, qty: UQty?): [Period]?  = {  
    if (
      let d = toDuration(qty)
    ) {
      nextRentPeriods(date, schedule, retSchedule, d).first(300).filter(!_.isEmpty)
    }
  }
  
  func nextRentPeriods(date: Date, schedule: ISchedule, retSchedule: ISchedule, d: UDuration): [Period]?  = {  
    if (
      let start = schedule.nextWorkingDate(date)
      let end0 = this.schedule.alt(retSchedule).addWorkingTime(start, d)
      let end1 = if (this.schedule) retSchedule.prevWorkingDate(end0) else end0
    ) {
      Period(start = date, end = end1.max(start)) + nextRentPeriods(if (end1 > date) end1 else date + d, schedule, retSchedule, d)
    }
  }*/
}

class RentDuration {
  field rentUnit: DurUnit = default
  field unit: DateUnit = day
  field duration: UDuration[unit] {
    canEditUnit
    default = 1
  }
  field increment: UNumber = 1
  field maxDuration: UDuration[unit]? 
  field priceMultiplier: UPercent[2]?
  impl view form = grid(labels = Top) {
    row {
      rentUnit >> field(compact = true, label = "") 
      duration >> field(align = Right) 
      increment >> field(align = Right) 
      maxDuration >> field(align = Right)
      priceMultiplier >> field(align = Right)
    }
  }
}

interface IContinuousProductPrice extends IPriceRent {
  impl func model: IContinuousPriceModel
  override func currency = model.currency
  //func overnightCharge: UMoney[currency]? = if (let oc = model.overnightCharge) durationPrice(oc)
  func prices: [DurPrice]?
  func allPrices: [DurPrice]? = {
    let ps = prices
    
    if (let pms = model.durations.filter(d => d.priceMultiplier && !ps.exists(_.unit == d.rentUnit)) 
        let mainPrice = ps.find(_.unit == model.durations.first.rentUnit)
    ) {
      ps + pms.map(d => DurPrice(unit = d.rentUnit, dur = 1, price = mainPrice.price.mul(d.priceMultiplier).round(model.rounding)))
    } else {
      ps
    }
  }
  
  func gstRate: UPercent[2]?
  
  impl func rentDurUnits: [DurUnit]? = allPrices*.unit.toSet
  
  impl func rentDur(dispatch: ScheduleDate, ret: ScheduleDate, unit: DurUnit?, forceUnit: Bool): UQty = {
    toRentDuration(
      model.schedule.alt(ret.schedule)
        .workingTime(Period(
          start = roundStart(dispatch.date), 
          end = roundEndDur(ret.date)
        )), unit, forceUnit)
  }
  func toRentDuration(dd: UDuration?, unit: DurUnit?, forceUnit: Bool): UQty  = {
    let rdus = rentDurUnits
    let durations = model.durations.filter(d => rdus.contains(d.rentUnit)).alt(model.durations)
    let u = (if (forceUnit) durations.find(d => d.rentUnit == unit))
      .or(durations.sortBy(duration.desc).find(_.duration <= dd && _.maxDuration ?>= dd))
      .or(durations.sortBy(duration).find(_.duration >= dd))
      .alt(durations.first)
    let r = (dd.to[UDuration[u.duration.unit!]].as[UQty[8]]/u.duration).roundInc(ceil, u.increment).as[UQty[u.rentUnit]]
    let rdur = u.duration*r
    if (rdur != dd) {
      toRentDuration(rdur, unit, false)
    } else {
      r.alt(1.as[UQty[durations.sortBy(duration).first.rentUnit]])
    }
  }
 
  
  
  protected func durationPrice(duration: UQty?): SalesPrice = {
    guard (let dur = toDuration(duration)) else return SalesPrice()
    
    let ps = allPrices
      .map(price, duration = toDuration(_.dur))
      .sortBy(_.duration.desc)
    if (let pp = ps.find(dur >= _.duration).or(ps.last), let duration = pp.duration) {
      pp.price.mul(dur.as[UDec[8]]/duration)
    } else {
      SalesPrice()
    }
  }
  impl func amount(request: PriceRequest, item: PriceOrderItem): Future[SalesPrice] = {
    let am = durationPrice(item.rentPeriod!.dur)
    let a <- am.mul(item.qty).to(request.currency, now)
//    let nm = overnightCharge*nightsCount*itemsQty
    //let n <- nm.to[UMoney[currency]](now)
    a.convertGst(gstRate, model.pricesIncludingGst, request.inclGst)
  }
  impl back func rentPrices(request: PriceRequest): Future[[DurPrice]?] = {
    allPrices.map{p => 
      let p0 <- p.price.to(request.currency, now)
      p.copy(price = p0) 
        .convertGst(gstRate, model.pricesIncludingGst, request.inclGst)
    }.allCompleted      
  }
  
  func toDuration(qty: UQty?): UDuration? = {
    if (qty) model.duration(qty.unit!.as[DurUnit]!)*qty
  }

  func roundStart(date: Date): Date = {
    date.roundInc(model.dispatchRoundMode, model.precision)
  }
  func roundStart(date: Date?): Date? = if (let date) roundStart(date)
  func roundEnd(date: Date): Date = {
    if (model.precision >= 1_day) {
      date.roundInc(model.returnRoundMode, model.precision) - 1_day
    } else {
      date.roundInc(model.returnRoundMode, model.precision)
    }
  }
  func roundEndDur(date: Date): Date = {
    if (model.precision >= 1_day) {
      (date + 1_minute).roundInc(model.returnRoundMode, model.precision)
    } else {
      date.roundInc(model.returnRoundMode, model.precision)
    }
  }
  impl func rentPeriod(dispatch: ScheduleDate, retSchedule: ISchedule, qty: UQty?): Period = {  
    (if (
      let d = toDuration(qty)
      let start = roundStart(model.schedule.alt(dispatch.schedule).nextWorkingDate(dispatch.date))
      let end0 = model.schedule.alt(retSchedule).addWorkingTime(start, d)
      let end1 = if (model.schedule) retSchedule.prevWorkingDate(end0) else end0
    ) {
      Period(start = start, end = roundEnd(end1.max(start)))
    }).alt(Period(start = roundStart(dispatch.date), end = roundEnd(dispatch.date)))
  }
  
}
