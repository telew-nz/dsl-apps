trait ISlottedPriceModel extends IPriceModel {
  impl func isSalesModel = false
  impl func isRentModel = true
  
  func period: Period
  compute cycle: UDuration[day] = period.duration!.to[UDuration[day]]
  func durations: [DurationSlot]
  func slots: [RentSlot]
  func currency: Currency
  func pricesIncludingGst: Bool
  override ref compute rentDurationUnits: [DurUnit]? = durations*.rentUnit.toSet
  compute night: RentSlot? = slots.find(isNight)
  impl func hasNight: Bool = night
  impl func hasNightCharge: Bool = night?.charge
  impl func nightsCount(deliveryDate: Date, returnDate: Date): UQty[Night]? = {
    if (night) {
      slots(deliveryDate, returnDate).filter(isNight).count.as[UQty[Night]]
    }
  }
  func validateSlots: String? = {
    if (slots.filter(isNight).count > 1) "Should not contain more than one night"
    else if (!slots.filter(!isNight)) "Cannot not contain only a night slot"
    else if (slots.exists(!this.period.contains(period.start))) "Slots periods should be inside the period"
  }
   
  override func rentDuration(delivery: RentDeliveryDesc, assetReturn: RentDeliveryDesc, unit: DurUnit?): UQty[DurUnit]? = {
    if (
      let sc = slots(delivery.dispatchDate, assetReturn.deliveryDate)
        .filter(!isNight)
        .map(this.toSlotsCount(charge))
        .sum
    ) {
      let u = durations.find(d => d.rentUnit == unit)
        .or(durations.sortBy(slotsCount.desc).find(_.slotsCount <= sc))
        .alt(durations.first)
      sc.as[UQty[u.rentUnit]]/u.slotsCount
    } else {
      0.as[UQty[unit.alt(durations.first.rentUnit)]]
    }
  }
  private func delta(date: Date): UDuration[day]? = {
    (date.sub(period.start).days/cycle).round(floor, 0).positive*cycle
  }
  private func slot(date: Date): RentSlot? = {
    let delta: Duration[day]? = delta(date)
    slots.sortBy(period.start.desc).mapOpt{s => 
      let p = s.period.add(delta)
      if (p.contains(date)) s.copy(period = p)
    }.first
  }
  private func slotOrNext(date: Date): RentSlot = {
    let delta: UDuration[day]? = delta(date)
    let slot = slots.sortBy(period.start.desc).mapOpt{s => 
      let p = s.period.add(delta)
      if (p.contains(date)) s.copy(period = p)
    }.first.or {
      slots.sortBy(period.start).mapOpt{s => 
        let p = s.period.add(delta)
        if (p.start > date) s.copy(period = p)
      }.first
    }.alt {
      let s = slots.sortBy(period.start).first
      s.copy(period = s.period.add(delta + cycle))
    }
  }
  
  private func slots(start: Date, end: Date): [RentSlot]? = if (start < end) {
    let slot = slotOrNext(start)
    if (slot.period.start < end) slot + slots(slot.period.end + 1_second, end)
  }
  
  override func rentReturnDate(delivery: RentDeliveryDesc, returnSchedule: ISchedule, qty: UQty[DurUnit]?): Date = {
    adjustToSchedule(
      delivery, returnSchedule, qty, 
      moveDate(
        delivery, 
        date = delivery.dispatchDate, 
        slotsCount = toSlotsCount(qty), 
        first = true)
    ).max(delivery.dispatchDate)
  }
  private func moveDate(delivery: RentDeliveryDesc, date: Date, slotsCount: UQty[Slot]?, first: Bool): Date = {
    let slot = slotOrNext(date)
    let sc = toSlotsCount(slot.charge)
    if (slotsCount >= sc || (slot.isNight && (slotsCount > 0 || !chargeOvernight(delivery) || first)) ) {
      moveDate(delivery, slot.period.end + 1_second, if (slot.isNight) slotsCount else (slotsCount - sc).positive, first = false)
    } else if (slotsCount > 0 && sc) {
      (slot.period.start.max(date) + slot.period.duration*slotsCount/sc!).as[Date]
    } else {
      date
    }
  }
  
  private func adjustToSchedule(delivery: RentDeliveryDesc, returnSchedule: ISchedule, qty: UQty[DurUnit]?, date: Date): Date = {
    let d = date.as[Date]
    if (let n = slot(d).filter(isNight)?.period) {
      if (qty && chargeOvernight(delivery)) {
        returnSchedule.workingOrPrevPeriod(n.start.as[Date])?.end.alt(d)
      } else if (returnSchedule.isWorkingDate(n.end.as[Date])) { 
        n.end
      } else {
        returnSchedule.prevPeriod(n.end.as[Date])?.end.alt(d)
      }
    } else if (returnSchedule.isWorkingDate(d)) {
      d
    } else {
      returnSchedule.prevPeriod(d)?.end.alt(d)
    }
  }
  func toSlotsCount(qty: UQty[DurUnit]?): UQty[Slot]? = {
    if (qty) slotsCount(qty.unit!.as[DurUnit]!)*qty
  }
  func slotsCount(unit: DurUnit): UQty[Slot]? = {
    durations.find(u => u.rentUnit == unit)?.slotsCount
  }
}

class RentSlot {
  field period: Period {label = "Period"}
  field unit: DurUnit = default
  field charge: UQty[unit]? {
    canEditUnit
    default = 1
  }
  field isNight: Bool
  impl view form = grid(labels = None) {
    row {period >> field(frame = false, width = 0.6) charge >> field(width = 0.2) isNight >> field(width = 0.2) }
  }
  
  impl func toString = "$period => $charge $(if (isNight) 'Night')"
}

class DurationSlot {
  field rentUnit: DurUnit = default
  field slotsCount: UQty[Slot] = 1
  impl view form = grid(labels = None) {
    row {rentUnit >> field(compact = true) slotsCount >> field(align = Right)}
  }
}

interface ISlottedProductPrice extends IPrice {
  impl func model: ISlottedPriceModel
  override func currency = model.currency
  func overnightCharge: UMoney[currency]? = if (let oc = model.night?.charge) durationPrice(oc)
  func prices: [DurPrice]?
  func gstRate: UPercent[2]?
  
  protected func durationPrice(duration: UQty[DurUnit]?): UMoney[currency]? = {
    if (let sc = model.toSlotsCount(duration)) {
      let ps = prices.map(price, slotsCount = model.toSlotsCount(_.dur)).sortBy(slotsCount.desc)
      if (let pp = ps.find(sc >= slotsCount).or(ps.last), let slotsCount = pp.slotsCount) {
        pp.price*sc/slotsCount
      }
    }
  }
  
  override func rentAmount(currency: Currency, customer: ICustomer?, itemsQty: UQty, dur: UQty[DurUnit]?, nightsCount: UQty[Night]?, inclGst: Bool): Future[RentAmount] = {
    let am =  durationPrice(dur)
    let a <- (am*itemsQty).to[UMoney[currency]](now)
    let nm = overnightCharge*nightsCount*itemsQty
    let n <- nm.to[UMoney[currency]](now)
    RentAmount(dayAmount = a, nightAmount = n)
      .convertGst(gstRate, model.pricesIncludingGst, inclGst)
  }

  impl func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    throw "Sales prices are not supported"
    
  }
  impl back func rentPrices(currency: Currency, inclGst: Bool): Future[[DurPrice]?] = {
    prices.map{p => 
      let p0 <- p.price.to[UMoney[currency]](now)
      DurPrice(p, price = p0) 
        .convertGst(gstRate, model.pricesIncludingGst, inclGst)
    }.allCompleted      
  }
}
