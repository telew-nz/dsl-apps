entity SalesAssetReturn extends AssetReturn with IIncomingDelivery {
  background = "#2e8e67"
     
  field primary: Bool
  func deliverySource: Store? = null
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
    
  impl func orders = salesOrders
  field salesOrders: [SalesOrder] by assetReturns {
    available(Inline).for(Inline)
  }
  impl func deliveryDst = destination 
  impl func stockTypeDst = Inventory
  impl func multiupdate = salesOrders
  impl func canBeDeliveredInstantly(store: IStore): Bool = false
  impl func entityNumbers = [number, trackingNumber]
  field destination: IStore {
    default =? (try? orders*.deliveries*.as[SalesDelivery].first?.source!).or(IStore.onlyOne)
  }
  field pickUpLocation: ILocation? {
    from = Query(supplier?.legalEntity).flatMap(deliveryLocations)
    visible = supplier
  }   
  impl func pathSrc = pickUpLocation
  impl func hasInTransit: Bool = pickUpLocation
  impl func deliverySupplier = supplier?.legalEntity
  impl func deliveryReceiver = order.legalEntity.legalEntity
  impl ref compute number: String {
    value = manualNumber.alt(if (primary) "SAR" + orders.first.nakedN else "SAR" + n)
    update = {manualNumber = new}
  }  
  ref compute supplier {
    value = order.orderCustomer
    label = "Customer"
  }
  impl func legalEntity = order.legalEntity
  impl func title = "$number $(try? supplier?.title)"
  impl func deliveryDateLabel = "Return Date"
  
  view returnHeader = grid(width = 1.2){
    statusesView
    row {pickUpLocation, destination, dispatchDate}
    row {space, space,  deliveryDate}
    freightView
    items >> list(editMode = AlwaysRead){form}    
  }
  impl view form = nav{grid(width = 1.2, labels = Top) {
    number
    salesOrders
    returnHeader }
    generalLedgerButton
  } 
  impl object view list = SalesAssetReturn.all >> nav{list(canAdd = false){grid(labels = None){
    row{number >> field(width = 0.2) deliveryDate >> field(visible = true, width = 0.3) supplier >> field(width = 0.25) destination  >> field(width = 0.25)}
    statusesView
    refItems
  }}}
  view statusesView = x {status} 
  
  impl view ref = x{status >> field(editMode = AlwaysEdit) title deliveryDate >> field(visible = true)}
  impl view dash = y {
    deliveryDate >> field(visible = true)
    x{status >> field(editMode = AlwaysEdit) title}
    refItems
  }  
  impl event onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    if (salesOrders.all(canceled)) status = Canceled
    salesOrders*.touch
    1
  }
  
  override func calcRefItems = {
    RefProductItems.create(items*.as[IDeliveryProductItem].map(RefProductQty(product = product, qty = qty)))
  }
}