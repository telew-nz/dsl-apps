inline entity RentDeliveryItem extends IDlvProgressItem with FProductItems {
  override func storeRequired = true 
  impl func moveInStockType = Asset
  impl func moveOutStockType = Asset
  
  impl func needsRevision: Bool = updated(product) || updated(dur) || updated(durUnit) || updated(qty) || updated(chargeOvernight) || updated(nightsCount)
  impl func sameAsPrev(prev: IDlvProductItem): Bool = {
    let p = prev.as[RentDeliveryItem]!
    p.product == product && p.qty == qty && p.dur == dur && p.durUnit == durUnit && p.chargeOvernight == chargeOvernight && p.nightsCount == nightsCount
  }
  impl field product: ISubProduct {
    available(Ref).with(vendors, productItems, invoiceDesc)
    from = ISubProduct.all.filter(_.isTangible && _.rentStatus.forRent)
    init = {
      new.superProduct.status = NotForSale
      new.superProduct.rentStatus = ForRent
    }
    update = {
      let pm <- priceModel
      this.silentUpdate(durUnit, if (pm == PriceModelNone) default else pm.rentDurUnits.first.alt(default))
      this.silentUpdate(dur, this.dur.as[UQty[this.durUnit]])
      if (!delivery.items.exists(_ != this && _.is[IDlvProgressItem])) {
        this.silentUpdate(chargeOvernight, pm.hasNightCharge)
      }
      durUpdated()
    }
  }
  impl func unit: ProductUnit = Item
  field nightsCount: UQty[Night]? {
    label = "Nights"
    update = {
      if (let o = old, let oo = o, let s = sales) {
        let ona = s.sNightAmount
        s.sNightAmount = s.sNightAmount*(new.as[UDec[12]]/oo)
        s.sAmount = (s.sAmount - ona + s.sNightAmount).positive
      }
    }
  }
  impl field dur: UQty[durUnit]? {
    label = "Duration"
    canEditUnit = true
    default = delivery.items*.as[IDlvProgressItem].filter(_ != this)*.dur.first.alt(1.as[UQty[DurUnit.default]])
    update = {
      if (let o = old, let oo = o, let s = sales) {
        s.sAmount = (((s.sAmount - s.sNightAmount)*(new.as[UDec[12]]/oo)) + s.sNightAmount).positive
      }
      durUpdated()
    }
    validate = if (!nightsCount && !dur) "Duration cannot be empty"
  }
  impl field durUnit: DurUnit {
    default = dur.unit!.as[DurUnit]!
    update = {
      this.dur = this.dur.as[UQty[durUnit]]
    }
    from = priceModel.get.rentDurUnits
  }
  impl field chargeOvernight: Bool {
    default = delivery.items.filter(_ != this)*.as[RentDeliveryItem].first?.chargeOvernight
    update = {
      updateAmount()
    }
  }
    
  func durUpdated(): Future[Void] = {
    let _ <- delivery.updateRetDeliveryDate()
    let _ <- updateAmount()
    if (let o = sales?.order) o.updateBond()
  }
  
  override func updateAmount(): Future[Void] = {
    let pm <- priceModel
    silentUpdate(nightsCount, if (chargeOvernight) {
      pm.nightsCount(delivery.dlvInTransitDate, delivery.dlvCompleteDate)
    })
    let _ <- if (let s = sales) {
      let currency = s.order.currency
      let vendor = s.order.vendor
      let customer = try? s.order.customer!
      let pam <- productPrice
      let ra <- if (let pr = pam) {
        Query(pr).map{p =>
          p.rentAmount(currency, customer, qty, dur, if (chargeOvernight) nightsCount, s.order.pricesIncludingGst)
        }.result
      }

      if (let r = ra) {
        s.amountEditor = r.amount
        s.nightAmountEditor = r.nightAmount
      }
    }

    updateGst()
  }
  
  func durQty = if (let dur) dur*qty else qty
  impl field qty: UQty[ProductUnit.Item] {
    default = 1
    label = "Quantity"
    update = {
      let _ <- if (old) {
        if (let s = sales) s.sAmount = s.sAmount*(new.as[UDec[12]]/old!)
        if (let p = purchase) p.sAmount = p.sAmount*(new.as[UDec[12]]/old!)
        updateAmount()
      }
      if (let o = sales?.order) o.updateBond()
    }
  }
  
  impl field sales: SalesRentItem? inline by deliveryItem {
    default = if (let d = delivery?.as[ISalesDelivery]) createSales(d)
  }
  impl func purchase: IPurchaseItem? = null
  func createSales(sd: ISalesDelivery): SalesRentItem = SalesRentItem(deliveryItem = this, order = sd.salesOrders.first)
  func createPurchase(pd: IPurchaseDelivery): IPurchaseItem = throw "Unsupported"
  
  func clearSales: Void = sales = null
  func clearPurchase: Void = {}
    

  impl view form = grid(labels = None, width = 1.2, margin = TopBottom) {
    row{product  >> field(width = 0.6), qty >> field(width = 0.3), dur >> field(width = 0.3)}
    stockDesc
    availableView
    productItems >> field(editMode = Original)
  }
  
  func toDuration = delivery.dlvCompleteDate - delivery.dlvInTransitDate

  compute priceAndModel: Future[(IIPriceModel, IPriceRent?)] = {
    let vendor = sales!.order.vendor
    let prod = this.product.superProduct
    back {
      if (let pm = vendor.priceModelRent(prod)) (pm.as[IIPriceModel], pm.priceRent(this.product)) 
      else (PriceModelNone, null)
    }
  }
  compute priceModel: Future[IIPriceModel] = priceAndModel.map(#0)
  compute productPrice: Future[IPriceRent?] = priceAndModel.map(#1)
  compute unsafePeriods: [Period]? = _availablePeriods?.unsafe
  compute availablePeriods: [Period]? = _availablePeriods?.safe 
  compute _availablePeriods: AvailablePeriods? = {
    let excludeItems = (try? inStocks!)*.id + (try? outStocks!)*.id
    let vendor = delivery.order.orderVendor!
    let returnSchedule = delivery.completeShDate.schedule
    if (let dur) {
      ProdReg.at((1, Date.min))
        .find(_.product == this.product && _.stockType == Asset && _.legalEntity == sales?.order?.vendor && _.store ==? delivery.store)
        .map{reg => 
          AvailablePeriods(  
            unsafe = reg.availablePeriods(qty, this.period.start.min(Date.now), priorityDate = order.date, excludeItems),
            safe = RentAdjuster.adjustPeriods(
              dur, chargeOvernight, if (let pm = vendor.priceModelRent(this.product.superProduct)) pm.as[IIPriceModel] else PriceModelNone, 
              reg.store.getSchedule, returnSchedule, reg.availablePeriods(qty, Date.now, priorityDate = null, excludeItems)
            )
          )
        }
    }
  }

  override compute isAvNow = {
    if (!delivery.dlvState.started) unsafePeriods.exists(includes(period)) 
    else outStocks && outStocks.all(available >= 0)
  }
  override func awaitingForDate: Date? = if (isUnav) availablePeriods.first?.start
    
  compute period = Period(
    start = delivery.dlvInTransitDate, 
    end = delivery.dlvCompleteDate)
}

class AvailablePeriods {
  field safe: [Period]?
  field unsafe: [Period]?
}