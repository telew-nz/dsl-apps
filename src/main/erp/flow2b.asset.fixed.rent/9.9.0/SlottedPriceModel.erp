entity SlottedPriceModel extends ISlottedPriceModel with TRentPriceModel {
  impl field title: String
  ref field date: Date[day] = now
  override func currency: Currency = vendor.getCurrency
  ref impl field durations: [DurationSlot]
  impl field period: Period {
    default = Period(start = Date.now.start(of = day), end = Date.now.start(of = day) + 1_day)
    label = "Sample Period"
  }
  impl field slots: [RentSlot] {
    validate = validateSlots
    update = {
      if (!try? new.last.period.start) {
        new.last.period.start =? try? old.last!.period.end
        new.last.period.end =? try? old.last!.period.end + old.last!.period.duration
        new.last.unit =? try? old.last!.unit
        new.last.charge =? try? old.last!.charge
      }
    }
  }
  impl field pricesIncludingGst: Bool = (try? vendor.pricesIncludingGst).alt(true)
  impl field products: [SlottedProductPrice]? inline by model {
    available(All)
  }
  impl func priceRent(product: IBaseProduct): IPriceRent? = {
    products.find(p => p.product == product)
  }
  impl func createProduct(product: IBaseProduct, prices: [DurPrice]?, bond: UMoney[currency]?): SlottedProductPrice = {
    SlottedProductPrice(model = this, product = product, prices = prices, bond = bond)
  }
  
  impl func supports(product: IBaseProduct): Bool = true
  impl func findPrice(product: IBaseProduct) = products.find(p => p.product == product)
  impl func forceNewPrice(product: IBaseProduct): SlottedProductPrice = {
    SlottedProductPrice(model = this, product = product)
  }
 
  
  impl view form = nav{grid{
    title
    row {
      date
      vendor
      pricesIncludingGst
    }
    durations
    period
    slots
    products >> list(mode = EditSelect){formEx}
  }}
}

inline entity SlottedProductPrice extends TRentProductPrice with ISlottedProductPrice {
  impl system field model: SlottedPriceModel by products
}
