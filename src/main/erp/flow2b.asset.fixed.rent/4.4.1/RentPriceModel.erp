entity RentPriceModel extends IRentPriceModel with PriceModel {
  func title = "RPM $vendor $date"
  ref field date: Date[day] = now
  func currency: Currency = vendor.getCurrency
  field night: NightDesc?
  
  field slots: [RentSlot]?
  field pricesIncludingGst: Bool = vendor.pricesIncludingGst
  field products: [RentProductPrice]? inline by model {
    available(All)
  }
  func superProductPrice(superProduct: ISuperProduct): IPrice? = {
    products.find(product == superProduct)
  }
  
  view form = nav{grid{
    row {
      date
      vendor
      pricesIncludingGst
    }
    night
    slots 
    products >> list(mode = EditSelect){grid(labels = None){
      grid(labels = None, visible = !ui.isSelected) {
        row {
          product >> field(editMode = AlwaysRead) 
          prices.first >> x{
            unit.name.fromCamelCase >> field(fontStyle = H3, stretch = 1) 
            price >> field(align = Right) 
          }
        }
      }
      read {
        product >> field(visible = ui.isSelected)
        form >> field(visible = ui.isSelected)
      }
      edit {
        product >> field(visible = ui.isSelected)
        prices >> list(frame = false, visible = ui.isSelected){grid(labels = None){row{
          unit >> field(margin = TopBottom, compact) price
        }}}
        row{h3("Overnight Charge", visible = ui.isSelected && model.night) overnightCharge >> field(visible = ui.isSelected)}
        row{h3("Bond", visible = ui.isSelected) bond >> field(visible = ui.isSelected)}
      }
      
    }}
  }}
}

inline entity RentProductPrice extends IRentProductPrice {
  func superProduct = product
  system field model: RentPriceModel inline by products
  field product: AssetRentService
  field prices: [DurationPrice] = RentDurationUnit.all!.map(u => DurationPrice(unit = u, currency = model.vendor.getCurrency))
  field overnightCharge: Money[currency]? {
    visible = model.night
  }
  field bond: Money[currency]?
  func chargeOvernight = model.night && overnightCharge
  compute gstRate: Percent[2]? = product.forceGstRate(model.vendor).alt(0)
    
  event onSave = product.touch
  
  
  view form = grid(labels = None, spacing = false) {
    prices >> list(frame = false, margin = None){grid(labels = None, margin = None){row{
      unit.name.fromCamelCase >> field(fontStyle = H3) 
      price >> field(align = Right) 
    }}}
    row{h3("Overnight Charge", visible = overnightCharge && model.night) overnightCharge >> field(align = Right) }
    row{h3("Bond", visible = bond) bond >> field(align = Right) }
  }
}

class DurationPrice {
  field currency: Currency
  field unit: RentDurationUnit
  field price: Money[currency]
}
