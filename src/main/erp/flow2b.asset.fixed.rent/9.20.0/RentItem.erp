trait IRentItem extends OrderProductItem {
  impl var deliveryItem: RentDeliveryItem
  
  
  override func name: String = "Hire $(product.title) for $(deliveryItem.dur): $(deliveryItem.period)"
  override func priceQty = deliveryItem.priceQty
  override func priceOrderItem = PriceOrderItem(prod = product, qty = qty, rentPeriod = deliveryItem.rentPeriod)
  
  impl view rowView = group {
    row{
        deliveryItem.product.fullNum >> field(rowSpan = 4, fontStyle = Label)
        deliveryItem.product >> field(rowSpan = 2, title = title)
        deliveryItem.dur >> field(align = Right)
        deliveryItem.qty >> field(align = Right) 
        priceEditor >> field (align = Right)
        amountEditor >> field (align = Right)
    }
    row(visible = discount){label("Discount", span = 3, align = Right) discountEditor}
    row(visible = invoiceDesc) {itemDesc >> field(span = 5)}
    row(visible = deliveryItem.productItems){
      product.productItemsLabel >> field(fontStyle = Label, span = 2, align = Right) deliveryItem.productItems.join(", ") >> field (span = 3)
    }
  }
  
  compute priceAndModel: Future[(IIPriceModel, IPriceRent?)] = {
    let vendor = order.orderVendor
    let currency = order.currency
    let prod = this.product.superProduct
    back {
      if (let pm = vendor?.priceModel(priceLevel, Rent, currency, prod)) (pm.as[IIPriceModel], pm.priceRent(priceLevel, this.product)) 
      else (PriceModelNone, null)
    }
  }
  compute priceModel: Future[IIPriceModel] = priceAndModel.map(#0)
  compute productPrice: Future[IPriceRent?] = priceAndModel.map(#1)
  
  func dekit(): Future[Void] = {
    let kitItems <- back{product.as[IKit]!.items}
    
    order.items = order.items.flatMap{i =>
      if (i == this) {
        let k = qty
        
        deliveryItem.silentUpdate(qty, kitItems.first.qty*k)
        deliveryItem.silentUpdate(product, kitItems.first.product)

        this + kitItems.drop(1).map{q =>
          this.copy(
            deliveryItem = deliveryItem.copy(product = q.product, qty = q.qty*k),
            amountEditor = 0, discountEditor = 0, invoiceDesc = ""
          )
        }
      } else {
        [i]
      }
    }
  }
}