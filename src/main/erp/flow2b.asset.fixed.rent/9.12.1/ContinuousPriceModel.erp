entity ContinuousPriceModel extends IContinuousPriceModel with TRentPriceModel {
  impl field title: String
  ref impl field start: Date = now
  impl field end: Date?
  override func currency: Currency = vendor.getCurrency
  ref impl field durations: [RentDuration]
  impl field schedule: ISchedule? {label = "Charging Schedule (a store schedule will be used if empty)"}
  field overnightCharge: Bool {
    canEditUnit
  }
  impl field pricesIncludingGst: Bool = (try? vendor.pricesIncludingGst).alt(true)
  impl field products: [ContinuousProductPrice]? inline by model {
    available(All)
  }
  impl func createProduct(product: IBaseProduct, prices: [DurPrice]?, bond: UMoney[currency]?): ContinuousProductPrice = {
    ContinuousProductPrice(model = this, product = product, prices = prices, bond = bond)
  }
  impl func price(level: IPriceLevel, type: PriceType, product: IBaseProduct) = if (type == Rent) {
    products.find(p => p.product == product)
  }
  
  impl func supports(product: IBaseProduct): Bool = true
  impl func findPrice(product: IBaseProduct) = products.find(p => p.product == product)
  impl func forceNewPrice(product: IBaseProduct): ContinuousProductPrice = {
    ContinuousProductPrice(model = this, product = product)
  }
  impl field rounding: Rounding? = Round()
  
  impl view form = nav{
    grid {
      title
      row {
        start
        end
      }
      row {vendor pricesIncludingGst}
      levels
      rounding
      row {
        schedule
        overnightCharge >> field(label = "Half Day Overnight Charge (will be added if the order is overnight and less than 1Â½ days)")
      }
      durations 
      products >> list(mode = EditSelect){formEx}
    }
  }
}

inline entity ContinuousProductPrice extends TRentProductPrice with IContinuousProductPrice {
  impl system field model: ContinuousPriceModel by products
  
  override func rentDur(dispatch: ScheduleDate, ret: ScheduleDate, unit: DurUnit?, forceUnit: Bool): UQty = {
    let r = super.rentDur(dispatch, ret, unit, forceUnit)
    if (!model.overnightCharge || dispatch.date.date == ret.date.date) r
    else if (r.unit == DurUnit.Day && r < 1.5) r + 0.5.as[UQty[DurUnit.Day]]
    else if (r.unit == DurUnit.HalfDay && r < 3) (r + 1.as[UQty[DurUnit.HalfDay]]).as[UQty[DurUnit.Day]]/2
    else if (r.unit == DurUnit.Minimum && r == 1) 1.as[UQty[DurUnit.Day]]
    else r
  }
  
  override view form = y{
    x (visible = !ui.edit) {rentPrices >> field(frame = false) model >> field(title = fullTitle, stretch = 1, align = Right)}
    grid(visible = ui.edit, labels = None, spacing = false) {
      model
      prices >> list(frame = false, margin = None){
        grid(labels = None, margin = None){row{
          dur >> field(align = Right, fontStyle = Label, width = 0.3) 
          price >> field(align = Right, width = 0.7) 
        }}
      }
      row{label("Bond", visible = bond || ui.edit, width = 0.3, align = Right) bond >> field(align = Right, width = 0.7) }
    }
  }
  
}
