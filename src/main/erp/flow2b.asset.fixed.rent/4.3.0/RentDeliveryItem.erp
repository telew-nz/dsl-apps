inline entity RentDeliveryItem extends IDeliveryProductItem {
  func storeRequired = true
  field assetReturn: AssetReturn? {
    default = {
      order.as[SalesOrder]!.assetReturns.first
        .or(if (order.real) SalesAssetReturn(primary = true, salesOrders = [order.as[SalesOrder]!]) else null)
    } 
    from = {
      sales!.order.assetReturns
    }
    validate = if (!assetReturn && order.real) "Asset return should be selected for every rent item"
  }
  func needsRevision: Bool = updated(product) || updated(duration) || updated(durationUnit) || updated(itemsQty) || updated(chargeOvernight) || updated(nightsCount)
  field product: AssetRentService {
    available(Ref).with(unit, altUnits, vendors, assets)
    update = {
      this.silentUpdate(duration, this.duration.as[Qty[this.unit]])
      if (let p = priceModel.superProductPrice(new)) {
        this.silentUpdate(chargeOvernight, p.chargeOvernight)
      }
      doUpdateDuration()
    }
  }
  func unit: ProductUnit = Item
  field nightsCount: Qty[Night]?
  field duration: Qty[durationUnit]? {
    canEditUnit = true
    default = assetReturn?.items.find(_ != this)?.duration.alt(1.as[Qty[RentDurationUnit.default]]!)
    update = {
      if (let o = old, let oo = o) {
        if (let s = sales) s.sAmount = s.sAmount*(new.as[Dec[12]]/oo)
        if (let p = purchase) p.sAmount = p.sAmount*(new.as[Dec[12]]/oo)
      }
      doUpdateDuration()
    }
  }
  field durationUnit: RentDurationUnit {
    default = duration.unit!.as[RentDurationUnit]!
    update = {
      this.duration = this.duration.as[Qty[durationUnit]]
    }
  }
  field chargeOvernight: Bool {
    update = {
      doUpdateDuration()
    }
  }
  
  func doUpdateDuration(): Future[Void] = {
    if (assetReturn?.items.count > 1) {
      this.assetReturn = SalesAssetReturn(salesOrders = [order.as[SalesOrder]!]) 
    } 
    assetReturn?.updateDeliveryDate()
    let assetReturns = order.as[SalesOrder]!.assetReturns
    if (assetReturns.count > 1) {
      assetReturns.filter(status == Planned)
        .groupBy(dispatchDate, deliveryDate)
        .values
        .foreach{returns =>
          if(returns.count > 1) {
            returns.drop(1).foreach{i =>
              i.items.foreach{j => j.assetReturn = returns.first}
              i.delete
            }
          }
        }
    }
    let _ <- updateAmount()
    if (let o = sales?.order) o.updateBond()
  }
  
  func updateAmount(): Future[Void] = {
    this.nightsCount = if (chargeOvernight) {
      if (let d = delivery?.dispatchDate, let r = assetReturn?.deliveryDate) priceModel.nightsCount(d, r)
    }
    let _ <- if (let s = sales) {
      let currency = s.order.currency
      let vendor = s.order.vendor
      let customer = try? s.order.customer!
      let amount <- Query(vendor).map{
        if (let pr = productPrice(product)) pr.rentSalesAmount(currency, customer, this, s.order.pricesIncludingGst)
        else Future(0)
      }.result
      if (amount) s.amountEditor = amount
    }

    let _ <- if (let p = purchase) {
      let currency = p.order.currency
      let vendor = p.order.vendor
      let customer = try? p.order.customer
      let amount <- Query(vendor).map{
        if (let pr = productPrice(product)) pr.rentSalesAmount(currency, customer, this, p.order.pricesIncludingGst)
        else Future(0)
      }.result
      if (amount) p.amountEditor = amount
    }
    updateGst()
  }
  
  func qty = if (let d = duration) (itemsQty*d) else itemsQty
  field itemsQty: Qty[ProductUnit.Item] {
    default = 1
    label = "Quantity"
    update = {
      let _ <- if (old) {
        if (let s = sales) s.sAmount = s.sAmount*(new.as[Dec[12]]/old!)
        if (let p = purchase) p.sAmount = p.sAmount*(new.as[Dec[12]]/old!)
        updateAmount()
      }
      if (let o = sales?.order) o.updateBond()
    }
  }
 
  field assets: [IFixedProductAsset]? {
    validate = if (assets && assets.count != itemsQty.withoutUnit) "Chosen number of assets should be the same as quantity"
    from = FixedAsset.all.filter(i => i.product == product.product)
  }
  
  field sales: SalesRentItem? inline by deliveryItem {
    default = if (let d = delivery?.as[ISalesDelivery]) createSales(d)
  }
  func purchase: IPurchaseItem? = null
  func createSales(sd: ISalesDelivery): SalesRentItem = SalesRentItem(deliveryItem = this, order = sd.salesOrders.first)
  func createPurchase(pd: IPurchaseDelivery): IPurchaseItem = throw "Unsupported"
  
  func clearSales: Void = sales = null
  func clearPurchase: Void = {}
    
  view form = grid(labels = None, width = 1.2, margin = TopBottom) {
    row{product >> field(width = 0.6), itemsQty >> field(width = 0.3), duration >> field(width = 0.3)}
    availableView >> field(visible = delivery?.is[SalesDelivery])
    assets >> field(editMode = Original)
  }
  view availableView = grid {
    label("Unavailable", visible = !isAvailableNow, printable = false, color = "#f21") 
    /*availablePeriods >> list(visible = !isAvailableNow || !delivery, printable = false, frame = false) {
      x {
        start
        label("—")
        if (end == Date.max) "∞" else end
        button("Set") {
          this.delivery!.dispatchDate = start
          this.delivery!.save()
          this.assetReturn!.updateDeliveryDate()
          this.assetReturn!.save()
        }
      }
    }*/
  }
  func toDuration = {
    if (let dd = delivery?.dispatchDate, let rd = assetReturn?.deliveryDate) {
      rd - dd
    } 
  }
  compute priceModel = sales!.order.vendor.priceModel(this.product.superProduct).alt(EmptyPriceModel)
  compute unsafePeriods: [Period]? = _availablePeriods?.unsafe
  compute availablePeriods: [Period]? = _availablePeriods?.safe 
  compute _availablePeriods: AvailablePeriods? = {
    let excludeItems = (try? ins!)*.id + (try? outs!)*.id
    let vendor = assetReturn!.order.orderVendor!
    let returnSchedule = assetReturn!.deliveryDst!.schedule
    if (let dur = duration) {
      FAProdReg.at((true, Date.min))
        .find(_.product == this.product.product && _.legalEntity == sales?.order?.vendor && _.store ==? delivery?.as[SalesDelivery]?.source)
        .map{reg => 
          AvailablePeriods(  
            unsafe = reg.availablePeriods(itemsQty, this.period.start.min(Date.now), priorityDate = order.date, excludeItems),
            safe = RentAdjuster.adjustPeriods(dur, priceModel, reg.store.schedule, returnSchedule, 
               reg.availablePeriods(itemsQty, Date.now, priorityDate = null, excludeItems))
          )
        }
    }
  }

  func updateDuration(): Future[Void] = {
    if (assetReturn!.deliveryDate > delivery!.dispatchDate) {
      let new = priceModel
          .rentDuration(delivery!.toRentDeliveryDesc, assetReturn!.toRentDeliveryDesc, unit = null)
               
      if (durationUnit != new.unit || duration != new) {
        if (durationUnit != new.unit) silentUpdate(durationUnit, new.unit!)
        silentUpdate(duration, new)
        updateAmount()
      }
    }
  }
  
  compute isAvailableNow = {
    if (delivery?.status == Planned) unsafePeriods.exists(includes(period)) 
    else outs && outs.all(available >= 0)
  }
  func awaitingForDate: Date? = if (isUnavailable) availablePeriods.first?.start
    
  compute period = Period(
    start = delivery?.dispatchDate.alt(Date.now), 
    end = assetReturn?.deliveryDate.alt(delivery?.dispatchDate.alt(Date.now) + toDuration))
 

  register outs: [FAProdReg]? {
    value = {
      if (let d = delivery?.as[SalesDelivery]) {
        if (d.status != Canceled && active) {
          product.product.productQtys(itemsQty).map {i =>
            FAProdReg(
              product = i.product, legalEntity = d.legalEntity, store = d.source!, 
              date = d.dispatchDate, document = d, priorityDate = order.date, isFuture = d.status == Planned, 
              qty = -i.qty)
          }
        } else null
      }
    }
    availableFor = Inline
  }
  register assetsOut: [FAReg]? = if (let d = delivery?.as[SalesDelivery]) {
    if (d.status != Canceled && active) {
      assets.map{asset =>
        FAReg(
          asset = asset, toAvailable = -1, toInUse = 1, autoProd = false,
          date = d.dispatchDate, document = d, isFuture = d.status == Planned)
      }
    }  else []
  }
   
  register ins: [FAProdReg]? {
    value = if (let d = assetReturn?.as[SalesAssetReturn]) {
      if (d.status != Canceled && delivery?.status != Canceled && active) {
        product.product.productQtys(itemsQty).map {i =>
          FAProdReg(
            product = i.product, legalEntity = d.legalEntity, store = d.destination, 
            date = d.deliveryDate, document = d, priorityDate = order.date, isFuture = d.status != Delivered, 
            qty = i.qty)
        }
      } else null
    }
    availableFor = Inline
  }
  
  register assetsIn: [FAReg]? = if (let d = assetReturn?.as[SalesAssetReturn]) {
    if (d.status != Canceled && delivery?.status != Canceled && active) {
      assets.map{asset =>
        FAReg(
          asset = asset, toStore = d.destination, toAvailable = 1, toInUse = -1, autoProd = false,
          date = d.deliveryDate, document = d, isFuture = d.status != Delivered)
      }
    }  else []
  }
}

class AvailablePeriods {
  field safe: [Period]?
  field unsafe: [Period]?
}