interface ISlottedPriceModel extends IPriceModel {
  func night: NightDesc?
  func slots: [RentSlot]
  func currency: Currency
  func pricesIncludingGst: Bool

  func calcDuration(deliveryDate: Date, returnDate: Date): Duration? = {
    let p = Period(start = deliveryDate, end = returnDate)
    p.duration - _durNextDate(deliveryDate.date, returnDate, p)
  }
  func _durNextDate(date: UtcDate[day], end: UtcDate[day], period: Period): Duration? = {
    if (date < end) period.intersection(night!.closed.addDate(date)).duration + _durNextDate(date + 1_day, end, period)
  }
  func addNights(date: UtcDate[day], start: Date, ret: Date): Date = {
    if (date <= ret.date) {
      let n = night!.closed.addDate(date)
      if (ret > n.start) {
        addNights(date + 1_day, start, ret + Period(start = start.as[UtcDate]!, end = n.end).intersection(n).duration)
      } else ret
    } else ret
  }
  
  func nightsCount(deliveryDate: Date, returnDate: Date): Qty[Night]? = {
    if (night) {
      (returnDate.date - deliveryDate.date).days.as[Qty[Night]] 
    }
  }
   
  func rentDuration(delivery: RentDeliveryDesc, assetReturn: RentDeliveryDesc, unit: RentDurationUnit?): Qty[RentDurationUnit]? = {
    if (slots) {
      let dd = adjustNightSlot(delivery.dispatchDate)
      if (let sc = slotsCount(dd.date, assetReturn.deliveryDate.date, Period(start = dd, end = assetReturn.deliveryDate))) {
        let u: RentDurationUnit = unit.filter(slotsCount).or(RentDurationUnit.all.sortBy(slotsCount.desc).find(_.slotsCount <= sc && !mainUnit)).alt(default)
        if (let usc = u.slotsCount) {
          sc.as[Qty[u]]/usc
        } else {
          0.as[Qty[u]]
        }
      } else {
        0.as[Qty[unit.alt(RentDurationUnit.default)]]
      }
    } else {
      super.rentDuration(delivery, assetReturn, unit)
    }
  }
  
  func rentReturnDate(delivery: RentDeliveryDesc, returnSchedule: Schedule?, qty: Qty[RentDurationUnit]?): Date = {
    adjustToSchedule(
      delivery, returnSchedule, qty, 
      moveDate(
        date = adjustNightSlot(delivery.dispatchDate), 
        slotsCount = qty.unit!.as[RentDurationUnit]!.slotsCount*qty)
    ).max(delivery.dispatchDate)
  }
  private func adjustNightSlot(date: Date): Date = {
    if (let nightSlot = night?.slot?.period(date)) nightSlot.end.as[Date]! else date
  }
  private func moveDate(date: Date, slotsCount: Dec[2]?): Date = {
    if (slotsCount <= 0 || !slots) date
    else {
      let t = date.time
      if (let slot = slots.sortBy(timePeriod.end).find(t < timePeriod.end)) {
        if (slotsCount >= 1) {
          moveDate(date.date.addDate(slot.timePeriod.end).as[Date]!, slotsCount - 1)
        } else {
          (date.date.addDate(slot.timePeriod.start) + slot.timePeriod.duration*slotsCount).as[Date]!
        }
      } else {
		moveDate(date.start(of = day) + 1_day, slotsCount)
      }
    }
  }
  func slotsCount(date: Date[day], end: Date[day], period: Period): Dec[2]? = {
    if (date <= end) {
      slots.map{s => s.timePeriod.addDate(date)}.filter(_.intersects(period)).count + slotsCount(date + 1_day, end, period)
    }
  }
  
  private func adjustToSchedule(delivery: RentDeliveryDesc, returnSchedule: Schedule?, qty: Qty[RentDurationUnit]?, date: Date) = {
    let d = date.as[Date]!
    if (let shedule = returnSchedule) {
      if (let n = night?.slot?.period(d)) {
        if (qty && chargeOvernight(delivery)) shedule.workingOrPrevPeriod(n.start.as[Date]!).end
        else if (shedule.isWorkingDate(n.end.as[Date]!)) n.end
        else shedule.prevPeriod(n.end.as[Date]!).end
      } else if (shedule.isWorkingDate(d)) {
        d
      } else {
        shedule.prevPeriod(d).end
      }
    } else d
  }
}

interface ISlottedProductPrice extends IPrice {
  func model: ISlottedPriceModel
  func currency = model.currency
  func chargeOvernight = model.night?.charge
  func overnightCharge: Money[currency]? = if (let oc = model.night?.charge) durationPrice(oc)
  func prices: [DurationPrice]
  func gstRate: Percent[2]?
  
   protected func durationPrice(duration: Qty[RentDurationUnit]?): Money[currency]? = {
    if (let sc = duration.unit!.as[RentDurationUnit]!.slotsCount*duration) {
      let ps = prices.sortBy(unit.slotsCount.desc)
      let pp = ps.find(sc >= unit.slotsCount).alt(ps.last)
      pp.price*sc/pp.unit.slotsCount
    }
  }
  
  func rentSalesAmount(currency: Currency, customer: LegalEntity?, itemsQty: Qty, duration: Qty[RentDurationUnit]?, nightsCount: Qty[Night]?, inclGst: Bool): Future[RentAmount] = {
    let am =  durationPrice(duration)
    let a <- (am*itemsQty).to[Money[currency]](now)
    let nm = overnightCharge*nightsCount*itemsQty
    let n <- nm.to[Money[currency]](now)
    RentAmount(dayAmount = a, nightAmount = n)
  }
  func salesPrice(currency: Currency, inclGst: Bool): Future[Money?] = {
    convertGst(gstRate, prices.find(unit.isFirst)?.price, model.pricesIncludingGst, inclGst).to[Money[currency]](now)
  }
}
