interface IRentPriceModel {
  func rentReturnDate(delivery: RentDeliveryDesc, returnSchedule: ISchedule, qty: UQty[DurUnit]?): Date = {
    delivery.dispatchDate + qty.unit!.as[DurUnit]!.defDur*qty
  }
  func rentDuration(delivery: RentDeliveryDesc, assetReturn: RentDeliveryDesc, unit: DurUnit?): UQty[DurUnit]? = {
    let dur = (assetReturn.deliveryDate - delivery.dispatchDate)
    
    if (let u = unit?.defDur) {
      dur.to[Duration[u.unit!]].as[UQty[unit!]]
    } else {
      dur.to[Duration[hour]].as[UQty[DurUnit.Hour]]
    }
  }
  
  func nightsCount(deliveryDate: Date, returnDate: Date): UQty[Night]? = 0
  
  func chargeOvernight(delivery: RentDeliveryDesc): Bool = {
    delivery.items.exists(chargeOvernight)
  }
  func rentDurationUnits: [DurUnit]? = DurUnit.all.toSet
  func hasNight: Bool = false
  func hasNightCharge: Bool = false
  back func price(product: IBaseProduct): IPrice? 
}

object EmptyRentPriceModel extends IRentPriceModel {
 func price(product: IBaseProduct): IPrice? = null
}
extend trait IPriceModel extends IRentPriceModel 

class RentDeliveryDesc {
  field dispatchDate: Date
  field deliveryDate: Date
  field schedule: ISchedule
  system field items: [RentDeliveryItem]?
}

extend trait IDelivery {
  func storeSchedule = deliverySrc.or(deliveryDst)?.schedule.alt(Schedule24)
  func toRentDeliveryDesc: RentDeliveryDesc = {
    RentDeliveryDesc(dispatchDate = dispatchDate, deliveryDate = deliveryDate, schedule = storeSchedule, 
                     items = items*.as[RentDeliveryItem])
  }
}


