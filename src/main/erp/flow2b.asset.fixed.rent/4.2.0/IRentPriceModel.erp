interface IRentPriceModel extends IPriceModel {
  func night: NightDesc?
  func slots: [TimePeriod]?
  func currency: Currency
  func pricesIncludingGst: Bool
  func chargeOvernight(delivery: RentDeliveryDesc): Bool = {
    delivery.items.exists(chargeOvernight)
  }
  func calcDuration(deliveryDate: Date, returnDate: Date): Duration? = {
    let p = Period(start = deliveryDate, end = returnDate)
    p.duration - _durNextDate(deliveryDate.date, returnDate, p)
  }
  func _durNextDate(date: UtcDate[day], end: UtcDate[day], period: Period): Duration? = {
    if (date < end) period.intersection2(night!.closed.addDate(date)).duration + _durNextDate(date + 1_day, end, period)
  }
  func addNights(date: UtcDate[day], start: Date, ret: Date): Date = {
    if (date <= ret.date) {
      let n = night!.closed.addDate(date)
      if (ret > n.start) {
        addNights(date + 1_day, start, ret + Period(start = start, end = n.end).intersection2(n).duration)
      } else ret
    } else ret
  }
  func adjustReturnDate(delivery: RentDeliveryDesc, returnSchedule: Schedule?, date: Date): Date = {
    let d = if (night) {
      addNights(delivery.dispatchDate.date, delivery.dispatchDate, date)
    } else date
    if (let shedule = returnSchedule) {
      if (shedule.isWorkingDate(d)) d
      else if (let n = night?.slot?.period2(d)) {
        if (chargeOvernight(delivery)) shedule.workingOrPrevPeriod(n.start).end
        else if (shedule.isWorkingDate(n.end)) n.end
        else shedule.prevPeriod(n.end).end
      } else {
        shedule.prevPeriod(d).end
      }
    } else d
  } 
  
  func nightsCount(deliveryDate: Date, returnDate: Date): Qty[Night]? = {
    if (night) {
      (returnDate.date - deliveryDate.date).days.as[Qty[Night]] 
    }
  }
}

class NightDesc {
  field closed: TimePeriod {
    label = "Night period when the operation is closed"
  }
  field slot: TimePeriod {
    label = "Night slot when the customer can be charged for the night period only"
  }
}

interface IRentProductPrice extends IPrice {
  func model: IRentPriceModel
  func currency = model.currency
  func overnightCharge: Money[currency]?
  func prices: [DurationPrice]
  func gstRate: Percent[2]?
  func rentSalesAmount(currency: Currency, customer: LegalEntity?, item: RentDeliveryItem, inclGst: Bool): Future[Money?] = {
    let ps = prices.sortBy(unit.duration.desc)
    let dur = model.toDuration(item.duration)
    var am = if (dur) {
      if (let p = ps.sortBy(unit.duration.desc).find(dur >= unit.duration)) {
        p?.price*dur.to[Duration[p.unit.duration.unit!]]/p.unit.duration
      } else {
        ps.last.price
      }
    }
    if (item.chargeOvernight) am = am + overnightCharge*item.nightsCount
    (am*item.itemsQty).to[Money[currency]](now)
  }
  func salesPrice(currency: Currency, inclGst: Bool): Future[Money?] = {
    convertGst(gstRate, prices.find(unit.isFirst)?.price, model.pricesIncludingGst, inclGst).to[Money[currency]](now)
  }
}

extend class Period {
  func intersection2(period: Period): Period = {
    if (start >= period.end) Period(start = start, end = start)
    else if (end <= period.start) Period(start = end, end = end)
    else Period(start = period.start.clamp(start, end), end = period.end.clamp(start, end))
  }
}

extend class TimePeriod {
  func period2(date: Date): Period? = {
    let t = date.time
    if (contains(t)) {
      let d = date.date
      if (end < start) {
        if ((t > end)) Period(start = d.addDate(start), end = d.addDate(end) + 1_day)
        else Period(start = d.addDate(start) - 1_day, end = d.addDate(end))
      } else {
        Period(start = d.addDate(start), end = d.addDate(end))
      }
    }
  }
}

