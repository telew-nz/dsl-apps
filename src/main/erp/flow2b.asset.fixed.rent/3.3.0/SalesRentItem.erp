class ODGDeliveryReturn extends OrderDeliveryGroup {
  field delivery: Delivery
  field assetReturn: AssetReturn
  
  view rowView = row(fontSize = 1) {x(span = 4){
    label("Delivery") delivery.number delivery.deliveryDate >> field(visible = true, stretch = 1)
    label("Return") assetReturn.number assetReturn.deliveryDate >> field(visible = true)
  }}
}

inline entity SalesRentItem extends ISalesItem with OrderProductItem {
  singular = "Rent"
  func complete = delivered && paid && assetReturned
  func orderDeliveryItem: IOrderDeliveryItem? = deliveryItem
  field deliveryItem: RentDeliveryItem inline by sales
  func qty = deliveryItem.qty
  func deliveryGroup: OrderDeliveryGroup = {
    if (let d = delivery) {
      if (let r = deliveryItem.assetReturn) ODGDeliveryReturn(delivery = d, assetReturn = r)
      else ODGDelivery(delivery = d) 
    } else ODGEmpty
  }
  compute price: Money[currency]? {
    value = amount/qty
    update = {amount = new*qty}
  }
  view form = grid(margin = None, width = 0.6, labels = Top) {
    deliveryItem.product
    deliveryItem.duration >> field(canEditUnit = true)
    deliveryItem.itemsQty >> field(canEditUnit = true) 
    deliveryItem.availableView >> field(visible = active && (delivery?.is[SalesDelivery] || !delivery), label = "")
    priceEditor
    amountEditor
    gstEditor
    discountEditor
    deliveryItem.assets
  }
  
  func revenueLedger(baseAmount: Money): Ledger = {
    LSales(account = Sales, journal = delivery!, product = deliveryItem.product, qty = deliveryItem.baseQty, 
           counterparty = order.customer, trAmount = -baseAmount)
  }
  func assetReturned = deliveryItem.assetReturn?.status == Delivered
  func assetReturnInTransit = deliveryItem.assetReturn?.status == InTransit
    
  func quoteSwitch(quote: Bool): Void = {
    if (!order.assetReturns) {
      let ar = SalesAssetReturn(primary = true, salesOrders = [order])
      order.setDefaultSalesReturn()
      ar.updateDeliveryDate()
    }
  }
  
  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2)
        y(margin = None){
          deliveryItem.duration >> field(canEditUnit = true, align = Right)
          deliveryItem.itemsQty >> field(canEditUnit = true, align = Right) 
        }
        priceEditor >> field (align = Right)
        amountEditor >> field (align = Right)
    }
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
  
  view posRowView = group {
    row{deliveryItem.product >> field(rowSpan = 5)
         y(margin = None){
          deliveryItem.duration >> field(align = Right)
          deliveryItem.itemsQty >> field(align = Right) 
        }
        amountEditor >> field(align = Right)
    }
    row(visible = this.deliveryItem.isUnavailable){deliveryItem.availableView >> field(span = 2, align = Right)}
    row(visible = discount){label("Discount" align = Right) discountEditor >> field(span = 2)}
    row(visible = this.order.deliveries.count > 1){label("Delivery" align = Right) deliveryItem.delivery >> field(span = 2)}
    row(visible = this.order.invoices.count > 1){label("Invoice" align = Right) invoice >> field(span = 2)}    
  }
  
 
}
