extend entity SalesOrder {
  func updateBond(): Future[Void] = {
    guard (let rentItems = items*.orderDlvItem*.as[RentDeliveryItem].map(sales!.priceOrderItem!)) else return {}
    
    let r = priceRequest
    let pl = priceLevel
    let bond <- back {
      let bonds <- rentItems.oneByOne{i =>
        if (let pp = vendor.price(pl, Rent, i.prod)?.as[IPriceRent]) {
          pp.bond(r, i)
        } else {
          Future(0)
        }
      }
      bonds.sum
    }
    
    if (let bond) {
      if (let bondItem = items*.as[SalesBondItem].first) {
        bondItem.amountEditor = bond
      } else {
        SalesBondItem(order = this, amountEditor = bond)
      }
    } else {
      items*.as[SalesBondItem]*.delete
    }
  }
}
 