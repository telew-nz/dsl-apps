trait TRentPriceModel extends IStaticPriceModel {
  func allDurUnits: [DurUnit]?
  func currency: Currency
  func products: [TRentProductPrice]?
  func createProduct(product: IBaseProduct, prices: [DurPrice]?, bond: UMoney?): TRentProductPrice
}


trait TRentProductPrice extends IStaticPrice {
  impl func model: TRentPriceModel
  field prices: [DurPrice]? {
    singular = "Price"
    update = {
      new.foreach(_.price.currency = this.currency)
    }
    init = {
      new.unit =? model.allDurUnits.first
    }
    default = if (front) if (let p = model.allDurUnits.first) [DurPrice.incomplete(unit = p)]
  }
  
  
  field bond: UMoney[currency]? 
  override compute gstRate: UPercent[2]? = product.gstRate(model.vendor.legalEntity).alt(0)
  func superProduct = product.superProduct
    
  impl event onSave = product.touch
  
  back func addDuration(unit: DurUnit, price: UMoney?): Void = {
    if (let price) {
      addDuration(1.as[UQty[unit]], SalesPrice(current = price, regular = price))
    }
  }
  back func addDuration(unit: DurUnit, price: SalesPrice): Void = {
    addDuration(1.as[UQty[unit]], price)
  }
  back func addDuration(duration: UQty, price: SalesPrice): Void = {
    prices = prices + DurPrice(unit = duration.unit!.as[DurUnit]!, dur = duration, price = price)
  }
  
  
  view formEx = grid(labels = None){
    grid(labels = None, visible = !ui.isSelected) {
      row {
        product >> field(editMode = AlwaysRead, title = product) 
        prices.first >> x {
          dur >> field(stretch = 1, canEditUnit = false) 
          price >> field(align = Right) 
        }
      }
    }
    read {
      product >> field(visible = ui.isSelected, title = product)
      prices >> list(frame = false, visible = ui.isSelected, margin = None){
        grid(labels = None, margin = None){row{
          dur >> field(align = Right) 
          price >> field(align = Right) 
        }}
      }
      row{
        label("Bond", visible = ui.isSelected && bond, align = Right) 
        bond >> field(visible = ui.isSelected, align = Right) 
      }
    }
    edit {
      product >> field(visible = ui.isSelected, title = product)
      prices >> list(frame = false, visible = ui.isSelected){x{
        dur  price  >> field(stretch = 1)
      }}
      row{label("Bond", visible = ui.isSelected) bond >> field(visible = ui.isSelected)}
    }
  }
}