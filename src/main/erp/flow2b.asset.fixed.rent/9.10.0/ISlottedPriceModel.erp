trait ISlottedPriceModel extends IPriceModel {
  impl func isSalesModel = false
  impl func isRentModel = true
  impl func hasSlots = true
  
  func period: Period
  compute cycle: UDuration[minute] = period.duration!.to[UDuration[minute]]
  func durations: [DurationSlot]
  func slots: [RentSlot]
  func currency: Currency
  func pricesIncludingGst: Bool
  impl func allDurUnits: [DurUnit]? = durations*.rentUnit.toSet
 
  func validateSlots: String? = {
    if (slots.exists(!this.period.contains(period.start))) "Slots periods should be inside the period"
  }
   
  private func delta(date: Date): UDuration[minute]? = {
    (date.sub(period.start).minutes/cycle).round(floor, 0).positive*cycle
  }
  private func slot(date: Date): RentSlot? = {
    let delta: Duration[minute]? = delta(date)
    slots.sortBy(period.start.desc).mapOpt{s => 
      let p = s.period.add(delta)
      if (p.contains(date)) s.copy(period = p)
    }.first
  }
  private func slotOrNext(date: Date): RentSlot = {
    let delta: UDuration[minute]? = delta(date)
    let slot = slots.sortBy(period.start.desc).mapOpt{s => 
      let p = s.period.add(delta)
      if (p.contains(date)) s.copy(period = p)
    }.first.or {
      slots.sortBy(period.start).mapOpt{s => 
        let p = s.period.add(delta)
        if (p.start > date) s.copy(period = p)
      }.first
    }.alt {
      let s = slots.sortBy(period.start).first
      s.copy(period = s.period.add(delta + cycle))
    }
  }
  
  func slots(start: Date, end: Date): [RentSlot]? = if (start < end) {
    let slot = slotOrNext(start)
    if (slot.period.start < end) slot + slots(slot.period.end + 1_second, end)
  }
  
  impl func rentRetDate(dispatch: ScheduleDate, retSchedule: ISchedule, qty: UQty?): Date = {
    rentPeriods(dispatch.date, dispatch.schedule, retSchedule, qty).first?.end.alt(dispatch.date)
  }
  
  func rentPeriods(date: Date, schedule: ISchedule, retSchedule: ISchedule, qty: UQty?): [Period]?  = {
    if (let sc = toSlotsCount(qty)) {
      nextPossibleSlots(date, schedule, retSchedule, sc).first(300).filter(!_.isEmpty)
    }
  }
  
  private func nextPossibleSlots(date: Date, schedule: ISchedule, retSchedule: ISchedule, slotsCount: UQty[Slot]): [Period]? = {
    let slot = slotOrNext(date)
    if (
      let start = schedule.nextWorkingDate(slot.period.start), 
      let end = retSchedule.prevWorkingDate(moveDate(start, slotsCount))
    ) {
      Period(start = start, end = end.max(start)) + nextPossibleSlots(slot.period.end, schedule, retSchedule, slotsCount)
    }
  }
  
  private func moveDate(date: Date, slotsCount: UQty[Slot]): Date = {
    let slot = slotOrNext(date)
    if (let sc = toSlotsCount(slot.charge)) {
      if (slotsCount > sc ) {
        moveDate(slot.period.end, (slotsCount - sc).positive!)
      } else if (slotsCount == sc ) { 
        slot.period.end.max(date)
      } else {
        (slot.period.start.max(date) + slot.period.duration*slotsCount/sc).as[Date]
      } 
    } else {
      date
    }
  }
  
  func toSlotsCount(qty: UQty?): UQty[Slot]? = {
    if (qty) slotsCount(qty.unit!.as[DurUnit]!)*qty
  }
  func slotsCount(unit: DurUnit): UQty[Slot]? = {
    durations.find(u => u.rentUnit == unit)?.slotsCount
  }
  
}

class RentSlot {
  field period: Period {label = "Period"}
  field unit: DurUnit = default
  field charge: UQty[unit]? {
    canEditUnit
    default = 1
  }
  impl view form = grid(labels = None) {
    row {period >> field(frame = false, width = 0.6) charge >> field(width = 0.2) }
  }
  
  impl func toString = "$period => $charge"
}

class DurationSlot {
  field rentUnit: DurUnit = default
  field slotsCount: UQty[Slot] = 1
  impl view form = grid(labels = None) {
    row {rentUnit >> field(compact = true) slotsCount >> field(align = Right)}
  }
}

interface ISlottedProductPrice extends IPriceRent {
  impl func model: ISlottedPriceModel
  override func currency = model.currency
  //func overnightCharge: UMoney[currency]? = if (let oc = model.night?.charge) durationPrice(oc)
  func prices: [DurPrice]?
  func gstRate: UPercent[2]?
  
  impl func rentDurUnits: [DurUnit]? = prices*.unit.toSet
  
  impl func rentPeriods(date: Date, schedule: ISchedule, retSchedule: ISchedule, qty: UQty?): [Period]?  = {
    model.rentPeriods(date, schedule, retSchedule, qty)
  }
    
  impl func rentDur(dispatch: ScheduleDate, ret: ScheduleDate, unit: DurUnit?, forceUnit: Bool): UQty = {
    let rdus = rentDurUnits
    let durations = model.durations.filter(d => rdus.contains(d.rentUnit)).alt(model.durations)
    
    if (
      let sc = model.slots(dispatch.date, ret.date)
        .map(model.toSlotsCount(charge))
        .sum
    ) {
      let u = (if (forceUnit) durations.find(d => d.rentUnit == unit))
        .or(durations.sortBy(slotsCount.desc).find(_.slotsCount <= sc))
        .alt(durations.first)
      (sc.as[UDec[8]]/u.slotsCount).round(ceil, u.rentUnit.scale)
        .as[UQty[u.rentUnit]]
        .alt(1.as[UQty[u.rentUnit]])
    } else {
      1.as[UQty[unit.alt(durations.first.rentUnit)]]
    }
  }
  
  protected func durationPrice(duration: UQty?): SalesPrice = {
    guard (let sc = model.toSlotsCount(duration)) else return SalesPrice()
    
    let ps = prices.map(price, slotsCount = model.toSlotsCount(_.dur)).sortBy(slotsCount.desc)
    if (let pp = ps.find(sc >= slotsCount).or(ps.last), let slotsCount = pp.slotsCount) {
      pp.price.mul(sc.as[UDec[8]]/slotsCount)
    } else {
      SalesPrice()
    }
  }
  
  impl back func rentAmount(currency: Currency, inclGst: Bool, customer: ICustomer?, qty: UQty, period: RentPeriod): Future[SalesPrice] = {
    let am = durationPrice(period.dur)
    let a <- am.mul(qty).to(currency, now)
//    let nm = overnightCharge*nightsCount*itemsQty
//    let n <- nm.to[UMoney[currency]](now)
    a.convertGst(gstRate, model.pricesIncludingGst, inclGst)
  }

  impl back func rentPrices(currency: Currency, inclGst: Bool): Future[[DurPrice]?] = {
    prices.map{p => 
      let p0 <- p.price.to(currency, now)
      p.copy(price = p0) 
        .convertGst(gstRate, model.pricesIncludingGst, inclGst)
    }.allCompleted      
  }
}
