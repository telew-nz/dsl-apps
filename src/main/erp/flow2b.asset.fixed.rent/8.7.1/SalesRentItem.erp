inline entity SalesRentItem extends ISalesItemWithDelivery with IRentItem {
  icon = "retweet"
  singular = "Book/Rent"
  
  impl field deliveryItem: RentDeliveryItem inline by sales
  
  impl view form = grid(margin = None, width = 1.2, labels = Top) {
    row {
      deliveryItem.product >> field(width = 0.4, label = "") 
      deliveryItem.qty >> field(width = 0.2, align = Right) 
      deliveryItem.dur >> field(width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right)
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      deliveryItem.stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || deliveryItem.isUnav) 
      space(width = 0.2)
      gstEditor  >> field(visible = ui.isSelected && order.legalEntity.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    row {
      itemDesc >> field(width = 1.0, visible = ui.isSelected || desc)
      total >> field(visible = ui.isSelected && discount, width = 0.2, align = Right)
    }
    periods >> list(visible = ui.isSelected && ui.edit, frame = false, label = "Available At") {
      button(label = _.toString) {
        delivery.silentUpdStartDate(start)
        delivery.silentUpdEndDate(end)
      }
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
    deliveryItem.availableView >> field(visible = ui.isSelected && active, label = "")
    accessories >> list {
      x {_ add("Add") {
        let item = SalesItem(
          order = order, 
          deliveryItem = DeliveryItem(product = _, delivery = deliveryItem.delivery, qty = deliveryItem.qty.as[UQty[_.unit]]) 
        )
        item.deliveryItem.updateAmount()
      }}
    }
    deliveryItem.snView >> field(editMode = Original, visible = ui.isSelected && product.trackItems, label = "Serial Numbers")
    x(visible = ui.isSelected && ui.edit) {
      button("Dekit", visible = product.is[IKit]) {
        dekit()
      }
    }
  }
   
  impl func revenueLedgers(journal: Journal, date: Date, baseAmount: UMoney?) = {
    let rt = product.revenueType
    [LSales(account = Rent, journal = journal, date = date, product = deliveryItem.product, revenueType = rt, 
            location = deliveryItem.delivery.store,
            qty = (deliveryItem.period.duration.hours*deliveryItem.qty).as[UQty[ProductUnit.Hour]], unit = Hour,
            counterparty = order.customer?.legalEntity, trAmount = -baseAmount)]
  }
    
  compute periods: Future[[Period]?] = if (!delivery.state.started && delivery.state.active let v = order.orderVendor) {
    let vendor = order.vendor
    let store = delivery.store
    let product = this.product
    let stDate = delivery.dlvInTransitDate.start(of = day).max(now)
    back {
      if (let pm = v.priceModelRent(product)
        let pers = pm.rentPeriods(stDate, delivery.schedule, delivery.retSchedule, deliveryItem.dur)
      ) {
        let excludeItems = (try? deliveryItem.inStocks!)*.id + (try? deliveryItem.outStocks!)*.id

        if (let avPers = ProdReg.at((1, Date.min))
          .find(r => r.product == product && r.stockType == product.rentStockType && r.legalEntity == vendor && r.store ==? store)
          .flatMap(reg => reg.availablePeriods(qty, stDate, priorityDate = order.date, excludeItems))
          .result.get
        ) {
          pers.first(300).filter{p => 
            avPers.exists(a => a.includes(p))
          }.first(10)
        }
      }
    }
  }
}
