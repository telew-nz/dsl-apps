extend interface IPriceModel {
  func toDuration(qty: Qty[RentDurationUnit]?): Duration? = {
    if (!qty) 0 
    else qty!.unit!.as[RentDurationUnit]!.duration*qty
  }
  
  func adjustReturnDate(delivery: RentDeliveryDesc, returnSchedule: Schedule?, date: Date): Date = {
    returnSchedule?.prevWorkingDate(date).alt(date)
  }
  func rentReturnDate(delivery: RentDeliveryDesc, returnSchedule: Schedule?, qty: Qty[RentDurationUnit]?): Date = {
    adjustReturnDate(delivery, returnSchedule, delivery.dispatchDate + toDuration(qty))
  }
  func calcDuration(deliveryDate: Date, returnDate: Date): Duration? = returnDate - deliveryDate
  func rentDuration(delivery: RentDeliveryDesc, assetReturn: RentDeliveryDesc, unit: RentDurationUnit?): Qty[RentDurationUnit]? = {
    if (let dd = calcDuration(delivery.dispatchDate, assetReturn.deliveryDate)) {
      let u: RentDurationUnit = unit.or(RentDurationUnit.all.find(_.duration <= dd)).alt(default)
      (dd.to[Duration[u.duration.unit!]]/u.duration).as[Qty[u]]
    } else {
      0.as[Qty[unit.alt(RentDurationUnit.default)]]!
    }
  }
  
  func bondAmount(items: [RentDeliveryItem]): Future[Money?] = {
    items.map(superProductPrice(product)?.bond*itemsQty).sum
  }
  func nightsCount(deliveryDate: Date, returnDate: Date): Qty[Night]? = 0
}

extend interface IPrice {
  func chargeOvernight: Bool = false
  func changeWeekends: Bool = false
  func useRentSlots: Bool = true
  func bond: Money? = 0
  func rentSalesAmount(currency: Currency, customer: LegalEntity?, item: RentDeliveryItem, inclGst: Bool): Future[Money?] = {
    if (let qty = item.itemsQty*item.duration) salesAmount(currency, customer, qty = qty, inclGst)
  }
}

object EmptyPriceModel extends IPriceModel {
  func superProductPrice(superProduct: ISuperProduct): IPrice? = null
}

class RentDeliveryDesc {
  field dispatchDate: Date
  field deliveryDate: Date
  field schedule: Schedule?
  system field items: [RentDeliveryItem]?
}

extend trait IDelivery {
  func storeSchedule = deliverySrc.or(deliveryDst)?.schedule
  func toRentDeliveryDesc: RentDeliveryDesc = {
    RentDeliveryDesc(dispatchDate = dispatchDate, deliveryDate = deliveryDate, schedule = storeSchedule, 
                     items = items*.as[RentDeliveryItem])
  }
}
