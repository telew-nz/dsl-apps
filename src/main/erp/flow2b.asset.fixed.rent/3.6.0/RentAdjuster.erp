object RentAdjuster {
  func adjustPeriods(duration: Duration, pm: IPriceModel, 
                       deliverySchedule: Schedule?, returnSchedule: Schedule?, periods: [Period]?
                     ): [Period]? = 
  {
    periods
      .mapOpt{p =>
        adjustPeriod(duration, pm, deliverySchedule, returnSchedule, 
                     Period(start = deliverySchedule?.nextWorkingDate(p.start).alt(p.start), end = p.end), 0)
      }
  }
  
  func adjustPeriod(duration: Duration, pm: IPriceModel, 
                    deliverySchedule: Schedule?, returnSchedule: Schedule?, 
                    period: Period, attempts: Int?): Period? = 
  {
    let s = period.start
    let sDesc = RentDeliveryDesc(deliveryDate = s, dispatchDate = s, schedule = deliverySchedule)
    let e = pm.rentReturnDate(sDesc, returnSchedule, duration)
    let dur1 = pm.rentDuration(sDesc, RentDeliveryDesc(deliveryDate = e, dispatchDate = e, schedule = returnSchedule))
    if (e > period.end) null
    else if (e == s || dur1.hours < duration.hours) {
      if (attempts < 10 && deliverySchedule) {
        let s2 = deliverySchedule!.nextPeriod(s).start
        if (s2 < period.end) {
          adjustPeriod(duration, pm, deliverySchedule, returnSchedule,
            Period(start = s2, end = period.end), 
            attempts + 1)
        }
      }
    } else period
  }
}