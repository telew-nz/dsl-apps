trait IContinuousPriceModel extends IPriceModel {
  impl func isSalesModel = false
  impl func isRentModel = true
  
  //func overnightCharge: UQty[DurUnit]?
  func currency: Currency
  func pricesIncludingGst: Bool
  func durations: [RentDuration]
  override ref compute rentDurUnits: [DurUnit]? = durations*.rentUnit.toSet
   
  /*impl func nightsCount(deliveryDate: Date, returnDate: Date): UQty[Night]? = {
    if (hasNight) {
      (returnDate.date - deliveryDate.date).days.as[UQty[Night]]
    }
  }*/
  override func rentDur(dispatch: ScheduleDate, ret: ScheduleDate, unit: DurUnit?): UQty = {
    toRentDuration(ret.schedule.workingTime(Period(start = dispatch.date, end = ret.date)), unit)
  }
  func toRentDuration(dd: UDuration?, unit: DurUnit?): UQty  = {
    let u = durations.find(d => d.rentUnit == unit) 
      .or(durations.sortBy(duration.desc).find(_.duration <= dd && _.maxDuration ?>= dd))
      .or(durations.sortBy(duration).find(_.duration >= dd))
      .alt(durations.first)
    let r = (dd.to[UDuration[u.duration.unit!]].as[UQty[8]]/u.duration).roundInc(ceil, u.increment).as[UQty[u.rentUnit]]
    let rdur = u.duration*r
    if (rdur != dd) {
      toRentDuration(rdur, unit)
    } else {
      r.alt(1.as[UQty[durations.sortBy(duration).first.rentUnit]])
    }
  }
 
  override func toDuration(qty: UQty?): UDuration? = {
    if (qty) duration(qty.unit!.as[DurUnit]!)*qty
  }
  func duration(unit: DurUnit): UDuration? = {
    durations.find(u => u.rentUnit == unit)?.duration
  }
}

class RentDuration {
  field rentUnit: DurUnit = default
  field unit: DateUnit = day
  field duration: UDuration[unit] {
    canEditUnit
    default = 1
  }
  field increment: UNumber = 1
  field maxDuration: UDuration[unit]? 
  impl view form = grid(labels = Top) {
    row {rentUnit >> field(compact = true, label = "") duration >> field(align = Right) increment >> field(align = Right) maxDuration >> field(align = Right)}
  }
}

interface IContinuousProductPrice extends IPriceRent {
  impl func model: IContinuousPriceModel
  override func currency = model.currency
  //func overnightCharge: UMoney[currency]? = if (let oc = model.overnightCharge) durationPrice(oc)
  func prices: [DurPrice]?
  func gstRate: UPercent[2]?
  
  protected func durationPrice(duration: UQty?): SalesPrice = {
    guard (let dur = model.toDuration(duration)) else return SalesPrice()
    
    let ps = prices
      .map(price, duration = model.toDuration(_.dur))
      .sortBy(_.duration.desc)
    if (let pp = ps.find(dur >= _.duration).or(ps.last), let duration = pp.duration) {
      pp.price.mul(dur.as[UDec[8]]/duration)
    } else {
      SalesPrice()
    }
  }
  impl func rentAmount(currency: Currency, inclGst: Bool, customer: ICustomer?, qty: UQty, period: RentPeriod): Future[SalesPrice] = {
    let am = durationPrice(period.dur)
    let a <- am.mul(qty).to(currency, now)
//    let nm = overnightCharge*nightsCount*itemsQty
    //let n <- nm.to[UMoney[currency]](now)
    a.convertGst(gstRate, model.pricesIncludingGst, inclGst)
  }
  impl back func rentPrices(currency: Currency, inclGst: Bool): Future[[DurPrice]?] = {
    prices.map{p => 
      let p0 <- p.price.to(currency, now)
      DurPrice(p, price = p0) 
        .convertGst(gstRate, model.pricesIncludingGst, inclGst)
    }.allCompleted      
  }
}
