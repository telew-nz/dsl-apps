extend interface IPriceModel {
  func rentReturnDate(delivery: RentDeliveryDesc, returnSchedule: Schedule?, qty: Qty[RentDurationUnit]?): Date = {
    delivery.dispatchDate
  }
  func rentDuration(delivery: RentDeliveryDesc, assetReturn: RentDeliveryDesc, unit: RentDurationUnit?): Qty[RentDurationUnit]? = {
    0.as[Qty[unit.alt(RentDurationUnit.default)]]!
  }
  
  func bondAmount(items: [RentDeliveryItem]): Future[Money?] = {
    items.map(superProductPrice(product)?.bond*itemsQty).sum
  }
  func nightsCount(deliveryDate: Date, returnDate: Date): Qty[Night]? = 0
  
  func chargeOvernight(delivery: RentDeliveryDesc): Bool = {
    delivery.items.exists(chargeOvernight)
  }
  func rentDurationUnits: [RentDurationUnit]? = RentDurationUnit.all.toSet
  func hasNight: Bool = false
  func hasNightCharge: Bool = false
}

extend interface IPrice {
  func bond: Money? = 0
  func rentSalesAmount(currency: Currency, customer: LegalEntity?, itemsQty: Qty, duration: Qty[RentDurationUnit]?, nightsCount: Qty[Night]?, inclGst: Bool): Future[RentAmount] = {
    if (let qty = itemsQty*duration) {
      let a <- salesAmount(currency, customer, qty = qty, inclGst)
      RentAmount(dayAmount = a)
    } else {
      RentAmount()
    }
  }
}

class RentAmount {
  field dayAmount: Money?
  field nightAmount: Money?
  compute amount = dayAmount + nightAmount
}

object EmptyPriceModel extends IPriceModel {
  func superProductPrice(superProduct: ISuperProduct): IPrice? = null
}

class RentDeliveryDesc {
  field dispatchDate: Date
  field deliveryDate: Date
  field schedule: Schedule?
  system field items: [RentDeliveryItem]?
}

extend trait IDelivery {
  func storeSchedule = deliverySrc.or(deliveryDst)?.schedule
  func toRentDeliveryDesc: RentDeliveryDesc = {
    RentDeliveryDesc(dispatchDate = dispatchDate, deliveryDate = deliveryDate, schedule = storeSchedule, 
                     items = items*.as[RentDeliveryItem])
  }
}


