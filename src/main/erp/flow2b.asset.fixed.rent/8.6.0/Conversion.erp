back object Conversion extends IConversion {
  func convert(version: [Int?]): Future[Any] = {
    if (version < [7,0,0]) {
      renameField(RentDeliveryItem, dur, "duration")
      renameField(RentDeliveryItem, durUnit, "durationUnit")
      SalesOrder.all.foreach{so =>
        guard(let ars = field[[ConvEntity]?](so, "flow2b.asset.fixed.rent.assetReturns")) else return {}
        
        let ar = ars.first
        let sd = so.deliveries.first.as[SalesDelivery]!
        sd.silentUpdate(retDeliveryDate, ar.field("deliveryDate"))
        if (ar.field[String]("status") != "Delivered") {
          sd._state = InProgress
        }
        
        ars.drop(1).foreach {r =>
          SalesDelivery(
            salesOrders = [so]
            _receiver = sd._receiver
            store = sd.store
            dispatchDate = sd.dispatchDate
            _state = sd._state
            allItems = r.field("allItems"))
        }
      }
      recreateAllRegisters
    }  
    if (version < [8,0,0]) {
      RentDeliveryItem.all.filter(!try? dur).update(dur = 1)
      TRentProductPrice.all.foreach{p =>
        p.prices = field[[ConvEntity]?](p, "prices").map{d =>
           DurPrice(
             dur = d.field("dur"), unit = d.field("unit"), 
             price = SalesPrice(
               currency = d.field("currency"), current = d.field("price"), regular = d.field("price"))) 
        }
      }
    }
    if (version == [8,0,0]) {
      renameField(RentDeliveryItem, qty, "itemsQty")
    }
    if (version < [8,3,1]) {
      recreateAllRegisters
    }
  }  
}    