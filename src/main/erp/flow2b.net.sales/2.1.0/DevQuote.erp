enum QuoteState {
  case Entered{background = "#ed9" icon = "play"}
  case OrderCreated {
    color = "white"
    icon = "check-circle"
    background = "#090"
  }
  case Canceled {background = "#999" icon = "times-circle"}
}

entity DevQuote extends HasN with NewEngine {
  singular = "Quote"
  plural = "Quotes"
  ref field date: Date = now
  ref field customer: Customer by quotes
  compute currency = customer.getCurrency
  field cancelled: Bool
  ref compute state: QuoteState {
    value = if (cancelled) Canceled else calcState
    update = {
      cancelled = new == Canceled
    }
  }
  func calcState: QuoteState = {
    if (order) OrderCreated
    else Entered
  }
  field items: [DevQuoteItem] inline by quote
  impl func numPrefix = "DQ"
  impl func title = "$fullNum $customer"
  ref compute total = items*.amount.sum
  compute ready = items.all(ready)
  field order: SalesOrder? by quotes {
    from = SalesOrder.all.filter(o => o.customer == customer)
  }
  compute estimation: Estimation? = if (let ess = items*.estimation) Estimation.sum(ess)
  
  impl func nextN = increment(Order.gen)
  impl view form = nav{
    grid{
      row {date customer total}
      estimation
      order
      items
    }
    button("Make Order", visible = ready) {
      let _ <- UI.save(this)
      let order <- back {
        makeOrder
      }
      order.form.open
    }
  }
  
  back func makeOrder: SalesOrder = {
    if (!ready) throw "Quote is not ready"
    if (!order) {
      order = SalesOrder(vendor = OurLegalEntity.onlyOne!, customer = customer)
    }
    items*.makeItem
    order!
  }
  impl event onSave = {
    if (order && updated(order) && ready) {
      makeOrder
    }
  }
  impl view ref = x{state title total}
  report Report {
    impl view list = DevQuote.all >> nav{list{
      ref
    }}
  }
}

extend entity SalesOrder {
  const field quotes: [DevQuote]? by order
}

extend entity Customer {
  field quotes: [DevQuote]? read by customer
}
 
inline entity DevQuoteItem {
  singular = "Issue"
  
  field quote: DevQuote
  system field salesItem: SalesItem?
  
  field issues: [Issue]? 
  field adds: [DevQuoteItemAdd]? inline by item {
    label = "Additional Estimates"
  }
  func ready = (issues || adds) && issues.all(_.estimations) && adds.all(_.estimations)
  compute estimation: Estimation? = if (let estimations = issues*.estimation + adds*.estimation) Estimation.sum(estimations)
  
  back func makeItem: Void = {
    if (!salesItem || !salesItem!.active) {
      let prod: ISubProduct = (issues*.devType + adds*.type).distinct.onlyOne?.product
        .alt(SalesSettings.one.product!)
      salesItem = SalesItem(
        order = quote.order! 
        deliveryItem = DeliveryItem(
          unit = prod.unit
          product = prod
          qty = 1
        )
      )
    }
    let si = salesItem!
    si.amountNoGst = amount
    si.desc = desc
    si.save
  }
  
  func amount: UMoney[quote.currency]? = if (let estimation) {
    SalesSettings.one.rounding.apply(
      issues.map(i => i.devType.rate * i.estimation!.e95.as[UDec[8]]/60).sum
      +
      adds.map(i => i.type.rate * i.estimation!.e95.as[UDec[8]]/60).sum
    )
  }
  
  impl view form = y {
    x {desc >> field(stretch = 1) amount >> field (align = Right)}
    issues
    adds
    
  }
  field _desc: Text? {
    validate = if (!desc) "Description cannot be empty"
  }
  
  compute desc {
    label = "Description"
    value = _desc.or(issues.first?.title)
  }
}

inline entity DevQuoteItemAdd {
  singular = "Estimate"
  field type: DevType
  system field item: DevQuoteItem
  field desc: Text? {label = "Description"}
  field estimations: [Estimation]?
  compute estimation: Estimation? = if (let estimations) Estimation.avg(estimations)
  impl view form = y {
    type 
    estimations
    desc
  }
}


