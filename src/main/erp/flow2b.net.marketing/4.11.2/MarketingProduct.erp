entity MarketingProduct extends WebPage {
  background = "#a73e6c"
  impl field title: String
  field status: PublicationStatus
  field group: MarketingProductGroup by products
  field readiness: Readiness
  field devProducts: [DevProduct]?
  //compute seoCount = seoDescription.length
  field advantages: [ProductAdvantage]? read by product
  field niches: [ProductNiche]? inline by product
  //field features: [MarketingFeature]? read by product
  func anchor = title.replace(" ", "_")
  func htmlName: String = "product/" + title.replace(" ", "_") + ".html"
  func html: Html = 
'<section class="product" id="$(anchor)">
  <div class="cnt">
    <ul class="advantages">$(advantages.filter(status == Published)*.html)</ul>
  </div>
</section>'
  
  
  func groupHtml: Html = '<li>
    <h3 class="readiness m-$readiness">$(title)</h3>
    <div class="desc">$(description)</div>
    <div><a href="/$htmlName">Moreâ†’</a></div>
  </li>'
  
    
  func indexIndustry: ProductNiche = ProductNiche(
    product = this, 
    status = status,
    niche = {
    	if (let n = niches*.niche.first) n
        else Niche(title="-", status = Draft, products = null)
   	}
    //advantages = advantages.map(ProductIndustryAdvantage(advantage = _))
    //features = features.map(ProductIndustryFeature(feature = _))
  )
    
  impl view form = nav{grid {
    group
    title
    status
    readiness
    devProducts
    seoDescription
    seoCount
    description
    advantages >> list(editMode = AlwaysRefRead) {_}
    niches
    //features >> list(editMode = AlwaysRefRead) {_}
  }}
}



enum PublicationStatus {
  case Draft {background = "#999"}
  case Published {
    color = "white"
    background = "#090"
  }
}

enum Readiness {
  case Planned {background = "#ed9"}
  case CommingSoon {background = "#bde"}
  case InDevelopment {background = "#8bf"}
  case Beta {background = "#dea"}
  case Production {
    color = "white"
    background = "#090"
  }
}
