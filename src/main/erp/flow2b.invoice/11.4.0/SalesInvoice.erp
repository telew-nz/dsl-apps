trait ISalesInvoice extends IInvoice {
  func hasSalesIssues = paymentState == Overpaid || overdueState == PaymentOverdue
  func isPurchase: Bool = false
  func startingBalance: Money[currency]? = -total
  func paidAmount = balanceChange
  compute vendor = legalEntity
  func customer: Customer?
  func payee = legalEntity
  func debtAllowance: Money? = payer?.as[Customer]?.debtAllowance
  
  func setoffs: [Setoff]? = credits
  func originLedgers(journal: Journal, date: Date, amount: Money): Future[[Ledger]?] = {
    if (!isInstant) {
      [LDebt(account = AccountsReceivable, origin = this, journal = journal, isSetoff = true, 
             legalEntity = this.legalEntity, date = date, trAmount = amount, 
             counterparty = this.debtCounterparty!, currency = currency)]
    } else {
      let lgs <- instantLedgers(journal, date)
      revisions*.gstLedgers(journal, date) + lgs
    }
  }
  func instantLedgers(journal: Journal, date: Date): Future[[Ledger]?] 
  
  func cashFlow = Sales
  
  //func debtLedger: LDebt = receivableLedger
  //func isTheir = customer?.isTheir
  
  view statusesView = x {
    issueState
    paymentState
    balance.abs >> field(visible = balance)
    overdueState
  }
  
  view ref = x{title statusesView}
}