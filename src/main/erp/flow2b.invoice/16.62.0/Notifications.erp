notify NewInvoice[Invoice](
  mainEntity = order
  title = "New $name"
  to = invoiceAddressee.toSeq
  contacts = invoiceContact.toSeq
  preferred = [EMail]
  subject = "$legalEntity: New $name $number"
  embeddedComment = true
  text = {    
'<div style="margin-bottom: 2em;">
<h2 style="font-size: 150%; margin-bottom: 0;">$legalEntity</h2>
<h4 style="margin-top: 0;margin-bottom: 2em;font-weight: 400;"><a href="$billPublicUrl" style="text-decoration: none; color: #333;">New $name</a></h4>
$(if (let comment) '<div style="margin-bottom: 3em; font-size: 125%">$comment</div>')
$htmlViewOnline
$htmlUnpaid
$htmlPayTo
$htmlDownload
</div>
'
  }
) { 
  trigger Trg(when = created && !isPurchase && (Date.now - date) < 7_day)
}

notify OverdueInvoice[Invoice](
  mainEntity = order
  title = "Payment Overdue"
  to = invoiceAddressee.toSeq
  contacts = invoiceContact.toSeq
  preferred = [EMail]
  subject = "$legalEntity: Payment Overdue $overdueDays days: $name $number"
  embeddedComment = true
  text = {    
'<div style="margin-bottom: 2em;">
<h2 style="font-size: 150%; margin-bottom: 0;">$legalEntity</h2>
<h4 style="margin-top: 0;margin-bottom: 2em;font-weight: 400;"><a href="$billPublicUrl" style="text-decoration: none; color: #333;">Payment Overdue $overdueDays days</a></h4>
$(if (let comment) '<div style="margin-bottom: 3em; font-size: 125%">$comment</div>')
$htmlViewOnline
$htmlUnpaid
$htmlPayTo
$htmlDownload
</div>
'
  }
) 
 
extend entity Invoice {
  back func billPublicUrl = publicUrl(invoiceCpc?.billingContact!, readOnly = true)
  back func pdfUrl: Url = apiUrl(invoiceCpc?.billingContact!, readOnly = true, "pdf")
  back func htmlPayTo: Html? = {
    if(!isQuote && invoiceToPay) if(let paymentAccounts) {
'<ul style="list-style: none; padding: 0;">
   <label>Pay to Bank account:</label>
   $(paymentAccounts.map(acc => '<li style="font-family: monospace">$(acc.number)</li>'.as[Html]))
   <label style="margin-top:0.5em; display: block">Reference:</label>
   <li style="font-family: monospace">$(order.number)</li>
</ul>'
    }
  }
  back func htmlUnpaid: Html? = {
    if (!isQuote) {
      if (let invoiceToPay) {
'<p>
   <span style="font-size: 150%;font-family: monospace;font-weight: bold; ">$invoiceToPay</span>   
   $(if(let overdueDays) '<span style="color: #c00; font-size: 120%; font-weight: bold"> overdue $overdueDays days</span>' else '<span> to pay</span>')
   $(if(let dueDate where !overdueDays) '<span> by </span><span style="font-size: 120%">$(dueDate.format("EEEEE dd MMMMM yyyy"))</span>')
   
</p>'
      }
      else if (invoiceToRefund) '<p><span style="font-size: 150%;font-family: monospace;font-weight: bold;">$invoiceToPay</span><span> will be <b>refunded</b></span></p>'
      else '<p style = "font-size: 150%;font-weight: bold;">PAID</p>'
    } else if (let dueDate) {
      '<span>To accept by </span><span style="font-size: 120%">$(dueDate.format("EEEEE dd MMMMM yyyy"))</span>'
    }
  }
  func color = if (isQuote) '#ad69a3' else if (overdueDays) '#d04747' else '#46abad'
  back func htmlViewOnline: Html = {
'<div style="margin-bottom: 2em;">
  <a href="$billPublicUrl" style="color: white; background: $color; padding: 0.7em 1em; text-decoration: none;">View$(if (overdueDays) " Overdue") $name $number Online &gt;</a>
</div>'
  }
  back func htmlDownload: Html = {
    let img = if (isQuote) "file-pdf-quote.png" else if (overdueDays) "file-pdf-overdue.png" else "file-pdf-invoice.png"
'<div style="margin-top: 3em;">
  <a href="$pdfUrl" style="color: $color; text-decoration: none;"><img style="vertical-align: middle" src="https://flow2b.com/s/img/$img"/><span style="position: relative; top: 3px;"> Download PDF</span></a>
</div>'
  }
  
  func overdueDays = if (let dueDate where invoiceToPay) (Date.now - dueDate).days.round(ceil, 0).positive.noUnit
  
  back func getPdf: Future[File] = {
    let pdf <- form.pdf
    FileGeneric(name = "$legalEntity $number $name.pdf", content = pdf)
  }
}