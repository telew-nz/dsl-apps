trait IPaymentTerms {
  background = "#d68400"
  func paymentDueDate(invoiceDate: Date, deliveryDate: Date?): Date?
  func deliveryPrepayment: Percent[2]?
  func considerDebt = true
  func canDispatch(invoice: IInvoice): Future[Bool] = {
    if (!invoice.total) Future(true)
    else if (considerDebt) {
      let debt <- LDebt.at(invoice.date)
          .filter(balance && counterparty == invoice.customer && account.money)
          .map(balance.to[Money[invoice.currency]](Date.now))
          .agg(sum)
      let allowance <- invoice.customer.debtAllowance.to[Money[invoice.currency]](Date.now)
      let delta <- invoice.revisions*.moneyLedger.filter(invoice.date >= _.date)*.trAmount.sum.to[Money[invoice.currency]](Date.now)
      let p = (invoice.paidAmount + allowance - debt + delta)
      (p.as[Percent[2]]/invoice.total) >= deliveryPrepayment
    } else {
      Future((invoice.paidAmount.as[Percent[2]]/invoice.total) >= deliveryPrepayment)
    }
  }
}

entity PaymentTerms extends IPaymentTerms {
  field title: String
  ref field deliveryPrepayment: Percent[2]? {
    label = "Prepayment required for delivery"
  }
  ref field paymentDueDate: PaymentDueDate = PaymentDueDateAfter()
  func paymentDueDate(invoiceDate: Date, deliveryDate: Date?): Date? = {
    if (deliveryPrepayment) {
      if (let dd = deliveryDate) paymentDueDate.dueDate(dd)
    } else paymentDueDate.dueDate(invoiceDate)
  }
  func onSave = {
    IInvoice.all.filter(paymentTerms == this)*.touch
  }
}


interface PaymentDueDate {
  func dueDate(invoiceDate: Date): Date
}

class PaymentDueDateAfter extends PaymentDueDate {
  singular = "After Fixed Time"
  field paymentDue: Duration[unit, 0] 
  field unit: DateUnit = day
  
  func dueDate(invoiceDate: Date): Date = invoiceDate + paymentDue
  view form = grid {
    paymentDue >> field(canEditUnit = true)
  }
}
class PaymentDueDateNextMonth extends PaymentDueDate {
  singular = "Fixed Month Day"
  field dayOfMonth: Int = 20
  view form = grid {
    dayOfMonth
  }
  
  func dueDate(invoiceDate: Date): Date = {
    let dof = dayOfMonth.as[Duration[day]]!
    if (invoiceDate.day < dof) invoiceDate.start(of = month) + dof - 1_day
    else invoiceDate.start(of = month) + 1_month + dof - 1_day
  }
}

