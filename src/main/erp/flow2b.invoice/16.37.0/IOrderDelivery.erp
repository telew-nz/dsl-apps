trait IOrderDlv extends Entity {
  func invTitle: String
  func orders: [IOrder]
  
  func dlvReceiver: LegalEntity?
  func shipTo: ILocation?
  func dlvItems: [InlineEntity]?
  func dlvPrePath: IProdMovePath?
  var dlvState: DlvState
  func dlvPostPath: IProdMovePath?
  
  //func dlvHasProgress: Bool
  func dlvOrderStates: [OrderState]
  func dlvInTransitDate: Date
  func dlvInProgessDate: Date
  func dlvRetInTransitDate: Date
  func dlvCompleteDate: Date
  
  func reconDates: [Date] = [dlvInTransitDate, dlvInProgessDate, dlvRetInTransitDate, dlvCompleteDate].distinct
  
  impl func preComputeItems = orders
  
  func is(state: DlvState): Bool = state == dlvState || (dlvState != Canceled && state < dlvState)
  func date(state: DlvState): Date? = if(is(state)) state.date(this)
}

enum DlvState(active: Bool, started: Bool, hasDate: Bool, path0: PathState, path1: PathState, order: OrderState, date: IOrderDlv => Date?) {
  case Draft(active = true, started = false, hasDate = false, path0 = Draft, path1 = Draft, order = ToDispatch, date = null) {background = "#ecd"}
  case Planned(active = true, started = false, hasDate = false, path0 = Planned, path1 = Planned, order = ToDispatch, date = null) {background = "#ed9"}
  
  case Prepared(active = true, started = true, hasDate = false, path0 = InTransit, path1 = Planned, order = Prepared, date = null) {background = "#c3e8c7"}
  case InTransit(active = true, started = true, hasDate = true, path0 = InTransit, path1 = Planned, order = InTransit, date = _.dlvInTransitDate) {background = "#cce0ff"}
  case InProgress(active = true, started = true, hasDate = true, path0 = Complete, path1 = Planned, order = InProgress, date = _.dlvInProgessDate) {background = "#8bf"}
  case RetInTransit(active = true, started = true, hasDate = true, path0 = Complete, path1 = InTransit, order = RetInTransit, date = _.dlvRetInTransitDate) {
    label = "In Transit Return"
    background = "#cce0ff"
  }
  case PostProcessing(active = true, started = true, hasDate = false, path0 = Complete, path1 = InTransit, order = PostProcessing, date = null) {background = "#c3e8c7"}
  
  
  case Complete(active = false, started = true, hasDate = true, path0 = Complete, path1 = Complete, order = Complete, date = _.dlvCompleteDate) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false, started = false, hasDate = false, path0 = Canceled, path1 = Canceled, order = Canceled, date = null) {background = "#ddd"}
  
  object func path0(st: PathState): DlvState = DlvState.all.reverse.find(path0 == st)!
  object func path1(st: PathState): DlvState = DlvState.all.find(path1 == st)!
}