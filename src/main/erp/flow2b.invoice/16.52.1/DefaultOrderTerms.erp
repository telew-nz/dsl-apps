object DefaultOrderTerms extends IIOrderTerms {
  impl func orderState(order: IOrder): OrderState = {
    if (order.dlvIs(Complete) && order.paid) Closed
    else if (let ds = order.orderStateDelivery) ds
    else if (order.totalDue && order.unpaidAmount <= 0) Prepaid    
    else if (order.accepted) Accepted
    else if (order.isEmpty) Quote
    else Quote
  }
  impl func due(order: IOrder): Due = {
    let ds = order.orderStateDelivery
    Due(amount = if (order.accepted || ds) order.invoiceTotal)
  }
  impl func hasAcceptance: Bool = true
  impl func acceptedByDefault: Bool = true
  impl func reserveQuote: Bool = true
  
  impl func updatableStates(order: IOrder): [OrderState] = {
    let s = order.calcState
    if (s == Canceled) [OrderState.Canceled]
    else {
      let dss: [OrderState] = order.dlvStates
      let ass: [OrderState] = (if (order.paid && order.invoiceTotal) [OrderState.Prepaid] else [OrderState.Quote, OrderState.Accepted])
      dss + ass + OrderState.Canceled
    }
  }
}