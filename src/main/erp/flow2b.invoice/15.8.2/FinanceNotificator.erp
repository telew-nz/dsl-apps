object FinanceNotificator extends SystemService {
  impl func title = "Finance Notificator"
  field sendInvoiceToCustomers: Bool = true
  func serviceAccess: [Role]? = [Admin]
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
    
    sendInvoiceToCustomers
    contacts
  }}
  field contacts: [IContact]?
  impl func ourContacts = contacts
}

class NewInvoiceNotif extends SystemJob {
  impl func service = FinanceNotificator
  field invoice: Invoice
  impl func do = {
    if (let c = invoice.order.payer?.invoiceContact) {
      c.join(invoice)
      invoice.touch
      Activity.current!.setMainEntity(invoice)
      Activity.current!.makePublic("New ${invoice.name}")
    }
  }
}

extend trait IOrder extends DeferredJob {
  func service = FinanceNotificator
  func jobDate = if (let dd = dueDate) {
    if (dd > now && !complete && !canceled) dd
  }
  func do = {
    if (let dd = dueDate) {
      updateDue()
      save
      
      /*Activity.current!.setMainEntity(this)
      let t = if (let dueIn = (dd - Date.now).days.round(floor, 0)) {
        if (dueIn > 0) "Invoice is due in $dueIn"
        else "Invoice is overdue by $(-dueIn)"
      } else {
        "Invoice is due today"
      }
      if (isPurchase) {
        Activity.current!.comment(t)
      } else {
        payer?.invoiceContact?.join(this)
        Activity.current!.makePublic(t)
      }*/
    }
  }
}