trait IInvoice extends IInvoiceRevision with Debt with DebtOrigin {
  background = "#d68400"
  plural = "Invoices"
  singular = "Invoice"
      
  func canceled: Bool = items.all(canceled) && allItems
  func paidAmount: Money[currency]?
  compute receivedAmount: Money[currency]? = setoffs.filter(amount > 0)*.amount.sum
  compute refundedAmount: Money[currency]? = -setoffs.filter(amount < 0)*.amount.sum
  func orderCounterparty: LegalEntity?
  func setoffs: [Setoff]?
  func debtDueDate = dueDate
  func references: [String]?
  func isPurchase: Bool
  func cashFlow: CashFlowCategory
  func prev: InvoiceRevision? = revisions.last
  field revisions: [InvoiceRevision]? inline by invoice
  func cashFlows(date: Date, amount: Money): [CashFlowAmount]? = {
    revisionAt(date).cashFlows(amount)
  }
  func invoice: IInvoice = this
  func overpaid = paidAmount > total
  func paid = paidAmount >= total
  func unpaidAmount = total - paidAmount
  func vendor: LegalEntity?
  func customer: LegalEntity?
  func payer: LegalEntity?
  func payee: LegalEntity?
  func deliveryDate: Date? = if (items.all(delivered)) items*.delivery*.deliveryDate.max
  func allItems: [IInvoiceItem]?
  func deliveries: [IDelivery]? = allItems.filter(active)*.delivery.distinct
  func delivered: Bool = allItems.all(!active || delivered)
  compute paidAmounts: [IInvoiceItem: Money[currency]?]? = {
    var a = paidAmount - items.filter(invoiceAmount < 0)*.invoiceAmount.sum
    items.filter(invoiceAmount > 0).map{i => 
      let v = a.min(i.invoiceAmount)
      a = (a - v)
      (i, v)
    }.toMap
  }
  func paidAmountForItem(item: IInvoiceItem): Money[currency]? = paidAmounts.apply(item)
  func revisionAt(date: Date): IInvoiceRevision = {
    revisions.filter(r => r.date <= date).sortBy(date.desc).first?.as[IInvoiceRevision].alt(this)
  }
   
  ref compute issueState: InvoiceIssueState = {
    if (!revisions) InvoiceNotIssued
    else if (allItems.exists(revisionNotIssued)) InvoiceModified
    else InvoiceIssued
  }  
  
  field paymentTerms: IPaymentTerms?
  stored compute dueDate: Date? = {
    if (!paid && revisions) paymentTerms?.paymentDueDate(revisions.last!.date, deliveryDate)
  }
  ref stored compute overdueState: PaymentOverdueState {
    value = {
      if (paidAmount == total) Paid
      else if (let dd = dueDate) {
        if (dd < now) PaymentOverdue else NoPaymentOverdue
      }
      else NoPaymentOverdue
    }
    visible = overdueState == PaymentOverdue
  }
  stored compute canDispatch: Bool <- {
    (if (let terms = paymentTerms, let t = total) terms.canDispatch(this)
    else Future(true))
  } 
  compute prepaymentDate: Date? = {
    if (let prepayment = paymentTerms?.deliveryPrepayment, let a = total*prepayment) {
      setoffs.accum(amount.sum).find(amount >= a).map(#0.date)
    } else date
  } 
  
  event onSave = {
    processRevision()
  }
  
  func processRevision(): Void = {
    if (!deleted) {
      if (let rs = revisions) {
        items.foreach {item =>
          if (item.revisions.filter(id) && item.needsRevision && !item.canceled) {
            let newItem = item.copy(revisions = [], prev = null)
            newItem.prev = item.rollback
            item.setActive(false)
          }
        }
        if (hasNewPayment && allItems.exists(revisionNotIssued)) {
          createRevision.save
        }
      } else if (hasNewPayment) {
        createRevision.save
      }
    }
    allItems.filter(!active && !revisions && canBeDeleted)*.delete
  }
  func hasNewPayment = credits*.credit.exists(!_.id) || debits*.debit.exists(!_.id)
  front func uiCurrentRevision: Future[InvoiceRevision] = {
    if (issueState != InvoiceIssued) {
      UI.save(createRevision)
    } else {
      revisions.last!
    }
  }
  
  func createRevision: InvoiceRevision = {
    InvoiceRevision(
      prev = revisions.last,
      invoice = this, items = this.items, currency = this.currency, 
      date = if (revisions) Date.now else setoffs*.date.min.alt(Date.now)
    )
  }
  //func debtLedger: LDebt
  view revisionsView = y(label = "Invoice Revisions", visible = id) {
    revisions >> list (action = form.open) {
      grid (labels = None, width = 1.2) {
        row {
          number >> field(width = 0.2) date >> field(width = 0.6) 
          diffTotal >> field(label = "Difference", showPlus = true, width = 0.2, align = Right) 
          total >> field(width = 0.2, align = Right)
        }
    }}
    add ("Issue", visible = issueState != InvoiceIssued && id) {issue()}
  }
  front func issue(): Future[Void] = {
    let revision <- uiCurrentRevision
    revision.form.print()
  }
  
  view invoiceButtons = group {
    button("Issue", visible = issueState != InvoiceIssued && id) {issue()}
    add("Payment", visible = balance && id) {addPayment()}
    generalLedgerButton
  }
  
  front func addPayment(): Void = {
    if (isPurchase) {
      if (let a = balance) {
        let setoffs = [Setoff(credit = this, amount = a)] 
        if (a < 0) IncomingPayment(amount = -a, credits = setoffs).form.open
        else if (a > 0) OutgoingPayment(amount = a, credits = setoffs).form.open
      }
    } else {
      if (let a = -balance) {
        let setoffs = [Setoff(debit = this, amount = a)]
        if (a < 0) OutgoingPayment(amount = -a, debits = setoffs).form.open
        else if (a > 0) IncomingPayment(amount = a, debits = setoffs).form.open
      }
    }
  }
  
  report Report {
    field accountant: User? {
      from = User.all.filter(is(Accountant))
    }
    field state: [PaymentState]?
    field from: Date?
    field to: Date?
    
    view list = IInvoice.all.filter(
      journalDate >=? from && journalDate <=? to 
      && (!this.state || this.state.contains(reconcileState.paymentState))
      && isFor(accountant, Accountant)
    ).sortBy(journalDate.desc) >> nav{list(canAdd = false){}}
  }
}

