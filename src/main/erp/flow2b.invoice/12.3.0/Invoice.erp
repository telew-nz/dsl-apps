extend enum DashboardIssue {
  case OverpaidInvoice(role = Accountant, priority = major)
  case InvoiceNotIssued(role = Accountant, priority = default)
  case InvoiceModified(role = Accountant, priority = default)
} 

trait IInvoice extends IInvoiceRevision with Debt with DebtOrigin with DashboardItem {
  background = "#d68400"
  plural = "Invoices"
  singular = "Invoice"
  ref stored compute reconcileState: ReconcileState 
  field revisionDate: Date?
  func journalDate = if (let d = revisions.last?.date) {
    if (let rd = revisionDate) if (rd > d) rd else d + 1_minute
    else d + 1_minute
  } else date
  func issues = {
    let ist = issueState
    (
      (if (reconcileState == OverReconciled) [DashboardIssue.OverpaidInvoice])
    + if (ist == InvoiceNotIssued && shouldBeIssued) [DashboardIssue.InvoiceNotIssued]
      else if (ist == InvoiceModified) [DashboardIssue.InvoiceModified]
    ).toSet
  }
  func fixes(issue: DashboardIssue) = {
    if (issue == OverpaidInvoice) {
      let opa = total - paidAmount
      [Fix(text = "Check whether it was really overpaid or incorrectly reconciled"),
       Fix(text = 
           if (isPurchase) "Ask to return $opa"  
           else "Return $opa to the payer"),
       Fix(text = "Keep $opa on a Loan note")
      ]
    } else if (issue == InvoiceNotIssued) {
      [Fix(text = "Issue invoice", acts = [Act(label = "Issue", do = this.issue())])]
    } else if (issue == InvoiceModified) {
      [
        Fix(text = "Issue credit/debit note", acts = [Act(label = "Issue", do = this.issue())]),
        Fix(text = "In the case when it was accidently issued, delete the original invoice and issue again", acts = [Act(label = "Reissue", do = Query(this).foreach{
          this.reissue()
        })]),
        Fix(text = "Rollback modifications", acts = [Act(label = "Rollback", do = Query(this).foreach{
          rollbackInvoice()
        })])
      ]
    }
  }
  func calcReconcileState = {
    let t = total
    if (canceled) Canceled 
    else if (paidAmount == t) Reconciled 
    else if (paidAmount > t) OverReconciled 
    else if (paidAmount) PartiallyReconciled 
    else Unreconciled
  }
  func debtLedgers = moneyLedger.toSeq + revisions*.moneyLedger
  
  back func isInstant: Bool
  func canceled: Bool = items.all(canceled) && allItems
  func paidAmount: Money[currency]? = if (back) backPaidAmount else frontPaidAmount
  back func backPaidAmount: Money[currency]?
  front func frontPaidAmount: Money[currency]? 
  
  compute receivedAmount: Money[currency]? = setoffs.filter(amount > 0)*.amount.sum
  compute refundedAmount: Money[currency]? = -setoffs.filter(amount < 0)*.amount.sum
  func orderCounterparty: LegalEntity?
  func setoffs: [Setoff]?
  func debtDueDate = dueDate
  func references: [String]?
  func isPurchase: Bool
  func cashFlow: CashFlowCategory
  func prev: InvoiceRevision? = revisions.last
  field revisions: [InvoiceRevision]? inline by invoice
  back func cashFlows(date: Date, amount: Money): [CashFlowAmount]? = {
    revisionAt(date).cashFlows(amount)
  } 
  func invoice: IInvoice = this
  func overpaid = paidAmount > total
  func paid = paidAmount >= total
  func isInstantPaid: Bool
  func unpaidAmount = total - paidAmount
  func vendor: IVendor?
  func customer: ICustomer?
  func payer: ICustomer?
  func payee: IVendor?
  func deliveryDate: Date? = if (items.all(delivered)) items*.delivery*.deliveryDate.max
  func allItems: [IInvoiceItem]?
  func deliveries: [IDelivery]? = allItems.filter(active)*.delivery.distinct
  func delivered: Bool = allItems.all(!active || delivered)
  func revisionAt(date: Date): IInvoiceRevision = {
    revisions.filter(r => r.date <= date).sortBy(date.desc).first?.as[IInvoiceRevision].alt(this)
  }
  func debtAllowance: Money?
   
  func shouldBeIssued: Bool = paidAmount
  ref compute issueState: InvoiceIssueState = {
    if (!revisions) InvoiceNotIssued
    else if (allItems.exists(revisionNotIssued)) InvoiceModified
    else InvoiceIssued
  }  
  func rollbackInvoice(): IInvoice = {
    if (let l = revisions.last) {
      items.filter(revisionNotIssued).foreach {i =>
        i.rollbacked = true
        i.delete
      }
      l.items.foreach {i =>
        i.active = true
        i.save
      }
    }
    this
  } 
  field paymentTerms: IPaymentTerms?
  func getPaymentTerms: IIPaymentTerms
  stored compute dueDate: Date? = {
    if (!paid && revisions) paymentTerms?.paymentDueDate(revisions.first!.date, deliveryDate)
  }
  ref stored compute overdueState: PaymentOverdueState {
    value = {
      if (paid) Paid
      else if (let dd = dueDate) {
        if (dd < now) PaymentOverdue else NoPaymentOverdue
      }
      else NoPaymentOverdue
    }
    visible = overdueState == PaymentOverdue
  }
  system stored compute canDispatch: Bool 
  compute prepaymentDate: Date? = {
    if (let prepayment = getPaymentTerms.deliveryPrepayment, let a = total*prepayment) {
      setoffs.accum(amount.sum).find(amount >= a).map(#0.date)
    } else date
  } 
  
  func postOnSave(): Future[Void] = {
    reconcileState = calcReconcileState
	if (!paid && total) {
      let d <- getPaymentTerms.canDispatch(this)
      canDispatch = d
    } else {
      canDispatch = true
    }
  }
  
  func processRevision(): Void = {
    if (!deleted && !canceled) {
      if (let rs = revisions) {
        items.foreach {item =>
          if (item.revisions.filter(id) && item.needsRevision && !item.canceled) {
            if (issueState != InvoiceModified) revisionDate = Date.now
            let newItem = item.copy(revisions = [], prev = null)
            newItem.prev = item.rollback
            item.setActive(false)
          }
        }
        if (hasNewPayment && issueState != InvoiceIssued) {
          createRevision.save
        }
      } else if (hasNewPayment && issueState != InvoiceIssued) {
        createRevision.save
      }
      allItems.filter(!active && !revisions && canBeDeleted)*.delete
    }
    
  }
  func hasNewPayment = credits*.credit.exists(!_.id) || debits*.debit.exists(!_.id)
  front func uiCurrentRevision: Future[InvoiceRevision] = {
    if (issueState != InvoiceIssued) {
      UI.save(createRevision)
    } else {
      revisions.last!
    }
  }
  
  func createRevision: InvoiceRevision = {
    InvoiceRevision(
      prev = revisions.last,
      invoice = this, items = this.items, currency = this.currency, 
      date = if (revisions) Date.now else setoffs*.date.min.alt(Date.now)
    )
  }
  //func debtLedger: LDebt
  view revisionsView = y(label = "Invoice Revisions", visible = id) {
    revisions >> list (action = form.open) {
      grid (labels = None, width = 1.2) {
        row {
          number >> field(width = 0.2) date >> field(width = 0.6) 
          diffTotal >> field(label = "Difference", showPlus = true, width = 0.2, align = Right) 
          total >> field(width = 0.2, align = Right)
        }
    }}
    add ("Issue", visible = issueState != InvoiceIssued && id) {issue()}
  }
  front func issue(): Future[Void] = {
    let revision <- uiCurrentRevision
    revision.form.open()
  }
  
  back func reissue(): Void = {
    revisions.last?.delete
    allItems.filter(!active && !revisions && canBeDeleted)*.delete
    createRevision.save
  }
  
  view invoiceButtons = group {
    button("Issue", visible = issueState != InvoiceIssued && id) {issue()}
    add("Payment", visible = balance && id) {addPayment()}
    generalLedgerButton
  }
  
  front func addPayment(): Void = {
    if (isPurchase) {
      if (let a = balance) {
        let setoffs = [Setoff(credit = this, amount = a)] 
        if (a < 0) IncomingPayment(amount = -a, credits = setoffs).form.open
        else if (a > 0) OutgoingPayment(amount = a, credits = setoffs).form.open
      }
    } else {
      if (let a = -balance) {
        let setoffs = [Setoff(debit = this, amount = a)]
        if (a < 0) OutgoingPayment(amount = -a, debits = setoffs).form.open
        else if (a > 0) IncomingPayment(amount = a, debits = setoffs).form.open
      }
    }
  }
  
  report Report {
    field accountant: User? {
      from = User.all.filter(is(Accountant))
    }
    field state: [PaymentState]?
    field from: Date?
    field to: Date?
    
    view list = IInvoice.all.filter(
      journalDate >=? from && journalDate <=? to 
      && (!this.state || this.state.contains(reconcileState.paymentState))
      && isFor(accountant, Accountant)
    ).sortBy(journalDate.desc) >> nav{list(canAdd = false){}}
  }
}

