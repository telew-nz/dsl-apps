enum InvoiceIssueState {
  case InvoiceNotIssued {background = "#ed9"}
  case InvoiceIssued {color = "white" background = "#090"}
  case InvoiceModified {background = "#f99"}
}

trait IOrderRevision extends DebtOrigin {
  func isQuote = false
  func currency: Currency
  func date: Date
  func items: [IOrderItem]?
  func items0 = if (!canceled) items
  func paid: Bool = recon
  func debtAmount = if (order.isPurchase) prev?.total - total else total - prev?.total
  func canceled: Bool
  func preComputeItems = prev.toSeq
  func debtDueDate = dueDate
  func debtCurrency = currency
  func debtLedgers = moneyLedger.toSeq
  
  ref system stored compute overdueState: PaymentOverdueState {
    visible = overdueState == PaymentOverdue
  }
  
  system stored compute gstAmount: Money[currency]? {
    value = items*.gstAmount.sum
  }
  system stored compute totalNoGst: Money[currency]? {
    value = items*.invoiceAmountNoGst.sum
  }
  stored compute dueDate: Date? = {
    order.paymentTerms?.paymentDueDate(journalDate, order.deliveryDate)
  }

  ref compute total: Money[currency]? = totalNoGst + gstAmount
  func order: IOrder
  func number: String
  func prev: Invoice?
  func isNote = false
  func moneyCalced: Bool = {
    (if (total != prev?.total) moneyLedger?.calced else true) && (if (let prev) prev.moneyCalced else true)
  }
  event onSave = {
    if (moneyCalced) {
      overdueState = {
        if (paid) Paid
        else if (let dd = dueDate) {
          if (dd < now) PaymentOverdue else NoPaymentOverdue
        }
        else NoPaymentOverdue
      }
    } else if (!try? overdueState) {
      overdueState = if (isInstant) Paid else NoPaymentOverdue
    }
  }
  
  register gstLedgers: [LTax]?
  register moneyLedger: LMoneyDebt?
  register deliveryLedgers: [LDeliveryDebt]? 
  back func updateLedgers(): Void = {
    let cr = !isInstant && !isQuote
    debtAllowance = 0
    moneyLedger = if (cr) {
      let pt = prev?.total
      if (let t = (if (!canceled) total) - pt, let cp = order.debtCounterparty) {
        LMoneyDebt(
              journal = this, 
              trAmount = if (order.isPurchase) -t else t, counterparty = cp, 
              currency = currency)
      }
    }
    gstLedgers = if (cr) {
      gstLedgers(this, journalDate)
    }
    deliveryLedgers = if (cr) {
      if (let cp = order.deliveryCounterparty) {
        deliveryMap.fullJoin(prev?.deliveryMap, left.alt(0) - right.alt(0)).toSeq
          .mapOpt{
            LDeliveryDebt(account = ledgerAccount, origin = _.delivery?.as[Journal].alt(order), journal = this, 
                  trAmount = if (order.isPurchase) #2 else -(#2), 
                  counterparty = cp, currency = currency)
          }
      }
    }
  }
  
  back func gstMap = if (order.legalEntity.hasGst) {
    items0
      .groupBy(rate = gstRate)
      .agg(gstAmount = gstAmount.sum, invoiceAmount = invoiceAmountNoGst.sum)
  }
  back func gstLedgers(journal: Journal, date: Date): [LTax]? = {
    gstMap.fullJoin(prev?.gstMap, (
      gstAmount = left?.gstAmount - right?.gstAmount, 
      invoiceAmount = left?.invoiceAmount - right?.invoiceAmount
    )).toSeq.filter(gstAmount || invoiceAmount).map {
      LTax(tax = Gst, currency = this.currency, journal = journal, date = date, 
           rate = #0,
           isAdjustment = isNote,
           trAmount = if (order.isPurchase) gstAmount else -gstAmount, 
           taxedAmount = if (order.isPurchase) invoiceAmount else -invoiceAmount,
           isInstantPayment = isInstant
          )
    }
  }
  back func deliveryMap = {
    items0
    	.groupBy(delivery, ledgerAccount)
        .agg{
           _*.invoiceAmount(noGst = this.order.legalEntity.hasGst).sum 
        }
  }
  
  back func debtCashFlows: [CashFlowAmount]? = if (let debtAmount) {
    if (let ams = items0.groupBy(cashFlow).agg(invoiceAmountWithGst.sum).toSeq) {
      ams.distribute[Money](debtAmount, by = invoiceAmountWithGst)
        .filter(value)
        .map(i => CashFlowAmount(cashFlow = i.cashFlow, amount = i.value!))
    } else {
      [CashFlowAmount(cashFlow = order.cashFlow, amount = debtAmount)]
    }
  }
}
