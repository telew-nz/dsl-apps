trait ISalesInvoice extends IInvoice {
  func hasSalesIssues = paymentState == Overpaid || overdueState == PaymentOverdue
  func isPurchase: Bool = false
  func startingBalance: Money[currency]? = -total
  func paidAmount = balanceChange
  compute vendor = legalEntity
  compute customer = debtCounterparty
  
  func setoffs: [Setoff]? = credits
  func originLedgers(journal: Journal, date: Date, amount: Money): Future[[Ledger]?] = {
    [LDebt(account = AccountsReceivable, origin = this, journal = journal, isSetoff = true, 
           legalEntity = this.legalEntity, date = date, trAmount = amount, counterparty = this.customer, currency = currency)]
  }
  func cashFlow = Sales
  
  //func debtLedger: LDebt = receivableLedger
  func isTheir = customer?.isTheir.alt(false)
  
  view statusesView = x {
    issueState
    paymentState
    balance.abs >> field(visible = balance)
    overdueState
  }
  
  view ref = x{title statusesView}
}