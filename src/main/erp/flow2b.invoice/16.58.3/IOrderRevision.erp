enum InvoiceIssueState {
  case InvoiceNotIssued {background = "#ed9"}
  case InvoiceIssued {color = "white" background = "#090"}
  case InvoiceModified {background = "#f99"}
}

trait IOrderRevision extends Entity with DebtOrigin {
  func paymentState: PaymentState
  func currency: Currency
  func date: Date
  func items: [IOrderItem]?
  func items0 = if (!canceled) items
  func paid: Bool = recon

  impl func preComputeItems = prev.toSeq
  impl func debtCurrency = currency
  
  func debtTotal = totalDue
  ref compute diffTotalDue: Money[currency]? {
    value = debtTotal - prev?.debtTotal
  }
  func canceled: Bool
  
  func dueDate: Date?
  func debtTable: [OrderDebtRow]?
  //override func debtBalance: DebtBalance? = order.debtBalance
  func dueRate: Percent[2]? 
  func unpaidAmount: Money[currency]? 
   
  
  compute gstAmount: UMoney[currency]? {
    value = items*.gstAmount.sum.positive
  }
  compute invoiceSubtotalNoGst: UMoney[currency]? {
    value = items.filter(invoicePosition == Lines)*.invoiceAmountNoGst.sum.positive
  }
  compute invoiceTotalNoGst: UMoney[currency]? {
    value = items*.invoiceAmountNoGst.sum.positive
  }
  ref compute invoiceTotal: UMoney[currency]? {
    value = items*.invoiceAmountWithGst.sum.positive
  }
  compute invoicePayments: [OrderDebtRow]? = {
    if (isInstant) order.payments.map(OrderDebtRow(date = date, doc = _, amount = -this.invoiceTotal)) 
    else debtTable.filter(amount < 0 && doc && doc?.is[Payment])
  }
  compute invoiceOffsets: [OrderDebtRow]? = debtTable.filter(amount < 0 && doc && !doc?.is[Payment] && doc !in allRevisions)
  
  compute invoicePaidAmount: Money[currency]? = -invoicePayments*.amount.sum
  compute invoiceOffsetAmount: Money[currency]? = -invoiceOffsets*.amount.sum
  compute invoiceToPay: UMoney[currency]? = (totalDue - invoicePaidAmount - invoiceOffsetAmount).positive.as[UMoney[currency]]
  compute invoiceToRefund: UMoney[currency]? = (invoicePaidAmount + invoiceOffsetAmount - invoiceTotal).positive
  
  func totalDue: Money[currency]?
  
  func order: IOrder
  func number: String
  func prev: Invoice?
  func isNote = false
  
  
  func allRevisions: [IOrderRevision] = order.invoices.takeWhile(_ != this) + this
  compute dueInvoices = allRevisions*.as[Invoice].filter(debtAmount)
}
