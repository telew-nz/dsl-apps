trait IPurchaseInvoice extends IInvoice {
  func isPurchase: Bool = true
  func startingBalance: Money[currency]? = total
  func paidAmount = -balanceChange
  func setoffs: [Setoff]? = debits
  compute customer = legalEntity
  func vendor: Vendor?
  func payer = legalEntity
  func debtAllowance: Money? = payee?.as[Vendor]?.debtAllowance
  func originLedgers(journal: Journal, date: Date, amount: Money): Future[[Ledger]?] = {
    if (let cp = this.debtCounterparty) {
      [LDebt(account = AccountsPayable, origin = this, journal = journal, date = date, isSetoff = true, 
             legalEntity = this.legalEntity, trAmount = amount, counterparty = cp, currency = currency)]
   } else {
      let lgs <- instantLedgers(journal, date)
      revisions*.gstLedgers(journal, date) + lgs
    }
  }
  func instantLedgers(journal: Journal, date: Date): Future[[Ledger]?] 
  
  func cashFlow = Purchases
  view statusesView = x {
    issueState
    paymentState
    balance.abs >> field(visible = balance)
  }
  view ref = x{title statusesView}  
}