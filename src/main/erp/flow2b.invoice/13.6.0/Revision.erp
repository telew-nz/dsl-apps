trait IInvoiceRevision extends DebtOrigin {
  func currency: Currency
  func date: Date
  func items: [IInvoiceItem]?
  func paid: Bool = recon
  func debtAmount = if (invoice.isPurchase) prev?.total - total else total - prev?.total

  func preComputeItems = prev.toSeq
  func debtDueDate = dueDate
  func debtCurrency = currency
  func debtCounterparty = invoice.orderCounterparty
  func debtLedgers = moneyLedger.toSeq
  
  ref system stored compute overdueState: PaymentOverdueState {
    visible = overdueState == PaymentOverdue
  }
  
  system stored compute gstAmount: Money[currency]? {
    value = items*.gstAmount.sum
  }
  system stored compute totalWithoutGst: Money[currency]? {
    value = items*.invoiceAmountNoGst.sum
    visible = gstAmount
  }
  stored compute dueDate: Date? = {
    if (unrecon) invoice.paymentTerms?.paymentDueDate(journalDate, invoice.deliveryDate)
  }

  ref compute total: Money[currency]? = totalWithoutGst + gstAmount
  func invoice: IInvoice
  func number: String
  func prev: InvoiceRevision?
  func isNote = false
  func moneyCalced: Bool = {
    (if (total != prev?.total) moneyLedger?.calced else true) && (if (let prev) prev.moneyCalced else true)
  }
  event onSave = {
    if (moneyCalced) {
      overdueState = {
        if (paid) Paid
        else if (let dd = dueDate) {
          if (dd < now) PaymentOverdue else NoPaymentOverdue
        }
        else NoPaymentOverdue
      }
    } else if (!try? overdueState) {
      overdueState = if (isInstant) Paid else NoPaymentOverdue
    }
  }
  
  register gstLedgers: [LTax]?
  register moneyLedger: LMoneyDebt?
  register deliveryLedgers: [LDeliveryDebt]? 
  back func updateLedgers(): Void = {
    moneyLedger = if (!isInstant) {
      let pt = prev?.total
      if (let t = total - pt, let cp = invoice.debtCounterparty) {
        LMoneyDebt(
              journal = this, 
              trAmount = if (invoice.isPurchase) -t else t, counterparty = cp, 
              currency = currency)
      }
    }
    gstLedgers = if (!isInstant) {
      gstLedgers(this, journalDate)
    }
    deliveryLedgers = if (!isInstant) {
      if (let cp = invoice.orderCounterparty) {
        deliveryMap.fullJoin(prev?.deliveryMap, left.alt(0) - right.alt(0)).toSeq
          .mapOpt{
            LDeliveryDebt(account = ledgerAccount, origin = _.delivery?.as[Journal].alt(invoice), journal = this, 
                  trAmount = if (invoice.isPurchase) #2 else -(#2), 
                  counterparty = cp, currency = currency)
          }
      }
    }
  }
  
  back func gstMap = if (invoice.legalEntity.hasGst) {
    items
      .groupBy(rate = gstRate)
      .agg(gstAmount = gstAmount.sum, invoiceAmount = invoiceAmountNoGst.sum)
  }
  back func gstLedgers(journal: Journal, date: Date): [LTax]? = {
    gstMap.fullJoin(prev?.gstMap, (
      gstAmount = left?.gstAmount - right?.gstAmount, 
      invoiceAmount = left?.invoiceAmount - right?.invoiceAmount
    )).toSeq.filter(gstAmount || invoiceAmount).map {
      LTax(tax = Gst, currency = this.currency, journal = journal, date = date, 
           rate = #0,
           isAdjustment = isNote,
           trAmount = if (invoice.isPurchase) gstAmount else -gstAmount, 
           taxedAmount = if (invoice.isPurchase) invoiceAmount else -invoiceAmount,
           isInstantPayment = isInstant
          )
    }
  }
  back func deliveryMap = {
    items
    	.groupBy(delivery, ledgerAccount)
        .agg{
           _*.invoiceAmount(noGst = this.invoice.legalEntity.hasGst).sum 
        }
  }
  
  back func debtCashFlows: [CashFlowAmount]? = if (let debtAmount) {
    if (let ams = items.groupBy(cashFlow).agg(invoiceAmountWithGst.sum).toSeq) {
      ams.distribute[Money](debtAmount, by = invoiceAmountWithGst)
        .filter(value)
        .map(i => CashFlowAmount(cashFlow = i.cashFlow, amount = i.value!))
    } else {
      [CashFlowAmount(cashFlow = invoice.cashFlow, amount = debtAmount)]
    }
  }
}


enum InvoiceIssueState {
  case InvoiceNotIssued {background = "#ed9"}
  case InvoiceIssued {color = "white" background = "#090"}
  case InvoiceModified {background = "#f99"}
}

extend trait ICustomer {
  func invoiceContact = (legalEntity.contacts + legalEntity.people*.contacts).find(canSend)
}

entity InvoiceRevision extends IInvoiceRevision {
  background = "#d68400"
  field date: Date 
  
  func mainOrigin = invoice
  func journalDate = date
  field invoice: IInvoice by revisions {
    available(Inline).for(All)
  }
  field currency: Currency
  field prev: InvoiceRevision? {
    available(Inline).for(Inline)
    deleteCascade = false
    validate = 
      if (let i = invoice.revisions.indexOf(this)) {
        if (prev != if (let j = i - 1) invoice.revisions.apply(j)) {
          "You can delete only the latest revision"
        }
      }
      else "No revision in invoice $invoice"
  }
  ref compute diffTotal {
    value = total - prev?.total
  }
  system stored compute isInstant: Bool
  func allManLinks = invoice.allManLinks
  compute diffGstAmount = gstAmount - prev?.gstAmount
  compute diffTotalWithoutGst = totalWithoutGst - prev?.totalWithoutGst
  func legalEntity = invoice.legalEntity
  func deletedItems = items.filter(i => !i.active && !i.next && i.revisions.last == this)
  field items: [IInvoiceItem]? inline by revisions {deleteCascade = false}
  ref compute n: Int? = if (let p = prev) p.n + 1 else 0
  ref compute number = {
    if (n) "$(invoice.number).R$n" else invoice.number
  }
  ref compute isNote: Bool = prev
  func isDebit: Bool = diffTotal > 0
  func title = "$name $number $payer"
  func sign = if (isDebit) "+" else "âˆ’"
  func isPurchase = invoice.isPurchase
  event onSave = {
    if (invoice.revisions.last == this) {
      invoice.processRevision()
      gstAmount = items*.gstAmount.sum
      totalWithoutGst = items*.invoiceAmountNoGst.sum
    }
    isInstant = !prev && invoice.calcInstant
    if (registerUpdated) {
      updateLedgers()
    }
    invoice.touch
    if (created && !invoice.isPurchase && FinanceNotificator.sendInvoiceToCustomers && (Date.now - date) < 7_day ) {
      if (let c = invoice.payer?.invoiceContact) {
        NewInvoiceNotif(revision = this).run()
      }
    }
  }
  compute logo: Image? = vendor.as[Company]?.logo 
  ref compute payer {
    value = invoice.payer?.legalEntity
    available(All).for(All)
  }
  compute vendor {
    value = invoice.vendor!.legalEntity
    available(All).for(All)
    availableFor = All
  }
  compute isLastRevision = invoice.revisions.last == this
  compute paymentAccounts = {
    OurLegalEntity.ours*.accounts*.as[BankAccount].filter(forCustomerPayments && number && _.currency == this.currency)
  }
  compute name: String = if (isNote) (if (isDebit) "Debit Note" else "Credit Note") else "Tax Invoice"
}