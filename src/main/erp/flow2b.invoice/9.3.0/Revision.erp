trait IInvoiceRevision extends Journal {
  func currency: Currency
  func date: Date
  func items: [IInvoiceItem]?
  compute gstAmount: Money[currency]? {
    value = items*.gstAmount.sum
  }
  compute totalWithoutGst: Money[currency]? {
    value = items*.invoiceAmount.sum
    visible = gstAmount
  }
  ref compute total: Money[currency]? = totalWithoutGst + gstAmount
  func invoice: IInvoice
  func number: String
  func prev: InvoiceRevision?
  func gstMap = {
    items
      .groupBy(rate = {
        let rate: Percent[2]?? = {
          if (let r = gstRate) r?.value
	      else null
        }
        rate
      })
      .agg(gstAmount = gstAmount.sum, invoiceAmount = invoiceAmount.sum)
  }
  register gstLedgers: [LTax]? = {
    gstMap.fullJoin(prev?.gstMap, (
      gstAmount = left?.gstAmount - right?.gstAmount, 
      invoiceAmount = left?.invoiceAmount - right?.invoiceAmount
    )).toSeq.filter(gstAmount || invoiceAmount).map {
      LTax(account = TaxesPayable, tax = Gst, currency = this.currency, journal = this, origin = invoice, rate = #0, 
           trAmount = if (invoice.isPurchase) gstAmount else -gstAmount, taxedAmount = invoiceAmount)
    }
  }
  register moneyLedger = {
    if (let t = total - prev?.total) {
      LDebt(account = if (invoice.isPurchase) AccountsPayable else AccountsReceivable, origin = invoice, journal = this, 
            trAmount = if (invoice.isPurchase) -t else t, counterparty = invoice.counterparty, 
            currency = currency)
    }
  }
  
  func deliveryMap = {
    items
    	.groupBy(delivery, ledgerAccount)
	    .agg(invoiceAmount.sum)
  }
  register deliveryLedgers: [LDebt]? = {
    deliveryMap.fullJoin(prev?.deliveryMap, left.alt(0) - right.alt(0)).toSeq
      .map{
        LDebt(account = ledgerAccount, origin = _.delivery?.as[Journal].alt(invoice), journal = this, 
              trAmount = if (invoice.isPurchase) #2 else -(#2), counterparty = invoice.counterparty, currency = currency)
      }
  }
}


enum InvoiceIssueState {
  case InvoiceNotIssued {background = "#ed9"}
  case InvoiceIssued {color = "white" background = "#090"}
  case InvoiceModified {background = "#f99"}
}

entity InvoiceRevision extends IInvoiceRevision {
  background = "#d68400"
  field date: Date 
  func journalDate = date
  field invoice: IInvoice by revisions
  field currency: Currency
  field prev: InvoiceRevision? {
    available(Inline).for(Inline)
  }
  compute diffTotal {
    value = total - prev?.total
  }
  compute diffGstAmount = gstAmount - prev?.gstAmount
  compute diffTotalWithoutGst = totalWithoutGst - prev?.totalWithoutGst
  func legalEntity = invoice.legalEntity
  func deletedItems = items.filter(i => !i.active && !i.next && i.revisions.last == this)
  field items: [IInvoiceItem]? inline by revisions {deleteCascade = false}
  ref compute n: Int? = if (let p = prev) p.n + 1 else 0
  ref compute number = {
    if (n) "$(invoice.number).R$n" else invoice.number
  }
  ref compute isNote: Bool = prev
  func isDebit: Bool = diffTotal > 0
  func title = number
  func sign = if (isDebit) "+" else "âˆ’"
  
  func onSave = {
    invoice.touch
  }
  
  view form {
    printable = true
    layout = nav{grid (labels = None, width = 1.2) {
      x {
        invoice.vendor.legalName >> field(fontStyle = H1, stretch = 1)
        h1(if (isNote) (if (isDebit) "Debit Note" else "Credit Note") else "Tax Invoice", margin = Bottom)
      }
      
      row {
        invoice.vendor >> grid(width = 0.77, labels = Left, labelsWidth = 0.15, margin = Bottom, spacing = false) {
          legalInfo.gstView
          contacts.phones.join(", ") >> field(label = "Phone")
          contacts.emails.join(", ") >> field(label = "EMail")
        }
        grid (width = 0.43, labels = Right, labelsWidth = 0.15, margin = Bottom, spacing = false) {
          invoice >> field(align = Right, visible = !this.isNote, label = "Number", title = number)
          number >> field(align = Right, visible = this.isNote)
          date >> field(align = Right)
          invoice >> field(align = Right, visible = this.isNote, label = "Invoice", title = number)
          invoice.dueDate >> field(align = Right, label = "Payment Due")
        }
      }
      
      row {
        invoice.customer >> grid (width = 0.55, labels = Left, labelsWidth = 0.15, margin = Bottom, spacing = false) {
          legalName >> field(label = "Customer")
          legalInfo.gstView
          invoice.references >> field(label = "Reference")
        }
        y (width = 0.65) {
          grid (labels = TopRight, width = 0.65, spacing = false, visible = prev) {
            row {
              label("Total incl GST", fontStyle = Label, width = 0.2)
              total >> field(showEmpty = true, label = "Current", width = 0.15, fontStyle = Bold) 
              prev!.total >> field(showEmpty = true, label = "Previous", width = 0.15)  
              diffTotal >> field(showEmpty = true, showPlus = true, label = "Difference", width = 0.15)  

            }
            row (labels = false) {
              label("GST", fontStyle = Label, width = 0.2)
              gstAmount >> field(showEmpty = true, width = 0.15) 
              prev!.gstAmount >> field(showEmpty = true, width = 0.15)  
              diffGstAmount >> field(showEmpty = true, showPlus = true, width = 0.15)  

            }
            row (labels = false) {
              label("Total excl GST", fontStyle = Label, width = 0.2)
              totalWithoutGst >> field(showEmpty = true, width = 0.15) 
              prev!.totalWithoutGst >> field(showEmpty = true, width = 0.15)  
              diffTotalWithoutGst >> field(showEmpty = true, showPlus = true, width = 0.15)  
            }
          }
          grid (labels = TopRight, width = 0.65, spacing = false, visible = prev) {
            row {
              label("Payment", fontStyle = Label, width = 0.2, align = Right)
              invoice.paidAmount >> field(showEmpty = true, label = "Balance", width = 0.15) 
              invoice.receivedAmount >> field(showEmpty = true, label = "Paid", width = 0.15)  
              -invoice.refundedAmount >> field(showEmpty = true, showPlus = true, label = "Refund", width = 0.15)  

            }
            row (labels = false) {
              label("Amount to Pay", fontStyle = Label, width = 0.2)
              invoice.unpaidAmount >> field(showEmpty = true, width = 0.15, fontStyle = Bold) 
              space(width = 0.3)
            }
          }
          grid (labels = TopRight, visible = !prev, width = 0.65, spacing = false) {
            row (labels = false) {
              label("Total incl GST", fontStyle = Label, width = 0.35)
              total >> field(showEmpty = true, width = 0.3, fontStyle = Bold) 
            }
            row (labels = false) {
              label("GST", fontStyle = Label, width = 0.35)
              gstAmount >> field(showEmpty = true, width = 0.3) 
            }
            row (labels = false) {
              label("Total excl GST", fontStyle = Label, width = 0.35)
              totalWithoutGst >> field(showEmpty = true, width = 0.3) 
            }
            row (labels = false) {
              label("Payment", fontStyle = Label, width = 0.35)
              invoice.paidAmount >> field(showEmpty = true, label = "Balance", width = 0.3) 
            }
            row (labels = false) {
              label("Amount to Pay", fontStyle = Label, width = 0.35)
              invoice.unpaidAmount >> field(showEmpty = true, width = 0.3, fontStyle = Bold)
            }
          }
        }
      }
      
      (items + prev?.deletedItems).groupBy(deliveryGroup).toSeq >> subtotal {
        deliveryGroup.rowView
        table {
          header{label("Product", width = 0.55) 
                 label("Quantity", align = Right, width = 0.2) 
                 label("Price", align = Right, width = 0.2) 
                 label("Amount", align = Right, width = 0.25)}
          body{row{rowView(this)}}
          //row{product qty price amount}
          //row(visible = discount){label("Discount") space space discount}
        }
      }
    }
    generalLedgerButton
    }
  }
}