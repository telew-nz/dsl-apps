extend trait ICustomer {
  func invoiceContact = (legalEntity.contacts + legalEntity.people*.contacts).find(canSend)
}

entity Invoice extends IOrderRevision with DeferredJob with AutoSend {
  background = "#d68400"
  ref impl field date: Date 
  
  ref impl field totalDue: Money[currency]? {
    validate = if (prev && prev!.totalDue == totalDue && !prev!.deletedItems && !items.exists(invoices.first == this)) {
      "Invoice revision is exactly the same as the previous $prev"
    }
  }
  impl field dueDate: Date?
  func debtDueDate = dueDate
  impl func canceled = false
  override func mainOrigin = order
  impl func journalDate = date
  impl ref field order: IOrder by invoices {
    available(Inline).for(All)
  }
  impl field currency: Currency
  impl field prev: Invoice? {
    available(Inline).for(Inline)
    deleteCascade = false
    validate = 
      if (let i = order.invoices.indexOf(this)) {
        if (prev != if (let j = i - 1) order.invoices.apply(j)) {
          "You can delete only the latest invoice"
        }
      }
      else "No invoice in the order $order"
  }
  ref compute paymentState: PaymentState {
    value = {
      let ps = order.paymentState //reconState.paymentState
      if (ps == Account) Unpaid else ps
    }
    visible = isNote || totalDue
  }
  impl ref compute debtCounterparty = order.debtCounterparty
  ref compute diffTotal {
    value = invoiceTotal - prev?.invoiceTotal
  }
  compute dueInvoices = order.invoices.filter(debtAmount)
  override func reconDates = [date] + order.reconDates
  
  //system stored compute isInstant: Bool
  ref impl compute isInstant: Bool {
    value = back{!prev && order.calcInstant}
  }
  override func allManLinks = order.allManLinks
  compute diffGstAmount = gstAmount - prev?.gstAmount
  compute diffTotalWithoutGst = invoiceTotalNoGst - prev?.invoiceTotalNoGst
  impl func legalEntity = order.legalEntity
  func deletedItems = items.filter(i => !i.active && !i.next && i.invoices.last == this)
  impl field items: [IOrderItem]? inline by invoices {deleteCascade = false}
  ref compute n: Int? = if (let p = prev) p.n + 1 else 0
  impl compute number = {
    if (n) "$(order.number).R$n" else order.number
  }
  impl ref compute isNote: Bool = prev?.haveDue
  
  func haveDue: Bool = totalDue || prev?.haveDue
  
  override func entitySubject: String = "$legalEntity: $name $number" 
  func isDebit: Bool = diffTotal > 0
  impl func title = "$name $number $debtCounterparty"

  impl view ref = x {
    title 
    date.date
    totalDue >> field(visible = totalDue != invoiceTotal) 
    label("due of", fontStyle = Label, visible = totalDue != invoiceTotal && totalDue) 
    invoiceTotal 
    paymentState
  }
  func sign = if (isDebit) "+" else "âˆ’"
  impl func isPurchase = order.isPurchase
  impl event onSave = {
    //if (order.invoices.last == this) {
    //  order.updateDue()
    //  order.processInvoice()
      //gstAmount = items*.gstAmount.sum.positive
      //totalNoGst = items*.invoiceAmountNoGst.sum.positive
    //}
    //isInstant = !prev && invoice.calcInstant
    if (registerUpdated) {
      updateLedgers()
    }
    order.touch
    if (created && !order.isPurchase && FinanceNotificator.sendInvoiceToCustomers && (Date.now - date) < 7_day ) {
      if (let c = order.payer?.invoiceContact) {
        sendOut()
      }
    }
  }
  
  impl func sendOut(): Void = NewInvoiceNotif(invoice = this).enqueue()
  
  compute logo: Image? = vendor.as[Company]?.logo 
  compute payer {
    value = order.payer?.legalEntity
    available(All).for(All)
  }
  compute vendor {
    value = order.orderVendor!.legalEntity
    available(All).for(All)
    availableFor = All
  }
  compute isLastInvoice = order.invoices.last == this
  compute paymentAccounts = {
    OurLegalEntity.ours*.accounts*.as[BankAccount].filter(forCustomerPayments && number && _.currency == this.currency)
  }
  ref compute name: String = {
    if (isNote) (if (isDebit) "Debit Note" else if (!diffTotal && totalDue != prev?.totalDue) taxInvoiceName else "Credit Note") 
    else taxInvoiceName
  }
  
  compute nameDesc: String? = {
    if (isNote && isDebit) "The total for order $(order.number) has been increased."
    else if (isNote && diffTotal) "The total for order $(order.number) has been decreased."
  }
  func taxInvoiceName: String = {
    if (!totalDue) "Quote" 
    else if (totalDue != invoiceTotal) "Prepayment Tax Invoice" 
    else "Tax Invoice"
  }
  compute debtTable = order.buildDebtTable(order.invoices!)
}