extend trait ICustomer {
  func invoiceContact = (legalEntity.contacts + legalEntity.people*.contacts).find(canSend)
}

entity Invoice extends IOrderRevision {
  background = "#d68400"
  field date: Date 
  
  ref compute total: Money[currency]? = totalNoGst + gstAmount
  field totalDue: Money[currency]?
  field dueDate: Date?
  func debtDueDate = dueDate
  
  func canceled = false
  func mainOrigin = order
  func journalDate = date
  field order: IOrder by invoices {
    available(Inline).for(All)
  }
  field currency: Currency
  field prev: Invoice? {
    available(Inline).for(Inline)
    deleteCascade = false
    validate = 
      if (let i = order.invoices.indexOf(this)) {
        if (prev != if (let j = i - 1) order.invoices.apply(j)) {
          "You can delete only the latest invoice"
        }
      }
      else "No invoice in the order $order"
  }
  func debtCounterparty = order.debtCounterparty
  ref compute diffTotal {
    value = total - prev?.total
  }
  
  //system stored compute isInstant: Bool
  ref compute isInstant: Bool {
    value = back{!prev && order.calcInstant}
  }
  func allManLinks = order.allManLinks
  compute diffGstAmount = gstAmount - prev?.gstAmount
  compute diffTotalWithoutGst = totalNoGst - prev?.totalNoGst
  func legalEntity = order.legalEntity
  func deletedItems = items.filter(i => !i.active && !i.next && i.invoices.last == this)
  field items: [IOrderItem]? inline by invoices {deleteCascade = false}
  ref compute n: Int? = if (let p = prev) p.n + 1 else 0
  ref compute number = {
    if (n) "$(order.number).R$n" else order.number
  }
  ref compute isNote: Bool = prev
  func isDebit: Bool = diffTotal > 0
  func title = "$name $number $payer"
  func sign = if (isDebit) "+" else "âˆ’"
  func isPurchase = order.isPurchase
  event onSave = {
    if (order.invoices.last == this) {
      order.processInvoice()
      gstAmount = items*.gstAmount.sum
      totalNoGst = items*.invoiceAmountNoGst.sum
    }
    //isInstant = !prev && invoice.calcInstant
    if (registerUpdated) {
      updateLedgers()
    }
    order.touch
    if (created && !order.isPurchase && FinanceNotificator.sendInvoiceToCustomers && (Date.now - date) < 7_day ) {
      if (let c = order.payer?.invoiceContact) {
        NewInvoiceNotif(invoice = this).run()
      }
    }
  }
  compute logo: Image? = vendor.as[Company]?.logo 
  ref compute payer {
    value = order.payer?.legalEntity
    available(All).for(All)
  }
  compute vendor {
    value = order.orderVendor!.legalEntity
    available(All).for(All)
    availableFor = All
  }
  compute isLastInvoice = order.invoices.last == this
  compute paymentAccounts = {
    OurLegalEntity.ours*.accounts*.as[BankAccount].filter(forCustomerPayments && number && _.currency == this.currency)
  }
  ref compute name: String = {
    if (isNote) (if (isDebit) "Debit Note" else if (!diffTotal) taxInvoiceName else "Credit Note") 
    else taxInvoiceName
  }
  func taxInvoiceName: String = if (totalDue != total) "Prepayment Tax Invoice" else "Tax Invoice"
  compute debtTable = order.buildDebtTable(order.invoices!)
}