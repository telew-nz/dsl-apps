trait ISalesInvoice extends IInvoice {
  func hasSalesIssues = paymentState == Overpaid || overdueState == PaymentOverdue
  func isPurchase: Bool = false
  func cashFlowCategory: CashFlowCategory = Sales
  func startingBalance: Money[currency]? = -total
  func paidAmount = balanceChange
  compute vendor = legalEntity
  compute customer = counterparty

  func setoffs: [Setoff]? = credits
  func originLedger(setoff: Setoff, amount: Money): Future[LDebt] = {
    LDebt(account = AccountsReceivable, origin = this, journal = setoff.journal, date = setoff.date, trAmount = amount, counterparty = customer, currency = currency)
  }
  
  //func debtLedger: LDebt = receivableLedger
  func isTheir = customer.isTheir
  
  view statusesView = x {
    issueState
    paymentState
    "$(-balance) unpaid" >> field(visible = reconcileState == PartiallyReconciled || reconcileState == OverReconciled)
    overdueState
  }
  
  view ref = x{title statusesView}
}