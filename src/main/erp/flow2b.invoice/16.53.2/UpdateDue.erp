extend trait IOrder  {
  system field dueUpdateJob: OrderDueUpdateJob inline by order {
    default = OrderDueUpdateJob()
  }
}
inline entity OrderDueUpdateJob extends DeferredJob {
  field order: IOrder by dueUpdateJob
  impl func service = FinanceService
  impl func jobDate: Date? = {    
    if (
      !order.closed && !order.canceled
      let ud = {
        if (let dd = order.dueDate where dd > now) {
          if (let ua = order.calcDue.update where ua > now) dd.min(ua) 
          else dd
        } else order.calcDue.update
      }
      where ud > now
    ) {
      ud
    }
  }
  impl func do = {
    order.updateDue(autoIssue = true)
    order.save
  }
}


