interface IIPaymentTerms {
  func paymentDueDate(invoiceDate: Date, deliveryDate: Date?): Date?
  func deliveryPrepayment: Percent[2]?
  func considerDebt = true
  func canDispatch(invoice: IInvoice): Future[Bool] = {
    if (!invoice.total || invoice.paid) Future(true)
    else if (considerDebt) {
      let debt <- LDebt.current
          .filter(counterparty == invoice.customer && account.money)
          .flatMap(i => i.origins.filter(origin != invoice && origin?.journalDate ?<= invoice.date).map(amount.as[Money[i.currency]]))
          .groupBy(unit!).agg(sum)
          .map(sum.to[Money[invoice.currency]](Date.now))
          .agg(sum)
      let allowance <- invoice.debtAllowance.to[Money[invoice.currency]](Date.now)
      let p = (invoice.paidAmount + allowance - debt)
      (p.as[Percent[2]]/invoice.total!) >= deliveryPrepayment
    } else {
      Future((invoice.paidAmount.as[Percent[2]]/invoice.total!) >= deliveryPrepayment)
    }
  }
}

trait IPaymentTerms extends Entity with IIPaymentTerms {
  background = "#d68400"
}

extend trait OurLegalEntity {
  field customerCashPaymentTerms: IPaymentTerms? {label = "Default payment terms for cash customers"}
  field customerAccountPaymentTerms: IPaymentTerms? {label = "Default payment terms for customers on trade account"}
}
extend entity OurCompany {
  extend view form = customerCashPaymentTerms
  extend view form = customerAccountPaymentTerms
}
extend entity OurPerson {
  extend view form = customerCashPaymentTerms
  extend view form = customerAccountPaymentTerms
}
extend entity Customer {
  field paymentTerms: IPaymentTerms?
}
extend entity Vendor {
  field paymentTerms: IPaymentTerms?
}

object DefaultPaymentTerms extends IIPaymentTerms {
  func deliveryPrepayment: Percent[2]? = 1.0
  func paymentDueDate(invoiceDate: Date, deliveryDate: Date?): Date? = null
}

entity PaymentTerms extends IPaymentTerms {
  field title: String
  ref field deliveryPrepayment: Percent[2]? {
    label = "Prepayment required for delivery"
  }
  ref field paymentDueDate: PaymentDueDate = PaymentDueDateAfter()
  func paymentDueDate(invoiceDate: Date, deliveryDate: Date?): Date? = {
    if (deliveryPrepayment) {
      if (let dd = deliveryDate) paymentDueDate.dueDate(dd)
    } else paymentDueDate.dueDate(invoiceDate)
  }
  event onSave = {
    IInvoice.all.filter(paymentTerms == this)*.touch
  }
}


interface PaymentDueDate {
  func dueDate(invoiceDate: Date): Date
}

class PaymentDueDateAfter extends PaymentDueDate {
  singular = "After Fixed Time"
  field paymentDue: Duration[unit, 0] 
  field unit: DateUnit = day
  
  func dueDate(invoiceDate: Date): Date = invoiceDate + paymentDue
  view form = grid {
    paymentDue >> field(canEditUnit = true)
  }
}
class PaymentDueDateNextMonth extends PaymentDueDate {
  singular = "Fixed Month Day"
  field dayOfMonth: Int = 20
  view form = grid {
    dayOfMonth
  }
  
  func dueDate(invoiceDate: Date): Date = {
    let dof = dayOfMonth.as[Duration[day]]!
    if (invoiceDate.day < dof) invoiceDate.start(of = month) + dof - 1_day
    else invoiceDate.start(of = month) + 1_month + dof - 1_day
  }
}

