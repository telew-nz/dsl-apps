back object Conversion extends IConversion {
  func convert(version: [Int?]): Future[Any] = {
    if (version < [16,0,0]) {
      OrderTerms.all.foreach{ot =>
        if (let di = ot.postdelivery?.as[OTDueIn]) {
          let t = field[String](di, "trigger")
          if (t == "Delivered" || t == "Returned") {
            di.trigger = Complete
          }
          ot.touch
          ot.save
        } else if (let di = ot.postdelivery?.as[OTNextMonth]) {
          let t = field[String](di, "trigger")
          if (t == "Delivered" || t == "Returned") {
            di.trigger = Complete
          }
          ot.touch
          ot.save
        }
      }
    }  
    if (version < [16,2,2]) {
      IOrder.all.filter(isEmpty).foreach{i => 
        i.updateDue()
        i.updateDashboard()
      }
    }
    if (version < [16,2,3]) {
      if (FinanceNotificator.sendInvoiceToCustomers) {
        FinanceNotificator.sendStm = true 
        FinanceNotificator.save
      }
    }
    if (version < [16,3,2]) {
      CustomerAccountTerms.all.update(nextGenDate = now)
    }
    if (version < [16,4,2]) {
      CustomerAccountTerms.all*.touch
      IOrder.all.filter(terms).foreach{i => 
        i.updateDue()
        i.updateRegisters()
        i.updateDashboard()
      }
    }
    if (version < [16,4,3]) {
      IOrder.all.filter(terms).foreach{i => 
        i.touch
        i.updateDue()
      }
    }
  }     
}    
