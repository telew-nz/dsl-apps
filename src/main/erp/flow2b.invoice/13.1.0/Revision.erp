trait IInvoiceRevision extends DebtOrigin {
  func currency: Currency
  func date: Date
  func items: [IInvoiceItem]?
  func paid: Bool = recon
  func debtAmount = if (invoice.isPurchase) prev?.total - total else total - prev?.total

  func debtDueDate = dueDate
  func debtCurrency = currency
  func debtCounterparty = invoice.orderCounterparty
  func debtLedgers = moneyLedger.toSeq
  
  ref system stored compute overdueState: PaymentOverdueState {
    visible = overdueState == PaymentOverdue
  }
  
  system stored compute gstAmount: Money[currency]? {
    value = items*.gstAmount.sum
  }
  system stored compute totalWithoutGst: Money[currency]? {
    value = items*.invoiceAmountNoGst.sum
    visible = gstAmount
  }
  stored compute dueDate: Date? = {
    if (unrecon) invoice.paymentTerms?.paymentDueDate(date, invoice.deliveryDate)
  }

  ref compute total: Money[currency]? = totalWithoutGst + gstAmount
  func invoice: IInvoice
  func number: String
  func prev: InvoiceRevision?
  func isNote = false
  func moneyCalced: Bool = {
    (if (total != prev?.total) moneyLedger?.calced else true) && (if (let prev) prev.moneyCalced else true)
  }
  event onSave = {
    if (moneyCalced) {
      overdueState = {
        if (paid) Paid
        else if (let dd = dueDate) {
          if (dd < now) PaymentOverdue else NoPaymentOverdue
        }
        else NoPaymentOverdue
      }
    } else if (!try? overdueState) {
      overdueState = if (invoice.isInstant) Paid else NoPaymentOverdue
    }
  }
  
  register gstLedgers: [LTax]?
  register moneyLedger: LMoneyDebt?
  register deliveryLedgers: [LDeliveryDebt]? 
  back func updateLedgers(): Void = {
    moneyLedger = if (!invoice.isInstant) {
      let pt = prev?.total
      if (let t = total - pt, let cp = invoice.debtCounterparty) {
        LMoneyDebt(
              journal = this, 
              trAmount = if (invoice.isPurchase) -t else t, counterparty = cp, 
              currency = currency)
      }
    }
    gstLedgers = if (!invoice.isInstant) {
      gstLedgers(this, date)
    }
    deliveryLedgers = if (!invoice.isInstant) {
      if (let cp = invoice.orderCounterparty) {
        deliveryMap.fullJoin(prev?.deliveryMap, left.alt(0) - right.alt(0)).toSeq
          .mapOpt{
            LDeliveryDebt(account = ledgerAccount, origin = _.delivery?.as[Journal].alt(invoice), journal = this, 
                  trAmount = if (invoice.isPurchase) #2 else -(#2), 
                  counterparty = cp, currency = currency)
          }
      }
    }
  }
  
  back func gstMap = if (invoice.legalEntity.hasGst) {
    items
      .groupBy(rate = gstRate)
      .agg(gstAmount = gstAmount.sum, invoiceAmount = invoiceAmountNoGst.sum)
  }
  back func gstLedgers(journal: Journal, date: Date): [LTax]? = {
    gstMap.fullJoin(prev?.gstMap, (
      gstAmount = left?.gstAmount - right?.gstAmount, 
      invoiceAmount = left?.invoiceAmount - right?.invoiceAmount
    )).toSeq.filter(gstAmount || invoiceAmount).map {
      LTax(account = TaxesDebt, tax = Gst, currency = this.currency, journal = journal, date = date, 
           rate = #0,
           isAdjustment = isNote,
           trAmount = if (invoice.isPurchase) gstAmount else -gstAmount, 
           taxedAmount = if (invoice.isPurchase) invoiceAmount else -invoiceAmount,
           isInstantPayment = invoice.isInstant
          )
    }
  }
  back func deliveryMap = {
    items
    	.groupBy(delivery, ledgerAccount)
        .agg{
           _*.invoiceAmount(noGst = this.invoice.legalEntity.hasGst).sum 
        }
  }
  
  back func debtCashFlows: [CashFlowAmount]? = if (let debtAmount) {
    if (let ams = items.groupBy(cashFlow).agg(invoiceAmountWithGst.sum).toSeq) {
      ams.distribute[Money](debtAmount, by = invoiceAmountWithGst)
        .filter(value)
        .map(i => CashFlowAmount(cashFlow = i.cashFlow, amount = i.value!))
    } else {
      [CashFlowAmount(cashFlow = invoice.cashFlow, amount = debtAmount)]
    }
  }
}


enum InvoiceIssueState {
  case InvoiceNotIssued {background = "#ed9"}
  case InvoiceIssued {color = "white" background = "#090"}
  case InvoiceModified {background = "#f99"}
}

extend trait ICustomer {
  func invoiceContact = (legalEntity.contacts + legalEntity.people*.contacts).find(canSend)
}

entity InvoiceRevision extends IInvoiceRevision {
  background = "#d68400"
  field date: Date 

  back func isInstant: Bool = invoice.isInstant
  func journalDate = date
  field invoice: IInvoice by revisions {
    available(Inline).for(All)
  }
  field currency: Currency
  field prev: InvoiceRevision? {
    available(Inline).for(Inline)
    deleteCascade = false
  }
  ref compute diffTotal {
    value = total - prev?.total
  }
  func debtManLinks = invoice.debtManLinks
  compute diffGstAmount = gstAmount - prev?.gstAmount
  compute diffTotalWithoutGst = totalWithoutGst - prev?.totalWithoutGst
  func legalEntity = invoice.legalEntity
  func deletedItems = items.filter(i => !i.active && !i.next && i.revisions.last == this)
  field items: [IInvoiceItem]? inline by revisions {deleteCascade = false}
  ref compute n: Int? = if (let p = prev) p.n + 1 else 0
  ref compute number = {
    if (n) "$(invoice.number).R$n" else invoice.number
  }
  ref compute isNote: Bool = prev
  func isDebit: Bool = diffTotal > 0
  func title = "$name $number $payer"
  func sign = if (isDebit) "+" else "âˆ’"
  
  event onSave = {
    if (registerUpdated) {
      updateLedgers()
    }
    invoice.touch
    if (created && !invoice.isPurchase && FinanceNotificator.sendInvoiceToCustomers) {
      if (let c = invoice.payer?.invoiceContact) {
        c.join(this)
        Activity.current!.makePublic("New $name")
      }
    }
  }
  compute logo: Image? = vendor.as[Company]?.logo 
  ref compute payer {
    value = invoice.payer?.legalEntity
    available(All).for(All)
  }
  compute vendor {
    value = invoice.vendor!.legalEntity
    available(All).for(All)
    availableFor = All
  }
  compute name: String = if (isNote) (if (isDebit) "Debit Note" else "Credit Note") else "Tax Invoice"
  view form {
    printable = true
    layout = nav{grid (labels = None, width = 1.2) {
      row {
        h1(width = 0.75, label = name)
        y (width = 0.45, margin = Bottom) {
          logo >> field(height = 4, margin = None)
          vendor.legalName >> field(fontStyle = H1, margin = None, visible = !logo)
        }
      }
      
      row {
        grid (width = 0.35, labels = Top, labelsWidth = 0.15, margin = Bottom, spacing = false) {
          invoice >> field(label = "Invoice Number", title = number)
          number >> field(visible = this.isNote, label = "Revision Number")
          date
          invoice.dueDate >> field(label = "Payment Due")
        }
        payer >> grid (width = 0.4, labels = Top, margin = Bottom, spacing = false) {
          legalName >> field(label = "Customer")
          legalInfo.gstView
          invoice.references >> field(label = "Reference")
        }
        vendor >> grid(width = 0.45, labels = Top, margin = Bottom, spacing = false) {
          legalInfo.gstView
          contacts*.as[PhoneContact]*.phone.join(", ") >> field(label = "Phone")
          contacts*.as[EmailContact]*.email.join(", ") >> field(label = "EMail")
        }
      }
      
      (items + prev?.deletedItems).groupBy(deliveryGroup).toSeq >> subtotal {
        deliveryGroup.rowView
        table {
          header{label("Product", width = 0.55) 
                 label("Quantity", align = Right, width = 0.2) 
                 label("Price", align = Right, width = 0.2) 
                 label("Amount", align = Right, width = 0.25)}
          body{row{rowView(this)}}
          //row{product qty price amount}
          //row(visible = discount){label("Discount") space space discount}
        }
      }
      
      row {
        space(width = 0.55)
        y (width = 0.65, margin = Right) {
          grid (labels = TopRight, width = 0.65, spacing = false, visible = prev) {
            row {
              label("Total incl GST", fontStyle = Label, width = 0.2)
              total >> field(showEmpty = true, label = "New", width = 0.15, fontStyle = Bold) 
              prev!.total >> field(showEmpty = true, label = "Previous", width = 0.15)  
              diffTotal >> field(showEmpty = true, showPlus = true, label = "This Note", width = 0.15)  
            }
            row (labels = false) {
              label("GST", fontStyle = Label, width = 0.2)
              gstAmount >> field(showEmpty = true, width = 0.15) 
              prev!.gstAmount >> field(showEmpty = true, width = 0.15)  
              diffGstAmount >> field(showEmpty = true, showPlus = true, width = 0.15)  

            }
            row (labels = false) {
              label("Total excl GST", fontStyle = Label, width = 0.2)
              totalWithoutGst >> field(showEmpty = true, width = 0.15) 
              prev!.totalWithoutGst >> field(showEmpty = true, width = 0.15)  
              diffTotalWithoutGst >> field(showEmpty = true, showPlus = true, width = 0.15)  
            }
          }
          grid (labels = TopRight, width = 0.65, spacing = false, visible = prev) {
            row {
              label("Payment", fontStyle = Label, width = 0.2, align = Right)
              invoice.paidAmount >> field(showEmpty = true, label = "Balance", width = 0.15) 
              invoice.receivedAmount >> field(showEmpty = true, label = "Paid", width = 0.15)  
              -invoice.refundedAmount >> field(showEmpty = true, showPlus = true, label = "Refund", width = 0.15)  
            }
            row (labels = false) {
              label("Amount to Pay", fontStyle = Label, width = 0.2)
              invoice.unpaidAmount >> field(showEmpty = true, width = 0.15, fontStyle = Bold) 
              space(width = 0.3)
            }
          }
          grid (labels = TopRight, visible = !prev, width = 0.65, spacing = false) {
            row (labels = false) {
              label("Total incl GST", fontStyle = Label, width = 0.4)
              total >> field(showEmpty = true, width = 0.25, fontStyle = Bold) 
            }
            row (labels = false) {
              label("GST", fontStyle = Label, width = 0.4)
              gstAmount >> field(showEmpty = true, width = 0.25) 
            }
            row (labels = false) {
              label("Total excl GST", fontStyle = Label, width = 0.4)
              totalWithoutGst >> field(showEmpty = true, width = 0.25) 
            }
            row (labels = false) {
              label("Payment", fontStyle = Label, width = 0.4)
              invoice.paidAmount >> field(showEmpty = true, label = "Balance", width = 0.25) 
            }
            row (labels = false) {
              label("Amount to Pay", fontStyle = Label, width = 0.4)
              invoice.unpaidAmount >> field(showEmpty = true, width = 0.25, fontStyle = Bold)
            }
          }
        }
        
        
      }
    }
    generalLedgerButton
    }
  }
}