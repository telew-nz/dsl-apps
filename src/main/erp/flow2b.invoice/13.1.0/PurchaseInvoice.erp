trait IPurchaseInvoice extends IInvoice {
  func isPurchase: Bool = true
  
  compute customer = legalEntity
  func vendor: Vendor?
  func payer = legalEntity
  func debtAllowance: Money? = payee?.as[Vendor]?.debtAllowance
  
  back func isInstantPaid: Bool = {
    if (let c = manLinks.onlyOne?.as[OutgoingPayment]) c.amount == total && (c.date - this.date).abs <= 3600_second else false
  }
  
  func getPaymentTerms = paymentTerms
    .or(payee?.as[Vendor]?.paymentTerms)?.as[IIPaymentTerms]
    .alt(DefaultPaymentTerms)
  func cashFlow = Purchases
  view statusesView = x {
    issueState
    paymentState
    unpaidAmount
  }
  
  view paymentsView = y(label = "Payments", visible = ui.edit || debtOriginAmounts) {
    manLinks >> list(visible = ui.edit, canAdd = false) {
      posViewCredit
    }
    add("Payment", visible = ui.edit && fullReconState.isIssue) {addPayment()}
    debtOriginsView >> field(visible = !ui.edit) 
  }
}