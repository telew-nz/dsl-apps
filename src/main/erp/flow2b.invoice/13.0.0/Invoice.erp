extend enum DashboardIssue {
  case InvoiceNotIssued(role = Accountant, priority = default)
  case InvoiceModified(role = Accountant, priority = default)
} 

trait IInvoice extends IInvoiceRevision with DashboardItem {
  background = "#d68400"
  plural = "Invoices"
  singular = "Invoice"
  
  field revisionDate: Date?
  func onlyOneRevision: IInvoiceRevision? = if (let revisions) revisions.onlyOne else this
  back func onlyOneOrigin = onlyOneRevision?.debtOriginAmounts.onlyOne
  func fullReconState: ReconState = {
    if (canceled) Canceled
    else if (let revisions) {
      if (revisions.all(recon)) Recon
      else if (revisions.exists(reconAmount)) PartRecon
      else PartRecon
    } else reconState
  }
  func paymentState: PaymentState = fullReconState.paymentState
  func journalDate = if (let d = revisions.last?.date) {
    if (let rd = revisionDate) if (rd > d) rd else d + 1_minute
    else d + 1_minute
  } else date
  func issues = {
    let ist = issueState
    (
      if (ist == InvoiceNotIssued && shouldBeIssued) [DashboardIssue.InvoiceNotIssued]
      else if (ist == InvoiceModified) [DashboardIssue.InvoiceModified]
    ).toSet
  }
  func fixes(issue: DashboardIssue) = {
    if (issue == InvoiceNotIssued) {
      [Fix(text = "Issue invoice", acts = [Act(label = "Issue", do = this.issue())])]
    } else if (issue == InvoiceModified) {
      [
        Fix(text = "Issue credit/debit note", acts = [Act(label = "Issue", do = this.issue())]),
        Fix(text = "In the case when it was accidently issued, delete the original invoice and issue again", acts = [Act(label = "Reissue", do = Query(this).foreach{
          this.reissue()
        })]),
        Fix(text = "Rollback modifications", acts = [Act(label = "Rollback", do = Query(this).foreach{
          rollbackInvoice()
        })])
      ]
    }
  }
  
  func cashFlow: CashFlow
  back func isInstant: Bool
  func canceled: Bool = items.all(canceled) && allItems
  
  func orderCounterparty: LegalEntity?
  func references: [String]?
  func isPurchase: Bool
//  func cashFlow: CashFlowCategory
  func prev: InvoiceRevision? = revisions.last
  field revisions: [InvoiceRevision]? inline by invoice
  
  func invoice: IInvoice = this
  back func isInstantPaid: Bool
  func vendor: IVendor?
  func customer: ICustomer?
  func payer: ICustomer?
  func payee: IVendor?
  func deliveryDate: Date? = if (items.all(delivered)) items*.delivery*.deliveryDate.max
  func allItems: [IInvoiceItem]?
  func deliveries: [IDelivery]? = allItems.filter(active)*.delivery.distinct
  func delivered: Bool = allItems.all(!active || delivered)

  func paid: Bool = if (let revisions) revisions.all(recon) else recon
  func revisionAt(date: Date): IInvoiceRevision = {
    revisions.filter(r => r.date <= date).sortBy(date.desc).first?.as[IInvoiceRevision].alt(this)
  }
  func debtAllowance: Money?
  func paidAmount: Money? = receivedAmount - refundedAmount
  compute receivedAmount: Money? {
    availableFor = Inline
    value = back {
      if (let revisions) {
        revisions.filter(debtAmount > 0)*.debtOriginAmounts.filter(!origin.is[IInvoiceRevision])*.amount.sum 
      } else reconAmount
    }
  }
  compute refundedAmount: Money? {
    availableFor = Inline
    value = back {
      if (let revisions) {
        revisions.filter(debtAmount < 0)*.debtOriginAmounts.filter(!origin.is[IInvoiceRevision])*.amount.sum
      }
    }
  }
  func unpaidAmount: Money? = if (let revisions) revisions*.unrecon.sum
   
  func shouldBeIssued: Bool = reconAmount
  ref compute issueState: InvoiceIssueState = {
    if (!revisions) InvoiceNotIssued
    else if (allItems.exists(revisionNotIssued)) InvoiceModified
    else InvoiceIssued
  }  
  func rollbackInvoice(): IInvoice = {
    if (let l = revisions.last) {
      items.filter(revisionNotIssued).foreach {i =>
        i.rollbacked = true
        i.delete
      }
      l.items.foreach {i =>
        i.active = true
        i.save
      }
    }
    this
  } 
  field paymentTerms: IPaymentTerms?
  func getPaymentTerms: IIPaymentTerms
  
  system stored compute canDispatch: Bool 
  back func prepaymentDate: Date? = {
    if (let prepayment = getPaymentTerms.deliveryPrepayment, let a = total*prepayment) {
      debtOriginAmounts.accum(amount.sum).find(amount >= a).map(#0.origin.journalDate.max(date))
    } else date
  } 
  
  func postOnSave(): Future[Void] = {
	if (!paid && total) {
      let d <- getPaymentTerms.canDispatch(this)
      canDispatch = d
    } else {
      canDispatch = true
    }
  }
  
  back func processRevision(): Void = {
    if (!deleted && !canceled) {
      if (let rs = revisions) {
        items.foreach {item =>
          if (item.revisions.filter(id) && item.needsRevision && !item.canceled) {
            if (issueState != InvoiceModified) revisionDate = Date.now
            let newItem = item.copy(revisions = [], prev = null)
            newItem.prev = item.rollback
            item.setActive(false)
          }
        }
        if (hasNewPayment && issueState != InvoiceIssued) {
          createRevision.save
        }
      } else if (hasNewPayment && issueState != InvoiceIssued) {
        createRevision.save
      }
      allItems.filter(!active && !revisions && canBeDeleted)*.delete
    }
    
  }
  func hasNewPayment = manLinks.exists(created)
  front func uiCurrentRevision: Future[InvoiceRevision] = {
    if (issueState != InvoiceIssued) {
      let _ <- UI.save(this)
      back {
        createRevision
      }
    } else {
      revisions.last!
    }
  }
  
  back func createRevision: InvoiceRevision = {
    InvoiceRevision(
      prev = revisions.last,
      invoice = this, items = this.items, currency = this.currency, 
      date = if (revisions) Date.now else fwdLinks*.date.min.alt(Date.now).max(date)
    ).save
  }
  //func debtLedger: LDebt
  view revisionsView = y(label = "Invoice Revisions", visible = id) {
    revisions >> list (frame = false, editMode = AlwaysRead) {
      grid (labels = None, width = 1.2, margin = None) {
        x(margin = None) {
          _ >> field(title = "$name $number")  
          diffTotal >> field(label = "Difference", showPlus = true, visible = prev) 
          total date >> field(width = 0.6)
        }
        debtOriginsView >> field(margin = None)
    }}
    add ("Issue", visible = issueState != InvoiceIssued && id) {issue()}
  }
  front func issue(): Future[Void] = {
    let revision <- uiCurrentRevision
    revision.form.open()
  }
  
  back func reissue(): Void = {
    revisions.last?.delete
    allItems.filter(!active && !revisions && canBeDeleted)*.delete
    createRevision.save
  }
  
  view invoiceButtons = group {
    button("Issue", visible = issueState != InvoiceIssued && id) {issue()}
    add("Payment", visible = unrecon && id) {addPayment()}
    generalLedgerButton
  }
  
  front func addPayment(): Void = {
    if (isPurchase) {
      if (let a = unrecon) {
        if (a < 0) IncomingPayment(amount = -a, manLinks = [this]).form.open
        else if (a > 0) OutgoingPayment(amount = a, manLinks = [this]).form.open
      }
    } else {
      if (let a = -unrecon) {
        if (a < 0) OutgoingPayment(amount = -a, manLinks = [this]).form.open
        else if (a > 0) IncomingPayment(amount = a, manLinks = [this]).form.open
      }
    }
  }
  
  report Report {
    field accountant: User? {
      from = User.all.filter(is(Accountant))
    }
    field state: [PaymentState]?
    field from: Date?
    field to: Date?
    
    view list = IInvoice.all.filter(
      journalDate >=? from && journalDate <=? to 
      && (!this.state || this.state.contains(reconState.paymentState))
      && isFor(accountant, Accountant)
    ).sortBy(journalDate.desc) >> nav{list(canAdd = false){}}
  }
}

