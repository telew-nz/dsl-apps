trait IPurchaseInvoice extends IInvoice {
  func isPurchase: Bool = true
  func isDebtDebit = false
  event onSave = {
    processRevision()
    
    if (isInstant) {
      postOnSave()
    } else {
      if (registerUpdated) {
      	updateLedgers()
      } 
      if (!(try? reconState) || moneyCalced) {
        postOnSave()
      } 
    }
  }
  
  compute customer = legalEntity
  func vendor: Vendor?
  func payer = legalEntity
  func debtAllowance: Money? = payee?.as[Vendor]?.debtAllowance
  
  back func isInstantPaid: Bool = {
    if (let c = onlyOneOrigin) c.amount == total && (c.origin.journalDate - this.date).abs <= 3600_second else false
  }
  back func instantLedgers(journal: Journal, date: Date): Future[[Ledger]?] 
  
  func getPaymentTerms = paymentTerms
    .or(payee?.as[Vendor]?.paymentTerms)?.as[IIPaymentTerms]
    .alt(DefaultPaymentTerms)
  func cashFlow = Purchases
  view statusesView = x {
    issueState
    paymentState
    unpaidAmount
  }
}