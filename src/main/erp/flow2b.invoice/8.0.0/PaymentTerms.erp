trait IPaymentTerms {
  background = "#d68400"
  func paymentDueDate(invoiceDate: Date, deliveryDate: Date?): Date?
  func deliveryPrepayment: Percent[2]?
  func considerDebt = true
  func canDispatch(to: LegalEntity, amount: Money, paid: Money?): Future[Bool] = {
    if (considerDebt) {
      let currency = amount.unit!.as[Currency]!
      let debt <- to.debt(currency)
      let allowance <- to.debtAllowance.to[Money[currency]](Date.now)
      let p = (paid + allowance - debt)
      (p.as[Percent[2]]/amount) >= deliveryPrepayment
    } else {
      Future((paid.as[Percent[2]]/amount) >= deliveryPrepayment)
    }
  }
}

entity PaymentTerms extends IPaymentTerms {
  field title: String
  ref field deliveryPrepayment: Percent[2]? {
    label = "Prepayment required for delivery"
  }
  ref field paymentDueDate: PaymentDueDate = PaymentDueDateAfter()
  func paymentDueDate(invoiceDate: Date, deliveryDate: Date?): Date? = {
    if (deliveryPrepayment) {
      if (let dd = deliveryDate) paymentDueDate.dueDate(dd)
    } else paymentDueDate.dueDate(invoiceDate)
  }
  func onSave = {
    IInvoice.all.filter(paymentTerms == this)*.touch
  }
}


interface PaymentDueDate {
  func dueDate(invoiceDate: Date): Date
}

class PaymentDueDateAfter extends PaymentDueDate {
  singular = "After Fixed Time"
  field paymentDue: Duration[unit, 0] 
  field unit: DateUnit = day
  
  func dueDate(invoiceDate: Date): Date = invoiceDate + paymentDue
  view form = grid {
    paymentDue >> field(canEditUnit = true)
  }
}
class PaymentDueDateNextMonth extends PaymentDueDate {
  singular = "Fixed Month Day"
  field dayOfMonth: Int = 20
  view form = grid {
    dayOfMonth
  }
  
  func dueDate(invoiceDate: Date): Date = {
    let dof = dayOfMonth.as[Duration[day]]!
    if (invoiceDate.day < dof) invoiceDate.start(of = month) + dof - 1_day
    else invoiceDate.start(of = month) + 1_month + dof - 1_day
  }
}

