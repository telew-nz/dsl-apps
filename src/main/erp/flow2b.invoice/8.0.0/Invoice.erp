trait IInvoice extends IInvoiceRevision with Debt with DebtOrigin {
  background = "#d68400"
  plural = "Invoices"
  singular = "Invoice"
     
  func paidAmount: Money[currency]?
  func setoffs: [Setoff]?
  func deliveryDate: Date?
  func debtDueDate = dueDate
  func references: [String]?
  func isPurchase: Bool
  field revisions: [InvoiceRevision]? inline by invoice

  func invoice: IInvoice = this
  func overpaid = paidAmount > total
  func paid = paidAmount >= total
  func cancel(): Void
  func vendor: LegalEntity
  func customer: LegalEntity
  //func deliveryDate: Date? = if (items.all(delivered)) items*.delivery*.deliveryDate.max
  func allItems: [IInvoiceItem]?
  
  compute paidAmounts: [IInvoiceItem: Money[currency]?]? = {
    var a = paidAmount - items.filter(invoiceAmount < 0)*.invoiceAmount.sum
    items.filter(invoiceAmount > 0).map{i => 
      let v = a.min(i.invoiceAmount)
      a = (a - v)
      (i, v)
    }.toMap
  }
  func paidAmountForItem(item: IInvoiceItem): Money[currency]? = paidAmounts.apply(item)
  
  ref compute issueState: InvoiceIssueState = {
    if (!revisions) InvoiceNotIssued
    else if (allItems.exists(i => !i.revisions || (!i.active && i.revisions.last == this.revisions.last))) InvoiceModified
    else InvoiceIssued
  }
  
  register gstLedgers: [LTax]? = {
    items.filter(gstRate).groupBy(gstRate!.value).agg(gstAmount.sum, invoiceAmount.sum).toSeq.map {
      LTax(account = TaxesPayable, tax = Gst, currency = this.currency, journal = this, rate = #0, 
           trAmount = if (isPurchase) gstAmount else -gstAmount, taxedAmount = invoiceAmount)
    }
  }
  
  field paymentTerms: IPaymentTerms?
  stored compute dueDate: Date? = {
    if (!paid && revisions) paymentTerms?.paymentDueDate(revisions.last!.date, deliveryDate)
  }
  ref stored compute overdueState: PaymentOverdueState {
    value = {
      if (paidAmount == total) Paid
      else if (let dd = dueDate) {
        if (dd < now) PaymentOverdue else NoPaymentOverdue
      }
      else NoPaymentOverdue
    }
    visible = overdueState == PaymentOverdue
  }
  func canDispatch: Future[Bool] = {
    (if (let terms = paymentTerms, let t = total) terms.canDispatch(customer, t, paidAmount)
    else Future(true))
  } 
  compute prepaymentDate: Date? = {
    if (let prepayment = paymentTerms?.deliveryPrepayment, let a = total*prepayment) {
      setoffs.accum(amount.sum).find(amount >= a).map(#0.date)
    } else date
  } 
  
  func onSave = {
    processRevision()
  }
  
  func processRevision(): Void = {
    if (revisions) {
      items.foreach {item =>
        if (item.revisions && item.needsRevision) {
          let newItem = item.copy(revisions = [], prev = null)
          newItem.prev = item.rollback
          item.active = false
        }
      }
    } else if (setoffs) {
      createRevision.save
    }
  }
  func uiCurrentRevision: Future[InvoiceRevision] = {
    if (issueState != InvoiceIssued) {
      UI.save(createRevision)
    } else {
      revisions.last!
    }
  }
  
  func createRevision: InvoiceRevision = {
    InvoiceRevision(
      prev = revisions.last,
      invoice = this, items = this.items, currency = this.currency, 
      date = if (revisions) Date.now else setoffs*.date.min.alt(Date.now)
    )
  }
  
  view revisionsView = revisions >> table (action = form.open) {
    number >> field(width = 0.2) date >> field(width = 0.4) 
    diffTotal >> field(label = "Difference", showPlus = true, width = 0.3) total >> field(width = 0.3)
  }
  func issue(): Void = {
    let revision <- uiCurrentRevision
    revision.form.print()
  }
  
  view invoiceButtons = group {
    button("Issue", visible = issueState != InvoiceIssued) {issue()}
    add("Payment") {addPayment()}
    generalLedgerButton
  }
  
  func addPayment(): Void
  
  report Report {
    field bookkeeper: Person? {
      from = Person.all.filter(is(Bookkeeper))
    }
    field state: [PaymentState]?
    field from: Date?
    field to: Date?
    
    view list = IInvoice.all.filter(
      journalDate >=? from && journalDate <=? to 
      && (!this.state || this.state.contains(reconcilationState.paymentState))
      && isFor(bookkeeper, Bookkeeper)
    ).sortBy(journalDate.desc) >> nav{list(canAdd = false){}}
  }
}

