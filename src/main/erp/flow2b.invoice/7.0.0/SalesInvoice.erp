trait ISalesInvoice extends IInvoice with DebtDebit {
  func hasSalesIssues = debitPaymentState == Overpaid || overdueState == PaymentOverdue
  func isPurchase: Bool = false
  func cashFlowCategory: CashFlowCategory = Sales
  func startingBalance: Money[currency]? = -total
  func paidAmount = debitRepaid
  func cancelable = true    
  func cancel(): Void = cancelationDate = Date.now
  compute vendor = legalEntity
  compute customer = counterparty

  func setoffs: [Setoff]? = credits
  func debitOriginLedger(setoff: Setoff): Future[LDebt] = {
    LDebt(account = AccountsReceivable, origin = this, journal = setoff.journal, date = setoff.date, trAmount = -setoff.amount, counterparty = customer, currency = currency)
  }
  register receivableLedger = LDebt(account = AccountsReceivable, origin = this, journal = this, trAmount = total, counterparty = customer, currency = currency)
  register unearnedLedgers: [LDebt]? = items
    .groupBy(delivery).agg(orderAmount.sum).toSeq
    .filter(orderAmount)
    .map{
      LDebt(account = UnearnedRevenues, origin = _.delivery?.as[Journal].alt(this), journal = this, 
            trAmount = -orderAmount, counterparty = customer, currency = currency)
    }
  
  register receivableCancelLedger: LDebt? = if (let d = cancelationDate) receivableLedger.copy(date = d, trAmount = -receivableLedger.trAmount) else null
  register unearnedCancelLedgers: [LDebt]? = if (let d = cancelationDate) unearnedLedgers.map(_.copy(date = d, trAmount = -_.trAmount)) else null
  func isTheir = customer.isTheir
  
  view statusesView = x {
    debitPaymentState
    debitUnpaid + " unpaid" >> field(visible = debitState == PartiallyReconciled)
    overdueState
  }
  view taxInvoice {
    printable = true
    label = "Tax Invoice"
    layout = nav{grid (labels = None, width = 1.2){
      x {
        vendor.legalName >> field(fontSize = 1.6, stretch = 1)
        h1("Tax Invoice", margin = Bottom)
      }
      row {
        vendor >> grid(width = 0.4, labels = Left, labelsWidth = 0.15, margin = Bottom, spacing = false) {
          legalInfo.gstView
          contacts.phones.join(", ") >> field(label = "Phone")
          contacts.emails.join(", ") >> field(label = "EMail")
        }
        customer >> grid (width = 0.4, labels = Right, labelsWidth = 0.15, margin = Bottom, spacing = false) {
          legalName >> field(label = "Customer")
          legalInfo.gstView
          references >> field(label = "Reference")
        }
        grid (width = 0.4, labels = Right, labelsWidth = 0.15, margin = Bottom, spacing = false) {
          number >> field(align = Right)
          date >> field(align = Right, label = "Invoice Date")
          dueDate >> field(align = Right, label = "Payment Due")
        }
      }
        
      
      [(totalWithoutGst, gstAmount, total, items.groupBy(deliveryGroup).toSeq)] >> total {
        group {
          row(fontSize = 1) {label("Total Excluding GST", span = 3, align = Right) totalWithoutGst} 
          row(fontSize = 1) {label("GST", span = 3, align = Right) gstAmount}
          row(fontSize = 1) {label("Total", span = 3, align = Right) total}
        }
        subtotal {
          deliveryGroup.rowView
          table {
            header{label("Product", width = 0.55) 
                   label("Quantity", align = Right, width = 0.2) 
                   label("Price", align = Right, width = 0.2) 
                   label("Amount", align = Right, width = 0.25)}
            body{row{rowView}}
            //row{product qty price amount}
            //row(visible = discount){label("Discount") space space discount}
          }
        }
      }
    }}
  }
  view ref = x{title statusesView}
}