back object Conversion extends IConversion {
  func convert(version: [Int?]): Future[Any] = {
    if (version < [16,0,0]) {
      OrderTerms.all.foreach{ot =>
        if (let di = ot.postdelivery?.as[OTDueIn]) {
          let t = field[String](di, "trigger")
          if (t == "Delivered" || t == "Returned") {
            di.trigger = Complete
          }
          ot.touch
          ot.save
        } else if (let di = ot.postdelivery?.as[OTNextMonth]) {
          let t = field[String](di, "trigger")
          if (t == "Delivered" || t == "Returned") {
            di.trigger = Complete
          }
          ot.touch
          ot.save
        }
      }
    }  
    if (version < [16,2,2]) {
      IOrder.all.filter(isEmpty).foreach{i => 
        i.updateDue()
        i.updateDashboard()
      }
    }
    if (version < [16,2,3]) {
      if (FinanceNotificator.sendInvoiceToCustomers) {
        FinanceNotificator.sendStm = true 
        FinanceNotificator.save
      }
    }
    if (version < [16,3,2]) {
      CustomerAccountTerms.all.update(nextGenDate = now)
    }
    if (version < [16,4,2]) {
      CustomerAccountTerms.all*.touch
      IOrder.all.filter(terms).foreach{i => 
        i.updateDue()
        i.updateRegisters()
        i.updateDashboard()
      }
    }
    if (version < [16,4,3]) {
      IOrder.all.filter(terms).foreach{i => 
        i.touch
        i.updateDue()
      }
    }
    if (version < [16,8,0]) {
      renameEntity(CustAccStm, "flow2b.invoice.CustAccStm")
      renameEntity(CustAccStmItem, "flow2b.invoice.CustAccStmItem")
      renameField(Customer, accountStatements, "flow2b.invoice.accountStatements")
    }
    if (version < [16,8,2]) {
      IOrder.all*.updateDue
    }
    if (version < [16,9,0]) {
      FinanceNotificator.default(salesReminders)
      FinanceNotificator.default(purchaseReminders)
      FinanceNotificator.save
      Invoice.all.filter(debtUnpaidAmount)*.touch
    }
    if (version < [16,14,0]) {
      AutoSend.all.filter(failedSend)
        .foreach{
          failedSend = !activities*.deliveries.exists(status != Failed)
          updateDashboard
        }
    }
    if (version < [16,14,3]) {
      Invoice.all.filter(i => i.prev && i.prev!.totalDue == i.totalDue && !i.prev!.deletedItems && !i.items.exists(invoices.first == i)).foreach {i =>
        if (let next = i.order.invoices.find(oi => oi.prev == i)) {
          next.prev = i.prev
        }
        i.delete
      }
    }
  }     
}    
