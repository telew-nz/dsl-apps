interface IIOrderTerms {
  func due(order: IOrder): Due
  func orderState(order: IOrder): OrderState
  func canDispatch(state: OrderState) = state != Quote

  func dispatchDate(order: IOrder): Date? = null
  
  func hasAcceptance: Bool = false
  func reserveQuote: Bool = false
  func toDispatchState: OrderState = ToDispatch
  func updatableStates(order: IOrder): [OrderState]
}

trait IOrderTerms extends RefEntity with IIOrderTerms {
  impl event onSave = {
    IOrder.all.filter(terms == this)*.touch
  }
}

extend entity Customer {
  field _orderTerms: IOrderTerms? {views = []}
  compute orderTerms: IOrderTerms? {
    value = _orderTerms.or(Workspace.current.salesOrderTerms)
    update = {
      _orderTerms = if (new != Workspace.current.salesOrderTerms) new
    }
  }
}
extend entity Vendor {
  field _orderTerms: IOrderTerms? {views = []}
  compute orderTerms: IOrderTerms? {
    value = _orderTerms.or(Workspace.current.purchaseOrderTerms)
    update = {
      _orderTerms = if (new != Workspace.current.purchaseOrderTerms) new
    }
  }
}
extend trait Workspace {
  field salesOrderTerms: IOrderTerms? {label = "Default sales order terms" views = []}
  field purchaseOrderTerms: IOrderTerms? {label = "Default purchase order terms"views = []}
  extend view form = extend("main") {
    salesOrderTerms
    purchaseOrderTerms
  }
}

class Due {
  field amount: Money?
  field date: Date?
}


object DefaultOrderTerms extends IIOrderTerms {
  impl func orderState(order: IOrder): OrderState = {
    if (order.dlvIs(Complete) && order.paid) Closed
    else if (let ds = order.orderStateDelivery) ds
    else if (order.paid) Prepaid
    else if (order.accepted) Accepted
    else Quote
  }
  impl func due(order: IOrder): Due = Due(amount = order.total)
  impl func hasAcceptance: Bool = true
  impl func reserveQuote: Bool = true
  
  impl func updatableStates(order: IOrder): [OrderState] = {
    let s = order.calcState
    if (s == Canceled) [OrderState.Canceled]
    else {
      order.dlvStates + (if (order.paid) OrderState.Prepaid else OrderState.Quote) + OrderState.Canceled + OrderState.Accepted
    }
  }
}

entity OrderTerms extends IOrderTerms {
  impl field title: String
  impl ref field reserveQuote: Bool {
    visible = acceptance || prepayment
  }
  ref field acceptance: OTAcceptance?
  ref field prepayment: OTPrepayment?
  ref field delivery: OTDelivery? {
    label = "Delivery Terms"
  }
  ref field postdelivery: OTPostdelivery? {
    validate = if ((prepayment?.percent.withoutUnit == 1) != postdelivery.isEmpty) {
      if (!postdelivery) "Postdelivery is required unless it's full prepayment - 100%"
      else "Postdelivery should be empty for full prepayment"
    }
  }
  impl func dispatchDate(order: IOrder): Date? = if (let delivery){
    Date.now + delivery.dueIn
  }
  override func canDispatch(state: OrderState) = state != Quote && (!prepayment || state != Accepted)
  
  
  impl view form = nav{grid{
    title
    reserveQuote
    acceptance
    prepayment
    delivery
    postdelivery
  }}
  
  impl func due(order: IOrder): Due = {
    if (let ds = order.orderStateDelivery) {
      if (let post = postdelivery, let date = order.dlvDate(post.trigger)) {
        Due(amount = order.total, date = post.dueDate(date))
      } else if (let prepayment) {
        Due(amount = order.total, date = order.date + prepayment.dueIn)
      } else {
        Due()
      }
    } else if (acceptance && !order.accepted) {
      acceptance!.due(order)
    } else if (let pre = prepayment) {
      pre.due(order, if (acceptance) order.accepted! else order.date)
    } else {
      Due()
    }
  }
  impl func orderState(order: IOrder): OrderState = {
    if (order.dlvIs(Complete) && order.paid) Closed
    else if (let ds = order.orderStateDelivery) ds
    else if (let acceptance) {
      if (!order.accepted) acceptance.orderState(order)
      else if (let pre = prepayment) {
        pre.orderState(order, Accepted)
      } else Accepted
    } else if (let pre = prepayment) {
      if (order.isEmpty) Quote
      else {
        pre.orderState(order, Quote)
      }
    } else ToDispatch
  }
  impl func hasAcceptance: Bool = acceptance
  
  impl func toDispatchState: OrderState = {
    if (prepayment) Prepaid
    else if (acceptance) Accepted
    else ToDispatch
  }
  
  impl func updatableStates(order: IOrder): [OrderState] = {
    let s = order.calcState
    if (s == Canceled) [OrderState.Canceled]
    else if (s == Quote) {
      if (toDispatchState == Accepted) {
        order.dlvStates + OrderState.Quote + OrderState.Canceled + OrderState.Accepted
      } else if (hasAcceptance) {
        [OrderState.Quote, OrderState.Canceled, OrderState.Accepted]
      } else {
        [OrderState.Quote, OrderState.Canceled]
      }
    } else {
      let tds = toDispatchState
      if (s == Accepted && tds != Accepted) {
        [OrderState.Quote, OrderState.Canceled, OrderState.Accepted]
      } else {
        var dd = order.dlvStates
        if (tds == Accepted) dd += OrderState.Quote
        dd + tds + OrderState.Canceled
      }
    }
  }
}

class OTAcceptance {
  singular = "Acceptance"
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  impl view form = x{label("In") dueIn}
  
  func due(order: IOrder): Due = Due(date = order.date + dueIn)
  func orderState(order: IOrder): OrderState = {
    if (order.accepted) Accepted 
    else if (let dd = order.dueDate) {
      if (Date.now >= dd) Unaccepted
      else Quote
    } else Quote
  }
}
class OTPrepayment {
  singular = "Prepayment"
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  field percent: UPercent[2] {
    validate = if (percent > 1) "Cannot be more than 100%"
  }
  impl view form = x{percent label("in") dueIn}
   
  func due(order: IOrder, date: Date): Due = {
    let dd = date + dueIn
    Due(amount = order.total*percent, date = date + dueIn)
  }
  func orderState(order: IOrder, prevState: OrderState): OrderState = {
    if (order.unpaidAmount <= 0) Prepaid 
    else if (let dd = order.dueDate) {
      if (Date.now >= dd) Unpaid
      else prevState
    } else prevState
  }
}
class OTDelivery {
  singular = "Delivery"
  field dueIn: Duration[unit, 0]? {canEditUnit}
  field unit: DateUnit = day
  impl view form = x {
    label("Dispatch in") dueIn >> field(canEditUnit = true) label("maximum")
  }
}
interface OTPostdelivery {
  func trigger: DlvState
  func dueDate(orderDate: Date): Date
}

class OTDueIn extends OTPostdelivery {
  singular = "Full Payment Due"
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  impl field trigger: DlvState {
    default = Complete
    from = DlvState.all.filter(started).toSet
  }
    
  impl func dueDate(orderDate: Date): Date = orderDate + dueIn
  impl view form = x {
    label("In") dueIn >> field(canEditUnit = true) label("after") trigger
  }
}
class OTNextMonth extends OTPostdelivery {
  singular = "Next Month Payment"
  field dayOfMonth: Int = 21
  impl field trigger: DlvState {
    default = Complete
    from = DlvState.all.filter(started).toSet
  }
  impl view form = x {
    label("On") dayOfMonth label("after") trigger
  }
  
  impl func dueDate(orderDate: Date): Date = {
    let dof = dayOfMonth.as[Duration[day]]
    if (orderDate.day < dof) orderDate.start(of = month) + dof - 1_day
    else orderDate.start(of = month) + 1_month + dof - 1_day
  }
}

