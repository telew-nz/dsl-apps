object FinanceNotificator extends SystemService {
  func title = "Finance Notificator"
  field sendInvoiceToCustomers: Bool = true
  func serviceAccess: [Role]? = [Admin]
  view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
    
    sendInvoiceToCustomers
    contacts
  }}
  field contacts: [IContact]?
  func ourContacts = contacts
  func traitItem = serviceState
}

class NewInvoiceNotif extends SystemJob {
  func service = FinanceNotificator
  field revision: InvoiceRevision
  func do = {
    if (let c = revision.invoice.payer?.invoiceContact) {
      c.join(revision)
      revision.touch
      Activity.current!.setMainEntity(revision)
      Activity.current!.makePublic("New ${revision.name}")
    }
  }
}

extend trait IInvoice extends DeferredJob {
  func service = FinanceNotificator
  func jobDate = if (!paid && revisions) {
    getPaymentTerms.nextReminder(revisions.first!.date, deliveryDate)
  }
  func do = {
    if (let dd = dueDate) {
      touch
      Activity.current!.setMainEntity(this)
      let t = if (let dueIn = (dd - Date.now).days.round(floor, 0)) {
        if (dueIn > 0) "Invoice is due in $dueIn"
        else "Invoice is overdue by $(-dueIn)"
      } else {
        "Invoice is due today"
      }
      if (isPurchase) {
        Activity.current!.comment(t)
      } else {
        invoice.payer?.invoiceContact?.join(this)
        Activity.current!.makePublic(t)
      }
    }
  }
}