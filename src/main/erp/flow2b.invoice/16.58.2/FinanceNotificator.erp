object FinanceNotificator extends SystemService {
  impl func title = "Finance Notificator"

  field sendStm: Bool {
    default = false 
    label = "Generate and send statement of customer accounts"
  }
  func serviceAccess: [Role]? = [Admin]
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
    
    sendStm
    contacts
  }}
  field contacts: [IContact]? {
    validate = if (sendStm && !contacts) {
      "Contacts should be selected in order to send invoices"
    }
  }
  impl func ourContacts = contacts
}

trait AutoSend extends Entity {
  system field autoSend: Bool
  system field failedSend: Bool
  system field ignoreAutoSend: Bool
  
  override func issueTypes = super.issueTypes + ITAutoSendFailed
  func sendOut(): Void
  impl event onSave = {
    if (autoSend && !created && !ignoreAutoSend) {
      failedSend = !activities*.deliveries.exists(status != Failed)
    }
  }
}

object ITAutoSendFailed extends IssueType[AutoSend] {
  impl func title = "Failed to send out to the customer"
  impl func hasIssue(item: AutoSend) = !item.ignoreAutoSend && item.failedSend
  impl func fixes(item: AutoSend) = [Fix(
    text = "Correct the customer's email address and send a message", acts = [Act(
      label = "Send Again", do = item.sendOut()
    )]
  ), Fix (
    text = "Deliver the invoice by a different channel and ignore the issue", acts = [Act(
      label = "Ignore", do = {
        item.ignoreAutoSend = true
        UI.save(item)
      }
    )]
  )]
}

