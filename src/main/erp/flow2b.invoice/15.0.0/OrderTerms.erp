interface IIOrderTerms {
  func due(order: IOrder): Due
  func orderState(order: IOrder): OrderState
  func dispatchDate(order: IOrder): Date? = null
  
  func waitForAcceptance: Bool = false
  func reserveQuote: Bool = false
  func toDispatchState: OrderState = ToDispatch
}

trait IOrderTerms extends RefEntity with IIOrderTerms {
  event onSave = {
    IOrder.all.filter(terms == this)*.touch
  }
}

extend entity Customer {
  field _orderTerms: IOrderTerms?
  compute orderTerms: IOrderTerms? {
    value = _orderTerms.or(Workspace.current.salesOrderTerms)
    update = {
      _orderTerms = if (new != Workspace.current.salesOrderTerms) new
    }
  }
}
extend entity Vendor {
  field _orderTerms: IOrderTerms?
  compute orderTerms: IOrderTerms? {
    value = _orderTerms.or(Workspace.current.purchaseOrderTerms)
    update = {
      _orderTerms = if (new != Workspace.current.purchaseOrderTerms) new
    }
  }
}
extend trait Workspace {
  field salesOrderTerms: IOrderTerms? {label = "Default sales order terms" views = []}
  field purchaseOrderTerms: IOrderTerms? {label = "Default purchase order terms"views = []}
  extend view form = extend("main") {
    salesOrderTerms
    purchaseOrderTerms
  }
}

class Due {
  field amount: Money?
  field date: Date?
}

enum PaymentTrigger(state: OrderState, date: IOrder => Date?) {
  case Dispatched(state = Dispatched, date = _.dispatchDate){background = "#dea", label = "Order Dispatched"}
  case Delivered(state = Delivered, date = _.deliveryDate){background = "#dea", label = "Order Delivered"}
}

object DefaultOrderTerms extends IIOrderTerms {
  func orderState(order: IOrder): OrderState = {
    if (order.deliveryComplete && order.paid) Complete
    else if (let ds = order.orderStateDelivery) ds
    else ToDispatch
  }
  func due(order: IOrder): Due = Due(amount = order.total)
}

entity OrderTerms extends IOrderTerms {
  field title: String
  ref field predelivery: OTPredelivery?
  ref field delivery: OTDelivery? {
    label = "Delivery Terms"
  }
  ref field postdelivery: OTPostdelivery? {
    validate = if ((predelivery?.paymentPercent.withoutUnit == 1) != postdelivery.isEmpty) {
      if (!postdelivery) "Postdelivery is required unless it's full prepayment - 100%"
      else "Postdelivery should be empty for full prepayment"
    }
  }
  func dispatchDate(order: IOrder): Date? = if (let delivery){
    Date.now + delivery.dueIn
  }
  
  
  view form = nav{grid{
    title
    predelivery
    delivery
    postdelivery
  }}
  
  func due(order: IOrder): Due = {
    if (let ds = order.orderStateDelivery) {
      if (let post = postdelivery) {
        Due(amount = order.total, date = post.dueDate(post.trigger.date(order)!))
      } else {
        Due(amount = order.total, date = order.date + predelivery!.dueIn)
      }
    } else if (let pre = predelivery) {
      pre.due(order)
    } else {
      Due()
    }
  }
  func orderState(order: IOrder): OrderState = {
    if (order.deliveryComplete && order.paid) Complete
    else if (let ds = order.orderStateDelivery) ds
    else if (let pre = predelivery) {
      if (order.isEmpty) Quote
      else {
        pre.orderState(order)
      }
    } else ToDispatch
  }
  func waitForAcceptance: Bool = predelivery?.is[OTAcceptance]
  func reserveQuote: Bool = predelivery?.reserveQuote
  
  func toDispatchState: OrderState = predelivery?.toDispatchState.alt(ToDispatch)
}

interface OTPredelivery {
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  func paymentPercent: UPercent[2]?
  field reserveQuote: Bool
  func toDispatchState: OrderState
  
  func due(order: IOrder): Due
  func orderState(order: IOrder): OrderState
}
class OTAcceptance extends OTPredelivery {
  singular = "Acceptance"
  func paymentPercent: UPercent[2]? = 0
  view form = x{label("In") dueIn reserveQuote}
  
  func due(order: IOrder): Due = Due(date = order.date + dueIn)
  func orderState(order: IOrder): OrderState = {
    if (order.accepted) toDispatchState 
    else if (let dd = order.dueDate) {
      if (Date.now >= dd) Canceled
      else Quote
    } else Quote
  }
  func toDispatchState = Accepted
}
class OTPrepayment extends OTPredelivery {
  singular = "Prepayment"
  field percent: UPercent[2] {
    validate = if (percent > 1) "Cannot be more than 100%"
  }
  func paymentPercent: UPercent[2]? = percent
  view form = x{percent label("in") dueIn reserveQuote}
   
  func due(order: IOrder): Due = {
    let dd = order.date + dueIn
    Due(amount = order.total*percent, date = order.date + dueIn)
  }
  func orderState(order: IOrder): OrderState = {
    if (order.unpaidAmount <= 0) toDispatchState 
    else if (let dd = order.dueDate) {
      if (Date.now >= dd) Canceled
      else Quote
    } else Quote
  }
  func toDispatchState = Prepaid
}
class OTDelivery {
  singular = "Delivery"
  field dueIn: Duration[unit, 0]? {canEditUnit}
  field unit: DateUnit = day
  view form = x {
    label("Dispatch in") dueIn >> field(canEditUnit = true) label("maximum")
  }
}
interface OTPostdelivery {
  func trigger: PaymentTrigger
  func dueDate(orderDate: Date): Date
}

class OTDueIn extends OTPostdelivery {
  singular = "Full Payment Due"
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  field trigger: PaymentTrigger = Dispatched
  
  func dueDate(orderDate: Date): Date = orderDate + dueIn
  view form = x {
    label("In") dueIn >> field(canEditUnit = true) label("when") trigger
  }
}
class OTNextMonth extends OTPostdelivery {
  singular = "Next Month Payment"
  field dayOfMonth: Int = 21
  field trigger: PaymentTrigger = Dispatched
  view form = x {
    label("On") dayOfMonth label("when") trigger
  }
  
  func dueDate(orderDate: Date): Date = {
    let dof = dayOfMonth.as[Duration[day]]!
    if (orderDate.day < dof) orderDate.start(of = month) + dof - 1_day
    else orderDate.start(of = month) + 1_month + dof - 1_day
  }
}

