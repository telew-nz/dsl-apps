back object Conversion extends IConversion {
  func convert(version: [Int?]): Future[Any] = {
    if (version < [16,21,0]) {
      dropEntity("flow2b.acc.finance.CustAccStm")
      dropEntity("flow2b.invoice.CustAccStm")
      CptAccTerms.all*.touch
    }
    if (version < [16,26,0]) {
      renameField(ISuperProduct, invoiceDesc, "flow2b.invoice.invoiceDesc")
    }
    if (version < [16,31,2]) {
      IOrderItem.all.filter(!consider && !invoices)*.delete
    }
    if (version < [16,36,0]) {
      CptAccTerms.all.update(orderTerms = field[IOrderTerms?](Workspace.current, "flow2b.invoice._accountOrderTerms"))
    }
    if (version < [16,42,0]) {
      OrderTerms.all.update(target = [Purchases, Sales])
    }
    if (version < [16,44,3]) {
      recreateAllRegisters
    }
    if (version < [16,48,1]) {
      NewInvoice.mode = if (field(FinanceNotificator, "sendInvoiceToCustomers")) Automatic else Inactive
      NewInvoice.save
      FinanceNotificator.sendRemindersToCustomers = field(FinanceNotificator, "sendInvoiceToCustomers")
      FinanceNotificator.save
    }
    if (version < [16,48,2]) {
      NewInvoice.contacts = FinanceNotificator.contacts*.as[Contact]
      NewInvoice.save
    }
    if (version < [16,49,0]) {
      IOrder.all.update(dueUpdateJob = OrderDueUpdateJob())
    }
    if (version < [16,51,0]) {
      recomputeAll(Invoice, _state)
    }
  }     
}    
 