entity OrderTerms extends IOrderTerms {
  impl field target: [PurchaseSale]? = [Purchases, Sales]
  impl field title: String
  impl ref field reserveQuote: Bool {
    visible = acceptance || prepayment
  }
  ref field priceGst: TermsGst {
    default = Vendor
    label = "Display Prices"
  }
  ref field acceptance: OTAcceptance?
  ref field prepayment: OTPrepayment?
  ref field predelivery: OTPredelivery? {
    validate = if (predelivery && predelivery?.percent <= prepayment?.percent) "Predelivery percent should be > prepayment percent"
  }
  ref field delivery: OTDelivery? {
    label = "Delivery Terms"
  }
  func prePercent = predelivery?.percent.or(prepayment?.percent)
  ref field postdelivery: OTPostdelivery? {
    validate = if ((prePercent == 1) != postdelivery.isEmpty) {
      if (!postdelivery) "Postdelivery is required unless it's full prepayment - 100%"
      else "Postdelivery should be empty for full prepayment"
    }
  }
  impl func dispatchDate(order: IOrder): Date? = if (let delivery){
    Date.now + delivery.dueIn
  }
  override func canDispatch(state: OrderState) = state != Quote && (!prepayment || state != Accepted)
  impl func inclGst(vendor: IVendor): Bool = {
    if (priceGst == Vendor) vendor.pricesIncludingGst
    else priceGst == Incl
  }
  
  impl view form = nav{grid{
    title
    target >> field(label = "Applicable for")
    priceGst
    reserveQuote
    acceptance
    prepayment
    predelivery
    delivery
    postdelivery
  }}
  
  impl func due(order: IOrder): Due = {
    let ds = order.orderStateDelivery
    if (let ds where postdelivery && ds.delivery && postdelivery!.trigger <= ds.delivery!) {
      Due(amount = order.invoiceTotal, date = postdelivery!.dueDate(order.dlvDate(postdelivery!.trigger).alt(Date.now)))
    } else if (let acceptance where !order.accepted && !ds) {
      Due(date = Date.now + acceptance.dueIn)
    } else if (let predelivery) {
      let dd = order.deliveries*.dlvInTransitDate.min
      let delta = dd - Date.now

      if (!ds && delta < predelivery.issued && predelivery.availability && !order.deliveries.all(calcedAv)) {
        order._due.alt(Due())
      } else if (ds || (delta < predelivery.issued && predelivery.isAv(order))) {
        Due(amount = order.invoiceTotal*predelivery.percent, date = dd - predelivery.issued + predelivery.dueIn)
      } else if (let prepayment) {
        let prevDate = if (acceptance) order.accepted.alt(order.date) else order.date
        Due(amount = order.invoiceTotal*prepayment.percent, date = prevDate + prepayment.dueIn, update = dd - predelivery.issued)
      } else {
        Due(update = dd - predelivery.issued)
      }
    } else if (let prepayment) {
      let prevDate = if (acceptance) order.accepted.alt(order.date) else order.date
      Due(amount = order.invoiceTotal*prepayment.percent, date = prevDate + prepayment.dueIn)
    } else {
      Due()
    }
  }
  impl func orderState(order: IOrder): OrderState = {
    if (order.dlvIs(Complete) && order.paid) Closed
    else if (let ds = order.orderStateDelivery) ds
    else if (let acceptance where !order.accepted) {
      if (let dueDate = order.invoices.filter(isQuote).last?.dueDate where Date.now >= dueDate) Unaccepted
      else Quote
    } else if (let predelivery) {
      let dd = order.deliveries*.dlvInTransitDate.min
      let delta = dd - Date.now
      let pdd = delta < predelivery.issued && predelivery.availability && !order.deliveries.all(calcedAv)
      if (pdd && try? order._state) order._state
      else if (!pdd && delta < predelivery.issued && predelivery.isAv(order)) {
        if (order.unpaidAmount <= 0) ToDispatch
        else InPreDelivery
      } else if (let prepayment) {
        if (order.lastRevision.unpaidAmount <= 0) Prepaid 
        else if (let dd = order.lastRevision.dueDate where Date.now >= dd) Unpaid
        else Accepted
      } else {
        Accepted
      }
    } else if (let prepayment) {
      if (order.unpaidAmount <= 0) Prepaid 
      else if (let dd = order.dueDate where Date.now >= dd) Unpaid
      else Accepted
    }
    else ToDispatch
  }
  impl func hasAcceptance: Bool = acceptance
  
  func toDispatchState: OrderState = {
    if (predelivery) ToDispatch
    else if (prepayment) Prepaid
    else if (acceptance) Accepted
    else ToDispatch
  }
  
  impl func updatableStates(order: IOrder): [OrderState] = {
    let s = order.calcState
    if (s == Canceled) [OrderState.Canceled]
    else if (s == Quote) {
      if (toDispatchState == Accepted) {
        order.dlvStates + OrderState.Quote + OrderState.Canceled + OrderState.Accepted
      } else if (hasAcceptance) {
        [OrderState.Quote, OrderState.Canceled, OrderState.Accepted]
      } else {
        [OrderState.Quote, OrderState.Canceled]
      }
    } else {
      let tds = toDispatchState
      if (s == Accepted && tds != Accepted) {
        [OrderState.Quote, OrderState.Canceled, OrderState.Accepted]
      } else {
        var dd = order.dlvStates
        if (tds == Accepted) dd += OrderState.Quote
        s + dd + tds + OrderState.Canceled
      }
    }
  }
}

enum TermsGst {
  case Vendor {label = "Based on Vendor"}
  case Incl {label = "Including GST"}
  case Excl {label = "Excluding GST"}
}

class OTAcceptance {
  singular = "Acceptance"
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  impl view form = x{label("In") dueIn}
  
}
class OTPrepayment {
  singular = "Prepayment"
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  field percent: UPercent[2] {
    validate = if (percent > 1) "Cannot be more than 100%"
  }
  impl view form = x{percent label("due in") dueIn}  
}

class OTPredelivery {
  singular = "Predelivery"
  
  field dueIn: Duration[unit, 0]? {canEditUnit}
  field unit: DateUnit = day
  field availability: StockLevel?
  
  func isAv(order: IOrder): Bool = if (let availability) {
    order.deliveries.all(_.isAv(availability))
  } else {
    true
  }
  field issued: Duration[issueUnit, 0] {
    canEditUnit
  }
  field issueUnit: DateUnit = day
  
  field percent: UPercent[2] {
    validate = if (percent > 1) "Cannot be more than 100%"
  }
  impl view form = grid(labels = None) {
    x{percent label("prepayment invoice issued") issued label("before delivery")}
    x{label("and due in") dueIn}
    x(visible = availability || ui.edit){label("only when in") availability label("stock")}
  }
}

class OTDelivery {
  singular = "Delivery"
  field dueIn: Duration[unit, 0]? {canEditUnit}
  field unit: DateUnit = day
  impl view form = x {
    label("Dispatch in") dueIn >> field(canEditUnit = true) label("maximum")
  }
}
interface OTPostdelivery {
  func trigger: DlvState
  func dueDate(orderDate: Date): Date
}

class OTDueIn extends OTPostdelivery {
  singular = "Full Payment Due"
  field dueIn: Duration[unit, 0] {canEditUnit}
  field unit: DateUnit = day
  impl field trigger: DlvState {
    default = Complete
    from = DlvState.all.filter(started).toSet
  }
    
  impl func dueDate(orderDate: Date): Date = orderDate + dueIn
  impl view form = x {
    label("In") dueIn >> field(canEditUnit = true) label("after delivery") trigger
  }
}
class OTNextMonth extends OTPostdelivery {
  singular = "Next Month Payment"
  field dayOfMonth: Int = 20
  impl field trigger: DlvState {
    default = Complete
    from = DlvState.all.filter(started).toSet
  }
  impl view form = x {
    label("On") dayOfMonth label("after delivery") trigger
  }
  
  impl func dueDate(orderDate: Date): Date = {
    let dof = dayOfMonth.as[Duration[day]]
    orderDate.end(of = month) + dof
  }
}
