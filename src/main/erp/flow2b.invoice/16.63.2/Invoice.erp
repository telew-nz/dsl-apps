entity Invoice extends IOrderRevision {
  background = "#d68400"
  
  ref impl field date: Date 
  
  ref impl field totalDue: Money[currency]? {
    validate = if (prev && prev!.totalDue == totalDue && !prev!.deletedItems && !items.exists(invoices.first == this)) {
      "Invoice revision $(this) due $totalDue is exactly the same as the previous $prev due $(prev!.totalDue)"
    }
  }
  
  impl compute dueRate: Percent[2]? {
    value = if (let t = invoiceTotal) totalDue.as[Percent[2]]/t 
  }
   
  impl func unpaidAmount: Money[currency]? {
    value = {
      if (!isInstant) {
        let r = allRevisions*.unreconAmount.sum //+ order.payments*.unreconAmount.sum
        if (isPurchase) -r else r
      }
    }
  }
  
  impl field dueDate: Date?
  func debtDueDate = dueDate
  impl func canceled = false
  override func mainOrigin = order
  impl func journalDate = date
  impl ref field order: IOrder by invoices {
    available(Inline).for(All)
  }
  func invoiceCpc: ICounterparty? = {
    if (isPurchase) {
      if (isQuote) order.orderVendor else order.payee
    } else {
      if (isQuote) order.orderCustomer else order.payer
    }
  }
  func invoiceAddressee: Addressee? = {
    if (isQuote let cp = order.contactPerson) cp.as[Addressee]
    else invoiceCpc?.legalEntity
  }
  func invoiceContact: Contact? = {
    if (isQuote let cp = order.contactPerson) cp.contacts*.as[EmailContact].first 
    else invoiceCpc?.billingContact
  }
  
  impl ref field currency: Currency
  impl field prev: Invoice? {
    available(Inline).for(Inline)
    deleteCascade = false
    validate = 
      if (let i = order.invoices.indexOf(this)) {
        if (prev != if (let j = i - 1) order.invoices.apply(j)) {
          "You can delete only the latest invoice"
        }
      }
      else "No invoice in the order $order"
  }
  impl ref compute paymentState: PaymentState {
    value = if (isInstant) Paid else {
      //let ps = order.paymentState 
      let ps = reconState.paymentState
      if (ps == Account) Unpaid else ps
    }
    visible = isNote || totalDue
  }
  impl ref compute debtCounterparty = order.debtCounterparty
  ref compute diffTotal {
    value = invoiceTotal - prev?.invoiceTotal
  }
 
  override func reconDates = [date] + order.reconDates
  
  //system stored compute isInstant: Bool
  ref impl compute isInstant: Bool {
    value = back{!prev && order.calcInstant}
  }
  override func allManLinks = order.allManLinks
  compute diffGstAmount = gstAmount - prev?.gstAmount
  compute diffSubtotalWithoutGst = invoiceSubtotalNoGst - prev?.invoiceSubtotalNoGst
  impl func legalEntity = order.legalEntity
  func deletedItems = items.filter(i => !i.active && !i.next && i.invoices.last == this)
  impl field items: [IOrderItem]? inline by invoices {deleteCascade = false}
  ref compute n: Int? = if (let p = prev) p.n + 1 else 0
  impl compute number = {
    if (n) "$(order.number).R$n" else order.number
  }
  impl func entityNumbers = [number]
  impl ref compute isNote: Bool = prev?.haveDue
  
  func haveDue: Bool = totalDue || prev?.haveDue
  
  override func entitySubject: String = "$legalEntity: $name $number" 
  func isDebit: Bool = diffTotal > 0
  func isCredit: Bool = diffTotal < 0
  impl func title = "$name $number $debtCounterparty"
  impl func noCpTitle = "$name $number"

  impl view ref = x {
    title 
    date.date
    totalDue >> field(visible = totalDue != invoiceTotal) 
    label("due of", fontStyle = Label, visible = totalDue != invoiceTotal && totalDue) 
    invoiceTotal 
    paymentState
  }
  func sign = if (isDebit) "+" else "âˆ’"
  impl func isPurchase = order.isPurchase
  
  
  compute logo: Image? = vendor.legalEntity.as[Company]?.logo 
  compute payer {
    value = order.payer
    available(Inline).for(Inline)
    availableFor = Inline
  }
  compute customer {
    value = order.orderCustomer
    available(Inline).for(Inline)
    availableFor = Inline
  }
  compute customerRefNum = customer?.legalEntity?.refNum(payer?.legalEntity)
  compute vendor {
    value = order.orderVendor!
    available(Inline).for(Inline)
    availableFor = Inline
  }
  compute receiver {
    value = order.deliveries*.dlvReceiver.distinct.onlyOne
    available(Inline).for(Inline)
    availableFor = Inline
  }
  compute shipTo: ILocation? {
    value = order.deliveries*.shipTo.distinct.onlyOne
    available(Inline).for(Inline)
    availableFor = Inline
  }
  compute sameTotals = !prev || (!diffSubtotalWithoutGst && !diffTotal)
  compute isLastInvoice = order.invoices.last == this
  compute paymentAccounts = {
    OurLegalEntity.ours*.accounts.filter(forCustomerPayments && number && _.currency == this.currency)
  }
  ref compute name: String = {
    if (isNote) {
      if (isDebit) "Debit Note" 
      else if (!diffTotal && totalDue != prev?.totalDue) taxInvoiceName 
      else "Credit Note"
    } else {
      taxInvoiceName
    }
  }
  
  compute nameDesc: String? = {
    if (isNote && isDebit) "The total for order $(order.number) has been increased."
    else if (isNote && diffTotal) "The total for order $(order.number) has been decreased."
  }
  func isQuote: Bool = !totalDue && !isNote
  func taxInvoiceName: String = {
    if (isQuote) if (isPurchase) "Purchase Order" else "Quote" 
    else if (totalDue != invoiceTotal) "Prepayment " + prevInvoiceName
    else prevInvoiceName
  }
  func prevInvoiceName: String = if (let prev) {
    if (isNote) {
      if (isDebit) "Debit Note"
      else if (isCredit) "Credit Note"
      else prev.prevInvoiceName
    } else {
      "Tax Invoice"
    }
  } else {
    "Tax Invoice"
  }

  impl compute debtTable {
    availableFor = Inline
    value = back{order.buildDebtTable(if (isLastInvoice) order.allRevisions else allRevisions)}
  }
  stored compute _state: InvoiceState? {
    value = {
      if (isQuote && order.accepted && order.invoices.filter(_.isQuote).last == this) Accepted
      else if (isQuote && order.manCanceled && order.invoices.last == this) Rejected
    }
  }
  ref compute state: InvoiceState? = _state.or(if (!isQuote && !invoiceToPay && !invoiceToRefund) Paid)
  
  back func accept: Invoice = {
    order.accepted = Date.now
    order.save
    order.notify(Salesperson)
    order.procState = Processing
    Activity.current!.thread = 1
    saveMain
  }
  back func reject: Invoice = {
    order.manCanceled = true
    order.save
    order.notify(Salesperson)
    order.procState = Processing
    Activity.current!.thread = 1
    saveMain
  }
}