extend enum DashboardIssue {
  case InvoiceNotIssued(role = Accountant, priority = default)
  case InvoiceModified(role = Accountant, priority = default)
} 
 
trait IOrder extends IOrderRevision with DashboardItem with PaymentSource {
  background = "#d68400"
  plural = "Invoices"
  singular = "Invoice"
   
  func allOrigins: [DebtOrigin]? = allRevisions
  field revisionDate: Date?
  func onlyOneInvoice: IOrderRevision? = if (let invoices) invoices.onlyOne else this
  back func onlyOneOrigin = onlyOneInvoice?.debtOriginAmounts.onlyOne
  func fullReconState: ReconState = {
    if (canceled) if (unpaidAmount < 0) PartRecon else Canceled
    else {
      if (!unpaidAmount) Recon
      else if (allRevisions.exists(reconAmount) || payments.exists(!id)) PartRecon
      else Unrecon
    } 
  }
  ref compute chargeType: ChargeType {
    value = orderCustomer?.as[Customer]?.chargeType.alt(Cash)
    visible = chargeType != Cash
  }
  func paid: Bool = !unpaidAmount
  func paidAmount: Money? = receivedAmount - refundedAmount
  compute receivedAmount: Money? {
    availableFor = Inline
    value = back {
      allRevisions.filter(isPurchase && debtAmount < 0 || !isPurchase && debtAmount > 0)*.debtOriginAmounts.filter(origin.is[Payment])*.amount.sum.abs 
    }
  }
  compute refundedAmount: Money? {
    availableFor = Inline
    value = back {
      allRevisions.filter(isPurchase && debtAmount > 0 || !isPurchase && debtAmount < 0)*.debtOriginAmounts.filter(origin.is[Payment])*.amount.sum.abs
    }
  }
  ref compute unpaidAmount: Money? {
    value = {
      if (!isInstant) {
        let r = allRevisions*.unreconAmount.sum + payments*.unreconAmount.sum
        if (isPurchase) -r else r
      }
    }
  }
  
  compute revUnpaidAmount: Money? {
    value = {
      if (!isInstant) {
        let r = invoices*.unreconAmount.sum + payments*.unreconAmount.sum
        if (isPurchase) -r else r
      }
    }
  }

  
  compute paymentState: PaymentState {
    value = fullReconState.paymentState
  }
  func journalDate = if (let d = invoices.last?.date) {
    if (let rd = revisionDate) if (rd > d) rd else d + 1_minute
    else d + 1_minute
  } else date
  func issues = {
    let ist = issueState
    (
      if (ist == InvoiceNotIssued && shouldBeIssued) [DashboardIssue.InvoiceNotIssued]
      else if (ist == InvoiceModified) [DashboardIssue.InvoiceModified]
    ).toSet
  }
  func fixes(issue: DashboardIssue) = {
    if (issue == InvoiceNotIssued) {
      [Fix(text = "Issue invoice", acts = [Act(label = "Issue", do = this.issue())])]
    } else if (issue == InvoiceModified) {
      [
        Fix(text = "Issue credit/debit note", acts = [Act(label = "Issue", do = this.issue())]),
        Fix(text = "In the case when it was accidently issued, delete the original invoice and issue again", acts = [Act(label = "Reissue", do = Query(this).foreach{
          this.reissue()
        })]),
        Fix(text = "Rollback modifications", acts = [Act(label = "Rollback", do = Query(this).foreach{
          rollbackInvoice()
        })])
      ]
    }
  }
  
  func cashFlow: CashFlow
  func isInstant = invoices.onlyOne?.isInstant
  back func calcInstant: Bool
  func canceled: Bool = items.all(canceled) && allItems
  
  func deliveryCounterparty: LegalEntity?
  func references: [String]?
  func isPurchase: Bool
//  func cashFlow: CashFlowCategory
  func prev: Invoice? = invoices.last
  field invoices: [Invoice]? inline by order
  func allRevisions: [IOrderRevision] = invoices + this
  
  func order: IOrder = this
  back func isInstantPaid: Bool
  func orderVendor: IVendor?
  func orderCustomer: ICustomer?
  func payer: ICustomer?
  func payee: IVendor?
  func deliveryDate: Date? = if (items.all(delivered)) items*.delivery*.deliveryDate.max
  func allItems: [IOrderItem]?
  func deliveries: [IDelivery]? = allItems.filter(active)*.delivery.distinct
  func delivered: Bool = allItems.all(!active || delivered)

  func revisionAt(date: Date): IOrderRevision = {
    invoices.filter(r => r.date <= date).sortBy(_.date.desc).first?.as[IOrderRevision].alt(this)
  }
  func debtAllowance: Money?
   
  func shouldBeIssued: Bool = reconAmount
  ref compute issueState: InvoiceIssueState = {
    if (!invoices) InvoiceNotIssued
    else if (allItems.exists(invoiceNotIssued)) InvoiceModified
    else InvoiceIssued
  }  
  func rollbackInvoice(): IOrder = {
    if (let l = invoices.last) {
      items.filter(invoiceNotIssued).foreach {i =>
        i.rollbacked = true
        i.delete
      }
      l.items.foreach {i =>
        i.active = true
        i.save
      }
    }
    this
  } 
  field paymentTerms: IPaymentTerms?
  func getPaymentTerms: IIPaymentTerms
  
  back func instantLedgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    let lgs <- deliveryInstantLedgers(journal, date)
    allRevisions*.gstLedgers(journal, date) + lgs
  }
  back func deliveryInstantLedgers(journal: Journal, date: Date): Future[[Ledger]?]
  
  system stored compute canDispatch: Bool 
  back func prepaymentDate: Date? = {
    if (let prepayment = getPaymentTerms.deliveryPrepayment, let a = total*prepayment) {
      debtOriginAmounts.accum(amount.sum).find(amount >= a).map(#0.origin.journalDate.max(date))
    } else date
  } 

  func updateCanDispatch(): Future[Void] = {
	if (!paid && total) {
      let d <- getPaymentTerms.canDispatch(this)
      canDispatch = d
    } else {
      canDispatch = true
    }
  }
  
  back func processInvoice(): Void = {
    if (!deleted && !canceled) {
      if (let rs = invoices) {
        items.foreach {item =>
          if (item.invoices.filter(id) && item.needsRevision && !item.canceled) {
            if (issueState != InvoiceModified) revisionDate = Date.now
            let newItem = item.copy(invoices = [], prev = null)
            newItem.prev = item.rollback
            item.setActive(false)
          }
        }
        if (hasNewPayment && issueState != InvoiceIssued) {
          createInvoice(null).save
        }
      } else if (hasNewPayment && issueState != InvoiceIssued) {
        createInvoice(null).save
      }
      allItems.filter(!active && !invoices && canBeDeleted)*.delete
    }
  }
  
  event onSave = {
    if (isInstant) {
      let _ <- updateCanDispatch()
      if (!prev) processInvoice()
    } else {
      let _ <- if (!(try? reconState) || moneyCalced) {
        updateCanDispatch()
      } 
      if (!prev) processInvoice()
    
      if (registerUpdated) {
        updateLedgers()
      }
    }
  }
  
  func hasNewPayment = manLinks.exists(created) || payments.exists(created)
  front func uiCurrentInvoice: Future[Invoice] = {
    if (issueState != InvoiceIssued) {
      let _ <- UI.save(this)
      back {
        createInvoice(null)
      }
    } else {
      invoices.last!
    }
  }
  
  back func createInvoice(date: Date?): Invoice = {
    Invoice(
      prev = invoices.last,
      order = this, items = this.items, currency = this.currency, 
      date = if (let date) date else if (invoices) Date.now else fwdLinks*.date.min.alt(Date.now).max(this.date)
    ).save
  }
  compute instantPayment: Payment? = if (isInstant) payments.onlyOne!
  //func debtLedger: LDebt
  view invoicesView = y(label = "Invoices", visible = id) {
    invoices >> list (editMode = AlwaysRead) {
      grid (labels = None, margin = Around) {
        x(margin = None) {
          _ >> field(title = "$name $number")  
          diffTotal >> field(label = "Difference", showPlus = true, visible = prev) 
          total date >> field(width = 0.6)
        }
        debtOriginsView >> field(margin = None)
        instantPayment >> field (title = fullTitle, margin = None)
    }}
    add ("Issue", visible = issueState != InvoiceIssued && id) {issue()}
  }
  front func issue(): Future[Void] = {
    let revision <- uiCurrentInvoice
    revision.form.open()
  }
  
  back func reissue(): Void = {
    let date = invoices.last!.date
    invoices.last!.delete
    allItems.filter(!active && !invoices && canBeDeleted)*.delete
    createInvoice(date).save
  }
  
  view invoiceButtons = group {
    button("Issue", visible = issueState != InvoiceIssued && id) {issue()}
    generalLedgerButton
  }
  
  front func addPayment(account: FinAccount?): Payment? = {
    let p = if (isPurchase) {
      if (let a = unpaidAmount) {
        if (a < 0) IncomingPayment(amount = -a, source = this)
        else if (a > 0) OutgoingPayment(amount = a, source = this)
      }
    } else {
      if (let a = unpaidAmount) {
        if (a < 0) OutgoingPayment(amount = -a, source = this)
        else if (a > 0) IncomingPayment(amount = a, source = this)
      }
    }
    if (let p) p.account =? account
    p
  }
  
  view addPaymentView = x (visible = ui.edit && fullReconState.isIssue) {
    add("Cash", visible = CashAccount.default) {addPayment(CashAccount.default)}
    add("Card", visible = CardAccount.default) {addPayment(CardAccount.default)}
    add("Bank") {addPayment(BankAccount.default)}
  }
}

