trait IOrderItem extends InlineEntity {
  func order: IOrder 
  func currency: Currency
  func gstAmount: Money[currency]?
  func invoiceQty: Qty? = 0
  func invoiceAmount(noGst: Bool) = if (noGst) invoiceAmountNoGst else invoiceAmountWithGst
  func invoiceAmountNoGst: Money[currency]?
  func invoiceAmountWithGst: Money[currency]?
  func ledgerAccount: LedgerAccount
  func gstRate: Percent[2]?? 
  func itemDelivery: IDelivery?
  func canceled: Bool
  func dispatched: Bool = !itemDelivery || itemDelivery?.deliveryStatus == InTransit || itemDelivery?.deliveryStatus == Delivered
  func delivered: Bool = !itemDelivery || itemDelivery?.deliveryStatus == Delivered
  func rowView: Layout[IOrderItem]
  func cashFlow: CashFlow 

  func canBeDeleted = true
  system field rollbacked: Bool
  event onSave = {
    if (deleted && !rollbacked && origin(invoices).filter(!deleted)) {
      rollback
      setActive(false)
    } else if (active && canceled) {
      setActive(false)
      wasCanceled = true
    } else if (wasCanceled && !active && !canceled) {
      setActive(true)
      wasCanceled = false
    }
  }
  func consider = active || wasCanceled 
  func invoiceNotIssued = !invoices || (!active && invoices.last == order.invoices.last)
  func rowView(revision: Invoice): Layout[IOrderItem] = {
    if (!revision.isNote) rowView
    else if (!active && !invoices.contains(revision)) rowView.deletedLayout
    else if (invoices.first == revision) {
      if (let p = this.prev) rowView.modifiedLayout(p)
      else rowView.createdLayout
    } else rowView
  }
  func setActive(v: Bool): Void = {
    active = v
  }

  func deliveryGroup: OrderDeliveryGroup = if (let d = itemDelivery) ODGDelivery(delivery = d) else ODGEmpty
  system field prev: IOrderItem? by next {deleteCascade = false}
  system field next: IOrderItem? by prev {deleteCascade = false}
  system field invoices: [Invoice]? by items
  field active: Bool = true
  field wasCanceled: Bool = false
  func prev(revision: Invoice): this? = if (revision == invoices.first) prev else null
  
  func needsRevision: Bool
  compute itemRevisions: [this]? = (prev?.itemRevisions + prev)*.as[this]
}