class WorkspaceInfo {

	field id: String
    field name: String
    func equals(other: WorkspaceInfo) = this.id == other.id

}

entity WorkspaceAlertService extends SystemService {

    impl func title: String = "Workspace Alert Service"
    impl func roles: [Role]? = [Admin]
    impl func defaultDebug = true
    override func isPublic: Bool = true
    
    field workspaces: [WorkspaceInfo]?
    system field updateWorkspacesToMonitorJob: UpdateWorkspacesToMonitorJob inline by service
    
    impl event onSave = {
      	if (created) {
        	UpdateWorkspacesToMonitorJob(service = this).enqueue
            joinAll(Admin)*.notify
        }
    }

    impl view form = nav{grid(labels = Top){
        issuesView
        serviceState
        errorsCount >> field(editMode = AlwaysRead)
        y(visible = !id.toString.startsWith("-")){
            button("Update monitored workspaces") {
                updateWorkspacesToMonitorJob.enqueueFirst
            }
            workspaces >> table {
            	id name
            }
        }
    }}
  
}

inline entity UpdateWorkspacesToMonitorJob extends ScheduledJob {

	impl field service: WorkspaceAlertService by updateWorkspacesToMonitorJob
    impl func schedule = "0 30 */4 * * ?"
    impl func do: Future[Any] = {
    	let allWorkspaces <- Workspace.getAllIds.map(filter(_ != "18_12"))
        let newWorkspacesRaw <- allWorkspaces.oneByOne(id => {
                let sid = ShortIdDb(id)
                if (sid.cluster == 17) Workspace.all.inWorkspaceTry(17, sid.position, true).map([_.authId, _.title])
                else if (sid.cluster == 18) Workspace.all.inWorkspaceTry(18, sid.position, true).map([_.authId, _.title])
                else throw "Cluster '${sid.cluster}' not supported for CW queries"
            })
        let newWorkspaces = newWorkspacesRaw
        	.map(_.first)
            .map(w => WorkspaceInfo(id = w(1), name = w(2)))
        let diffAdded = newWorkspaces.filter(x => !service.workspaces.exists(_.equals(x)))
        let diffRemoved = service.workspaces.filter(x => !newWorkspaces.exists(_.equals(x)))
        let anyUpdates = diffAdded || diffRemoved
        if (anyUpdates) {
			Activity.comment("<p>Workspaces got updated.</p>".as[Html])
            if (let d = diffAdded) Activity.comment("<p>Added workspaces:<ul>${d.map("<li>${_.name} (${_.id})</li>").join("\n")}</ul></p>".as[Html])
            if (let d = diffRemoved) Activity.comment("<p>Removed workspaces:<ul>${d.map("<li>${_.name} (${_.id})</li>").join("\n")}</ul></p>".as[Html])
        	service.workspaces = newWorkspaces
        	service.save
        }
    }

}
