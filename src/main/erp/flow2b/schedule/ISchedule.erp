trait ISchedule extends RefEntity {
  field assignees: [ScheduleAssignee]? by schedule
  
  func isWorkingDate(date: Date): Bool
  func isWorkingPeriod(period: Period): Bool
  func nextWorkingDate(date: Date): Date?
  func prevWorkingDate(date: Date): Date?
  func addWorkingTime(date: Date, duration: UDuration?): Date?
  func workingTime(period: Period): UDuration? {
    deprecated(use = "workingTime(period, unit)")
    value = {
      workingTime(period, second)
    }
  }
  func workingTime(period: Period, unit: DateUnit): UDuration?

  func correctForward(period: Period): Period?
  func workingPeriod(date: Date): Period?
  
  func workingOrNextPeriod(date: Date): Period? = workingPeriod(date).or(nextPeriod(date))
  func workingOrPrevPeriod(date: Date): Period? = workingPeriod(date).or(prevPeriod(date))
  
  func prevPeriod(date: Date): Period?
  func nextPeriod(date: Date): Period?
  
  func workingPeriods(from: Date, to: Date): [Period]? = {
    guard (
      to > from
      let per = {
        if (let wp = workingPeriod(from)) Period(start = from, end = wp.end)
        else nextPeriod(from)
      }
    ) else return []
      
    if (per.end >= to) [Period(start = per.start, end = to)]
    else per + workingPeriods(per.end, to)
  }
}
