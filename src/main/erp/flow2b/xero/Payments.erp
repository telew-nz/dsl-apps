extend trait CashMovement extends HasExtId {
  compute xeroUrl = extIds.find(source.is[XeroIntegration])?.extUrl
  // ???: what if there are few xero integrations?
  
}

extend entity IncomingPayment {
  extend view form = extend("nav") {
    button ("Xero⇒", visible = xeroUrl) {
       UI.openUrl(xeroUrl!)
    }
  }
}

extend entity OutgoingPayment {
  extend view form = extend("nav") {
    button ("Xero⇒", visible = xeroUrl) {
       UI.openUrl(xeroUrl!)
    }
  }
}


class XeroPayment {
  extFieldNaming = UpperCamelCase 
  
  field paymentID: String?
  field date: Date? {extMap = XeroDateOpt}
  //field currencyRate
  field amount: Money?
  field reference: String?
  //field isReconciled
  field status: XeroPaymentStatus {
    extMap[String](apply = _.id, unapply = v => XeroPaymentStatus.all.find(id == v)!)
  }

  field paymentType: XeroPaymentType {
    extMap[String](apply = _.id, unapply = v => XeroPaymentType.all.find(id == v)!)
  }
  
  field updatedDateUTC: Date? {extMap = XeroDateOpt}
  field xeroAccount: XeroAccount? {extName = "Account"} 
  field invoice: XeroInvoice?
  //field creditNote: XeroCreditNote?
  //field prepayments
  //field overpayment

}

enum XeroPaymentStatus (id: String) {
  case authorised (id = "AUTHORISED")
  case deleted (id = "DELETED")
}

enum XeroPaymentType (id: String) {
  case accRecPayment (id = "ACCRECPAYMENT")
  case accPayPayment (id = "ACCPAYPAYMENT")
  case arCreditPayment (id = "ARCREDITPAYMENT")
  case apCreditPayment (id = "APCREDITPAYMENT")
  case arOverpaymentPayment (id = "AROVERPAYMENTPAYMENT")
  case arPrepaymentPayment (id = "ARPREPAYMENTPAYMENT")
  case apPrepaymentPayment (id = "APPREPAYMENTPAYMENT")
  case apOverpaymentPayment (id = "APOVERPAYMENTPAYMENT")
}