inline entity Requirement{
  
  field segment : [Segment]
  field requirementCollecting : Text
  //compute Products = requirementLines.feature.groupBy(product)
  field structuredRequirements : [RequirementLines]? inline by requirement
  field project : PersonalProject?
  field opportunity : Opportunity
  field requirementsStatus : RequirementStatus = Pending
 // field owner : Person?
 // func active = requirementsStatus.done
  func title = opportunity 
}
 
   inline entity RequirementLines{
    field product : DevProduct?
    field feature : Feature? from product?.features
 //    {update = {product = feature.product}
    //field userStory : UserStory? from feature?.stories
      
    field priority : Priority
    field segment : Segment? //{visibile = requirement.segment != null}
    field requirement : Requirement inline

  }

enum RequirementStatus (done : Bool){
  case Pending (done = false)
  case InProgress (done = false)
  case Collected (done = false)
  case Complete (done = true)
  case Discarded (done = true)
}

enum Priority{
  case High
  case Medium
  case Low
}