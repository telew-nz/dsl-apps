
enum IssueStatus(active: Bool, dev: Bool, qa: Bool, backlog: Bool) {
case Draft(active = false, dev = false, qa = false, backlog = false) {
background = "#999"
}
case Entered(active = true, dev = false, qa = true, backlog = false) {
background = "#ed9"
}
case Approved(active = true, dev = false, qa = false, backlog = true) {
background = "#ccf"
}
case Canceled(active = false, dev = false, qa = false, backlog = false) {
background = "#999"
}
case Postponed(active = false, dev = false, qa = false, backlog = false) {
background = "#ecd"
}
case Duplicate(active = false, dev = false, qa = false, backlog = false) {
background = "#999"
}
case ToDo(active = true, dev = true, qa = true, backlog = true) {
background = "#bde"
}
case InProgress(active = true, dev = true, qa = true, backlog = true) {
background = "#8bf"
}
case Done(active = true, dev = true, qa = true, backlog = true) {
background = "#dea"
}
case Verified(active = false, dev = false, qa = false, backlog = false) {
color = "white"
background = "#090"
}
}
trait Issue extends Entity {
field title: String
ref field adminProject: AdminProject
field milestone: Milestone? from adminProject.milestones by adminIssues
ref field status: IssueStatus {
  default = Draft
update = {
owner = null
}
}
ref field effort: Effort?
field owner: Actor? = Person.current
func type: IssueType
func active = status.active
view ref = x {
type effort status title
}
}
report EnteredIssue {
 view list = Issue.all.filter(status == Entered)
}
report MyDraft {
 view list = Issue.all.filter(status == Draft && owner == Person.current)
}