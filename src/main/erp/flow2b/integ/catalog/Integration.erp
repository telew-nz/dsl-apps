trait ICatalogIntegration[ID] extends SystemService with ExtIdSource[ID] {
  func supportsRent = false
  field integs: [ECommerceIntegration] {label = "E-Commerce Integrations"}
  
  back func updateProductJobs(integ: ECommerceIntegration, change: BatchChange[ProductUpdate[ISubProduct]]): [SystemJob]?
  
  back func updateProducts(integ: ECommerceIntegration, change: [ProductUpdate[ISubProduct]]): Void = {
    let ch = BatchChange.create(this, change.map{c => 
      if (!c.deleted && (!c.enabled || !c.price)) c.copy(deleted = true) else c
    })
    if (!ch.isEmpty) {
      updateProductJobs(integ, ch)*.enqueue
    }
  }
  
  func updateAllProducts() = UpdateAllProductsJob(service = this).enqueue
  
  back func doUpdateAllProducts(): Future[Void] = {
    integs.map {integ =>
      let updates <- ExtId.all.filter(source == integ && item.is[ISubProduct]).map{
        integ.productUpdate(item.as[ISubProduct]!, shouldDelete = true, photosUpdated = true)
      }.result
      if (let u = updates) updateProducts(integ, u)
    }.allCompleted
  }
}

class UpdateAllProductsJob extends SystemJob {
  impl field service: ICatalogIntegration
  impl func do = {
    service.doUpdateAllProducts()
  }
}