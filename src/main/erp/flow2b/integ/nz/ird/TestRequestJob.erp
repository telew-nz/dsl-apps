class TestRequestJob extends SystemJob {
  
  impl field service: IRDService
  
  impl func do = {
    
    "tst auth".log
    //testRequest.log("testRequest")
    
    let r <- requestAuthCode()
    let c = r.headers("Set-Cookie").split(";").first!.trim!
    
    c.log("requestAuthCode response cookie")
    
    let rg <- getAuthCode(c)

    let cc = rg.headers("Location").split("?code=").last!!
    cc.log("getAuthCode response code")
    
    let rt <- getAuthToken(cc)
    let at = rt.body!.parseJson[AuthTokenResponse]
    
    at.json.log("getAuthToken body")
    
    let rr <- service.https("/gateway/GWS/Returns").header("Authorization", "${at.tokenType} ${at.accessToken}").post(testRequest)
    
    rr.code.log("FileRequest response code")
    //rr.body!.log("FileRequest response body")
    
    let rrXE = rr.body!.parseXml[XmlElement]
    
    let statusCode = rrXE.select("//*[name()='statusMessage']/*[name()='statusCode']/text()").onlyOne?.value
    statusCode.log("statusCode")
    if(statusCode != "0") "error".log("statusCode")
    
    let gatewayId = rrXE.select("//*[name()='responseBody']/*[name()='gatewayId']/text()").onlyOne?.value
    gatewayId.log("gatewayId")
/*    let h = service.https("/")
    h.log("h")
    
   
    let r <- h.get() //
    
    
    r.code.log("res code 1")
    r.body!.log("res body")*/
  }
  
  back func requestAuthCode: Future[HttpResponse] = {
    let r <- service.authHttps("/ms_oauth/oauth2/endpoints/oauthservice/authorize")
    .param("client_id", "TestClient1")
    .param("scope", "MYIR.Services")
    .param("response_type", "code")
    .param("redirect_uri", service.redirectUrl)
    .get
    
    r.code.log("request auth code")
    //r.body!.log("auth body")
    r
  }
  
  back func getAuthCode(cookies: String): Future[HttpResponse] = {
  	// /oam/server/auth_cred_submit
    // userid=userid&password=password&login=Login
    let r <- service.authHttps("/oam/server/auth_cred_submit")
    .header("Content-Type", "application/x-www-form-urlencoded")
    .header("Cookie", cookies)
    .param("userid", "userid")
    .param("password", "password")
    .post()
    .recover(e => e.as[HttpResponse]!)
    
    r.code.log("get auth code")
    //r.body!.log("auth body")
    r
  }
  
  back func getAuthToken(authorizationCode: String): Future[HttpResponse] = {
    let base64Code = "TestClient1:TestClient1Secret".toData.base64
    let redirectURI = service.redirectUrl
    
    let r <- service.authHttps("/ms_oauth/oauth2/endpoints/oauthservice/tokens")
    .header("Content-Type", "application/x-www-form-urlencoded")
	.header("Authorization", "Basic $base64Code")
    .post("redirect_uri=${redirectURI}&grant_type=authorization_code&code=${authorizationCode}")
    
    r.code.log("get auth token")
    r
  }
  
  class AuthTokenResponse {
    extFieldNaming = Underscore
    
    field expiresIn: Int
    field tokenType: String
    field accessToken: String
  }
   
  func testRequest = {
    FileRequestTemplate(
      totalSales = 100.00
      totalExpenses = 1000.00
      totalGST = 5093.36
      periodEndDate = Date("2017-07-31")
      
      debitAdjustmentsTemplate = DebitAdjustmentsTemplate(
        privateUsePeriodAdjustment = 2000.00
        other = 1000.00
        currentRateGSTAdjustments = 1000.00
        exemptSupplies = 1000.00
        changeAccountingBasis = 1000.00
        entertainment = 1000.00
        assetsAfterCease = 1000.00
        privateUseOneOff = 1000.00
      )
      
      creditAdjustmentsTemplate = CreditAdjustmentsTemplate(
      	useOfPrivateGoods = 1000.00
        privateAssetsForBusiness = 1000.00
        changeAccountingBasis = 1000.00
        currentRateGSTCredits = 1000.00
        other = 1000.00
      )
    ).makeXML
  }
  
  
  }