extend entity ImportedOrder {
  back func resolve: Void = if (OrderImportService.resolveReferences) {
    if (counterpartyNumber.trim) {
      if (type == SalesOrder) {
        if (!customer) customer = findCustomer
      } else if (!vendor) {
        vendor = Vendor.all
          .find(legalEntity.legalInfo?.gstNumber =%= counterpartyNumber)
          .result.get
        if (!vendor) {
          customer = findCustomer
          if (customer) {
            type = SalesOrder
          }
        }
      }
    }
    items*.resolve
    save
  }
  
  func findCustomer = {
    Customer.all
          .find(legalEntity.legalInfo?.gstNumber =%= counterpartyNumber)
          .result.get
  }
  
  impl event onSave = {
    if (created) {
      resolve
    }
    if (canMakeOrder) {
      MakeOrderJob(invoice = this).enqueue
    }
  }
  
  back func canMakeOrder = poi.state == Complete && !order && !calcIssues && type in [TaxInvoice, SalesOrder, PurchaseOrder]
  
  back func makeOrder: Order? = if (canMakeOrder) {
    let date = orderDate.alt(Date.now)
    let o = if (type != SalesOrder) {
      let po = PurchaseOrder(
        date = date, accepted = now, refNum = theirNumber,
        vendor = vendor!, customer = legalEntity! 
        deliveries = [PurchaseDelivery(store = store)]
      ).saveMain
      items*.makePurchaseItem(po)
      po
    } else {
      let so = SalesOrder(
        date = date, accepted = now, refNum = theirNumber,
        customer = customer!, vendor = legalEntity! 
        deliveries = [SalesDelivery(store = store)]
      ).saveMain
      items*.makeSalesItem(so)
      so
    }
    
    this.order = o
    o.updateDue(autoIssue = false)
    if (type == TaxInvoice) {
      o.createInvoice(date)
    }
    
    Activity.current!.entities += [poi, poi.file]

    o
  }
}

class MakeOrderJob extends SystemJob {
  field invoice: ImportedOrder
  impl func service = OrderImportService
  impl func do = {
    invoice.makeOrder
  }
}

extend entity ImportedOrderItem {
  back func resolve: Void = {
    product = ISubProduct.all
      .filter(p => p.hasNum(code) || p.title =%= desc)
      .result.get.onlyOne
    save
  }
  
  impl event onSave = {
    if (!OrderImportService.isCurrent && updated(product) let product, let code = code.trim) {
      product.addRefNum(code)
    }
  }
  
  back func makePurchaseItem(po: PurchaseOrder): PurchaseItem = {
    PurchaseItem(
      order = po, 
      deliveryItem = DeliveryItem(product = product!, unit = product!.unit, qty = qty.positive.as[UQty[product!.unit]].alt(1)), 
      gstRate = gstRate, sAmount = amount.positive, 
      storedWithGst = order.rowsWithGst
    )
  }
  back func makeSalesItem(so: SalesOrder): SalesItem = {
    SalesItem(
      order = so, 
      deliveryItem = DeliveryItem(product = product!, unit = product!.unit, qty = qty.positive.alt(1)), 
      gstRate = gstRate, sAmount = amount.positive, 
      storedWithGst = order.rowsWithGst
    )
  }
}