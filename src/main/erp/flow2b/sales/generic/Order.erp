trait Order[Item extends OrderItem] extends IOrder[OrderItem] with Todo {
  field owner: Person?
  //field store: Store?
  
  func active: Bool = state != Complete
  compute itemsMap: [IProduct: Item] = orderItems.map(product, item = _).toMap
}

inline trait OrderItem[O extends Order] extends IOrderItem[Order] {
  func order: O
  func product: IProduct
  field qty: Dec[2] = 1 {
    label = "Quantity"  
    update = {if (old.isDefined) amount = amount/old!*new}
  }
  compute price: Dec[2]? = (amount/qty) {
    update = {amount = qty*new}
  }
  field amount: Dec[2]?
}