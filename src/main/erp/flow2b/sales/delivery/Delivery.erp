enum SalesDeliveryStatus(general: DeliveryStatus) {
  case Planned(general = DeliveryStatus.Planned) {
    background = "#ed9"
  }
  case Delivered(general = DeliveryStatus.Delivered)  {
    color = "white"
    background = "#090"
  }
}


trait Delivery extends IDelivery {
  ref field number: String {width = 0.15}
  
  field plannedDate: DateTime = now
  field dispatchDate: DateTime?
  field deliveryDate: DateTime?
  field salesDeliveryStatus: SalesDeliveryStatus = (Planned) {
    update = {
      if (new == Delivered) deliveryDate = now
    }
  }
  func status = salesDeliveryStatus.general
}


inline trait DeliveryItem {
  func orderDelivery: IOrderDelivery
  field product: IProduct {
    from = IProduct.all.filter(superProduct.isValid)
  }
  field qty: Dec[2] {
    label = "Quantity"
    update = {if (old.isDefined) amount = amount/old!*new}
  }
  compute price: Dec[2]? = (amount/qty) {
    update = {amount = qty*new}
  }
  field amount: Dec[2]?
}