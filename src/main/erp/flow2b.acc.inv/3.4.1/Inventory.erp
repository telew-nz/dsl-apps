extend register LInventory {
  field isDebit: Bool
    
  stored compute costQueue: QtyAmountQueue[Qty[product.unit], Money[currency]]?
  stored compute qtyBalance: Qty[product.unit]? = prev?.qtyBalance + if (isDebit) qty else -qty
  func onSave = {
    if (qty) {
      if (isDebit) {
        let q = qtyBalance.min(qty)
        if (q > 0) {
          costQueue = prev?.costQueue.enqueue(FIFO, q, amount)          
        } else {
          costQueue = prev?.costQueue
        }
      } else {
        let r = prev?.costQueue.dequeue(qty)
        costQueue = r.queue
        if (let v = r.value) {
          amount = -v
          baseAmount = -v
        }
      }
    } else if (let q = prev?.costQueue) {
      costQueue = null
      costQueue = costQueue.enqueue(FIFO, q.qty, prev?.balance + trAmount)
    } else {
      costQueue = null
      amount = -prev?.balance
      baseAmount = amount
    }
    balance = prev?.balance + amount
    createContraLedger()
    calcLedger
  }
  
  register contraLedger: Ledger?
  
  func createContraLedger(): Void = {
    if (contraAccount?.template == Product) {
      contraLedger = LProduct(this, account = contraAccount!, contraAccount = Inventory, trAmount = -amount, qty = qty!)
    } 
  }
}

extend entity MLInventory {
  func calculatedAmount = !isDebit && qty
}