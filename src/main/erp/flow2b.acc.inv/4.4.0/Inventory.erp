extend register LInventory {
  field isDebit: Bool
  field contraLegalEntity: OurLegalEntity?
  stored compute costQueue: QtyAmountQueue[Qty[product.unit], Money[currency]]?
  stored compute qtyBalance: Qty[product.unit]? = prev?.qtyBalance + if (isDebit) qty else -qty
  register error: LBasic?
  field contraAmount: Money[currency]?
  field gstRate: Percent[2]??
  field gstAmount: Money[currency]?
  
  field output: Ledger? inline
  event onSave = {
    if (let qty) {
      if (isDebit) {
        let q = qtyBalance.min(qty)
        if (q != qty) {
          amount = amount*q/qty
          baseAmount = amount
        }
        if (q > 0) {  
          costQueue = prev?.costQueue.enqueue(FIFO, q, amount)          
        } else {
          costQueue = prev?.costQueue
        }
        if (let d = trAmount - amount) {
          if (contraAccount?.template == Product) error = null
          else error = LBasic(account = InventoryErrors, journal = journal, trAmount = d, date = date, legalEntity = legalEntity)
        } else {
          error = null
        }
        if (!product.productCost?.cost || product.productCost?.date ?<= date) {
          product.productCost = ProductCost(date = date, cost = amount/qty)
        }
      } else {
        let r = prev?.costQueue.dequeue(qty)
        costQueue = r.queue
        if (amount != -r.value) {
          amount = -r.value
          baseAmount = -r.value
          output?.forceTouch
        }
        error = null
      }
    } else if (let q = prev?.costQueue) {
      costQueue = null
      error = null
      costQueue = costQueue.enqueue(FIFO, q.qty, prev?.balance + trAmount)
    } else {
      costQueue = null
      error = null
      amount = -prev?.balance
      baseAmount = amount
    }
    balance = prev?.balance + amount
    createContraLedger()
    calcLedger
  }
  
  register contraLedger: Ledger?
  register intraLedgers: [Ledger]?
  
  back func createContraLedger(): Void = {
    contraLedger = if (contraAccount?.template == Product) {
      LProduct(this, legalEntity = legalEntity, 
               product = product, account = contraAccount!, contraAccount = Inventory, 
               trAmount = -amount, qty = qty!)
    } 
    intraLedgers = if (let contraLe = contraLegalEntity) {
      var gstAmount = if (legalEntity.hasGst) this.gstAmount
      let gstRate = if (legalEntity.hasGst) this.gstRate
      if (let a = if (let ca = contraAmount) {
        ca + if (!legalEntity.hasGst) this.gstAmount
      } else {
        gstAmount = amount.abs * gstRate.alt(0)
        amount
      }) {
        LInventory.transferOwnership(journal, date, legalEntity, contraLe, currency, a, gstRate, gstAmount) 
        +
        (if (contraAccount?.template == Product) [
          LInventory(this, isDebit = true, legalEntity = contraLe, contraAccount = null, 
                     contraLegalEntity = null, product = product, trAmount = -a + if (!contraLe.hasGst) gstAmount, qty = qty),
          LSales(this, account = Sales, qty = qty.abs, 
                 counterparty = contraLe?.legalEntity, trAmount = a)
        ])
      } 
    }
  }
  
  back object func transferOwnership(journal: Journal, date: Date, from: OurLegalEntity, to: OurLegalEntity, currency: Currency, amount: Money, gstRate: Percent[2]??, gstAmount: Money?): [Ledger] = {    
    [
      LDebt(journal = journal, date = date, legalEntity = from, currency = currency, account = IntercompanyDebts, currency = from.getCurrency, 
            counterparty = to.legalEntity, trAmount = -amount + gstAmount),
      LDebt(journal = journal, date = date, legalEntity = to, currency = currency, account = IntercompanyDebts, currency = from.getCurrency, 
            counterparty = from.legalEntity, trAmount = amount - gstAmount)
    ] + (if (from.hasGst && gstAmount) 
         [
           LTax(journal = journal, date = date, legalEntity = from, currency = currency, account = TaxesPayable, tax = Gst, 
                isInstantPayment = true, rate = gstRate, 
                trAmount = -gstAmount, taxedAmount = amount)
         ])
    + (if (from.hasGst && to.hasGst && gstAmount)
       [
         LTax(journal = journal, date = date, legalEntity = to, currency = currency, account = TaxesPayable, tax = Gst, 
              isInstantPayment = true, rate = gstRate, 
              trAmount = gstAmount, taxedAmount = -amount)
       ])
  }
}

extend entity MLInventory {
  func calculatedAmount = !isDebit && qty
}