entity StripeAccount extends FinAccount {
  impl ref field legalEntity: OurLegalEntity =? onlyOne
  impl func title = "$legalEntity: Stripe"
  impl ref field currency: Currency = default

  impl func ledgerAccount: LedgerAccount = Cash
  impl func hasBankData = true

  impl view form = nav{
    grid{
      legalEntity 
      currency
      initBalance
      balance
    }
    ledgerBtn
  }
}

object ReconStripeTransfer extends IReconRule {
  impl func title = "Transfer from Stripe account"
  impl func pr = 30
  impl func backDescr = "If the counterpary name or memo contains stripe payments for an incoming payment, it's a transfer from the ping account"
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    let l = payment.bankData.fullMemo.lower + payment.bankData.thierName.lower
    
    if (payment.is[IncomingPayment] && l.contains("stripe payments")
        let contraAccount = StripeAccount.all.result.get.onlyOne
    ) {
       ReconTransfer.make(movements, payment, contraAccount)
    }
  }
}