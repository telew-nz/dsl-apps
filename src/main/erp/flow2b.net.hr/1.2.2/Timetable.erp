entity Timetable extends HasN with NewEngine with DashboardItem {
  object field gen: Int? 
  impl func nextN = increment(gen)
  impl func numPrefix = "TTBL"
  
  const system field payroll: Payroll? 
  field complete: Bool
  ref compute state: TimetableState {
    value = if (complete) Complete else if (end > Date.now) InProgress else Submitted
  }
  ref field date: Date = Date.now.start(day)
  compute start: Date {
    value = date
    update = {
      this.date = new.start(day)
    }
  }
  compute end: Date {
    value = date.end(day)
    update = {
      this.date = new.start(day)
    }
  }
  
  impl func title = "$worker ${start.date}"
  
  ref field worker: Worker =? User.current?.person?.worker
  func jobTypes: [JobType]? = (try? worker)?.jobTypes
  field rows: [TimetableRow] inline by timetable {
    default =? jobTypes.map(TimetableRow(jobType = _, timetable = this))
  }
  ref compute total: UDuration[hour, 2]? = rows*.duration.sum.to[UDuration[hour, 2]]
  impl view form = nav{grid {
    x {state worker >> field( stretch = 1, fontStyle = H2) number >> field(fontStyle = Label, align = Right) }
    x {start label("Total:") total >> field(fontStyle = H3, align = Left, stretch = 1) payroll >> field (title = "Payroll $number")}
    
    rows >> table  {
      body {
        row {
          jobType >> field(width = 0.3, title = title)
          customer >> field(width = 0.45, title = title)
          duration >> field(width = 0.25)
        }
      }
    } 
  }}
  report Report {
    impl view list = Timetable.all.sortBy(date.desc) >> nav{list{
      x{state start.date >> field(fontStyle = Label) worker number >> field(fontStyle = Label, stretch = 1) total}
    }}
  }
  
  impl event onSave = {
    if (!payroll) {
      payroll = Payroll.all
        .find(pl => date.between(pl.start, pl.end)).result.get
        .alt(
          Payroll(start = date).save
        )
    }
  }
}

inline entity TimetableRow {
  field timetable: Timetable by rows
  field jobType: JobType {
    from = timetable.jobTypes
  }
  field customer: LegalEntity?
  field unit: DateUnit {
    default = minute
    from = [minute, hour]
  }
  field duration: UDuration[unit]? {width = 0.2 canEditUnit}
}

extend role UserRole {
  entity Timetable {
    read = worker.person.user?.isCurrent
    write = worker.person.user?.isCurrent
  }
  extend view menu = Timetable >> item(fastAdd)
}

enum TimetableState {
  case InProgress {
    background = "#8bf"
    icon = "spinner"
  }
  case Submitted {
    background = "#dea"
    icon = "check"
  }
  case Complete {
    color = "white"
    icon = "check-circle"
    background = "#090"
  }
}
