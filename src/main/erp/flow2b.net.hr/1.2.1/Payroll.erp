entity Payroll extends HasN with NewEngine with DashboardItem {
  object field gen: Int? 
  impl func nextN = increment(gen)
  impl func numPrefix = "PRL"
  
  impl func itemRoles = [HR]

  field complete: Bool
  ref compute state: TimetableState {
    value = if (complete) Complete else if (end > Date.now) InProgress else Submitted
    from = if (complete || end > Date.now) [Submitted, Complete] else [InProgress]
    update = {
      complete = new == Complete
    }
  }
  
  impl func activeRoles = if (state != Complete) [HR]

  ref field _start: UtcDate[day] = Date.now.start(week)
  compute start: UtcDate[day] {
    value = _start
    update = {
      _start = new.start(week)
    }
  }
  compute end: UtcDate[day] {
    value = _start + 7_day
    update = {
      _start = new.start(week)
    }
  }
  impl func title = "${start.date} - ${end.date}"
  
  field timetables: [Timetable]? read by payroll {
    cleanCascade
    available(Inline).for(Inline)
    validate = if (!timetables.isUnique(worker, date)) "Not unique timetables in payroll $(this)"
  }
  
  impl view form = nav{grid(width = 1.2) {
    x {state start label("â€”") end number >> field(fontStyle = Label, align = Right, stretch = 1) }
    
    workers >> table {
      worker >> field(width = 0.25)
      mon >> field(width = 0.1, title = total.noUnit, align = Right)
      tue >> field(width = 0.1, title = total.noUnit, align = Right)
      wed >> field(width = 0.1, title = total.noUnit, align = Right)
      thu >> field(width = 0.1, title = total.noUnit, align = Right)
      fri >> field(width = 0.1, title = total.noUnit, align = Right)
      sat >> field(width = 0.1, title = total.noUnit, align = Right)
      sun >> field(width = 0.1, title = total.noUnit, align = Right)
      total >> field(width = 0.25)
    }
    
    timetables*.rows
      .groupBy(jobType, customer)
      .agg(duration = duration.sum.to[UDuration[hour, 2]])
      .toSeq
      .filter(duration)
      .sortBy(duration.desc)
    >> table(label = "Jobs") {
      jobType >> field(width = 0.3, title = title) customer >> field(width = 0.6, title = title) duration >> field(width = 0.3)
    }
  }}
  
  compute workers: [PayrollWorker]? = timetables.groupBy(worker)
    .agg{(items, key) =>
      let tts = items.toMap(date.weekdayShortName)
      PayrollWorker(
        worker = key
        mon = tts("Mon")
      )
    }.values
}

class PayrollWorker {
  field worker: Worker
  field mon: Timetable?
  field tue: Timetable?
  field wed: Timetable?
  field thu: Timetable?
  field fri: Timetable?
  field sat: Timetable?
  field sun: Timetable?
  compute total: UDuration[hour]? = (mon?.total + tue?.total + wed?.total + thu?.total + fri?.total + sat?.total + sun?.total).as[UDuration[hour]]
}
