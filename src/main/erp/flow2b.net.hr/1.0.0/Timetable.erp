entity Timetable extends HasN with NewEngine with DashboardItem {
  object field gen: Int? 
  impl func nextN = increment(gen)
  impl func numPrefix = "TTBL"
  
  impl func activeRoles = if (state == Submitted) [HR]
  ref field state: TimetableState = InProgress
  ref field _start: Date = Date.now.start(week)
  compute start: Date {
    value = _start
    update = {
      _start = new.start(week)
    }
  }
  compute end: Date {
    value = _start.end(week)
    update = {
      _start = new.start(week)
    }
  }
  impl func title = "$worker ${start.date} - ${end.date}"
  
  ref field worker: Worker =? User.current?.person?.worker
  func jobTypes: [JobType]? = (try? worker)?.jobTypes
  field rows: [TimetableRow] inline by timetable {
    default =? jobTypes.map(TimetableRow(jobType = _, timetable = this))
  }
  compute total: UDuration[hour, 2]? = rows*.total.sum.to[UDuration[hour, 2]]
  impl view form = nav{grid {
    x {state worker >> field( stretch = 1, fontStyle = H2) number >> field(fontStyle = Label, align = Right)}
    x {start label("â€”") end label("Total:", stretch = 1, align = Right) total >> field(fontStyle = H3)}
    rows >> table (mode = EditSelect) {
      body {
        row {
          jobType >> field(width = 0.3, title = title)
          customer >> field(width = 0.5, title = title)
          total >> field(width = 0.2)
        }
        grid (visible = ui.isSelected, width = 0.8) {
          row{mon tue wed thu fri sat sun >> field(width = 0.15) }
        }
      }
    } 
  }}
}

inline entity TimetableRow {
  field timetable: Timetable by rows
  field jobType: JobType {
    from = timetable.jobTypes
  }
  field customer: LegalEntity?
  field mon: UDuration? {width = 0.1}
  field tue: UDuration?
  field wed: UDuration?
  field thu: UDuration?
  field fri: UDuration?
  field sat: UDuration?
  field sun: UDuration[minute, 0]?
  
  compute total: UDuration[minute, 0]? = (mon + tue + wed + thu + fri + sat + sun).as[UDuration[minute, 0]]
}

extend role UserRole {
  entity Timetable {
    read = worker.person.user?.isCurrent
    write = worker.person.user?.isCurrent
  }
  extend view menu = Timetable >> item(fastAdd)
}

enum TimetableState {
  case InProgress {
    background = "#8bf"
    icon = "spinner"
  }
  case Submitted {
    background = "#dea"
    icon = "check"
  }
  case Complete {
    color = "white"
    icon = "check-circle"
    background = "#090"
  }
}
