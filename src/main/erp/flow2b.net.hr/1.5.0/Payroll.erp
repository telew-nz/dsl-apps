entity Payroll extends HasN with NewEngine with DashboardItem {
  object field gen: Int? 
  impl func nextN = increment(gen)
  impl func numPrefix = "PRL"
  
  impl func itemRoles = [HR]

  field complete: Bool
  ref compute state: TimetableState {
    value = if (complete) Complete else if (end > Date.now) InProgress else Submitted
    from = if (complete || end < Date.now) [Submitted, Complete] else [InProgress]
    update = {
      complete = new == Complete
    }
  }
  
  impl func activeRoles = if (state != Complete) [HR]

  ref field _start: Date = Date.now.start(week)
  compute start: Date {
    value = _start
    update = {
      _start = new.start(week)
    }
  }
  compute end: Date {
    value = _start + 7_day
    update = {
      _start = new.start(week)
    }
  }
  impl func title = "${start.date} - ${end.date}"
  
  field timetables: [Timetable]? read by payroll {
    cleanCascade
    available(Inline).for(Inline)
    validate = if (!timetables.isUnique(worker, date)) "Not unique timetables in payroll $(this)"
  }
  compute totalAll = timetables*.total.sum.to[UDuration[hour, 2]]
  compute totalCustomer = timetables*.rows.filter(customer)*.duration.sum.to[UDuration[hour, 2]]
  
  impl view form = nav{grid(width = 1.2) {
    x {state start label("â€”") end number >> field(fontStyle = Label, align = Right, stretch = 1) }
    
    [(totalAll, workers)].toSeq >> total {
      table {
        worker >> field(width = 0.25)
        mon >> field(width = 0.1, title = total.noUnit, align = Right)
        tue >> field(width = 0.1, title = total.noUnit, align = Right)
        wed >> field(width = 0.1, title = total.noUnit, align = Right)
        thu >> field(width = 0.1, title = total.noUnit, align = Right)
        fri >> field(width = 0.1, title = total.noUnit, align = Right)
        sat >> field(width = 0.1, title = total.noUnit, align = Right)
        sun >> field(width = 0.1, title = total.noUnit, align = Right)
        total >> field(width = 0.25)
      }
      row{space(span = 8) totalAll}
    }
    
    [(totalAll, timetables*.rows
      .groupBy(jobType)
      .agg(duration = duration.sum.to[UDuration[hour, 2]])
      .toSeq
      .filter(duration)
      .map(jobType, percent = duration.as[UPercent[2]]/totalAll!, duration)
      .sortBy(duration.desc))].toSeq
    >> total(label = "Job Types") {
      table {
        jobType >> field(width = 0.5, title = title) percent >> field(width = 0.2) duration >> field(width = 0.3)
      }
      row{space(span = 2) totalAll}
    }
    
    timetables*.rows
      .filter(customer).groupBy(jobType, customer)
      .agg(duration = duration.sum.to[UDuration[hour, 2]])
      .toSeq
      .filter(duration)
      //.map(customer, duration)
      .sortBy(duration.desc)
      .groupBy(jobType).toSeq.map{i =>
        let d = i.#1*.duration.sum.to[UDuration[hour, 2]]!
        (i.jobType, duration = d, items = i.#1.map(customer, percent = duration.as[UPercent[2]]/d, duration))
      }
      .sortBy(duration.desc)
    >> subtotal(label = "Customers"){
      row{jobType >> field(title = title) space duration}
      table {
        customer >> field(width = 0.5, title = title) percent >> field(width = 0.2) duration >> field(width = 0.3)
      }
    }    
  }}
  
  compute workers: [PayrollWorker]? = timetables.groupBy(worker)
    .agg{(items, key) =>
      let tts = items.toMap(date.weekdayShortName.lower)
      PayrollWorker(
        worker = key
        mon = tts("mon")
        tue = tts("tue")
        wed = tts("wed")
        thu = tts("thu")
        fri = tts("fri")
        sat = tts("sat")
        sun = tts("sun")
      )
    }.values.sortBy(total.desc)
}

class PayrollWorker {
  field worker: Worker
  field mon: Timetable?
  field tue: Timetable?
  field wed: Timetable?
  field thu: Timetable?
  field fri: Timetable?
  field sat: Timetable?
  field sun: Timetable?
  compute total: UDuration[hour]? = (mon?.total + tue?.total + wed?.total + thu?.total + fri?.total + sat?.total + sun?.total).as[UDuration[hour]]
}
