entity Job extends TimeLog with HasTasks {
  list compute client: Actor? = legalEntity.top
  ref field legalEntity: LegalEntity {
    update = {
      this.accountant = new.clientAccountant
      this.owner = new.clientAccountant
    }
  }
  ref field jobType: JobType {
    update = {
      frequency = new.defaultFrequency
      periodDuration =? new.defaultFrequency
    }
  }
  system field prev: Job? by next
  system field next: Job? by prev
  field accountant: Person? {
    available(List)
    default = try? legalEntity.clientAccountant!
    from = Person.all.filter(is(Accountant))
    update = {
      if (status != CompletedForReview) owner = new
    }
  }
  field owner: Person?
  field frequency: Frequency? {width = 0.2, visible = jobType.group != Registration}
  ref field status: JobStatus {
    default = ToDo
    update = {
      if (new == CompletedForReview) owner = accountant?.accountantGroup?.reviewer
      else owner = accountant
    }
  }
  ref field progress: Progress {
    default = P0
    visible = status == InProgress || status == Waiting 
  }
  ref field dueDate: UtcDate[day]
  ref field extensionDate: UtcDate[day]? {
    visible = jobType.group == Tax
  }
  compute overdueState: OverdueState {
    value = if (status.active && dueDate < now) Overdue else NoOverdue
    visible = status.active && finalDueDate < now 
  }
  compute finalDueDate = extensionDate.alt(dueDate)
  field periodStart: UtcDate[day]
  field periodDuration: Frequency
  compute periodEnd: UtcDate[day] = periodDuration.next(periodStart) - 1_day
    
  field description : Text?
    
  func active = status.active
  func hasUncreatedNext: Bool = !next && frequency && status != Canceled
  func createNext: Job = Job(this, prev = this, dueDate = frequency!.next(dueDate), periodStart = periodDuration.next(periodStart), status = ToDo, progress = P0)
  list compute hoursSpent: Dec[2]? = timeLogHours
  func title = legalEntity.title + " " + jobType + " " + dueDate
  view form = nav{grid{
    client
    legalEntity
    jobType
    periodStart
    periodDuration
    periodEnd
    dueDate
    extensionDate
    frequency
    x(label = "Status"){status, overdueState}
    progress
    accountant
    owner
    timeLogItemsList >> field(label = "Timelog")
    description
    tasks
  }}
  object view list = Job.all
    .streams(if(hasUncreatedNext) createNext else null)
    .weaveBy(dueDate) >> 
  nav{
    table(action = {
        if (!next?.id) next = null
        form.open
    }) {
      x(label = "Status", width = 0.4){status progress overdueState} 
      jobType client legalEntity owner dueDate extensionDate periodStart periodDuration periodEnd frequency hoursSpent
    }
  }
  
  view ref = x{
    status progress overdueState title
  }
}


enum OverdueState {
  case NoOverdue {background = "#dea"}
  case Overdue {background = "#f99"}
}
      
enum JobStatus(active: Bool) {
  case ToDo(active = true) {
    background = "#ccf"
  }
  case InProgress(active = true) {
    background = "#8bf"
  }
  case Waiting(active = true) {
    background = "#ecd"
  }
  case CompletedForReview(active = true) {
    background = "#dea"
  }
  case CompletedForApproval(active = true) {
    background = "#dea"
  }
  case ReadyForFiling(active = true) {
    background = "#dea"
  }
  case Done(active = false) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false) {
    background = "#999"
  }
}

