entity SharedProduct extends SharedItem with IBasicProduct with IProductInv with BullionSuperProduct {

	impl field status: ProductStatus
    
    impl ref compute title = calcTitle
    
    override func gstRate(vendor: LegalEntity?): UPercent[2]?? = if (isPure || (vendor && !vendor!.hasGst)) null else 0.15
    
    compute getPhotos: Future[[Image]?] = {
        let ogProduct <- linkedEntity
        let wid = LongIdDb(ogProduct.id.toString!)
        let photo_ids = ogProduct.photos.map(_.id)
        if (wid.workspaceCluster == 17) {
        	let imgs <- Image.all.inWorkspaceFullWid(17, wid.workspacePosition).result
            imgs.filter(img => photo_ids.exists(pid => pid == img.id))
        }
        else {
        	let imgs <- Image.all.inWorkspaceFullWid(18, wid.workspacePosition).result
            imgs.filter(img => photo_ids.exists(pid => pid == img.id))
        }
    }
    
    impl event onLoad = {
    	if (let e = try? linkedEntity) {
            let p <- linkedEntity
            metalType = p.metalType
            purity = p.purity
            if (!refNums.exists(_ == p.sku)) refNums += [p.sku]
        	save
        }
        else {
        	UI.back
        }
    }

    override view form = nav(onBarcode = if (ui.edit) addBarcode(barcode)){
      tabs {
        grid (labels = None, label = "Main") {
          getPhotos >> field(height = 10, label = "")
          statusView
          title >> field(label = "", fontStyle = H2)
          row {sku refNums trackItems}
          goldView
          linkedEntity >> x{ baseMainView }
        }
        superProductTabView
        subProductTabView
        extension("tabs")
        grid (labels = Top, label = "More") {
          unitsView
          barcodes
          extension
        }
      }
      superProductNavView
      productNavView
      extension("nav")
    }
	
    impl func mainView = form
    
}