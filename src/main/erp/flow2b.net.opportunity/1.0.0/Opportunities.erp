trait Opportunity extends Todo {

  field activityStatus : ActivityStatus
  field person : [PipelinePerson]? inline by opportunity
 // field activity : [Activity] inline by opportunity
  field avatar : [Avatar]
  field requirements : Requirement? inline by opportunity 
  field existingTools : [Tool]?
  field owner : Actor ?
  func active : Bool
  field refferal : Actor?
  
}

entity PartnerOpportunity extends Opportunity  {
     func title = company.title
  ref field company : Company by partnerOpportunity
  compute partnerScore : Int = 5
  compute value = (userQty * 100)
  field phase : OpportunityPhase
  field partnerQualifitcation : [PartnerQaulification]?
  field proposal : Proposal?
  field userQty : Int
 
 
    
    func active = activityStatus.done

    
//  view list = Opportunity.all >> nav{ table { organisation, people, status, type, indicator, phase}}
    
}

entity CompanyOpportunity extends Opportunity {
   
  ref field company : Company? by companyOpportunity
  compute value = (userQty * 100)
  field phase : OpportunityPhase
  field partnerQualifitcation : [PartnerQaulification]?
  field proposal : Proposal?
  field userQty : Int
 
 
    
    func active = activityStatus.done

    func title = company
    
//  view list = Opportunity.all >> nav{ table { organisation, people, status, type, indicator, phase}}
    
}
entity PersonalOpportunity extends Opportunity {
   ref field subscriber : Person by personalOpportunity
  compute value = (userQty * 100)
  field phase : OpportunityPhase
  field proposal : Proposal?
  field userQty : Int

    
    func active = activityStatus.done
    func title = person
}
  
entity Pipeline extends Opportunity{
 
  field company : Company
  compute userScore : Int = 50
  compute value = (userQty * 100)
  field phase : OpportunityPhase
 /// field userQaulifiction : [UserQaulification]
  //compute Products
  field userQty : Int
  
 // field companyStatus : CompanyClientStatus      
    func active = activityStatus.done
    func title = company
    
//  view list = Opportunity.all >> nav{ table { organisation, people, status, type, indicator, phase}}
    
}
enum ActivityStatus (done : Bool){
  case ToDo (done = false)
  case Sent  (done = true) 
  case Overdue (done = false)
  case Completed (done = true)
}

enum OpportunityIndicator{
  case green
  case yellow
  case red
}
enum OpportunityPhase{

  case StatusQuo
  case Possibility
  case CaseForChange
  case ExploringSolutions
  case SelectingSolutions
  case Validating
  case FinalApproval
  case Deploying
  case Completed
  
}
  



