entity SalesOpportunity extends IOpportunity[SalesOpportunityStage] {
  impl func prefix = "SOP"
  impl ref field stage: SalesOpportunityStage = ColdLead
  impl compute estimatedAmount: UMoney[currency]? = {
    if (let invoiceCount) {
      if (linesPerInvoice) invoiceCount * invoiceCountUnit.k.positive *(0.3 + 0.1*linesPerInvoice.as[Any].as[Dec]!)  
      else invoiceCount * invoiceCountUnit.k.positive * 0.5
    } else revenue*500
  }.as[UMoney[currency]]
  impl field probability: UPercent?
  ref field revenue: UMoney[currency]? {
    label = "Annual Revenue [\$M]"
  }
  field industry: Industry?
  field softwares: [Software]? {
    label = "Software to export invoices"
  }
  field invoiceCountUnit: InvoiceCountUnit = PerWeek
  field invoiceCount: UQty[invoiceCountUnit]? {canEditUnit}
  field linesPerInvoice: UQty[1]?
  impl view form = nav{grid(labels = Top) {
    headerView
    row {revenue invoiceCount linesPerInvoice}
    row{estimatedAmount >> field(label = "Subscription annual prepayment") probability space}
    industry
    softwares
    footerView
  }}
  impl view stateView = x{state >> field(editMode = AlwaysEdit) stage  >> field(editMode = AlwaysEdit)}
  
  impl func clickNextStage = if (stage == ColdLead) Interest
}

enum InvoiceCountUnit(impl field symbol: String, field k: Dec) extends Unit {
  case PerWorkingDay(symbol = "per day", k = 365.0000/7*5)
  case PerWeek(symbol = "per week", k = 365.0000/7)
  case PerMonth(symbol = "per month", k = 12.0)
  case PerYear(symbol = "per year", k = 1.0)
  impl func scale = 0
  impl func position = SuffixWithSpace
}

enum SalesOpportunityStage {
  case ColdLead {background = "#ccdfe8" icon = "icicles"}
  case Interest {background = "#ed9" icon = "temperature-high"}
  
  case Qualified {background = "#abeaae" icon = "filter"}
  case Trial {background = "#f1c0e3" icon = "balance-scale"}
  case Prepared {background = "#dea" icon = "mortar-pestle"}
}


