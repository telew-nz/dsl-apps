trait IMetalSuperProduct extends RefEntity {
  func isMetalProduct: Bool
  func metalType : MetalType 
  func totalWeight: UQty[ProductUnit.Gram, 5]
  func isPure: Bool
  func pureWeightOz: UDec[5]
  func metalCost = pureWeightOz.as[UMoney[metalType.currency!]]
  func metalProducts: [MetalSuperProduct: Qty]
}

trait MetalSuperProduct extends ISuperProduct with IMetalSuperProduct with IWeightSize {
  func isTangible: Bool = true
  ref field metalType : MetalType 
  func metalProducts: [MetalSuperProduct: UQty] = [this -> 1.as[UQty[ProductUnit.Item]]!]
  func isMetalProduct = true
  func unit: ProductUnit = Item
  func size: UQty[sizeUnit, 5]
  func sizeUnit: ProductUnit
  
  func weightUnit = Gram
  func weight = totalWeight
  field lengthUnit: LengthUnit = Millimetre
  field width: UQty[lengthUnit]? {canEditUnit}
  field height: UQty[lengthUnit]? {canEditUnit}
  field depth: UQty[lengthUnit]? {canEditUnit} 
  
  compute totalWeight : UQty[ProductUnit.Gram, 5] = size*sizeUnit.k
  compute totalWeightOz : UQty[ProductUnit.Ounce, 5] = if (sizeUnit == Ounce) size else totalWeight/ProductUnit.Ounce.k
  compute puritySelection: Purity? {
    value = Purity.all.find(value == purity)
    update = {purity =? new?.value}
  }
  ref field purity: UDec[5] {
    update = puteWeightUpdated()
  }
  compute isPure = purity >= metalType.purityThreshold
  compute pureWeight = totalWeight.as[UDec[5]]!*purity  // enter or compute from weight and purity
  compute pureWeightOz = totalWeightOz.as[UDec[5]]!*purity
  func gstRate(vendor: IVendor?): UPercent[2]?? = if (isPure) null else 0.15
  func puteWeightUpdated(): Void = {}
} 