trait IMetalSuperProduct extends ISuperProduct {
  func isMetalProduct: Bool
  func metalType : MetalType 
  func totalWeight: Qty[ProductUnit.Gram, 5]
  func isPure: Bool
  func pureWeightOz: Dec[5]
  func metalCost = pureWeightOz.as[Money[metalType.currency!]]
  func metalProducts: [MetalSuperProduct: Qty]
}

trait MetalSuperProduct extends IMetalSuperProduct  {
  func isTangible: Bool = true
  ref field metalType : MetalType 
  func metalProducts: [MetalSuperProduct: Qty] = [this -> 1.as[Qty[ProductUnit.Item]]!]
  func isMetalProduct = true
  func unit: ProductUnit = Item
  func size: Qty[sizeUnit, 5]
  func sizeUnit: ProductUnit
  
  compute totalWeight : Qty[ProductUnit.Gram, 5] = size*sizeUnit.k
  compute totalWeightOz : Qty[ProductUnit.Ounce, 5] = if (sizeUnit == Ounce) size else totalWeight/ProductUnit.Ounce.k
  compute puritySelection: Purity? {
    value = Purity.all.find(value == purity)
    update = {purity =? new?.value}
  }
  ref field purity: Dec[5] {
    update = puteWeightUpdated()
  }
  func weightInGrams = totalWeight
  compute isPure = purity >= metalType.purityThreshold
  compute pureWeight = totalWeight.as[Dec[5]]*purity  // enter or compute from weight and purity
  compute pureWeightOz = totalWeightOz.as[Dec[5]]*purity
  func forceGstRate(vendor: Actor): Percent[2]?? = if (isPure || !vendor.forceHasGst) null else 0.15
  func puteWeightUpdated(): Void = {}
}