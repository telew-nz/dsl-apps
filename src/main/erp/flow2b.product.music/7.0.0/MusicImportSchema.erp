entity MusicPriceListImportSchema extends SheetImportSchema {
  singular = "Music Price List"
  ref field vendor: IVendor
  ref field name: String?
  field fileName: String? {
    label = "File Name (regex)"
  }

  field header: String?
  field rowsInHeader: Int? = 1
  field defaultFormat: MusicFormat?
  field mapping: Mapping
  func title = vendor.title + ": " +? name
  
  back func checkFile(file: File): Bool = {
    header && file.is("csv") && (
      if (let fileName) file.name.matches(Regex(fileName)) else true
    )
  }
  
  back func process(file: File, data: [String?]?) = {
    let m = mapping
    let pl = if (m.price) {
      vendor*.priceModels*.as[PriceList].first.alt(PriceList(vendor = vendor).save)
    }
    if (let pl) {
      pl.products.foreach {
        _.regular = 0
        _.current = 0
      }
    }
    (if (let rowsInHeader) data.drop(rowsInHeader) else data).foreach{row =>
      let i = row.splitTo[[String?]](",", CSV)
      let artist = if (let a = m.artist, let t = i(a)) {
        if (a == m.title) (t[.. m.artistSeparator)).trim else t
      }
      var format = if (let f = m.format) i(f).dropPrefix("Vinyl-").trim
      if (format.endsWith("in")) format = format.dropSuffix("in") + "\""
      
      var name: String? = i(m.title).trim
      if (let format) name = name.dropSuffixes(["- $format", "($format)", format]).trim
      name = name.dropSuffixes(["- VINYL", "VINYL", "(VINYL)"]).trim
      if (m.title == m.artist) name = (name(m.artistSeparator .. ]).trim
         
      if (let name) {
        let prod = MusicProduct(
          artist = if (let artist) Artist(title = artist).saveBy(uniqTitle)
          format = if (let format) MusicFormat(title = format).saveBy(uniqTitle) else defaultFormat
          name = name
          refNum = if (let n = m.refNum) i(n)
          barcodes = if (let b = m.barcode, let num = i(b)) [Barcode(number = num)]
        ).saveBy(_.artist, _.uniqName, _.format)
        if (let pc = m.price, let price = num(i(pc)), let pl) {
          let pp = pl.products
            .find(_.product == prod)
            .alt(PriceListProduct(priceList = pl, product = prod))
          pp.regular = price 
          pp.current = price 
        }
      }
    }
  }
  func num(s: String?): Number? = {
    if (let ss = s.trim.dropPrefix("\$").trim) try? ss.toNumber!
  }
  class Mapping {
    field title: String
    field artist: String?
    field artistSeparator: String? {
      default = "-" 
      visible = artist && artist == title
    }
    field format: String?
    field refNum: String? {label = "Reference Number"}
    field barcode: String?
    field price: String?
  }
}
