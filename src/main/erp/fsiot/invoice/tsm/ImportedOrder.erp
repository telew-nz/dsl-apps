extend entity ImportedOrder {
  field agent: User? {views = []}
  
  /*field tsmState: TSMState {
    default = Entered
    views = []
    //from = (tsmState + if (tsmState in [AlertSent, Cancelled]) [TSMState.Approved, TSMState.Cancelled]).toSet
  } */
  
  field _tsmState: TSMState = Entered
  ref compute tsmState: TSMState {
    value = if (hasIssues) Error else _tsmState
    from = {
      if (hasIssues) [TSMState.Error] else [TSMState.Entered, TSMState.AlertSent, TSMState.Approved, TSMState.Sent, TSMState.Cancelled]
    }
    update = {
      _tsmState = new
    }
    views = []
  }
  ref compute hasIssues: Bool = issues
  
  field department: Department? {views = []}
  field client: Client? {views = []}
  
  ref compute office: Office? {
    value = agent?.office
    views = []
  }
  
  field location: Location? {views = []}
  field jobNumber: String? {views = []}
  field stageNumber: String? {views = []}
  field variationNumber: String? {views = []}
  
  func term(name: String, value: String?) = TsmTerm(name = name, value = value)
  func tsmFieldsBase: [TsmTerm] = [
    term("formUrl", formUrl) 
    term("number", number)
    term("invoiceNumber", s(theirNumber))
    term("poNumber", s(ourNumber))
    term("invoiceDate", d(orderDate))
    term("dueDate", d(dueDate))
    term("vendorNumber", s(counterpartyNumber))
    term("rowsWithGst", rowsWithGst)
    term("totalNoGst", am(totalNoGst))
    term("gst", am(gst))
    term("totalWithGst", am(totalWithGst))
    term("agentEmail", s(agent?.person?.collectContacts*.as[EmailContact]*.email.first))
    term("locationCode", s(location?.code))
    term("jobNumber", s(jobNumber))
    term("stageNumber", s(stageNumber))
    term("variationNumber", s(variationNumber)),
    term("pdfUrl", s(file.url))
  ]
  func tsmFields = tsmFieldsBase
  func tsm: String = tsmFields.map(value.alt(" ")).join("`")
  func tmsHeader: String = Tsm.str(tsm)
  func tsmItems: PlainText = {
    items*.toTsm.join(" + chr(13) + ;\n").alt('""')
  }
  func s(str: String?): String? = {
    str.replace("`", " ").replace("\"", " ").replace("  ", " ").trim
  }
  func n(num: Num?): String? = num.noUnit.unformattedString
  func am(num: Num?): String? = n(if (type == CreditNote) -num.abs else num)
  func d(date: Date?): String? = date?.format("dd/MM/yyyy HH:mm:ss")
  
  func script(s: PlainText): PlainText = {
    tsmFieldsBase.fold(s, acc.replace("\$" + name, Tsm.innerStr(value))!)
      .replace("\$invoiceData", tmsHeader)
      .replace("\$invoiceItems", tsmItems)!
  }
  
  //impl func activeRoles = {
  //  if (tsmState == AlertSent) [BusAdmin, InvoiceAgent]
  //  else if (tsmState !in [Sent, Cancelled]) [BusAdmin]
  //}
  func invoiceAgent: User? = agent
  
  impl func splitPerUser(role: String) = role == "fsiot.invoice.tsm.InvoiceAgent"
  impl event onSave = {
    if (tsmState == AlertSent) {
      invoiceAgent?.join(this)?.notify()
    }
  }
  
  extend view stateView = tsmState >> field(editMode = AlwaysEdit)

  extend override view form = nav{grid(width = 1.5){
    issuesView
    x { poi >> field(stretch = 1) number >> field(fontStyle = Label)}
    stateView
    file
    row {theirNumber orderDate dueDate}
    row {ourNumber counterpartyView rowsWithGst}
    row {agent location office}
    row {department client space}
    row {jobNumber stageNumber variationNumber}
    row {
      totalNoGst gst totalWithGst 
    }
    items >> table {
      y (label = "Description", width = 0.6, margin = None) {
        code >> field(fontStyle = Label) 
        desc
      }
      qty >> field(width = 0.1) 
      gstRateEditor >> field(width = 0.1, label = "GST") 
      amount >> field(width = 0.2) 
      location >> field(label = "Location" width = 0.2)
      jobNumber >> field(width = 0.2, label = "Job")
      stageNumber >> field(width = 0.1, label = "Stage")
      variationNumber >> field(width = 0.1, label = "Variation")
    }    
  }}
  
  
  extend override view traitItem = y {
    x {
      stateView >> field(stretch = 0)  
      number >> field (fontStyle = Label)
      docNumber >> field (fontStyle = Label)
      vendor totalWithGst
    }
    x{agent office department client}
    poi.fileName >> field(visible = !theirNumber && !ourNumber)
  }
  
}

entity Department {
  impl field title: String
}

entity Client {
  impl field title: String
}

class TsmTerm(name: String, value: String?)
extend entity ImportedOrderItem {
  field _location: Location? 
  compute location: Location? = _location.or(order.location)
  field _jobNumber: String? 
  compute jobNumber: String? = _jobNumber.or(order.jobNumber)
  field _stageNumber: String?
  compute stageNumber: String? = _stageNumber.or(order.stageNumber)
  field _variationNumber: String? 
  compute variationNumber: String? = _variationNumber.or(order.variationNumber)
  func term(name: String, value: String?) = TsmTerm(name = name, value = value)
  func tsmFieldsBase: [TsmTerm] = [
    term("code", s(code))
    term("desc", s(desc))
    term("qty", n(qty))
    term("gstRate", if (let gstRate) n(gstRate*100))
    term("gstAmount", am(gstAmount))
    term("amountNoGst", am(amountNoGst))
    term("amountWithGst", am(amountWithGst))
    term("locationCode", s(location?.code))
    term("jobNumber", s(jobNumber))
    term("stageNumber", s(stageNumber))
    term("variationNumber", s(variationNumber))
  ]
  func tsmFields = tsmFieldsBase
  func tsm: String = tsmFields.map(value.alt(" ")).join("`")
  func toTsm: String = Tsm.str(tsm)
  
  func s(str: String?): String? = order.s(str)
  func n(num: Num?): String? = order.n(num)
  func am(num: Num?): String? = order.am(num)
}

object Tsm {
  func str(s: String?): String = {
    '"$(innerStr(s))"'
  }
  func correct(s: String?): String? = {
    s.replace("\n", "\"+CHR(13)+CHR(10)+\"")
  }
  func innerStr(s: String?): String? = {
    if (s.length > 254) {
      let ss = correct(s[ .. 254))
      "$(ss)\"+;\n\"" + innerStr(s[254 .. ])
    } else {
      correct(s)
    }
  }
}