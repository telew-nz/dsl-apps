report SupplyPlanning {
  plural = "Supply Planning"
    
    
  view list = Stock.stockAfterStocktake(date = max,
    Store.all.filter(isStore).map(lastStocktake)
  ).leftJoin(
    StocktakeItem.all
      .groupBy(stocktake.location, product)
      .agg((k, items) => {
        let m = (items.groupBy(date = stocktake.date.date("Pacific/Auckland")).agg(soldQty.sum).toSeq)
        (
         lastSoldQty = m.sortBy(date.desc).first?.soldQty,
         soldQtyPerDay = m*.soldQty.distributionStats 
         )
       }),
    on =  left.salesContractor == right.location.salesContractor(now) && left.product == right.product,
    map = (
      left.salesContractor,
      location = left.salesContractor.location(now),
      left.product,
      stock = left.qty,    
      right?.lastSoldQty,
      right?.soldQtyPerDay//,
      //shortage = (right?.soldQtyPerDay?.max - left.qty).max(0)
    ) 
  )>> nav{table{salesContractor, location, product, stock, lastSoldQty, 
                soldQtyPerDay >> group{min, median, max} }}
}