inline entity DistributionLocationFarm extends DistributionLocation with IOrderDelivery with IPurchaseOrder[DistributionFarmItem] {
  singular = "Farm"
  func title = distribution.number + " " + location + " " + date.date
  func unformattedNumber: String = distribution.num
  //field order: PurchaseOrder by deliveries {update = {
  //  this.items =? fillItems(new)
  //  this.location =? locations.first
  //}}
  field items: [DistributionFarmItem] inline by distributionLocation //=? try? fillItems(order)!
//  func fillItems(order: PurchaseOrder): [DistributionFarmItem]? = order.items
//  	.filter{_.qtyToDeliver > 0}
//  	.map{DistributionFarmItem(product = product, plannedQty = qtyToDeliver!)}
  func buyer: LegalCompany = LegalCompany.forceOur
  ref field seller: LegalCompany {
    from = LegalCompany.all.filter(actor.seller)
  }
  func locations = seller.company.locations
  field location: FarmLocation =? (try? locations.first!) {
    from = locations
  }
  func deliveryItems = items.filter(!done || actualQty)
    .map(product, qty = if (done) actualQty! else plannedQty)
    .toMap!
  
  view form = nav{grid (labels = None) {
    row {date, done}
    row {seller, location}
    items >> table{ 
      product plannedQtyAbs, actualQtyAbs, price, amount
    }
  }}
  view driverForm = nav{grid (labels = None, style = if (done) doneStyle else normalStyle) {
    row {date , done}
    row {location >> field(editMode = AlwaysRead), location.address >> field(editMode = AlwaysRead)}
    items >> list(mode = Edit) { grid(labels = None) {
      row{product >> field(editMode = AlwaysRead), action >> field(editMode = AlwaysRead)}
      row{plannedQtyAbs >> field(editMode = AlwaysRead), actualQtyAbs}
    }}
  }}
  
  func addItem(product: IProduct) = {
    let newItem = DistributionFarmItem()
    newItem.product =? product.as[Product]
    items = items + newItem
    newItem
  }
  
  func orderStatus: OrderStatus = InProcess
  func orderItems = items
  func deliveryStatus: DeliveryStatus = Delivered
  func deliveryOrders = [this]
  func orderDeliveries = [this]
  view statusesView = x{state, invoiceState, paymentState}
}

inline entity DistributionFarmItem extends DistributionItem with IOrderItem[DistributionLocationFarm] {
  field product: Product {
    update = {price =? curPrice}
  }
  system field distributionLocation: DistributionLocationFarm by items

  field price: Dec[2] =? try? curPrice!
  func curPrice = distributionLocation.seller.company.sellingProduct(product)?.price  
  
  func action: LoadUnload = Load
  func order = distributionLocation
  func qty = if (distributionLocation.done) actualQty else plannedQty
  compute amount: Dec[2]? = qty * price
}