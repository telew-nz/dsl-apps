inline entity DistributionLocationSales extends DistributionLocation {
  func title = distribution.number + " " + location + " " + date.date
  plural = "Sales Location Deliveries"
  singular = "Sales Location Delivery"
  field items: [DistributionSalesItem] inline by distributionLocation =? distribution.balance
    .map(DistributionSalesItem(product = product, plannedQty = -plannedQty))
    .sortBy(product.title)

  field location: Location {
    update = {salesContractor =? new.salesContractor(date)}
  }
  field salesContractor: Store  {
    update = {location =? new.location(date)}
  }
  
  view form = nav{grid (labels = None) {
    row {date, done}
    row {location, salesContractor}
    items >> table{
      product, action, plannedQtyAbs, actualQtyAbs
    }
  }}
  view driverForm = nav{grid (labels = None, style = if (done) doneStyle else normalStyle) {
    row {date , done}
    row {location >> field(editMode = AlwaysRead), location.address}
    items >> list(mode = Edit) { grid(labels = None) {
      row{product >> field(editMode = AlwaysRead), action >> field(editMode = AlwaysRead)}
      row{plannedQtyAbs >> field(editMode = AlwaysRead), actualQtyAbs}
    }}
  }}
  
  object view list = DistributionLocationSales.all >> nav{list{grid {
     row{distribution.status, date, location, salesContractor} 
  }}}
}

inline entity DistributionSalesItem extends DistributionItem with Move  {
  field product: Product
  system field distributionLocation: DistributionLocationSales by items
  
  compute action: LoadUnload = (if (plannedQty > 0) Load else Unload) {
    update = {
      plannedQty = plannedQty.abs*new.k
      actualQty = actualQty.abs*new.k
    }
  }
  func doc = distributionLocation.distribution
  func date: DateTime = distributionLocation.date
  func store: Store = distributionLocation.salesContractor 
  func moveQty: Int? = -actualQty
  func soldQty = 0
}

enum LoadUnload(k: Int) {
  case Load(k = 1) {background = "#dea"}
  case Unload(k = -1) {background = "#e99"}
}
