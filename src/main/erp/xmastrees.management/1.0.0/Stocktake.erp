enum StocktakeState {
  case Submitted {background = "#ed9"}
  case Discrepancy {background = "#f99"}
  case CompleteWithDiscrepancy {background = "#dea"}
  case Complete {background = "#090" color = "white"}
}

entity Stocktake extends ISalesOrder[StocktakeItem] with ISalesDelivery with IOrderDelivery {
  object field generator: Int?
  const system ref field num: Int? = increment(generator)
  compute number: String = "ST" + num
  func unformattedNumber: String = num
  field discrepancyApproved = false
  ref compute stocktakeState: StocktakeState = {
    if (invoiceState == Invoiced && paymentState == Paid) {
      if (items.exists(discrepancy)) CompleteWithDiscrepancy 
      else Complete
    } 
    else if (items.exists(discrepancy)) Discrepancy
    else Submitted
  }
  func title = number + " " + salesContractor + " " + date.date
  ref field date: DateTime = now
  ref field salesContractor: Store by stocktakes =? (Person.current) {
    update = {
      location =? salesContractor.location(date)?.as[SalesLocation]
    }
  } 
  field location: SalesLocation =? (salesContractor.location(date)?.as[SalesLocation]) {
    update = {
      salesContractor =? location.salesContractor(date)
    }
  }
  field items: [StocktakeItem] inline by stocktake =? {
    Product.all.filter(default).map(StocktakeItem(product = _))
  }
  view form = nav{grid{
    row{number, date}
    row{salesContractor, location}
    statusesView
    items >> list {grid{
      product
      row{soldQty, remainingQty, discrepancy, 
          amount >> field(editMode = 
            if (Person.current?.is(OperationManager) || Person.current?.is(BusinessOwner)) Inherit else AlwaysRead)
      }
    }}
  }}
  
  object view list = Stocktake.all >> nav{list{grid(labels = None) {
    row{"#" + number, date.date, salesContractor, location}
    statusesView
  }}}
  
  func seller = LegalCompany.forceOur
  func buyer = salesContractor.as[Person]!
  func orderStatus: OrderStatus = InProcess
  func orderItems = items
  func addItem(product: IProduct) = {
    let newItem = StocktakeItem()
    newItem.product =? product.as[Product]
    items = items + newItem
    newItem
  }
  func setBuyer(buyer: LegalActor): Void = {throw "Unsupported"}
  func deliveryStatus: DeliveryStatus = Delivered
  func deliveryOrders = [this]
  func orderDeliveries = [this]
  func delivery: IDelivery = this
  func deliveryItems = items.map(product, qty).toMap
  view statusesView = x{stocktakeState, invoiceState, paymentState}
  
  compute stocks: [Product: Int?]? = {
    Stock.stockAfterStocktake(date, [salesContractor.lastStocktake(this.date)])
      .map(product, qty)
      .result.toMap
  }
  view ref = x{stocktakeState, title}
}

//StocktakeItem.all.filter(price != calcPrice).update(price = calcPrice)
inline entity StocktakeItem extends IOrderItem[Stocktake] with Move {
  field stocktake: Stocktake by items
  field product: Product {
    update = {price =? calcPrice}
  }
  func calcPrice: Dec[2]? = product.price(stocktake.date, stocktake.seller, stocktake.buyer, soldQty)
  field soldQty: Int? 
  field remainingQty: Int? 

  field price: Dec[2] =? try? calcPrice!
  compute amount: Dec[2]? = (soldQty*price) {
    update = {
      if (soldQty) price = new/soldQty!
    }
    label = "Amount to Pay"
  }
  func order = stocktake
  func qty: Int = soldQty!
  compute stock: Int? = stocktake.stocks.apply(product)
  compute discrepancy = soldQty + remainingQty - stock
    
  func doc: Entity = stocktake
  func date: DateTime = stocktake.date
  func store: Store = stocktake.salesContractor
  func moveQty: Int? = remainingQty - stock
}