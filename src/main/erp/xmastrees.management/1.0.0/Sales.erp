report Sales {
  plural = "Sales"
  view list = StocktakeItem.all
    .groupBy(stocktake.salesContractor, product)
    .agg(soldQty.sum, soldAmount = amount.sum)
    .map(salesContractor, product, soldQty, soldAmount,
      invoicedQty = SalesInvoiceItem.all
        .filter(i => i.product == product && i.orderInvoice.invoice.buyer.as[Person] == salesContractor)
        .agg(qty.sum)
    ) 
    >> nav{table{salesContractor, product, soldQty, soldAmount,
      invoicedQty, (soldQty - invoicedQty).max(0) >> field(label = "Not Invoiced Qty"), 
      button("Invoice", visible = salesContractor.is[Person] && soldQty > invoicedQty) {
        let sc = salesContractor.as[Person]!.log("salesContractor = ")
        Stocktake.all
          .filter(s => s.salesContractor == sc
                  && s.orderTotal > 0 
                  && (s.invoiceState == NotInvoiced || s.invoiceState == PartiallyInvoiced))
          .execute (stocktakes => SalesInvoice(
              buyer = sc,
              orders = stocktakes.map(SalesOrderInvoice(order = _))!
            ).form.open
          )
      }
    }}
}

report SalesByDays {
  plural = "Sales By Days"
  view list = StocktakeItem.all
    .groupBy(date = stocktake.date.date("Pacific/Auckland"), product)
    .sortBy(date.desc)
    .agg(soldQty.sum, soldAmount = amount.sum)
    .map(date, product, soldQty, soldAmount) 
}
