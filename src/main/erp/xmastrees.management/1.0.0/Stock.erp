trait Store {
  func location(date: DateTime): Location?
  system ref field stocktakes: [Stocktake]? by salesContractor {views = []}
  compute lastStocktake: Stocktake = (stocktakes.sortBy(date.desc).first.alt(Stocktake(salesContractor = this, date = min))) {views = []}
  func lastStocktake(date: DateTime): Stocktake = {
    stocktakes.filter(s => s.date < date).sortBy(_.date.desc).first.alt(Stocktake(salesContractor = this, date = min))
  }
  compute stock = Stock.stockAfterStocktake(date = max, [lastStocktake])
     .map(product, qty)
  func isStore: Bool
}

entity Warehouse extends Store with Location {
  func location(date: DateTime): Location? = this
  func salesContractor(date: DateTime): Store? = this
  func isStore: Bool = true
}
extend entity Person extends Store {
  func isStore: Bool = isSalesContractor
}

report Stock {
  plural = "Stock"
  func stockAfterStocktake(date: DateTime, stocktakesQuery: QueryN[Stocktake]) = {
    stocktakesQuery.flatMap(stockTake =>
      DistributionLocationSales.all
        .filter(s => s.salesContractor == stockTake.salesContractor && s.date > stockTake.date && s.date < date)
        *.items.groupBy(product).agg(qty = -actualQty.sum)
        .fullJoin(stockTake.items, 
          on = left.product == right.product, 
          map = (
            stockTake.salesContractor,
            product = left?.product.or(right?.product)!, 
            qty = left?.qty + right?.remainingQty
          ))
      ).query
  }
  view list = stockAfterStocktake(date = max, 
    Store.all.filter(isStore).map(lastStocktake)
  )
}