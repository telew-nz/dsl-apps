entity Distribution extends IPurchaseDelivery with TimeLog { 
  object field generator: Int?
  const system ref field num: Int? = increment(generator)
  compute number: String = "SD" + num
  func title = number + " " + date.date
  field locations: [DistributionLocation] inline by distribution
  field driver: Person? from Person.all.filter(isDriver)
  list compute tripHours: Dec[2]? = timeLogHours
  ref compute date: DateTime = locations.first.date
  list compute status: DistributionStatus = {
    if (locations.exists(done)) {
      if (!locations.all(done)) InTransit
      else if (!locations*.items.exists(actualQty)) Error
      else if (balance) Unbalanced
      else Completed
    } else if (balance) Planning
    else Planned
  }
  object view list = Distribution.all >> nav{table{status, number, date, driver, tripHours}}
  view form = nav{grid(labels = Top){
    header
    tripHours
    timeLogItemsList
    locations
    balance
  }}
  view header = inline(label = "", frame = false){grid(label = "") {
    number
    row{status >> field(label = ""), driver}
  }}
  object view driverList = Distribution.all.filter(driver?.isCurrent) >> nav{list(action = driverForm.open){
    grid{row{status, number, date}}}}
  view driverForm = nav{grid(labels = Top){
    row {status >> field(label = ""), driver}
    timeLogWidget
    locations >> list(frame = false) {driverForm}
  }}
  compute balance = locations*.items
    .groupBy(product).agg(plannedQty.sum, actualQty.sum).toSeq
    .filter(plannedQty != 0 || actualQty != 0)
  
  func deliveryStatus: DeliveryStatus = status.deliveryStatus
  func deliveryOrders = locations*.as[DistributionLocationFarm]
}

inline trait DistributionLocation {
  field distribution: Distribution inline by locations
  func delivery = distribution
  field date: DateTime =? try? distribution.date
  func location: Location
  func items: [DistributionItem]
  field done: Bool {
    update = {
      if (new) date = now
      if (new && items.all(!actualQty)) {
        items.foreach(actualQty = plannedQty)
      }
    }
  }
  func driverForm: Layout[DistributionLocation]
  style doneStyle {}
  style normalStyle {css = "background: #fffff9"}
}

inline trait DistributionItem {
  func product: Product
  func distributionLocation: DistributionLocation
  func action: LoadUnload
  compute plannedQtyAbs = (plannedQty.abs) {
    label = "Planned Quantity"
    update = {plannedQty = new*action.k}
  }
  field plannedQty: Int = -1 {views = []}
  compute actualQtyAbs = (actualQty.abs) {
    label = "Actual Quantity"
    update = {
      actualQty = new*action.k
      if (distributionLocation.items.all(actualQty != 0)) {
        distributionLocation.done = true
        distributionLocation.date = now
      }
    }
  }
  field actualQty: Int? {views = []} 
}

enum DistributionStatus(deliveryStatus: DeliveryStatus) {
  case Planning(deliveryStatus = DeliveryStatus.Planned) {background = "#f99"}
  case Planned(deliveryStatus = DeliveryStatus.Planned) {background = "#ed9"}
  case InTransit(deliveryStatus = DeliveryStatus.InTransit) {background = "#dea"}
  case Unbalanced(deliveryStatus = DeliveryStatus.InTransit) {background = "#f99"}
  case Error(deliveryStatus = DeliveryStatus.InTransit) {background = "#f99"}
  case Completed(deliveryStatus = DeliveryStatus.Delivered) {background = "#090" color = "white"}
}