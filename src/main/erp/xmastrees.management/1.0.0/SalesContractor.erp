access SalesContractor {
  entity Stocktake {
    read = salesContractor == Person.current
    write = salesContractor == Person.current
  }
  entity SalesInvoice {
    read = buyer == Person.current
    write = false
  }
  entity SalesOrderInvoice = readOnly
  entity SalesInvoiceItem = readOnly
  entity Product = readOnly
  entity Person = readOnly
  entity StocktakeItem {
    read = stocktake.salesContractor == Person.current
    write = stocktake.salesContractor == Person.current
  }
  entity Distribution { 
    read = locations.exists(_.as[DistributionLocationSales]?.salesContractor == Person.current)
    write = false
  }
  entity DistributionLocationFarm = readOnly
  entity DistributionLocationSales {
    read = salesContractor == Person.current
    write = false
  }
  entity DistributionSalesItem = readOnly
  entity DistributionFarmItem = readOnly
  entity SalesLocation = readOnly
  entity SellersStorageLocation = readOnly
  menu Sales {
    entity Stocktake
    entity SalesInvoice
    entity Distribution
    report SalesByDays
  }
}


entity SalesContractorApplication {
  ref field person: Person inline by salesContractorApplications
  func title = person.title
  list field address: Address
  field birthdate: Date {update = {person.birthdate = new}}
  field salesExp: Text {label = "What's your sales experience?"}
  field motivation: Text {label = "What's your motivation to be selling Christmas trees?"}
  field vehicleDetails: Text {label = "Details of your vehicle for trees transport"}
  field decemberAvailability: Text {label = "Your availability during the decemeber sales period"}
  field location: SalesLocation {label = "Preferred sales location"}
  ref field status: AppStatus = New
  field smartphone: Bool {label = "Access to a smart phone"}
  field mobileData: Bool {label = "Mobile plan with data package"}
  object view list = SalesContractorApplication.all >> nav{table{status,title,address,birthdate,location}}
  view ref = x{title status}
  view form = nav{grid(labels = Top){
    status >> field(label = "")
    person >> nav(label = ""){inline {grid {
      row{firstName, familyName}
      contacts
      user
    }}}
    birthdate
    address
    salesExp
    motivation
    vehicleDetails
    decemberAvailability
    location
    smartphone
    mobileData
  }}
  view submit = grid(labels = Top){
    h1("Sales Contractor Application")
    person >> grid(label = "", labels = Top) {
      firstName
      familyName
      contacts
    }
    address
    birthdate
    salesExp
    motivation
    vehicleDetails
    decemberAvailability
    location
    smartphone
    mobileData
  }
}

extend entity Person {
  ref compute isSalesContractor: Bool = (user?.accesses.contains(SalesContractor)) {views = []}
  field salesContractorApplications: [SalesContractorApplication]? read by person
}

enum AppStatus {
  case New {background = "#ed9"}
  case InProcess {background = "#dea"}
  case Contracted {background = "#090" color = "white"}
  case Backup {}
  case Closed {background = "#ddd"}
 }