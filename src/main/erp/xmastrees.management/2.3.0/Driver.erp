extend role Driver {
  entity SalesDelivery = readWrite
  entity Transfer = readWrite
}

entity DriverApplication extends Application {
  impl view ref = x{title status}
  ref field person: Person inline by driverApplications
  impl func title = person.title
  list field address: Address
  field birthdate: Date {update = {person.birthdate = new}}
  field drivingExp: Bool {label = "Do you have driving experience with long haul?"}
  field strapsExp: Bool {label = "Do you have experience in operating straps and tie downs?"}
  field treesHandlingAbility: Bool {label = "Do you have physical and agile ability to handle trees under time pressure?"}
  field decemberAvailability: Text {label = "Your availability during the decemeber sales period"}
  field smartphone: Bool {label = "Access to a smart phone"}
  field mobileData: Bool {label = "Mobile plan with data package"}
  impl object view list = DriverApplication.all >> nav{table{status,title,address,birthdate}}
  impl view traitItem = x{title status}
  impl view form = nav{grid(labels = Top){
    status >> field(label = "")
    person >> nav(label = "") {inline{grid {
      name
      contacts      
    }}}
    birthdate
    address
    drivingExp
    strapsExp
    treesHandlingAbility
    decemberAvailability
    smartphone
    mobileData
    cv
  }}
  view submit = grid(labels = Top){
    h1("Driver Application")
    person >> grid(label = "", labels = Top) {
      name
      contacts
    }
    address
    birthdate
    drivingExp
    strapsExp
    treesHandlingAbility
    decemberAvailability
    smartphone
    mobileData
    cv
  }
}

extend entity Person {
  field driverApplications: [DriverApplication]? read by person
  
  /*compute drivenHours: Dec[2]? = {
    TimeLogItem.all.filter(person == this).agg(hours.sum)
  } {views = []}
  compute paidHours: Dec[2]? = {
    DriverPayment.all.filter(driver == this).agg(hours.sum)
  } {views = []}
  compute unpaidHours: Dec[2]? = ((drivenHours - paidHours).max(0)) {views = [form]}
  field bankAccountNumber: String? {views = [form]}*/
}

/*report Drivers {
  plural = "Drivers"
  view list = Person.all.filter(isDriver)
    .map(person = _, drivenHours, paidHours, unpaidHours) >> nav{table {
      person, drivenHours, paidHours, unpaidHours, button("Pay") {
        DriverPayment(driver = person, hours = unpaidHours).form.open
      }
    }}
}
*/