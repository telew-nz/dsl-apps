/*
entity RTProductAttr {

	impl func title: String = "[PA] $attrName"

	field attrName: String
    field slug: String
    
    ref field terms: [RTProductAttrTerm]?

	impl view form = nav {
    	grid {
        	attrName >> field(label = "Attribute name")
        	slug >> field(label = "Slug")
            terms >> field(label = "Attribute terms")
        }
    }

}


entity RTProductAttrTerm {

	impl func title: String = "[PAT] ${attr.attrName} - $term"

    ref field attr: RTProductAttr by terms
    field term: String
    
    impl view form = nav {
    	grid {
        	attr >> field(label = "Attribute")
        	term >> field(label = "Term")
        }
    }

}
*/

/*
extend trait ECommerceIntegration {
  back func uploadAllAttrs(): Void = {
    let attrs: [ProductAttr]? = ProductAttrTerm.subObjects*.as[ProductAttr].filter(_ != Brand || !this.hasBrands)
    let b: BatchChange[ProductAttr] = BatchChange.create[ProductAttr, ID](this, attrs)
    if (!b.isEmpty) uploadAttrJobs(b)*.enqueue()
  }
  
  back func uploadAllAttrTerms(): Void = {
    let terms = ProductAttrTerm.all.filter(!_.is[ProductAttrTerm with IBrand] || !this.hasBrands).result.get
    let b = BatchChange.create(this, terms)
    if (!b.isEmpty) uploadAttrTermJobs(b)*.enqueue()
  }
}
*/