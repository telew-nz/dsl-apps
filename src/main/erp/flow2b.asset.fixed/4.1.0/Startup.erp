entity AssetsStartup {
  background = "#649023"
  func title = "Assets Startup $store"
  ref field date: Date = now
  field legalEntity: LegalEntity {
    default =? try? LegalEntity.ours.onlyOne!
    from = LegalEntity.ours
  }
  ref field store: Store {
    default =? Store.ours.onlyOne
    from = Store.ours
  }
  field pools: [AssetsPool]? inline by startup
  field products: [AssetsStartupProduct]? inline by startup
  view form = nav{
    grid(labels = Top, width = 1.2) {
      date
      legalEntity
      store
      pools >> list(mode = EditSelect) {grid(labels = Top, width = 1.2) {
        row{number registration.cost >> field(label = "Book Value")}
        depreciation >> field(visible = ui.isSelected)
      }}
      products >> list(mode = EditSelect){
        grid(labels = None, width = 1.2) {
          read{row {good >> field (title = title) count }}
          edit{row {goodTitle count}}
          grid(labels = Top, width = 1.2, visible = ui.isSelected) {
            good.assetsStartup
            assets >> table {
              number >> field(width = 0.6) registration.cost >> field(width = 0.6, label = "Book Value")
            }
            lowValueAssets >> table(singular = "Low-value Asset"){
              poolEditor >> field(width = 0.6) qty >> field(width = 0.6)
            }
          }
        }
      }
    }
  }
  event onSave = {
    pools.foreach{pool =>
      pool.registration.source = store
      pool.registration.adjustment = true
      pool.registration.date = date
    }
  }
}

extend entity Good {
  view assetsStartup = group {
    categories >> field (label = "Product Categories", singular = "Product Category")
    depreciation
  }
}

inline entity AssetsStartupProduct {
  singular = "Product"
  system field startup: AssetsStartup
  field good: Good inline {
    deleteCascade = false
  }
  compute goodTitle: String {
    label = "Product Title"
    value = good.title
    update = {
      good.title = new
    }
  }
  field assets: [FixedAsset]? inline by startupProduct {
    init = {
      new.product = good
    }
  }
  field lowValueAssets: [AssetsPoolProduct]? inline by startupProduct {
    init = {
      new.product = good
    }
  }
  compute count = (assets.count + lowValueAssets*.qty.sum).as[Qty[ProductUnit.Item]]
  event onSave = {
    assets.foreach{asset =>
      asset.registration.source = startup.store
      asset.registration.adjustment = true
      asset.registration.date = startup.date
    }
  }
}


