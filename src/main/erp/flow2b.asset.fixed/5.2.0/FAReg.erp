register FAReg {
  key field asset: IFixedAsset
  
  order field date: Date
  field document: Entity
  field toAvailable: Int? 
  field toInUse: Int? 
  field toLegalEntity: OurLegalEntity?
  field toStore: IStore?
  field isFuture: Bool = false
  field autoProd: Bool = true
  stored compute legalEntity: OurLegalEntity = toLegalEntity.alt(prev!.legalEntity)
  stored compute store: IStore = toStore.alt(prev!.store)
    
  stored compute available: Bool = {
    if (toAvailable == 1) true 
    else if(toAvailable == -1) false
    else prev!.available
  }
  stored compute inUse: Bool = {
    if (toInUse == 1) true 
    else if(toInUse == -1) false
    else prev!.inUse
  }
  
  func plusRegs: [FAProdReg]? = {
    asset.products.toSeq.map {i => 
      FAProdReg(
        product = i.#0, legalEntity = legalEntity, store = store, 
        date = date, document = document, isFuture = isFuture, qty = i.#1
      )
    }
  }
  register prodRegs: [FAProdReg]? = if (autoProd) {
    if (let p = prev) {
      let minus = if (p.legalEntity != legalEntity || p.store != store || (p.available && !available)) {
        asset.products.toSeq.map {i => 
          FAProdReg(
            product = i.#0, legalEntity = p.legalEntity, store = p.store, 
            date = date, document = document, isFuture = isFuture, qty = -i.#1
          )
        }
      } 
      if ((minus && available) || (!p.available && available)) {
        plusRegs + minus
      } else {
        minus
      }
    } else {
      plusRegs
    }
  }
}
