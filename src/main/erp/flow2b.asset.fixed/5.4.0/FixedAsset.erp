trait IFixedProductAsset extends IFixedAsset with IRegistrationItem {
  ref field product: IProduct by assets {
    from = IProduct.all.filter(isTangible && unit == Item)
  }
  field maintenances: [Maintenance]? read by asset
  func products: [IProduct : Qty] = [product -> 1.as[Qty[ProductUnit.Item]]!]
  func itemDelivery: IDelivery? = registration
  func title: String = "$number $product" 
  object view list = IFixedProductAsset.all >> nav{list{grid(labels = None){
    row{number  product legalEntity}
  }}}
  func asset: IFixedAsset = this
  compute state: FAReg? = FAReg.current.find(asset == this) 
  compute movements: [FAReg]? = FAReg.all.filter(asset == this).sortBy(date.desc)
  field qty: Qty[ProductUnit.Item] = 1 
  func registrationItems: [IRegistrationItem]? = [this]
  func depreciation: DepreciationMethod? = product.superProduct.depreciation
}


entity FixedAsset extends IFixedProductAsset  {
  system field startupProduct: AssetsStartupProduct?
  func numberPrefix: String = "FA"
  compute unavailableItem = registration.unavailableItems.first!
  view form = nav {
    grid(labels = Right){
      number
      legalEntity
      product
      registration >> grid{
        issuesView
        row{date source}
        unavailableItem.stockDesc
      }
      
      extension
      maintenances
      disposal
    }
    button("Movements") {
      AssetMovement(asset = this).list.open
    }
  }
}
