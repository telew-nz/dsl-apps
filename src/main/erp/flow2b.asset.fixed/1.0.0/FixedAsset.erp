trait IFixedAsset extends IProductItem {
  singular = "Fixed Asset"
  plural = "Fixed Assets"
  object field gen: Int?
  const field n: Int? = increment(FixedAsset.gen)
  ref compute number: String {
    value = manualNumber.alt("FA" + n)
    update = { manualNumber = new}
  }
  field manualNumber: String?
  field legalEntity: LegalEntity {
    default =? LegalEntity.onlyOneOur
    from = LegalEntity.ours
  }
  ref field product: IProduct by assets {
    from = IProduct.all.filter(isTangible && unit == Item)
  }
  
  field creation: AssetCreation inline by asset
  field operations: [AssetOperation]? read by asset
  func title: String = "$number $product" 
  object view list = IFixedAsset.all >> nav{table{
    number legalEntity product
  }}
  compute state: FAReg? = FAReg.current.find(asset == this) 
  compute movements: [FAReg]? = FAReg.all.filter(asset == this).sortBy(date.desc)
}

entity FixedAsset extends IFixedAsset {
  view form = nav {grid(labels = Top){
    number
    legalEntity
    product
    extension("fields")
    button("Movements") {
      AssetMovement(asset = this).list.open
    }
    creation 
    operations
  }}
  
}

extend trait IProduct {
  field assets: [IFixedAsset]? read by product
}