register FAProdReg {
  key field product: ISuperProduct
  key field legalEntity: LegalEntity
  key field store: Store
  
  order field isFuture: Bool
  order field date: Date
  
  field document: Entity
  field priorityDate: Date?
    
  field qty: Qty[ProductUnit.Item] {label = "Quantity"}
  compute factualQty: Qty[ProductUnit.Item]? = if (isFuture) 0 else qty
  compute expectedQty: Qty[ProductUnit.Item]? = if (isFuture) qty else 0
  stored compute fact: Qty[ProductUnit.Item]? = prev?.fact + factualQty
  stored compute expectation: Qty[ProductUnit.Item]? = prev?.expectation + expectedQty
  compute available: Qty[ProductUnit.Item]? = fact + expectation
   
  func availablePeriods(qty: Qty[ProductUnit.Item], start: Date, priorityDate: Date?, excludeItems: [Id?]?): [Period]? = {
    let av = (qty <= available)
    let dates = (if (av) start) + next?.availabilitySwitchDates(qty, av, priorityDate, delta = 0, excludeItems) + Date.max
    dates.sliding(2, 2).filter(count == 2).map(Period(start = first, end = last))
  }
  
  func availabilitySwitchDates(qty: Qty[ProductUnit.Item], wasAvailable: Bool, priorityDate: Date?, delta: Qty[ProductUnit.Item]?, excludeItems: [Id?]?): [Date]? = {
    let delta1 = {
      if (excludeItems.contains(id)) delta - expectedQty 
      else if (let pd1 = this.priorityDate, let pd2 = priorityDate) {
        if (pd2 < pd1) delta - expectedQty 
        else delta
      } else delta
    }
    let av = (qty <= fact + expectation + delta1)
    (if (av != wasAvailable) date) + next?.availabilitySwitchDates(qty, av, priorityDate, delta1, excludeItems)
  }
  
  func onSave = {
    document.forceTouch
  }
}