entity Maintenance extends Entity with HasNumber with DashboardItem {
  background = "#649023"
  
  object field gen: Int?
  const ref field n: Int? = increment(gen)
  func number = "MNT$n"
  func title = "$number $productItem"
  ref field productItem: ProductItem by maintenances {
    label = "Asset"
  }
  func itemOrder = ("Date", start)
  
  func activeRoles = if (status == Planned || status == InProgress) [StoreOperative]
  
  ref field start: Date = now
  ref field end: Date? {
    validate = if (!end && status == Complete) "End data should be set if maintanance complete"
  }
  ref field status: MaintenanceStatus {
    default = Planned
    update = {
      if (new == InProgress) {
        start = now 
        if (end && !end < start) end = start
      } else if (new == Complete) {
        end = now
      }
    }
  }
  ref field type: MaintananceType?
  field description: Text?
  ref compute overdueState: MaintenanceOverdueState {
    value = {
      if (status == Planned && Date.now > start) Overdue
      else if (status == InProgress && end && Date.now > end!) Overdue
      else NoOverdue
    } 
    visible = overdueState == Overdue
  }
  field nextUnit: DateUnit {
    default = week
    from = DateUnit.all.filter(isDate).toSet
  }
  field nextDelta: Duration[nextUnit]? {
    label = "Repeat Maintenance Every"
  }
  const field nextMaintenance: Maintenance?
  register out = if (status != Canceled) {
    ProdItemReg(
        item = productItem, sort = if (status.started) 0 else 1, date = start, 
        doc = this, docItem = this, qty = -1, autoProdReg = true, priorityDate = Date.min)
  }
  register in = if (status != Canceled) {
    if (let end) {
      ProdItemReg(
          item = productItem, sort = if (status == Complete) 0 else 1, date = end, 
          doc = this, docItem = this, qty = 1, autoProdReg = true, priorityDate = Date.min)
    }
  }
  
  event onSave = {
    if (updated(status) && nextDelta && status == Complete) {
      if (!nextMaintenance) nextMaintenance = Maintenance(this, status = Planned)
      if (nextMaintenance!.status == Planned ) {
        nextMaintenance!.start = start + nextDelta
        nextMaintenance!.end = end! + nextDelta
      }
    }
  }
  
  view form = nav{grid{
    productItem
    type
    x(label = "State"){status, overdueState}
    row {start end}
    row{nextDelta >> field(canEditUnit = true, width = 0.3) space(width = 0.7)}
    nextMaintenance
    description
  }}
  
  report Report {
    field status: [MaintenanceStatus]?
    view list = Maintenance.all.filter((!this.status || this.status.contains(status))).sortBy(start) >> nav{list{grid(labels = None){
      row{productItem start end}
      x{status overdueState}
    }}}
  }
  view ref = x {status >> field(editMode = AlwaysEdit) overdueState title type start label("–") end}
  view dash = y{
    x {start label("–") end}
    x {status  >> field(editMode = AlwaysEdit) overdueState number  }
    x {productItem type}
  }
}

entity MaintananceType {
  field title: String
  field description: Text?
}

enum MaintenanceStatus(started: Bool) {
  case Planned(started = false) {background = "#ed9"}
  case InProgress(started = true)  {background = "#dea"}
  case Complete(started = true)  {
    color = "white"
    background = "#090"
  }
  case Canceled(started = false)  {background = "#ddd"}
}

enum MaintenanceOverdueState {
  case NoOverdue {background = "#dea"}
  case Overdue {background = "#e99"}
}
