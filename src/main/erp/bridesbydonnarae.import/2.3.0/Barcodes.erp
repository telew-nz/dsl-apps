object BarcodesImport extends Entity with SheetImportSchema {
  impl func title = "Barcodes import"
  
  impl back func process(file: File, data: [String?]?) = {
    data.foreach{ii =>
      let i = ii.splitTo[[String?]?](",", CSV)
      
      guard (let prods = (Dress.all.filter(model == i("B")).result.get*.as[ISuperProduct] + Accessory.all.filter(refNum == i("B")).result.get).or{
        if (let brand = Brand.all.find(title =%= i("A")).result.get, let ex = brand.products.first) {
          [
            if (ex.is[Dress]) Dress(model = i("B")!, brand = brand, categories = ex.categories).as[ISuperProduct].save
            else Accessory(refNum = i("B")!, title = "$brand $(i('B'))", categories = ex.categories, brand = brand).save
          ]
        }
      }) else return Activity.current!.comment("Cannot find brand $(i('A'))".paragraph)
      guard (let prod = prods.onlyOne.or(prods.filter(brand?.title =%= i("A")).onlyOne)) else return Activity.current!.comment("Few product for code $(i('B')): $prods".paragraph)
      
      let size = if (i("C") == "NULL") "" else i("C")
      let color = if (i("D") == "NULL") "" else i("D")
      let variation = prod.subProducts*.as[ISubProduct].find{v =>
           v.as[DressVariation]?.color.or(v.as[AccessoryVariation]?.color)?.title =%= color 
        && v.as[DressVariation]?.size.or(v.as[AccessoryVariation]?.size)?.title =%= size 
      }.alt{
        let c = if (let color) ColorItem(title = color).saveBy(title.flex)
        let s = if (let size) Size(title = size).saveBy(title.flex)
        if (let dress = prod.as[Dress]) {
          DressVariation(superProduct = dress, color = c, size = s).as[ISubProduct]
        } else {
          AccessoryVariation(superProduct = prod.as[Accessory]!, color = c, size = s)
        }
      }
      
      variation.addBarcode(i("F")!)
      variation.save
    }
  } 
}