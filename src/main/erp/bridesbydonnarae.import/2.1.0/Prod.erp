object ProdImport extends Entity with ProductImportSchema {
  impl func title = "Product import"
  
  impl back func process(file: File, data: [String?]?) = {
    let stocktake = Stocktake(type = Initial, stockType = Inventory).save
    categories(
      data.drop(1).map(splitTo[[String?]?](",", CSV))
      root = null
      category = {
        let a = item("A")
        if (a =%= "bridal" || a =%= "bride") {
          "Wedding Dresses"
        } else if (a =%= "bridesmaid" || a =%= "mother of the bride" || a =%= "evening") {
          "Bridesmaid Dresses"
        } else {
          "Accessories"
        }
      }
      level = 0
    ).filter(item("C")).foreach{
      let tags = if (let a = item("A")) [ProductTag(title = a).saveBy(name.flex)]
      let vendor = item("B")
      let style = ((item("C"))[13 .. ","))
      let prodTitle = "$vendor $style"
      let brand = if (let vendor) Brand(name = vendor).saveBy(name.flex)    
      let cats = category.toSeq
      let color = if (let cl = item("E")) ColorItem(title = cl).saveBy(title.flex)
      let size = if (let sz = item("F")) Size(title = sz).saveBy(title.flex)
      let g: IProductInv = {
        if (category?.name =%= "Accessories") {
          let acc = Accessory(
            refNum = style!
            title = prodTitle
            categories = cats
            tags = tags
            brands = brand.toSeq
            description = item("D")
          ).saveBy(title.flex)
           .saveBy(refNum)
          AccessoryVariation(
            superProduct = acc,
            color = color
            size = size
          ).saveBy(_.superProduct, _.color, _.size).as[IProductInv]
        } else {
          let dress = Dress(
            brand = brand
            model = style!
            categories = cats
            tags = tags
            description = item("D")
          ).saveBy(title.flex)
          DressVariation(
            superProduct = dress,
            color = color
            size = size
          ).saveBy(_.superProduct, _.color, _.size).as[IProductInv]
        }
      }
      g.regularPrice = item("I").toUNum
      g.currentPrice = item("I").toUNum
      if (let qty = item("K").toUNum) {
        stocktake.addQty(g, qty, [], item("H").toUNum)
      }
      if (let v = item("B")) {
        g.updateVendorPrice(Company(title = v).saveBy(title.flex).makeVendor, item("H").toUNum)
      }
    }
  } 
}
