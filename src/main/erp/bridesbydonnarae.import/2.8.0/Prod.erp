entity ProdImport extends Entity with ProductImportSchema {
  impl func title = "Product import $stocktake"
  ref field stocktake: Stocktake
  
  impl back func process(file: File, data: [String?]?) = {
    var notFoundStyles: [String]? = []
    categories(
      data.drop(1).map(splitTo[[String?]?](",", CSV))
      root = null
      category = {
        let a = item("A")
        if (a =%= "bridal" || a =%= "bride") {
          "Wedding Dresses"
        } else if (a =%= "bridesmaid" || a =%= "mother of the bride" || a =%= "evening") {
          "Bridesmaid Dresses"
        } else {
          "Accessories"
        }
      }
      level = 0
    ).filter(item("C")).foreach{
      //let tags = if (let a = item("A")) [ProductTag(title = a).saveBy(name.flex)]
      let vendor = item("B")
      let style = ((item("C"))[13 .. ",")).or(((item("C"))[13 .. " Vend"))).trim!
      let prodTitle = "$vendor $style"
      //let brand = if (let vendor) Brand(name = vendor).saveBy(name.flex)    
      let cats = category.toSeq
      let desc = item("D")
      let color = if (let cl = item("E")) ColorItem(title = cl).saveBy(title.flex)
      let size = if (let sz = item("F")) Size(title = sz).saveBy(title.flex)
      
      guard (let dress = Accessory.all.find(refNum =%= style).result.get) else return { 
        notFoundStyles = notFoundStyles + [style]
      }
                               
      /*if (dress.regularPrice == dress.currentPrice) {
        dress.regularPrice = item("I").toUNum
        dress.currentPrice = item("I").toUNum
        dress.save
      }*/
      /*guard (let g = dress.variations.find(size?.title =%= item("H") && color?.title =%= item("E"))) else return { 
        notFoundStyles = notFoundStyles + [style!]
      }*/
      let g: IProductInv = AccessoryVariation(
        superProduct = dress,
        color = color
        size = size
      ).saveBy(_.superProduct, _.color, _.size).as[IProductInv]
                               
      /*let g: IProductInv = Dress.all.find(model == style!).
      {
        if (category?.name =%= "Accessories") {
          let acc = Accessory(
            refNum = style!
            title = prodTitle
            categories = cats
            tags = tags
            brands = brand.toSeq,
            description = desc
          ).saveBy(title.flex)
           .saveBy(refNum)
          AccessoryVariation(
            superProduct = acc,
            color = color
            size = size
          ).saveBy(_.superProduct, _.color, _.size).as[IProductInv]
        } else {
          let dress = Dress(
            brand = brand
            model = style!
            categories = cats
            tags = tags,
            description = desc
          ).saveBy(title.flex)
          DressVariation(
            superProduct = dress,
            color = color
            size = size
          ).saveBy(_.superProduct, _.color, _.size).as[IProductInv]
        }
      }*/
      /*if (!g.regularPrice) {
        if (g.regularPrice == g.currentPrice) {
          g.regularPrice = item("K").toUNum
          g.currentPrice = item("K").toUNum
          g.save
        }
      }*/
      //if (let i = stocktake.items.find(_.product == g)) {
      //  i.costPrice = item("J").toUNum
      //  i.save
      //}
      if (let qty = item("K").toUNum) {
        stocktake.addQty(g, qty, [], item("J").toUNum)
      }
      //if (let v = item("B")) {
      //  g.updateVendorPrice(Company(title = v).saveBy(title.flex).makeVendor, item("J").toUNum)
      //}
    }
                               
    if (let notFoundStyles) throw "No styles found $(notFoundStyles.join(', '))"
  } 
}
