object ImageListImport extends Entity with SheetImportSchema {
  impl func title = "Image List Import"
  
  impl back func process(file: File, data: [String?]?) = {
    data.foreach {s =>
      RemoteImage(fileName = s).save
    }
  } 
}


entity RemoteImage {
  impl func title = fileName
  field fileName: Url
  field image: Image? 
  func url: Url = "http://bridesbydonnarae.flow2b.net/oldimg/$fileName"
  back func forceImage: Image = {
    if (let image) {
      image
    } else {
      let img = Image(url = url).save
      image = img
      save
      img
    }
  }
  impl view form = nav{
    grid{
      fileName
      image
    }
    button("Download") {
      back {
        let t = this
        t.forceImage
      }
    }
  }
}

extend trait ISuperProduct {
  back func addRemotePhotos = if (let refNum) {
    let foundPhotos = RemoteImage.all.filter(fileName.containsIgnoreCase(refNum)).result.get
    updatePhotos((photos + foundPhotos*.forceImage).distinct)
    save
  }
  func updatePhotos(photos: [Image]?) : Void = {}
}

extend entity Clothing {
  extend view form = extend("nav") {
    button("↻ Photos") {
      back {
        addRemotePhotos
      }
    }
  }
  impl func updatePhotos(photos: [Image]?) : Void = {
    this.photos = photos
  }
}

extend entity IBasicProduct {
  extend view form = extend("nav") {
    button("↻ Photos") {
      back {
        addRemotePhotos
      }
    }
  }
  impl func updatePhotos(photos: [Image]?) : Void = {
    this.photos = photos
  }
}

extend entity Kit {
  extend view form = extend("nav") {
    button("↻ Photos") {
      back {
        addRemotePhotos
      }
    }
  }
  impl func updatePhotos(photos: [Image]?) : Void = {
    this.photos = photos
  }
}

extend entity VariableGood {
  extend view form = extend("nav") {
    button("↻ Photos") {
      back {
        addRemotePhotos
      }
    }
  }
  impl func updatePhotos(photos: [Image]?) : Void = {
    this.photos = photos
  }
}

extend entity VariableKit {
  extend view form = extend("nav") {
    button("↻ Photos") {
      back {
        addRemotePhotos
      }
    }
  }
  impl func updatePhotos(photos: [Image]?) : Void = {
    this.photos = photos
  }
}