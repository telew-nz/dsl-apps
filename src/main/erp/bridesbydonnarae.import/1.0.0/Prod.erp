object ProdImport extends Entity with ProductImportSchema {
  impl func title = "Product import"
  
  impl back func process(file: File, data: [String?]?) = {
    let stocktake = Stocktake(type = Initial).save
    categories(
      data.drop(1).map(splitTo[[String?]?](",", CSV))
      root = null
      category = item("A")
      level = 0
    ).filter(item("C")).foreach{
      let vendor = item("B")
      let style = ((item("C"))[13 .. ","))
      let prodTitle = "$vendor $style"
      let g: IProductInv = if (let sz = item("F")) {
        let clothing = Clothing(
          refNum = style
          title = prodTitle
          categories = category.toSeq,
          description = item("D")
        ).saveBy(title.flex)
         .saveBy(refNum)
        let color = ClothingColor(
          superProduct = clothing
          color = ColorItem(title = item("E").alt("Other")).saveBy(title.flex)
        ).saveBy(superProduct, color)
        ClothingSize(
          closingColor = color,
          size = Size(title = sz).saveBy(title.flex)
        ).saveBy(_.closingColor, _.size).as[IProductInv]
      } else if (let cl = item("E")) {
        let good = VariableGood(
          refNum = style
          title = prodTitle
          categories = category.toSeq,
          description = item("D")
        ).saveBy(title.flex)
         .saveBy(refNum)
        GoodVariation(
          variableGood = good
          color = ColorItem(title = cl).saveBy(title.flex)
        ).saveBy(_.variableGood, _.color).as[IProductInv]
      } else {
        Good(
          refNum = style
          title = prodTitle
          categories = category.toSeq,
          description = item("D")
        ).saveBy(title.flex)
         .saveBy(refNum).as[IProductInv]
      }
      g.regularPrice = item("I").toUNum
      if (let qty = item("K").toUNum) {
        stocktake.addQty(g, qty, [], item("H").toUNum)
      }
      if (let v = item("B")) {
        g.updateVendorPrice(Company(title = v).saveBy(title.flex).makeVendor, item("H").toUNum)
      }
    }
  } 
}
