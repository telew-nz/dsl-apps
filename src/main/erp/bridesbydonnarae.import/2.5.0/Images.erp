object ImageListImport extends Entity with SheetImportSchema {
  impl func title = "Image List Import"
  
  impl back func process(file: File, data: [String?]?) = {
    data.foreach {s =>
      RemoteImage(fileName = s).save
    }
  } 
}

entity RemoteImage {
  impl func title = fileName
  field fileName: Url
  field image: Image? 
  func url: Url = "http://bridesbydonnarae.flow2b.net/oldimg/$fileName"
  back func forceImage: Image = {
    if (let image) {
      image
    } else {
      let img = Image(url = url, name = File.fileName(url)).save
      image = img
      save
      img
    }
  }
  impl view form = nav{
    grid{
      fileName
      image
    }
    button("Download") {
      back {
        let t = this
        t.forceImage
      }
    }
  }
}

class AddRemotePhotosJob extends SystemJob {
  impl func service = ImageDownloadService
  field product: ISuperProduct

  impl func dependsOnRegisters = false

  impl func do = if (let refNum = product.as[Dress]?.model.or(product.refNum)) {
    let foundPhotos = RemoteImage.all.filter(fileName.flex.contains(refNum)).result.get
    product.updatePhotos((product.photos + foundPhotos*.forceImage).distinct)
    product.save
  }
}

object ImageDownloadService extends SystemService {
  impl func title = "Image Download Service"
  func serviceAccess: [Role]? = [Admin]
  impl view form = nav{grid(labels = Top){
     issuesView
     serviceState
     errorsCount >> field(editMode = AlwaysRead)
  }
  button("â†» All Photos") {
    back {
      ISuperProduct.all*.addRemotePhotos
    }
  }
  }
}


extend trait ISuperProduct {
  func addRemotePhotos =  {
    AddRemotePhotosJob(product = this).enqueue
  }
  func updatePhotos(photos: [Image]?) : Void = {}
}

extend entity Accessory {
  impl func updatePhotos(photos: [Image]?) : Void = {
    photos.foreach(AccessoryPhoto(photo = _, superProduct = this))
  }
}

extend entity Dress {
  impl func updatePhotos(photos: [Image]?) : Void = {
    photos.foreach(DressPhoto(photo = _, superProduct = this))
  }
}

extend entity IBasicProduct {
  impl func updatePhotos(photos: [Image]?) : Void = {
    this.photos = photos
  }
}

extend entity Kit {
  impl func updatePhotos(photos: [Image]?) : Void = {
    this.photos = photos
  }
}

