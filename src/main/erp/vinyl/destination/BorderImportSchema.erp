object BorderImportSchema extends Entity with SheetImportSchema {
  singular = "Border Price List"
  ref field vendor: IVendor

  func header = "Artist,Title,Catlogue Number,Barcode,Format,Price"
  func title = vendor.title
  
  back func process(file: File, data: [String?]?) = {
    let pl = vendor*.priceModels*.as[PriceList].first.alt(PriceList(vendor = vendor).save)
    pl.products.foreach {
      _.regular = 0
      _.current = 0
    }
    var various = 0
    data.drop(1).foreach{row =>
      if (row == "VARIOUS ARTISTS,,,,,") {
        various = 1
      } else if (various == 1) {
        various = 2
      } else {
        let i = row.splitTo[[String?]](",", CSV)
        let artist = if (!various) i("A")
        let format = i("E")
        let name = if (various) (i("A") + ": " +? i("B").trim)! else i("B").trim.alt("?")

        let prod = MusicProduct(
          artist = if (let artist) Artist(title = artist).saveBy(uniqTitle)
          format = if (let format) MusicFormat(title = format).saveBy(uniqTitle)
          name = name
          refNum = i("C")
          barcodes = if (let num = i("D")) [Barcode(number = num)]
        ).saveBy(_.artist, _.uniqName, _.format)
        if (let price = num(i("F"))) {
          let pp = pl.products
          .find(_.product == prod)
          .alt(PriceListProduct(priceList = pl, product = prod))
          pp.regular = price.positive
          pp.current = price.positive 
        }
      }
    }
  }
  func num(s: String?): Number? = {
    if (let ss = s.trim.dropPrefix("\$").trim) try? ss.toNum!
  }
}
