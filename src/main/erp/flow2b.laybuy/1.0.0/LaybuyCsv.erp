class LaybuyCsvData {
  field orderId: UInt
  field customerId: UInt
  field merchantReference: String?
  field merchantName: String?
  field type: String
  field total: Money[2]?
  field settlement: Money[2]?
  field fee: UMoney[2]?
  field custFirstName: String?
  field custLastName: String?
  field date: Date {format = "yyyy-MM-dd HH:mm:ss"}
  
  func data(account: FinAccount): BankData = {
    BankData(thierName = custFirstName + " " + custLastName, memo = type + " " + merchantName + " " + merchantReference, bankId = orderId)
  }
}

class LaybuyStmItem  extends BankStatementItem {
  field data: LaybuyCsvData
  field isIncome: Bool
  
  impl func date = if (isIncome) data.date else data.date + 1_minute
  impl func data(account: FinAccount): BankData = data.data(account)
  
  impl func stmAmount: Money[2]? = if (isIncome) data.total else -data.settlement
  impl func fee: UMoney? = if (isIncome) data.fee
}

extend enum BankStatementType {
  case LaybuyCsv(
    canProcess = file.is("csv") && data.toString.lines(CSV).first == "orderid,customerid,merchantreference,merchantname,type,transactiontotal,settlement,fee,customerfirstname,customerlastname,created"
    process = ProcessResult(
       account = LaybuyAccount.all.result.get.onlyOne
       items = data.toString.lines(CSV).drop(1).mapOpt(splitTo[LaybuyCsvData](CSV)).flatMap{data => [
          LaybuyStmItem(data = data, isIncome = true)
          LaybuyStmItem(data = data, isIncome = false)
       ]})
    knowOurAccount = true
  )
}