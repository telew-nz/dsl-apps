object SMSClientService extends ISMSClientService {
  impl func title = "SMS Client Service"
  
  impl field pinpointClientConfig: PinpointClientConfig

  impl func updateDeliveryStatus(messageID: String, newStatus: ActivityDeliveryStatus): Future[Any] = {
    UpdateDeliveryStatusJob(
      messageID = messageID,
      newStatus = newStatus
    ).enqueue
  }
  

  // field countryCodeForValidation: String
  func countryCodeForValidation: String = Workspace.current.countryCode
  // field contactForValidation: IPhoneContact?
    
  
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
    
    countryCodeForValidation
    pinpointClientConfig
    
    /*button("Tst") {
      TstJob(service = this).enqueue
    }*/
    

    /*contactForValidation
    button("Tst Validate") {
      if(let cfv = contactForValidation)
      PhoneValidationJob(
        service = this
        phoneContact = cfv
        countryCode = countryCodeForValidation
      ).enqueue
    }*/
  }} 
}


/*
class TstJob extends SystemJob {
  impl field service: ISMSClientService
  field activity: Activity inline
  
  impl func do = {
    "testing...".log()
    let aid: String? = activity.id
        
    aid.log("activityId")
	service.smsServerWorkspaceID.log("server workspace id")
    
    
    let r <- Query(ISMSService.implObjects.first!).inWorkspace(service.smsServerWorkspaceID)
    			.tst(aid!).result
  		
    //.send("+380930981405", "flow2b: test sms delivery webhook 2.4", service.pinpointClientConfig).result
    
    r.log("res")
  }
}*/