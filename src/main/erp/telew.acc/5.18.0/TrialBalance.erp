report TrialBalance {
  plural = "Trial Balance"
  field legalEntity: OurLegalEntity? 
  field start: Date = Date.now[Date[millisecond]].start(year)
  field end: Date = Date.now[Date[millisecond]].end(year)
  //field accountTypes: [LedgerAccountType]?
  field currency: Currency?
    
  func baseCurrency = currency.alt(legalEntity?.getCurrency.alt(Currency.our))
    
  impl view list = Ledger.between(start, end)
    .filter(
      start.legalEntity ==? this.legalEntity &&
      //(!this.accountTypes || this.accountTypes.contains(start.account.type)) &&
      start.currency ==? this.currency //&& (start.balance || items)
    )
    .flatMap(
      start.subBalances.toMap(account).fullJoin(
        items.groupBy(subAccount),
        value = (
          account = key, start.currency, start = left?.amount,
          debit = right.filter(amount > 0)*.amount.sum,
          credit = -right.filter(amount < 0)*.amount.sum
        )
      ).values
    )
    .groupBy(account, currency).agg(start.sum, debit.sum, credit.sum)
    .map {
      let bStart <- start.to[Money[this.baseCurrency]](this.end)
      let bDebit <- debit.to[Money[this.baseCurrency]](this.end)
      let bCredit <- credit.to[Money[this.baseCurrency]](this.end)
      let end = start + debit - credit
      let bEnd = (bStart + bDebit - bCredit)
      (account, currency,
        startDebit = if (start > 0) start else 0
        startCredit = if (start < 0) -start else 0
        bStartDebit = if (bStart > 0) bStart else 0, 
        bStartCredit = if (bStart < 0) -bStart else 0, 
        debit, credit, bDebit, bCredit,
        endDebit = if (end > 0) end else 0
        endCredit = if (end < 0) -end else 0
        bEndDebit = if (bEnd > 0) bEnd else 0, 
        bEndCredit = if (bEnd < 0) -bEnd else 0
      )
    }
    .sortBy(account.number)
    .groupBy(account.type).subtotal(bStartDebit.sum, bStartCredit.sum, bDebit.sum, bCredit.sum, bEndDebit.sum, bEndCredit.sum)
    .total(bStartDebit.sum, bStartCredit.sum, bDebit.sum, bCredit.sum, bEndDebit.sum, bEndCredit.sum)
      >> 
  nav {
    total {
      subtotal {
        row (background = type.props.background)  {type >> field(span = 2), bStartDebit, bStartCredit, bDebit, bCredit, bEndDebit, bEndCredit}
        table(action = Reflection.object[AnalitTrialBalance]("TB$(account.template.name)")
              .new(legalEntity = legalEntity, date = this.end, currency = currency, account = account)
              .list.open) {
           currency >> field(width = 0.07, label = "")          
           account >> field(width = 0.4, background = "", label = "Account") 
           group(label = "Starting Balance") {
             startDebit >> field(width = 0.3, label = "Debit") 
             startCredit >> field(width = 0.3, label = "Credit")
           }
           group(label = "Turnover") {
             debit >> field(width = 0.3, label = "Debit") 
             credit >> field(width = 0.3, label = "Credit")
           }
           group(label = "Ending Balance") {
             endDebit >> field(width = 0.3, label = "Debit") 
             endCredit >> field(width = 0.3, label = "Credit")
           }
        }
      }
      row {space(span = 2), bStartDebit, bStartCredit, bDebit, bCredit, bEndDebit, bEndCredit}
    }
  }
}