/*extend entity InvoiceRevision {
  event onSave = {
    if (!IUser.current.is[XeroIntegration] && touched) {
      XeroIntegration.all.map { s =>
        PushInvoiceRevisionJob(service = s, invoiceRevision = this).run
      }
    }
  }
}


class PushInvoiceRevisionJob extends SystemJob {
  field service: XeroIntegration
  field invoiceRevision: InvoiceRevision
  
  func do = {
    guard(service.syncMode.push) else return {}
        
        
    let invoice = invoiceRevision.invoice
    
    let _ <- invoiceRevision.items*.as[OrderProductItem]*.product.map { p =>
      PushItemJob(service = this.service, product = p).do()
    }.allCompleted()
    
    let invoiceLineItems = invoiceRevision.items*.as[OrderProductItem].map { li =>
      XeroInvoiceLineItem(
        itemCode = li.product.sku
        quantity = li.invoiceQty!
        unitAmount = li.invoiceAmountNoGst / li.invoiceQty!
        accountCode = if (invoice.is[SalesInvoice]) "200" else if (li.product.isTangible) "630" else null //You cannot save this transaction using an inventory account type
        taxType = if(li.gstRate == 15) {
          if (invoice.is[SalesInvoice]) output2 else input2
        }else if (li.gstRate == 0) zeroRated
        else if (li.gstRate == null) none
        else null
        
      )
    }
    
    let extInvOrRevId = invoiceRevision.extId(service)
    
    let xeroInvOrCN = if(invoiceRevision.prev) {
      XeroCreditNote(
        creditNoteID = extInvOrRevId
        type = if (invoice.is[SalesInvoice]) accRecCredit else accPayCredit

        status = if (invoiceLineItems.all{li => li.accountCode && li.taxType}/* && invoiceRevision.dueDate) authorised else submitted
        // XeroDoc: Credit notes must have a Status of "AUTHORISED" to be available for allocation   
      )
    } else {
      XeroInvoice(
        invoiceID = extInvOrRevId

        type = if (invoice.is[SalesInvoice]) accRec else accPay

        status = if (invoiceLineItems.all{li => li.accountCode && li.taxType} && invoiceRevision.dueDate) authorised else draft
        // ??? if it isn't `draft` Xero requires AccountCode and TaxType

        contact = XeroContact(contactID = invoice.orderCounterparty?.as[Company]?.extId(service))
      )
    }
    
    xeroInvOrCN.contact = XeroContact(contactID = invoice.orderCounterparty?.as[Company]?.extId(service))

    xeroInvOrCN.lineItems = invoiceLineItems

    xeroInvOrCN.currencyCode = invoiceRevision.currency

    xeroInvOrCN.date = invoiceRevision.date
    xeroInvOrCN.dueDate = Date.now //invoiceRevision.dueDate
    
    let route = if(invoiceRevision.prev) "CreditNotes" else "Invoices"
    
    
    route.log("route:")
    xeroInvOrCN.json.log("json:")
    let _ <- if(let id = extInvOrRevId) {
      let r <- service.https("$route/$id").post(xeroInvOrCN.json)
      r.body!
    } else {
      let r <- service.https("$route").post(xeroInvOrCN.json)
      if(let rID = if(invoiceRevision.prev) r.body!.parseJson[XeroCreditNotesResponse]?.creditNotes.first.creditNoteID
         else r.body!.parseJson[XeroInvoicesResponse]?.invoices.first.invoiceID) {
        invoiceRevision.updateExtId(service, rID)
      } else {
      	throw "Xero$route push error: ${r.body!}"
      }
    }
    
    if(invoiceRevision.prev){
      if(let iId = invoice.revisions.first?.extId(service))
      if(let cnId = invoiceRevision.extId(service)) {
        let allocReq = XeroAllocation( 
          amount = invoiceLineItems.map(unitAmount * quantity).sum 
          date = invoiceRevision.date
          invoice = XeroInvoice(invoiceID = iId)
        )
        
      	let r <- service.https("CreditNotes/$cnId/Allocations").put(allocReq.json)
      }
    }
  }
}
*/