report IncomeStatement {
  field legalEntity: OurLegalEntity? 
  field from: Date = Date.now[Date[millisecond]].start(year)
  field to: Date = Date.now[Date[millisecond]].end(year)
  func baseCurrency = legalEntity?.getCurrency.alt(Currency.our)  
  view list = Ledger.between(from, to)*.items
    .filter(
          legalEntity ==? this.legalEntity
      && (subAccount.type.isIncome && account != CurrencyTrading))
    .groupBy(account = subAccount)
    .aggFuture{(acc, iss) =>
        let amount <- (iss.map(baseAmount.to[Money[baseCurrency]](date)).allCompleted)
        (-amount.sum)
     }
    .sortBy(account.number) 
    .unionFuture{
      let start: Money[baseCurrency]? <- LCurrencyTrading.at(this.from)
        .map(balance.to[Money[baseCurrency]](this.from))
        .agg{sum.as[Money[baseCurrency]]
        }.result
      let end : Money[baseCurrency]? <- (LCurrencyTrading.at(this.to)
        .map(balance.to[Money[baseCurrency]](this.to))
        .agg{sum.as[Money[baseCurrency]]
        }.result)
      [(account = LedgerSubAccount.CurrencyTrading, amount = start - end)]
    }
    .groupBy(account.type).subtotal(amount.sum)
    .total(netIncome = amount.sum)
  >> nav{
      total {
        row {label("Net Income"), netIncome >> field(showPlus = true)}
        subtotal {
          row {type, amount >> field(showPlus = true)}
          table(action = {
           if (account.template.analytic) {
              Reflection.object[AnalitIncomeStatement]("IS$(account.template)")
                .new(legalEntity = legalEntity, from = this.from, to = this.to, account = account)
                .list.open
           } else {
             Ledger.Report(account = account, legalEntity = legalEntity, from = this.from, to = this.to)
               .list.open
           }
          }) {
            account >> field(width = 0.5, background = ""), amount >> field(width = 0.3, showPlus = true)
          }
      }
  }}
}
