entity JournalEntry extends MJournal {
  func debitEntry: MLedger? = null
  func creditEntry: MLedger? = null
  
  object field gen: Int?
  system const ref field n: Int? = increment(JournalEntry.gen)
  compute number: String {
    value = "JE" + n
    width = 0.15
  }
  func title = "$number $legalEntity ${date.as[Date[day]]}"
  func journalDate: Date = date 
  ref field date: Date = Date.now[Date[millisecond]].start(day)
    
  register trading: [Ledger]? <- CurrencyTrading.trade(journal = this, amounts = entries*.amount)
  compute currencyTradingLedgerEntries = trading + trading*.as[LCurrencyTrading]*.ledgers
  func defaultEntries = [MEmptyLedger(journal = this)]
    
  view form = nav{grid(width = 1.0, labels = Top) {
    number
    date
    legalEntity
    entries >> table {
      accountEditor >> field(label = "Account", width = 0.3)
      aview >> field(label = "Analitics", width = 0.3, margin = None)
      debitEditor >> field(label = "Debit", width = 0.2)
      creditEditor >> field(label = "Credit", width = 0.2)
    }
    edit {
      add("Item") {
        entries = entries + MEmptyLedger(journal = this)
      }
    }
    currencyTradingLedgerEntries >> table(mode = Static) {
      account >> field(width = 0.6) debit >> field(width = 0.2) credit >> field(width = 0.2)
    }
  }}
  
  report Report {
    generateFilters = false
    field legalEntity: LegalEntity? {
      default = LegalEntity.ours.onlyOne
      from = LegalEntity.ours
    }
    field account: LedgerAccount? {search = true}
    field from: Date?
    field to: Date?  
    view list = JournalEntry.all.filter(
          legalEntity ==? this.legalEntity
       && (!this.account || entries.exists(account == this.account))
       && from ?<= date && date <=? to
    ) >> nav{table{
      number, date
    }}
  }
}
