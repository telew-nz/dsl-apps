report DebtReport {
  singular = "Debt"
  plural = "Debt"
  background = "#d68400"
  view list = nav(label = "Debt", background = "#d68400") {
    tabs {
      Debtor().list >> field(label = "Debtors")
      Aged().list >> field(label = "Aged")
    }
  }
  report Debtor { 
    field moneyOnly: Bool = true
    field theirDebt: Bool = true
    field ourDebt: Bool = true
    field overdueOnly: Bool = false
    field legalEntity: LegalEntity? {
      default = LegalEntity.ours.onlyOne
      from = LegalEntity.ours
    }
    field counterparty: LegalEntity?
    field currency: Currency?
    func baseCurrency = currency.or(legalEntity?.getCurrency).alt(Currency.our)
    field date: Date?

    view list = LDebt.at(date)
      .filter(
           balance
        && (!moneyOnly || account.money)
        && legalEntity ==? this.legalEntity 
        && currency ==? this.currency 
        && (theirDebt || balance < 0)
        && (ourDebt || balance > 0)
        && counterparty ==? this.counterparty
      )
      .map{debt =>
        let date = this.date.alt(Date.now)
        let origins = debt.origins.map(OriginAmount(origin = origin, dueDate = origin?.as[DebtOrigin]?.debtDueDate, amount = amount.as[Money[debt.currency]]))
        let origins1 = if (this.overdueOnly) origins.filter(debtOverdue > 0) else origins
        let amount = origins1*.amount.sum
        let baseAmount <- amount.to[Money[this.baseCurrency]](date)

        if (origins1) [(counterparty = debt.counterparty, baseAmount = baseAmount, 
         origins = if (origins1.all(!origin)) [] else origins1
        )] else []
      }
      .flatMap(_)
      .groupBy(counterparty).agg(baseAmount.sum, origins)
      .total(amount = baseAmount.sum)
     >> nav(showHeader = false) {
        total {
          row {label("Total"), space, amount}
          subtotal {
            row{counterparty, button("Print Statement", visible = counterparty && origins.exists(debtOverdue > 0)) {counterparty!.debtStatement.print} , baseAmount}
            table (action = origin?.form?.open) {
              origin?.title >> field(width = 0.5, label = "") 
              y(width = 0.35, label = "Due Date") {
                dueDate
                x {
                  overdueState >> field(visible = debtOverdue > 0)
                  debtOverdue >> field(visible = debtOverdue > 0)
                }
              }
              amount >> field(width = 0.3)
            }
          }
        }
     }
  }
  report Aged { 
    field moneyOnly: Bool = true
    field theirDebt: Bool = true
    field ourDebt: Bool = false

    field legalEntity: LegalEntity? {
      default = LegalEntity.ours.onlyOne
      from = LegalEntity.ours
    }
    field currency: Currency?
    func baseCurrency = currency.or(legalEntity?.getCurrency).alt(Currency.our)
    field groupBy: Duration[day, 0] = 30_day
    
    view list = LDebt.current
      .filter(balance 
         && (!moneyOnly || (account != UnearnedRevenues && account != PrepaidExpenses))
         && legalEntity ==? this.legalEntity 
         && (theirDebt || balance < 0)
         && (ourDebt || balance > 0)
         && currency ==? this.currency 
      )
      .flatMap(debt =>
         debt.origins.map(OriginAmount(origin = origin, dueDate = origin?.as[DebtOrigin]?.debtDueDate, amount = amount.as[Money[debt.currency]]))
      )
      .filter(dueDate && dueDate! < Date.now)
      .sortBy(dueDate!.desc)
      .map{
        let baseAmount <- amount.to[Money[this.baseCurrency]](Date.now)
        let groupStart: Duration[day, 0]? = this.groupBy*(debtOverdue/this.groupBy).floor(0)
        (origin, dueDate = dueDate!, debtOverdue, amount, baseAmount, groupStart = groupStart + 1.as[Duration[day, 0]], groupEnd = groupStart + this.groupBy)
      }
      .groupBy(groupStart, groupEnd).subtotal(baseAmount.sum)
      .total(amount = baseAmount.sum)
    >> nav(showHeader = false) {
        total {
          row{label("Total"), space, space, amount}
          subtotal {
            row{groupStart.unformattedString + " â€” " + groupEnd.unformattedString + " days overdue" >> field(span = 3), baseAmount}
            table (action = origin?.form?.open) {
              origin?.title >> field(width = 0.5, label = "") 
              debtOverdue >> field(label = "Overdue", width = 0.15)
              dueDate
              amount >> field(width = 0.3)
            }
          }
        }
      }
  }
}
