report IncomeStatement {
  field legalEntity: LegalEntity? = (LegalEntity.ours.onlyOne) {from = LegalEntity.ours}
  field from: Date = Date.now[Date[millisecond]].start(year)
  field to: Date = Date.now[Date[millisecond]].end(year)
  func baseCurrency = legalEntity?.getCurrency.alt(LegalEntity.ours.first!.getCurrency)  
  view list = GeneralLedger.between(from, to)*.items
    .filter(
          legalEntity ==? this.legalEntity
      && (account.type.isIncome && account != CurrencyTrading))
    .groupBy(account)
    .agg(amount = -baseAmount.sum)
    .sortBy(account.number) 
    .union{
      let start: Money[baseCurrency]? <- LCurrencyTrading.at(this.from)
        .map(balance.to[Money[baseCurrency]](this.from))
        .agg{sum.as[Money[baseCurrency]]
        }.result
      let end : Money[baseCurrency]? <- (LCurrencyTrading.at(this.to)
        .map(balance.to[Money[LegalEntity.ours.first!.getCurrency]](this.to))
        .agg{sum.as[Money[baseCurrency]]
        }.result)
      [(account = LedgerAccount.CurrencyTrading, amount = start - end)]
    }
    .groupBy(account.type).subtotal(amount.sum)
    .total(netIncome = amount.sum)
  >> nav{
      total {
        row {label("Net Income"), netIncome}
        subtotal {
          row {type, amount}
          table(action = try? Reflection.object[AnalitIncomeStatement]("IS$(account)")
             .new(legalEntity = legalEntity, from = this.from, to = this.to)
            .list.open) {
          account >> field(width = 0.5, background = ""), amount >> field(width = 0.3)
        }
      }
  }}
}
