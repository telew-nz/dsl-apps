report CashFlowReport {
  plural= "Cash Flow"
  background = "#d68400"
  field legalEntity: OurLegalEntity? 
  field from: Date = Date.now[Date[millisecond]].start(year)
  field to: Date = Date.now[Date[millisecond]].end(year)
  field currency: Currency?
  func baseCurrency = currency.or(legalEntity?.getCurrency).alt(Currency.our)
    
  impl view list = LCash.between(from, to)
    .filter(start.legalEntity ==? this.legalEntity && start.currency ==? this.currency && start.finAccount.ledgerAccount != CurrentAccounts)
    .map{i =>
      let start <- i.start.balance.to[Money[this.baseCurrency]](this.from)
      let end <- (i.start.balance + i*.items*.amount.sum).to[Money[this.baseCurrency]](this.to)
      (start, end, i.items)
    }
    .total(start.sum, end.sum).map((start, end, items*.items))
    .flatQuery{i =>
      i.items.query.filter(!isCorrection)
       .map{a => 
         let cfs <- a.cashFlows
         cfs.oneByOne{j => 
           if (j.amount.unit! != this.baseCurrency) {
             let amount <- j.amount.to[Money[this.baseCurrency]](a.date)
             CashFlowAmount(cashFlow = j.cashFlow, amount = amount)
           } else {
             j
           }
         }
       }
       .flatMap[CashFlowAmount](_)
       .total(increase = amount.sum)
       .flatMap{j =>
         j.items
           + if (let loss = i.end - i.start - j.increase) {
               [CashFlowAmount(cashFlow = CashFlow.Exchange, amount = loss.as[Money[this.baseCurrency]])] 
             }
       }
       .groupBy(cashFlow).agg(amount.sum)
       .sortBy(cashFlow) 
       .groupBy(cashFlow.type).subtotal(amount = amount.sum)
       .total(increase = amount.sum, start = i.start, end = i.end)
    }
  >> nav{
    total {
      row {label("Begining Cash Balance"), start}
      subtotal {
        row (background = type.props.background) {type, amount >> field(showPlus = true)}
        table {
          cashFlow >> field(width = 0.5, background = ""), amount  >> field(showPlus = true, width = 0.3)
        }
      }
      row {label("Increase or Decrease in Cash"), increase >> field(showPlus = true)}
      row {label("Ending Cash Balance"), end}
    }
  }
}

