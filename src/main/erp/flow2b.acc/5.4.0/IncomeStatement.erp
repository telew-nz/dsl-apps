report IncomeStatement {
  field legalEntity: OurLegalEntity? 
  field from: Date = Date.now[Date[millisecond]].start(year)
  field to: Date = Date.now[Date[millisecond]].end(year)
  func baseCurrency = legalEntity?.getCurrency.alt(Currency.our)  
  
  func baseQuery = {
    Ledger.between(from, to)*.items
      .filter(
            legalEntity ==? this.legalEntity
        && (subAccount.type.isIncome && account != CurrencyTrading))
      .groupBy(account = subAccount)
      .aggFuture{(acc, iss) =>
          let items <- iss.map{
            let a <- baseAmount.to[Money[baseCurrency]](date)
            (amount = a, claimableAmount = a*claimable)
          }.allCompleted
          (-items*.amount.sum, -items*.claimableAmount.sum)
       }
      .sortBy(account.number) 
      .unionFuture{
        let start: Money[baseCurrency]? <- LCurrencyTrading.at(this.from)
          .filter(legalEntity ==? this.legalEntity)
          .map(balance.to[Money[baseCurrency]](this.from))
          .agg{sum.as[Money[baseCurrency]]
          }.result
        let end : Money[baseCurrency]? <- (LCurrencyTrading.at(this.to)
          .filter(legalEntity ==? this.legalEntity)
          .map(balance.to[Money[baseCurrency]](this.to))
          .agg{sum.as[Money[baseCurrency]]
          }.result)
        if (let a = start - end) {
          [(account = 
              if (a > 0) LedgerSubAccount.CurrencyExchangeGain 
              else LedgerSubAccount.CurrencyExchangeLoss, amount = a, claimableAmount = a)]
        }
      }.query
  }
  back func netIncome: Future[Money[baseCurrency]?] = {
    baseQuery.agg(amount.sum).result
  }
  back func taxIncome: Future[Money[baseCurrency]?] = {
    baseQuery.agg(claimableAmount.sum).result
  }
  back func accountSubTypes: Future[[LedgerAccountSubType : Income]?] = {
    let rs <- baseQuery.result
    rs.groupBy(account.subType).agg(Income(amount = amount.sum, taxAmount = claimableAmount.sum))
  }
  
  view list = 
    baseQuery
    .groupBy(account.type).subtotal(amount.sum, claimableAmount.sum)
    .total(netIncome = amount.sum, taxIncome = claimableAmount.sum)
  >> nav{
      total {
        row {label("Net Income"), netIncome >> field(showPlus) taxIncome >> field(showPlus)}
        subtotal {
          row {type, amount >> field(showPlus) claimableAmount >> field(showPlus)}
          table(action = {
           if (account.template.analytic) {
              Reflection.object[AnalitIncomeStatement]("IS$(account.template.name)")
                .new(legalEntity = legalEntity, from = this.from, to = this.to, account = account)
                .list.open
           } else {
             Ledger.Report(account = account, legalEntity = legalEntity, from = this.from, to = this.to)
               .list.open
           }
          }) {
            account >> field(width = 0.4, background = "")
            amount >> field(width = 0.3, showPlus, label = "Income")
            claimableAmount >> field(width = 0.3, showPlus, label = "Tax Income")
          }
      }
  }}
}

class Income {
  field amount: Money?
  field taxAmount: Money?
}