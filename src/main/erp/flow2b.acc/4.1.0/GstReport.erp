report GstReturn {
  plural = "GST Return"
  field legalEntity: OurLegalEntity =? onlyOne
  field start: Date = Date.now[Date[millisecond]].start(year)
  field end: Date = Date.now[Date[millisecond]].end(year)
  object func processOrigin(legalEntity: OurLegalEntity, start: Date, end: Date, origin: Journal?, items: [LTax]) = {
    let debts = LDebt.all.filter(d => d.isSetoff && d.origin == origin && d.legalEntity == legalEntity).result.get
    var taxes: [Percent[2]?? : TaxedAmount]? = (null)
    var fullAmount: Money? = 0
    var paidAmount: Money? = 0
    var needsAdjustments = false
    var ret: [(date: Date, journal: Journal, category: GstReturnCategory, amount: TaxedAmount)]? = []
    (items + debts).sortBy(date, _.is[LDebt]).foreach{i =>
      if (let debt = i.as[LDebt]) {
        let newPaidAmount = paidAmount + debt.amount
        if (let a = fullAmount) {
          if (start <= debt.date && debt.date <= end) {
            let p1 = (paidAmount.as[Dec[16]]/a).min(1)
            let p2 = (newPaidAmount.as[Dec[16]]/a).min(1)
            ret = ret + taxes.values.map(t => (
              debt.date, 
              debt.journal,
              GstReturnCategory(origin!.as[DebtOrigin]!.isPurchase, t.isAdjustment && needsAdjustments), 
              t.mul(p2) + t.mul(-p1)
            ))
          } else {
            needsAdjustments = true
          }
        }
        paidAmount = newPaidAmount
      } else if (let tax = i.as[LTax]) {
        if (tax.isInstantPayment) {
          if (start <= tax.date && tax.date <= end) {
            ret = ret + (
              tax.date, 
              tax.journal,
              GstReturnCategory(tax.taxedAmount > 0, false), 
              tax.toTaxedAmount
            )
          }
        } else {
          let newFullAmount = fullAmount + tax.taxedAmount + tax.amount
          taxes = taxes.updated(tax.rate, {old =>
            let n = if (let o = old) o + tax.toTaxedAmount else tax.toTaxedAmount
            if (paidAmount && tax.rate && start <= tax.date && tax.date <= end) {
              let p1 = if (let oa = fullAmount) (paidAmount.as[Dec[16]]/oa).min(1)
              let p2 = if (let na = newFullAmount) (paidAmount.as[Dec[16]]/na).min(1)
              ret = ret + (
                tax.date, 
                tax.journal,
                GstReturnCategory(origin!.as[DebtOrigin]!.isPurchase, needsAdjustments && tax.isAdjustment), 
                if (let o = old) n.mul(p2) + o.mul(-p1) else n.mul(p2)
              )
            }
            n
          })
          fullAmount = newFullAmount
        }
      }
    }
    ret
  }
  view list = LTax.all
    .filter(tax == Gst && legalEntity == this.legalEntity && 
            (origin?.is[DebtOrigin] || isInstantPayment))
    .groupBy(origin)
    .flatMap{o =>
      GstReturn.processOrigin(legalEntity, start, end, o.origin, o.items)
    }
    .groupBy(category, rateName = if (!amount.rate) "Exempt" else amount.rate!.as[UPercent[2]].toString, rate = amount.rate)
    .agg(tax = amount*.baseTax.sum, taxedAmount = amount*.baseTaxedAmount.sum)
    .sortBy(category, rate)
    .groupBy(category).subtotal(tax.sum, filter(rate)*.taxedAmount.sum)
    .total(tax.sum, taxedAmount.sum)
  >>  
  nav {
    total {
      row {space, taxedAmount >> field(showPlus = true), tax >> field(showPlus = true), taxedAmount + tax  >> field(showPlus = true)}
      subtotal {
        row {category, taxedAmount >> field(showPlus = true), tax >> field(showPlus = true), taxedAmount + tax  >> field(showPlus = true)}
        table (action = GstAudit(legalEntity = this.legalEntity, start = this.start, end = this.end, gstFilter = true, rate = rate, category = category).list.open) {
          rateName >> field(width = 0.4, showEmpty = true, align = Right) 
          taxedAmount >> field(width = 0.3, showEmpty = true showPlus = true, label = "Taxed Amount excl GST")
          tax >> field(width = 0.3, showEmpty = true, label = "GST Amount", showPlus = true)
          taxedAmount + tax >> field(width = 0.3, showEmpty = true, label = "Amount incl GST", showPlus = true)
        }
      }
    }
  }
}

 
enum GstReturnCategory {
  case Sales {background = "#fcc"}
  case SalesAdjustments {background = "#fcc"}
  case Purchases {background = "#dea"}
  case PurchaseAdjustments {background = "#dea"}
  
  object func apply(isPurchase: Bool, isAdjustment: Bool): GstReturnCategory = {
    if (isPurchase) {
      if (isAdjustment) PurchaseAdjustments else Purchases
    } else {
      if (isAdjustment) SalesAdjustments else Sales
    }
  }
}
