entity JournalEntry extends MJournal {
  func debitEntry: MLedger? = try? debit
  func creditEntry: MLedger? = try? credit
  
  object field gen: Int?
  system const ref field n: Int? = increment(JournalEntry.gen)
  compute number = ("J" + n) {width = 0.15}
  func title = number
  func journalDate: Date = date 
  field date: Date = Date.now[Date[millisecond]].start(day)
  
  
  list compute debit: MLedger = entries.first
  list compute credit: MLedger = entries.last
    
  register trading: [Ledger]? <- CurrencyTrading.trade(journal = this, debit = debit.debit, credit = credit.credit)
  compute currencyTradingLedgerEntries = trading + trading*.as[LCurrencyTrading]*.ledgers
  func defaultEntries = [MEmptyLedger(journal = this, isDebit = true), MEmptyLedger(journal = this)]
    
  view form = nav{grid(width = 1.0, labels = Top) {
    number
    date
    legalEntity
    row {
      debit.debitView >> field(label = "Debit", margin = LeftRight)
      credit.creditView >> field(label = "Credit", margin = LeftRight)
    }
    currencyTradingLedgerEntries >> table(mode = Static) {
      account >> field(width = 0.5) debit >> field(width = 0.25) credit >> field(width = 0.25)
    }
  }}
  report Report {
    generateFilters = false
    field legalEntity: LegalEntity =? (LegalEntity.ours.onlyOne) {from = LegalEntity.ours}
    field account: LedgerAccount? {search = true}
    field debit: LedgerAccount? {search = true}
    field credit: LedgerAccount? {search = true}
    field from: Date?
    field to: Date?  
    view list = JournalEntry.all.filter(
          legalEntity == this.legalEntity
       && (debit.account ==? this.account || credit.account ==? this.account)
       && debit.account ==? this.debit
       && credit.account ==? this.credit
       && from ?<= date && date <=? to
    ) >> nav{table{
      number, date, debit.account >> field(label = "Debit", width = 0.3), credit.account >> field(label = "Credit", width = 0.3), debit.amount
    }}
  }
}
