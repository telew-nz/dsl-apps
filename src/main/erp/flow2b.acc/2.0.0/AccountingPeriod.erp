entity AccountingPeriod extends Journal {
  object field gen: Int?
  system const ref field n: Int? = increment(gen)
  compute number = ("PRD" + n) {width = 0.15}
  compute journalDate: Date = end
  func title = "$number $legalEntity $(start.as[Date[day]])"
  ref field legalEntity: LegalEntity =? (LegalEntity.ours.onlyOne) {from = LegalEntity.ours}
  ref field start: Date = Date.now[Date[second]].start(year)
  field end: Date = Date.now[Date[second]].end(year)
  field status: PeriodStatus = Opened
  
  register register: PeriodClosingRegister? = {
    if (status == Closed) PeriodClosingRegister(journal = this, date = end) 
    else null
  }
  compute ledgerEntries: [Ledger]? = (register?.ledgers.filter(!_.is[LCurrencyTrading]) + register?.ledgers*.as[LCurrencyTrading]*.ledgers).sortBy(account.number)
    
  view form = nav{grid{
    number
    row{start, end}
    status
    ledgerEntries >> table(mode = Static) {
      account >> field(width = 0.3) aview >> field(width = 0.3) debit >> field(width = 0.2) credit >> field(width = 0.2)
    }
  }}
}

register PeriodClosingRegister {
  order field date: Date
  field journal: AccountingPeriod
  register ledgers: [Ledger]? = {
    let trading: [Ledger]? = LCurrencyTrading.at(this.date, false).filter(!isBase).map{i =>
       LCurrencyTrading(journal = this.journal, currency = i.currency, isClosing = true).as[Ledger]!
    }
    let summary: Ledger = LIncomeSummary(journal = this.journal, isClosing = true)
    let others: [Ledger]? = LedgerAccount.all.filter(type.isIncome || closeWithPeriod).
      flatMap(acc => 
         Reflection.object[Ledger]("L$acc").at(this.date, false).sortBy(id).filter(balance).map{i =>
           i.copy(journal = this.journal, isClosing = true, date = this.date, trAmount = 0)
         }
      ) 
      
    others + trading + summary
  }
}

enum PeriodStatus {
  case Opened {background = "#ed9"} 
  case Closed {
    color = "white"
    background = "#090"
  }
}