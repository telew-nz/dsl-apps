report GstReturn {
  plural = "GST Return"
  field legalEntity: LegalEntity {
    default =? LegalEntity.ours.onlyOne
    from = LegalEntity.ours
  }
  field start: Date = Date.now[Date[millisecond]].start(year)
  field end: Date = Date.now[Date[millisecond]].end(year)
    
  view list = LDebt.between(start, end)
    .filter(
         start.legalEntity == this.legalEntity
      && (start.account == AccountsReceivable || start.account == AccountsPayable)
    )
    *.items
    .filter(
      isSetoff
    )
    .map {debt =>
      let rates <- LTax.all
        .filter(tax == Gst && origin == debt.origin && date <= debt.date)
        .groupBy(rate).agg(gstAmount = amount.sum.abs, baseGstAmount = baseAmount.sum.abs, taxedAmount.sum, baseTaxedAmount.sum)
        .result
      let rates1 = {
        if (let fullTaxedAmount = rates.map(gstAmount + taxedAmount).sum) {
          if (let unpaidAmount = debt.origins.find(origin == debt.origin)?.amount.as[Money[debt.currency]]) {
            let p1 = (fullTaxedAmount - unpaidAmount - debt.amount.abs).as[Dec[16]]/fullTaxedAmount
            let p2 = (fullTaxedAmount - unpaidAmount).as[Dec[16]]/fullTaxedAmount
            rates.map {r =>
              (r.rate, 
               gstAmount = r.gstAmount,
               baseGstAmount = r.baseGstAmount*p2 - r.baseGstAmount*p1, 
               taxedAmount = r.taxedAmount, 
               baseTaxedAmount = r.baseTaxedAmount*p2 - r.baseTaxedAmount*p1)
            }
          } else if (let prevPaidAmount = fullTaxedAmount - debt.amount.abs) {
            let p = prevPaidAmount.as[Dec[16]]/fullTaxedAmount
            rates.map {r =>
              (r.rate, 
                 gstAmount = r.gstAmount,
                 baseGstAmount = r.baseGstAmount - r.baseGstAmount*p, 
                 taxedAmount = r.taxedAmount, 
                 baseTaxedAmount = r.baseTaxedAmount - r.baseTaxedAmount*p)
            }
          } else {
            rates
          }
        } else rates
      } 
      let sign = if (debt.amount > 0) -1 else 1
      rates1.map(rate, gstAmount = baseGstAmount*sign, taxedAmount = baseTaxedAmount*sign)
    }
    .flatMap(_)
    .filter(rate)
    .groupBy(rate = rate!.as[Percent[2]]).agg(taxedAmount = taxedAmount.sum, gstAmount.sum)
    .total(taxedAmount.sum, gstAmount.sum)
  >>  
  nav {
    total {
      row {space, taxedAmount, gstAmount}
      table {
        rate >> field(width = 0.2, showEmpty = true) 
        taxedAmount >> field(width = 0.3, showEmpty = true)
        gstAmount >> field(width = 0.3, showEmpty = true)
      }
    }
  }
}
 