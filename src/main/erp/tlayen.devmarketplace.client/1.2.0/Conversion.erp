object MarketplaceClientUtilities {
	
    func getUsersToAdd: Future[[User]?] = {
    	let marketplaceUserLogins <- User.all.inWorkspaceFullWid(17, 52).map(login).result
        let usersToAdd <- User.all.filter(u => !marketplaceUserLogins.exists(_ == u.login)).result
        usersToAdd
    }
    
    func addUserToMarketplace(name: String, login: String): Future[[String]?] = {
    	Workspace.all.inWorkspaceFullWid(17, 52).map(_ => {
            let p = Person(name = "Placeholder Person Name")
            p.name = name
            p.user = User(login = "placeholder_user_login")
            p.user!.login = login
            p.save
            "Done saving user ${name}/${login}"
		}).result
    }
    
}


back object Conversion extends IConversion {

	impl func install: Future[Any] = {
      	let usersToAdd <- MarketplaceClientUtilities.getUsersToAdd
        usersToAdd.foreach { CreateInvitationJob(user = _).enqueue }
    }

}