object MarketplaceService extends SystemService {
    impl func title = "Marketplace Service"
    impl func roles: [Role]? = [Admin]
    override func isPublic: Bool = true
    impl view form = nav{grid(labels = Top){
       issuesView
       serviceState
       errorsCount >> field(editMode = AlwaysRead)
    }}
    impl func defaultDebug = true
}


class CreateInvitationJob extends SystemJob {

	impl field service = MarketplaceService
    field user: User
    
    impl func do: Future[Any] = {
    	if (Workspace.current.authId != "17_50") {
            let invitation = Invitation(invitedUser = user)
            Activity.setMainEntity(invitation)
            Activity.current!.to(user)
            Activity.comment("Automatically generated invitation.")
            invitation.save
        }
    }

}


class RejectAdmitionJob extends SystemJob {
  	
    impl field service = MarketplaceService
    field invitation: Invitation
    field user: User
    field rejectionReason: Text?
    
    impl func do: Future[Any] = {
        Activity.setMainEntity(invitation)
        Activity.comment("Admition rejected by ${user.mention}. ${
                    	if (let v = rejectionReason) "Reason: ${v}."
                        else "No reason given."
                    }")
		invitation.state = Canceled
        invitation.save
    }
}


class AdmitUserJob extends SystemJob {
  	impl field service = MarketplaceService
  	
    field invitation: Invitation
    field user: User
    field rejectionReason: Text?
    
    impl func do: Future[Any] = {
        Activity.setMainEntity(invitation)
        Activity.comment("Admition accepted by ${user.mentionPublic}.\n")
		invitation.state = Closed
        invitation.save
    }
}