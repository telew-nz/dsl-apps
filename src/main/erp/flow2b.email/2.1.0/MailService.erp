entity MailService extends SystemService with WorkspaceEndpoint[MailHttpData] {
  func title = "Mail $(domains.join(", "))"
  ref field domains: [String]
  field defaultRecipients: [Addressee] {
    label = "Recipients when no address matches"
    singular = "Recipient"
  } 
  func keys: [String] = domains
  func router = MailRouter
  func service = this
  func process(request: IncomingHttpRequest, data: MailHttpData): Future[Void] = {
    let a = Activity.current!
    a.channel = EMail
    a.messageId = data.messageId
    if (let from = (data.from("<" .. ">")).trim.or(data.from).or(data.mailFrom).lower) {
      a.address = from
      a.from = Actor.all.find(contacts.emails.contains(from)).result.get.or(
        CompanyPerson.all.find(contacts.emails.contains(from)).result.get?.person
      ).alt(Person(title = (data.from[ .. "<")).trim.alt(data.from!), contacts = Contacts(emails = [from])).save)
    }
    
    let refs = data.subject.all(Regex("\b[A-Z]{1,3}[0-9]{3,}\b")).flatMap {n =>
      Entity.all.filter(entityNumber == n).result.get
    }
    let item = if (let r = refs.onlyOne) r else Discussion(subject = data.subject.alt("No Subject"))
    a.from?.join(item)
    a.entities = [item] 
      + (if (refs.onlyOne) refs)
      + data.attachments.map(a => File(name = a.filename, contentType = a.contentType, content = a.data.decodeMimeBase64).save)
    let to: String = (data.to("<" .. ">")).trim.or(data.to).alt(data.rcptTo).lower
    let recipient: Addressee? = CompanyPerson.all.find(contacts.emails.contains(to)).result.get?.person?.as[Addressee]
          .or(IContactGroup.all.find(contacts.emails.contains(to)).result.get)
    let men: Text = (if (let recipient) [recipient] else defaultRecipients).map(atMention).join(" ").as[Text]!
            
    let mhtml: Html? = "<p>$men</p>"
    let toHtml: Html? = if (!recipient) "<p>To: $to</p>"                                  
    let text: Text? = if (let html = data.htmlBody) {
      let d = html.parseHtml
      d.select("blockquote:last-child, gmail_extra")*.delete
      let body = d.select("body")!.first
      body.prepend(mhtml)
      if (!recipient) body.prepend(toHtml)
      a.comment = d.innerHtml
    } else {
      var r: Text? = data.plainBody
      if (!recipient) r = toHtml + r
      r = mhtml + r
      a.comment = r
    }
  }
  view form = nav{grid(labels = Top){
    domains
    defaultRecipients
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
}
extend enum CommChannel {
  case EMail
}
