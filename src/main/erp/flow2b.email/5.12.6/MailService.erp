entity MailService extends SystemService {
  impl func title = "Mail $(domains.join(", "))"
  field defaultRecipients: [User]? {
    label = "Recipients when no address matches"
    singular = "Recipient"
  }
  override func active = userEnabled 
  ref field domains: [String]
  field template: MailTemplate? {default = MailTemplateStandard() availableFor = All }
  field sendingToken: String? {availableFor = All}
  system field receiverEndpoint: MailReceiverEndpoint inline by service
  system field statusEndpoint: MailStatusEndpoint inline by service
  back func canSend = sendingToken == object.token(domains)
  
  back func https(path: Url): HttpRequest = {
    HttpRequest(ssl = true, url = "mail.flow2b.com/api/v1/$path")
     .header("X-Server-API-Key", object.apiKey)
  }
  object back func apiKey = "sbdQgh678c0sCB3RiHIajyrH"
  object back func token(domains: [String]): String = domains.join(", ").hmac(apiKey).sha1.base64
   
  impl event onSave = {
    if (serviceState == Active && !deleted && !created && updated(serviceState)) {
      Activity.all.filter(deliveries.exists(d => d.status == Pending && d.channel == EMail)).foreach{a =>
        IEmailContact.resend(a)
      }.result
    }
  }
  
  impl view form = nav{grid(labels = Top){
    issuesView
    domains
    defaultRecipients
    sendingToken
    template
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
  
  back func send(request: MailSendRequest): Future[String] = {
    let r <- https("send/message").post(request.json)
    let response = r.body!.parseJson[MailSendResponse]
    if (response.status != "success") throw r.body.toString
    
    response.data!.messageId
  }
}
extend enum CommChannel {
  case EMail {background = "#fff" icon = "envelope" }
}
