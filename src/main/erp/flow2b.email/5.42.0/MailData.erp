class MailHttpData {
  extFieldNaming = Underscore
  field postalId: Int {extName = "id"}
  field rcptTo: String
  field mailFrom: String?
  field token: String
  field subject: String?
  field messageId: String?
  field timestamp: Duration[second]
  field size: String?
  field spamStatus: String?
  field bounce: Bool 
  field receivedWithSsl: Bool
  field to: String?
  field cc: String?
  field from: String?
  field date: String?
  field inReplyTo: String?
  field replyTo: String?
  field references: String?
  field listUnsubscribe: Url?
  
  field flow2bWorkspace: String?
  field flow2bEntity: String?
  field flow2bId: String?
  field flow2bFromType: String?
  field flow2bFromCompany: String?
  
  field htmlBody: Text?
  field attachmentQuantity: Int?
  field plainBody: PlainText? 
  field repliesFromPlainBody: PlainText?
  field attachments: [MailAttachment]?
  
  back func toExtMsgContact(type: String?, company: String?, address: String?): ExtMsgContact = {
    if (let from = (address("<" .. ">")).trim.or(address.trim).lower
        where EmailContact.isAddressValid(from)
    ) {
      ExtMsgContact(channel = EMail, name = (address[ .. "<")).trim.dropPrefix('"').dropSuffix('"').trim, address = from, type = type, company = company)
    } else {
      ExtMsgContact(channel = EMail, name = address, type = type, company = company)
    }
  }
  back func toExtMsg: ExtMsg = {
    let from = {
      let c = toExtMsgContact(flow2bFromType, flow2bFromCompany, replyTo.or(from))
      if (c.address) c else toExtMsgContact(flow2bFromType, flow2bFromCompany, mailFrom)
    }
    let to0 = toExtMsgContact("", "", rcptTo)
    ExtMsg(
      date = Date.utc(1970, 1, 1) + timestamp.as[Duration[second]]
      channel = EMail
      messageId = messageId
      isSpam = spamStatus != "NotSpam"
      from = from
      to = to0
      cc = (to + "," +  cc)
        .split(",")
        .mapOpt(_.trim)
        .map(s => toExtMsgContact("", "", s))
        .filter(_.address != to0.address)
      subject = subject
      richText = htmlBody.replace(Regex("<p class='ampimg' style='display:none;visibility:none;margin:0;padding:0;line-height:0;'>.[^<]+</p>"), '')
      plainText = plainBody
      refMessageIds = references
        .split(">").mapOpt(trim.dropPrefix(",").trim.dropPrefix("<").trim).reverse
      flow2b = if (let flow2bWorkspace, let flow2bEntity, let flow2bId) {
        ExtMsgFlow2b(workspace = flow2bWorkspace, dslType = flow2bEntity, id = flow2bId)
      }
      attachs = attachments.map{a => 
        ExtMsgAttach(name = a.filename.alt("Untitled"), contentType = a.contentType, content = a.data.decodeMimeBase64)
      }
      unsubscribes = listUnsubscribe.trim.split(">").mapOpt(trim.dropPrefix(",").trim.dropPrefix("<").as[Url])
    )
  }
}

class MailAttachment {
  extFieldNaming = Underscore
  field filename: String?
  field contentType: String?
  field size: Int?
  field data: String?
}
                   