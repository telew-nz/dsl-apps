inline entity MailReceiverEndpoint extends WorkspaceEndpoint[MailHttpData] {
  impl field service: MailService by receiverEndpoint
  
  impl func keys: [String] = service.domains
  impl func router = MailRouter
  impl func dependsOnRegisters = false
  
  impl func process(request: IncomingHttpRequest, data: MailHttpData): Future[Void] = {
    guard (data.messageId) else return {}
    
    let a = Activity.current!
    a.channel = EMail
    
    let isSpam = data.spamStatus != "NotSpam"
    let to: String = (data.rcptTo("<" .. ">")).or(data.rcptTo).trim.lower!
    let recipients0: [Contact]? = EmailContact.all.filter(email.lower == to).result.get*.addressee*.systemContact
    let recipients: [Contact]? = {
      if (let recipients1 = recipients0*.as[Dashboard]) recipients1
      else if (let recipients1 = recipients0*.as[IContactGroup]) recipients1
      else if (let recipients0) recipients0 
      else service.defaultRecipients
    }
    guard (let recipients) else return {}
    
    let men: Text = recipients*.atMention.join(" ").as[Text]

    let mhtml: Html? = "<p>$men</p>"
    let toHtml: Html? = if (!recipients0) "<p>To: $to</p>"    

    if (let copyOf = Activity.findByMessageId(data.messageId)) return {
      a.from = copyOf.from
      a.comment = toHtml + mhtml
      a.entities = copyOf.entities
    } 
    
    a.messageId = data.messageId
    if (let from = (data.from("<" .. ">")).trim.or(EmailContact.filterAddress(data.from.trim)).or(data.mailFrom.trim).lower) {
      if (EmailContact.isAddressValid(from)) {          
        a.from = IEmailContact.all.find(email.lower == from).result.get.alt(
          RawEmailContact(addresseeName = (data.from[ .. "<")).trim.alt(data.from!).trim.dropPrefix('"').dropSuffix('"').trim, email = from).save)
      } else {
        //"Email address is invalid $from. Candidated ${data.from} ${data.mailFrom}".log
      }
    }

    let refMessage = data.references
      .split(">").mapOpt(trim.dropPrefix(",").trim.dropPrefix("<")).reverse
      .mapOpt{refMessageId =>
        Activity.findByMessageId(refMessageId.dropPrefix("<").dropSuffix(">"))
      }.first
    let refs: [Entity]? = {
      if (let refMessage) [refMessage.entities.first]
      else {
        Entity.findReferences(data.subject)
      }
    }
    let item = {
      if (let r = refs.onlyOne) r 
      else {
        let domain = a.from?.as[IEmailContact]?.email("@" .. ]
        let sub0: EmailSubscription? = {
          if (domain) EmailSubscription.all.find(e => e.domain == domain).result.get                           
        }
        if (let listUnsubscribes = data.listUnsubscribe.trim.split(">").mapOpt(trim.dropPrefix(",").trim.dropPrefix("<"))) {
          let sub = sub0.alt {
            EmailSubscription(
              title = a.from?.as[EmailContact]?.addresseeName.or(domain).alt("Untitled"),
              domain = domain
            )
          }
          sub.listUnsubscribe = listUnsubscribes.find(startsWith("http://") || startsWith("https://")).alt(listUnsubscribes.first)
          sub.save
        } else if (let sub = sub0) {
          sub
        } else {
          Ticket(
              status = if (isSpam) Canceled else Entered,
              subject = (if (isSpam) "SPAM: ") + data.subject.alt("No Subject"), 
              roles = if (let r = recipients*.as[Dashboard]*.role.toSet) r else recipients*.as[RoleContactGroup]*.role.toSet, 
              isEmail = true).save
        }
      }
    }
    a.from?.join(item)
    var files = data.attachments.map(a => File.obj(a.filename.alt("Untitled")).new(name = a.filename.alt("Untitled"), contentType = a.contentType, content = a.data.decodeMimeBase64).save)

    let text: Text? = if (let html = data.htmlBody) {
      let d = html.parseHtml
      if (refs) clean(d)
      let body = d.select("body")!.first
      body.prepend(mhtml)
      if (!recipients0) body.prepend(toHtml)
      let ret = d.innerHtml
      if (ret.length > 30000) {
        files = [FileGeneric(name = "Content.html", contentType = "text/html", content = html.toData)] + files
        a.comment = toHtml + mhtml
      } else {
        a.comment = ret
      }
    } else {
      var r: Text? = data.plainBody
      if (!recipients0) r = toHtml + r
      r = mhtml + r
      if (r.length > 30000) {
        files = [FileGeneric(name = "Content.txt", contentType = "text/plain", content = data.plainBody.toData)] + files
        a.comment = toHtml + mhtml
      } else {
        a.comment = r
      }
    }
    a.entities = [item] 
      + a.from?.realEntity.toSeq
      + (if (!refs.onlyOne) refs)
      + files
  }
                                                
  back func clean(elem: HtmlElement): Void = {
    if (let quotes = elem.select("blockquote:last-child, br:last-child, gmail_quote")) {
      quotes*.delete
      clean(elem)
    }
  }
}