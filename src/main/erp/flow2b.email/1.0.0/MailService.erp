entity MailService extends SystemService with WorkspaceEndpoint[MailHttpData] {
  func title = "Mail $(domains.join(", "))"
  ref field domains: [String]
  field defaultRecipients: [Addressee] {
    label = "Recipients when no address matches"
    singular = "Recipient"
  } 
  func keys: [String] = domains
  func router = MailRouter
  func service = this
  func process(request: IncomingHttpRequest, data: MailHttpData): Future[Void] = {
    let a = Activity.current!
    a.channel = EMail

    if (let f = data.from.first, let from = f.email.lower) {
      a.address = from
      a.from = Actor.all.find(contacts.emails.contains(from)).result.get.or(
        CompanyPerson.all.find(contacts.emails.contains(from)).result.get?.person
      ).alt(Person(title = f.name.alt(from), contacts = Contacts(emails = [from])).save)
    }
    let text = data.parts.find(contentType == "text/plain")?.content.replace("\n", "\n\n")
    let refs = data.subject.all(Regex("\b[A-Z]{1,3}[0-9]{3,}\b")).flatMap {n =>
      Entity.all.filter(entityNumber == n).result.get
    }
    let item = if (let r = refs.onlyOne) r else Discussion(subject = data.subject.alt("No Subject"))
    a.from?.join(item)
    a.entities = ([item] 
      + (if (refs.onlyOne) refs)
      + data.attachments.map(File(name = filename, contentType = contentType, content = content.decodeBase64).save)
      + data.parts.filter(contentType != "text/plain").map(File(name = "content.html", contentType = contentType, content = content.toData).save))
    let recipients: [Addressee]? = data.to.mapOpt {t =>
      if (let to = t.email.lower) {
        CompanyPerson.all.find(contacts.emails.contains(to)).result.get?.person?.as[Addressee]
          .or(IContactGroup.all.find(contacts.emails.contains(to)).result.get)
      }
    }
    
    a.comment((if (recipients) recipients else defaultRecipients).map(atMention).join(" "))
    a.comment(text)
    //a.data = MailData(data)
  }
  view form = nav{grid(labels = Top){
    domains
    defaultRecipients
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
}
extend enum CommChannel {
  case EMail
}
