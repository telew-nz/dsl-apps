object MailStatusRouter extends WorkspaceRouter[WebhookMailStatusEvent] {
  impl back func parse(request: IncomingHttpRequest): WebhookMailStatusEvent = {
    request.body.as[Data]!.parseJson[WebhookMailStatusEvent]
  }
  impl back func keys(request: IncomingHttpRequest, data: WebhookMailStatusEvent): [String]? = {
    if (data.payload.message.direction != "incoming" && data.payload.message.tag) if (let e = (data.payload.message.from('@' .. ]).lower)  [e]
  }
}
        
inline entity MailStatusEndpoint extends WorkspaceEndpoint[WebhookMailStatusEvent] {
  impl field service: MailService by statusEndpoint
  
  impl func dependsOnRegisters = false
  impl func keys: [String] = service.domains
  impl func router = MailStatusRouter
  impl func process(request: IncomingHttpRequest, data: WebhookMailStatusEvent): Future[Any] = {
    let message = data.payload.message
    if (let tag = message.tag) {
      let activity = Activity.load(tag).result.get
      if (let delivery = activity.deliveries.find(channel == EMail && contact?.as[IEmailContact]?.email == message.to)) {
        
        if (data.event in  [MessageLinkClicked, MessageLoaded]) {
          delivery.events += ActivityDeliveryEvent(
            type = if (data.event == MessageLinkClicked) Click else Read
            url = data.payload.url
            userAgent = data.payload.userAgent
            ipAddress = data.payload.ipAddress
          )
        } else {
          let prevStatus = delivery.status
          delivery.status = {
            if (data.event == MessageSent) Sent
            else if (data.event == MessageDelayed) Delayed
            else if (data.event == MessageDeliveryFailed) Failed
            else Failed
          }
          if (prevStatus != delivery.status) {
            delivery.date = now
          }
          delivery.details = if (data.event !in [MessageSent, MessageLoaded]) data.payload.output
          if (prevStatus != delivery.status && (delivery.status == Delayed || delivery.status == Failed)) {
            activity.entities.first?.observers*.notify()
          }
          
        }
        activity.touch
        activity.mainEntity.touch
        activity.mainEntity.save
        activity.save
      }
    }
  }
}