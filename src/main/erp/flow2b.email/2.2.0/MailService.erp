entity MailService extends SystemService with WorkspaceEndpoint[MailHttpData] {
  func title = "Mail $(domains.join(", "))"
  ref field domains: [String]
  field defaultRecipients: [User] {
    label = "Recipients when no address matches"
    singular = "Recipient"
  }
  func keys: [String] = domains
  func router = MailRouter
  func service = this
  back func clean(elem: HtmlElement): Void = {
    if (let quotes = elem.select("blockquote:last-child, br:last-child, gmail_quote")) {
      quotes*.delete
      clean(elem)
    }
  }
  func process(request: IncomingHttpRequest, data: MailHttpData): Future[Void] = {
    let a = Activity.current!
    a.channel = EMail
    a.messageId = data.messageId
    if (let from = (data.from("<" .. ">")).trim.or(data.from).or(data.mailFrom).lower) {
      a.from = EmailContact.all.find(email.lower == from).result.get.alt(
        EmailContact(addresseeName = (data.from[ .. "<")).trim.alt(data.from!), email = from).save)
    }
    
    let refs = data.subject.all(Regex("\b([A-Z]{1,3}[0-9]{3,})|([0-9]{6,})|(#[A-Za-z0-9\-\.]+)\b")).flatMap {n =>
      Entity.all.filter(entityNumber == n).result.get
    }
    let item = if (let r = refs.onlyOne) r else Discussion(subject = data.subject.alt("No Subject"))
    a.from?.join(item)
    var files = data.attachments.map(a => File(name = a.filename, contentType = a.contentType, content = a.data.decodeMimeBase64).save)
    
    let to: String = (data.to("<" .. ">")).or(data.to).trim.alt(data.rcptTo).lower
    let recipient: Contact? = EmailContact.all.find(email.lower == to).result.get?.addressee?.systemContact
    let recipients: [Contact] = if (let recipient) [recipient] else defaultRecipients
    let men: Text = recipients*.atMention.join(" ").as[Text]!
             
    let mhtml: Html? = "<p>$men</p>"
    let toHtml: Html? = if (!recipient) "<p>To: $to</p>"                                  
    let text: Text? = if (let html = data.htmlBody) {
      let d = html.parseHtml
      clean(d)
      let body = d.select("body")!.first
      body.prepend(mhtml)
      if (!recipient) body.prepend(toHtml)
      let ret = d.innerHtml
      if (ret.length > 30000) {
        files = [File(name = "Content.html", contentType = "text/html", content = html.toData)] + files
        a.comment = toHtml + mhtml
      } else {
        a.comment = ret
      }
    } else {
      var r: Text? = data.plainBody
      if (!recipient) r = toHtml + r
      r = mhtml + r
      if (r.length > 30000) {
        files = [File(name = "Content.txt", contentType = "text/plain", content = data.plainBody.toData)] + files
        a.comment = toHtml + mhtml
      } else {
        a.comment = r
      }
    }
    a.entities = [item] 
      + (if (refs.onlyOne) refs)
      + files
  }
  view form = nav{grid(labels = Top){
    domains
    defaultRecipients
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
}
extend enum CommChannel {
  case EMail
}
