entity MailService extends SystemService {
  func title = "Mail $(domains.join(", "))"
  field defaultRecipients: [User] {
    label = "Recipients when no address matches"
    singular = "Recipient"
  }
  ref field domains: [String]
  field template: MailTemplate? {default = MailTemplateStandard() availableFor = All }
  field sendingToken: String? {availableFor = All}
  system field receiverEndpoint: MailReceiverEndpoint inline by service
  back func canSend = sendingToken == token(domains)
  
  back func https(path: Url): HttpRequest = {
    HttpRequest(ssl = true, url = "mail.flow2b.com/api/v1/$path")
     .header("X-Server-API-Key", apiKey)
  }
  object back func apiKey = "sbdQgh678c0sCB3RiHIajyrH"
  object back func token(domains: [String]): String = domains.join(", ").hmac(apiKey).sha1.base64
   
  
  view form = nav{grid(labels = Top){
    domains
    defaultRecipients
    sendingToken
    template
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
  
  back func send(request: MailSendRequest): Future[String] = {
    let r <- https("send/message").post(request.json)
    let response = r.body!.parseJson[MailSendResponse]
    if (response.status != "success") throw r.body.toString
    
    response.data!.messageId
  }
}
extend enum CommChannel {
  case EMail
}
