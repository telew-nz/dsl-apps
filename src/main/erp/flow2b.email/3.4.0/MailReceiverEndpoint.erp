inline entity MailReceiverEndpoint extends WorkspaceEndpoint[MailHttpData] {
  field service: MailService by receiverEndpoint
  
  func keys: [String] = service.domains
  func router = MailRouter
  
  func process(request: IncomingHttpRequest, data: MailHttpData): Future[Void] = {
    let a = Activity.current!
    a.channel = EMail
    
    let to: String = (data.to("<" .. ">")).or(data.to).trim.alt(data.rcptTo).lower
    let recipients0: [Contact]? = EmailContact.all.filter(email.lower == to).result.get*.addressee*.systemContact
    let recipients: [Contact] = {
      if (let recipients1 = recipients0*.as[IContactGroup]) recipients1
      else if (let recipients0) recipients0 
      else service.defaultRecipients
    }
    let men: Text = recipients*.atMention.join(" ").as[Text]!
             
    let mhtml: Html? = "<p>$men</p>"
    let toHtml: Html? = if (!recipients0) "<p>To: $to</p>"    

    if (let copyOf = Activity.findByMessageId(data.messageId)) {
      a.from = copyOf.from
      a.comment = toHtml + mhtml
      a.entities = copyOf.entities
    } else {
      a.messageId = data.messageId
      if (let from = (data.from("<" .. ">")).trim.or(EmailContact.filterAddress(data.from.trim)).or(data.mailFrom.trim).lower) {
        if (EmailContact.isAddressValid(from)) {          
          a.from = EmailContact.all.find(email.lower == from).result.get.alt(
            EmailContact(addresseeName = (data.from[ .. "<")).trim.alt(data.from!), email = from).save)
        } else {
          "Email address is invalid $from. Candidated ${data.from} ${data.mailFrom}".log
        }
      }
      
      let refMessage = data.references.split(" ").mapOpt{refMessageId =>
        Activity.findByMessageId(refMessageId.dropPrefix("<").dropSuffix(">"))
      }.first
      let refs: [Entity]? = {
        if (let refMessage) [refMessage.entities.first]
        else {
          data.subject
           .all(Regex("(^|[\s(,:])(([A-Za-z]{1,3}[A-Za-z0-9\-\.]{3,})|(#\s*[A-Za-z0-9\-\.]+)|([0-9\-]{6,}))([\s),:;.]|\$)"))
           .flatMap {n =>
              Entity.filterByNumber(n.group(2).dropPrefix("#").trim)
            }
        }
      }
      let item = {
        if (let r = refs.onlyOne) r 
        else {
          let domain = a.from?.as[EmailContact]?.email("@" .. ]
          let sub0 = EmailSubscription.all.find(e => e.domain == domain).result.get                           
          if (let listUnsubscribe = data.listUnsubscribe.trim.dropPrefix("<").dropSuffix(">")) {
            let sub = sub0.alt {
              EmailSubscription(
                title = a.from?.as[EmailContact]?.addresseeName.or(domain).alt("Untitled"),
                domain = domain
              )
            }
            sub.listUnsubscribe = listUnsubscribe
            sub.save
          } else if (let sub = sub0) {
            sub
          } else {
            Discussion(subject = data.subject.alt("No Subject"), isEmail = true).save
          }
        }
      }
      a.from?.join(item)
      var files = data.attachments.map(a => File(name = a.filename.alt("Untitled"), contentType = a.contentType, content = a.data.decodeMimeBase64).save)


      let text: Text? = if (let html = data.htmlBody) {
        let d = html.parseHtml
        clean(d)
        let body = d.select("body")!.first
        body.prepend(mhtml)
        if (!recipients0) body.prepend(toHtml)
        let ret = d.innerHtml
        if (ret.length > 30000) {
          files = [File(name = "Content.html", contentType = "text/html", content = html.toData)] + files
          a.comment = toHtml + mhtml
        } else {
          a.comment = ret
        }
      } else {
        var r: Text? = data.plainBody
        if (!recipients0) r = toHtml + r
        r = mhtml + r
        if (r.length > 30000) {
          files = [File(name = "Content.txt", contentType = "text/plain", content = data.plainBody.toData)] + files
          a.comment = toHtml + mhtml
        } else {
          a.comment = r
        }
      }
      a.entities = [item] 
        + (if (refs.onlyOne) refs)
        + files
    }
  }
                                                
  back func clean(elem: HtmlElement): Void = {
    if (let quotes = elem.select("blockquote:last-child, br:last-child, gmail_quote")) {
      quotes*.delete
      clean(elem)
    }
  }
}