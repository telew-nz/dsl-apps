back object MailRouter extends WorkspaceRouter[MailHttpData] {
  impl back func parse(request: IncomingHttpRequest): MailHttpData = {
    request.body.as[Data]!.parseJson[MailHttpData]
  }
  impl back func keys(request: IncomingHttpRequest, data: MailHttpData): [String]? = {
    if (data.messageId 
        let e = (data.rcptTo('@' .. ]).lower.dropPrefix("psrp.")) [e] else []
  }
}
        
object MailReceiverEndpoint extends WorkspaceEndpoint[MailHttpData] {
  impl func service = MailService 
  
  impl func keys = MailService.domains
  impl func router = MailRouter
  impl func dependsOnRegisters = false
  
  impl func process(request: IncomingHttpRequest, data: MailHttpData): Future[Void] = {
    data.toExtMsg.proc
  }                                             
}
