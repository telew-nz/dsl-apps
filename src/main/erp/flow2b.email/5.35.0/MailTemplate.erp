interface MailTemplate {
  func links: EmailLinks = HtmlLinks
  func track(url: Url, to: IEmailContact): Url = {
    guard (shallTrack(url) let p = to.contactAddressee?.addresseeActor) else return url
    
    var tr: Url = "?f2bu=$(p.uuid)"
    if (!url.contains("&utm_") && !url.contains("?utm_")) {
      tr = tr + "&utm_source=message&utm_medium=email&utm_content=link"
    }
    if (url.contains("?")) url.replace("?", "$tr&")!.as[Url]
    else if (url.contains("#")) url.replace("#", "$tr#")!.as[Url]
    else (url + tr).as[Url]
  }
  func shallTrack(url: Url): Bool = false
  back func apply(from: Contact, to: [IEmailContact], subject: String?, text: Text?): Html?
}

enum EmailLinks {
  case HtmlLinks
  case TextLinks
  case NoLinks
}

interface IMailTemplateStd extends MailTemplate {
  func closing: String = "Regards"
  func exposePhone: Bool = true
  back func innerSignature(from: Contact): Html = {
    let person: Html? = if (let pn = from.as[EmailContact]?.person.or(from.as[User]?.person)?.name) "$pn<br/>"
    let cp = from.as[EmailContact]?.addressee?.as[CompanyPerson]
    let company: Actor? = cp?.company.or(from.as[EmailContact]?.addressee?.as[Actor]).or(OurActor.our?.actor)
    let jobTitle: Html? = {
      if (let t = cp?.jobTitle) "$t, $(cp!.company.title)<br/>" 
      else if (let com = company) "$(com.title)<br/>"
    }
    let phone: Html? = if (exposePhone) if (let t = cp?.contacts*.as[PhoneContact].or(company?.contacts*.as[PhoneContact])*.phone.first) "$t<br/>"
    let companyUrl: Html? = if (let t = company?.contacts*.as[WebsiteContact]*.url.first) {
      if (links == TextLinks) "$(t)<br/>" 
      else if (links == HtmlLinks) '<a href="$t">$(if (t.contains("//")) t("//" .. ] else t)</a><br/>'
    }
    '$closing,<br/>$person$jobTitle$phone$companyUrl'
  }
  back func signature(from: Contact): Html = {
    '<p class="flow2b-signature">$(innerSignature(from))</p>'
  }
  impl back func apply(from: Contact, to: [IEmailContact], subject: String?, text: Text?): Html? = {
'$text
<p></p>
$(signature(from))'
  }
}

class MailTemplateStandard extends IMailTemplateStd {
  singular = "Standard"
  impl field closing: String = "Regards"
  impl field exposePhone: Bool = true
  impl field links: EmailLinks {
    default = HtmlLinks
    label = "Links format (less chance to be determined as spam)"
  }
}
