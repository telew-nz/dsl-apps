extend trait IEmailContact {
  func canSend: Bool = true
  back object func send(activity: Activity, contacts: [IEmailContact]): Void = {
    if (let user = activity.user?.as[User]
        let from = user.person.companies.filter(company.our)*.contacts*.as[IEmailContact].first
        let domain = from.email('@' .. ]
    ) {
      if (let service = MailService.all.filter(canSend && domains.contains(domain)).result.get.onlyOne) {
        activity.from = from
        activity.deliveries = activity.deliveries + contacts.map(ActivityDelivery(channel = EMail, contact = _))
        MailSendJob(service = service, activity = activity).run
      } else {
        throw "Cannot send email: No mail service found capable to send mail for domain $(domain)"
      }
    } else {
      throw "Cannot send email: No email found for user $(activity.user)"
    }
  }
}
 
back class MailSendJob extends SystemJob {
  field service: MailService 
  field activity: Activity inline
  func do = {
    let deliveries = activity.deliveries.filter(channel == EMail)
    let contacts: [IEmailContact] = deliveries*.contact*.as[IEmailContact]!
    let e = activity.entities.first
    let chain = e.activities.filter(a => a.from.in(contacts))
    let subject = if (!e.title.startsWith("Re: ") && chain) "Re: " + e.entitySubject else e.entitySubject
    let txt: Html? = {
      if (let template = service.template) {
        template.apply(activity.from!.as[EmailContact]!, contacts, subject, activity.comment)
      } else {
	    activity.comment
      }
    }
    let el = txt.parseHtml
    el.select("a[data-href*=EmailContact]")*.delete
    el.select("a[data-href]").foreach {a =>
      if (let href = a.attr("data-href")) {
        a.attr("href", "https://flow2b.com/s/$href")
      }
      a.attr("data-href", "")
    }
    el.select("body").first!.append(
'<div style="color: #aaaaaa; font-size: 80%; margin: 10px 0 10px 0; padding-top: 10px; border-top: 1px solid #eeeeee;">
Delivered by <a href="https://flow2b.com" style="color:black" target="_new">Flow2b</a>.
 </div>')
    let html = el.innerHtml
    let attachments <- activity.files.map{file =>
      let content <- file.content
      MailSendAttachment(name = file.name, data = content.mimeBase64)
    }.allCompleted
    let request = MailSendRequest (
	  to = [contacts.first.title],
      cc = contacts.drop(1).map(title)
      from = activity.from!.title,
      subject = subject,
      tag = activity.id!.toString,
      plainBody = html,
      htmlBody = html,
      headers = [
        "References" -> e.activities*.messageId.map(mid => "<$mid>").join(" "),
        "In-Reply-To" -> if (let mid = chain.last?.messageId) "<$mid>"
      ],
      attachments = attachments
    )
    let messageId <- service.send(request)
    activity.messageId = messageId
    deliveries.foreach(_.status = Sending)
    activity.save
  }
}