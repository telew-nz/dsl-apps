object MailStatusRouter extends WorkspaceRouter[WebhookMailStatusEvent] {
  back func parse(request: IncomingHttpRequest): WebhookMailStatusEvent = {
    request.body.as[Data]!.parseJson[WebhookMailStatusEvent]
  }
  back func keys(request: IncomingHttpRequest, data: WebhookMailStatusEvent): [String]? = {
    if (let e = (data.payload.message.from('@' .. ]).lower) [e] else []
  }
}
        
inline entity MailStatusEndpoint extends WorkspaceEndpoint[WebhookMailStatusEvent] {
  field service: MailService by statusEndpoint
  
  func keys: [String] = service.domains
  func router = MailStatusRouter
  func process(request: IncomingHttpRequest, data: WebhookMailStatusEvent): Future[Any] = {
    let message = data.payload.message
    let activity = Activity.load(message.tag).result.get
    if (let delivery = activity.deliveries.find(channel == EMail && contact?.as[IEmailContact]?.email == message.to)) {
      delivery.status = {
        if (data.event == MessageSent) Sent
        else if (data.event == MessageDelayed) Delayed
        else if (data.event == MessageDeliveryFailed) Failed
        else Failed
      }
      delivery.details = if (data.event != MessageSent) data.payload.details
      activity.save
    }
  }
}