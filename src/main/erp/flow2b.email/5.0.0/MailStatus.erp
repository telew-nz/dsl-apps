object MailStatusRouter extends WorkspaceRouter[MailStatusData] {
  back func parse(request: IncomingHttpRequest): MailStatusData = {
    request.body.as[Data]!.parseJson[MailStatusData]
  }
  back func keys(request: IncomingHttpRequest, data: MailStatusData): [String]? = {
    if (let e = (data.message.from('@' .. ]).lower) [e] else []
  }
}
        
inline entity MailStatusEndpoint extends WorkspaceEndpoint[MailStatusData] {
  field service: MailService by statusEndpoint
  
  func keys: [String] = service.domains
  func router = MailStatusRouter
  func process(request: IncomingHttpRequest, data: MailStatusData): Future[Any] = {
    let activity = Activity.load(data.message.tag).result.get
    if (let delivery = activity.deliveries.find(channel == EMail && contact?.as[IEmailContact]?.email == data.message.to)) {
      delivery.status = {
        if (data.status == Sent) Sent
        else if (data.status == Delayed) Delayed
        else if (data.status == DeliveryFailed) Failed
        else Failed
      }
      delivery.details = if (data.status != Sent) data.details
      activity.save
    }
  }
}