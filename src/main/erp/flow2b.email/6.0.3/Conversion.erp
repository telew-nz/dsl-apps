back object Conversion extends IConversion {
  func convert(version: [Int?]): Future[Any] = {
    if (version < [5,26,0]) {
      renameEntity(RawEmailContact, "flow2b.email.RawEmailContact")
    }
    if (version < [5,29,0]) {
      renameField(MailService, canSendEmails, "canSend")
    }
    if (version < [5,41,1]) {
      EmailSubscription.all
       .filter(listUnsubscribe && !listUnsubscribe.startsWith("http://") && !listUnsubscribe.startsWith("https://"))
       .update(listUnsubscribe = listUnsubscribe.replace("%3A", ":").replace("%2F", "/").replace("%3F", "?")
         .replace("%26", "&").replace("%3D", "=").replace("%40", "@").replace("%25", "%")
         .replace("%3A", ":").replace("%3E", "<").replace("%3C", ">")
         .replace("%7E", "~").replace("%7C", "|").replace("%2B", "+")
        )
    }
    if (version < [5,41,2]) {
      EmailSubscription.all
        .filter(listUnsubscribe && !listUnsubscribe.startsWith("http://") && !listUnsubscribe.startsWith("https://"))
        .update(listUnsubscribe = "")
    }
    let _ <- if (version < [6,0,0]) {
      all("flow2b.email.MailService").foreach{ms =>
        MailService.domains = ms.field("domains")
        MailService.template = ms.field("template")
        MailService.defaultMailRecipients = ms.field("defaultRecipients")
        MailService.canSendEmails = ms.field[Bool?]("canSendEmails").alt(true)
      }
      let _ <- all("flow2b.email.MailReceiverEndpoint").oneByOne(deleteEndpoint(_.id!))
      let _ <- all("flow2b.email.MailStatusEndpoint").oneByOne(deleteEndpoint(_.id!))
      MailReceiverEndpoint.touch.save
      MailStatusEndpoint.touch.save
      let ids = all("flow2b.email.MailService")*.id
      Activity.all.filter(field[ConvEntity](_, "user").id in ids).update(user = MailService)
    }
    if (version < [6,0,1]) {
      SubjectObserver.all.filter(!try? subject)*.delete
    }
    
  } 
}