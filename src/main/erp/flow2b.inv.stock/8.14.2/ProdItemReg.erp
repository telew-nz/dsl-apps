register ProdItemReg {
  key field item: IProductItem
  order field sort: UDec[2]?
  order field date: Date
  order field isOut: Bool = qty < 0
  order field priorityDate: Date?
  
  field doc: Entity
  field docItem: AnyEntity? inline {deleteCascade = false}
  
  compute isFact: Bool{
    value = !sort
    update = {
      sort = if (new) 0 else 1
    }
    label = "Factual"
  }
  field newLegalEntity: OurLegalEntity?
  field newStore: IStore?
  field newStockType: StockType?
  field qty: Qty?
  field isStocktake: Bool
  field autoProdReg: Bool
  field isRent: Bool
 
  stored compute curLegalEntity: OurLegalEntity? {
    value = if (isFact) newLegalEntity.or(prev?.curLegalEntity) else prev?.curLegalEntity.or(newLegalEntity)
    label = "Legal Entity"
  }
  stored compute futLegalEntity: OurLegalEntity? {
    value = if (isFact) curLegalEntity else prev?.futLegalEntity.or(newLegalEntity)
    label = "Legal Entity"
  }
  stored compute curStore: IStore? {
    value = if (isFact) newStore.or(prev?.curStore) else prev?.curStore.or(newStore)
    label = "Store"
  }
  stored compute futStore: IStore? {
    value = if (isFact) curStore else prev?.futStore
    label = "Store"
  }
  stored compute stockType: StockType? = newStockType.or(prev?.stockType)
  
  stored compute fact: Qty? = if (isFact) prev?.fact + qty else prev?.fact
  stored compute expectation: Qty? = if (isFact) prev?.expectation else prev?.expectation + qty
  compute outlook: Qty? = fact + expectation 
  stored compute isTransfer = prev && ((newLegalEntity && prev!.futLegalEntity != newLegalEntity) || (newStore && prev!.futStore != newStore))
  
  impl event onSave = {
    if (updated) {
      doc.touch
    }
  }
  view stateView = grid(labels = Top) {
    stockType
    x (visible = fact >= 1) {h3("At") curLegalEntity curStore}
    x (visible = outlook >= 1 && (fact < 1 || curLegalEntity != futLegalEntity || curStore != futStore)) {
      h3("Planned to be at") curLegalEntity curStore
    }
    x (visible = outlook < 1 && fact < 1) {h3("Gone from") curLegalEntity curStore}
    x (visible = outlook < 1 && fact >= 1) {h3("Planned to go from") futLegalEntity futStore}
  }
  register trasferOut: [ProdReg]? = {
    if (autoProdReg && isTransfer 
        let legalEntity = prev?.futLegalEntity
        let store = prev?.futStore
        let stockType = stockType
    ) {
      item.products.map{p =>
        ProdReg(
          product = p, doc = doc, stockType = stockType, legalEntity = legalEntity, store = store, sort = sort, date = date,
          qty = -1, priorityDate = priorityDate, productItems = [item]
        )
      }
    }
  }
  register prodReg: [ProdReg]? = {
    if (autoProdReg 
        let legalEntity = futLegalEntity
        let store = futStore
        let stockType = stockType
    ) {
      item.products.map{p =>
        ProdReg(
          product = p, doc = doc, stockType = stockType, legalEntity = legalEntity, store = store, sort = sort, date = date,
          qty = if (isTransfer) 1 else qty, priorityDate = priorityDate, productItems = [item], isRent = isRent
        )
      }
    }
  }
  
  back func avPeriods(sel: ProdRegSel, priorityDate: Date?, exclRegs: [Id?]?, start: Date?): [Period]? = {
    let newAv = sel.le ?== futLegalEntity && sel.store ?== futStore && sel.stockType ?== stockType && outlook
    if (!newAv) {
      if (let start) {
        if (start != date) Period(start = start, end = date) + next?.avPeriods(sel, priorityDate, exclRegs, null)
        else next?.avPeriods(sel, priorityDate, exclRegs, null)
      } else {
        next?.avPeriods(sel, priorityDate, exclRegs, date)
      }
    } else if (let next) {
      next.avPeriods(sel, priorityDate, exclRegs, start.alt(date))
    } else {
      [Period(start = start.alt(date), end = Date.max)]
    }
  }
}