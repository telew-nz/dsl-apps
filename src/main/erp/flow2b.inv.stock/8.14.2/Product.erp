extend trait IBaseProduct {
  compute stocks: Future[[StockStore]?] = if (id) Query(this).map(_.calcStocks(null)).result
  list compute stock: Future[Stock] = {
    let sts <- stocks
    Stock.sum(unit, sts*.stock)
  }
  back func calcStocks(date: Date?): [StockStore]? = {
    subProducts*.calcStocks(date)
      .groupBy(store, legalEntity, stockType).agg(stock = Stock.sum(unit, _*.stock)).toSeq
      .map{
        StockStore(product = this, legalEntity = legalEntity, store = store, stockType = stockType, stock = stock)
      }
  }
  
  back func calcStock(date: Date?, stockType: StockType?, legalEntity: OurLegalEntity?, stores: [IStore]?): Stock? = {
    if (isTangible) {
      let sts = calcStocks(date)
        .filter(i => 
             i.legalEntity ==? legalEntity 
          && i.stockType ==? stockType 
          && (!stores || stores.contains(i.store))
        )*.stock
      Stock.sum(unit, sts)
    } 
  }
  view stocksView = stocks >> list (mode = Static, visible = isTangible) {
    grid(labels = None, width = 1) {
      row{
        store >> field(width = 0.2) 
        legalEntity  >> field(width = 0.2) 
        stock.shortView  >> field(width = 0.6)
      }
      stockType >> field(visible = stockType != Inventory )
    }
  }
  extend view traitItem = stock.get.shortView
  extend view baseMainView = stocksView >> field(label = "Stock")
}

extend trait ISubProduct {
  override final func calcStocks(date: Date?): [StockStore]? = doCalcStocks(date)
  back func doCalcStocks(date: Date?): [StockStore]? = {
    products.toSeq.map(#0.calcStocks(date))
      .flatMap(i => i).groupBy(store, legalEntity, stockType).toSeq.map{i =>
        StockStore(
          product = this, legalEntity = i.legalEntity, store = i.store, stockType = i.stockType,
          stock = kitStock(i.#3)!
        )
      }
  }
  func kitStock(stockStores: [StockStore]?): Stock? = {
    if (let ss = stockStores) {
      Stock.min(
        this.unit, 
        products.leftJoin[Stock, Stock](
          ss.map(product.as[IProduct]! -> stock).toMap, 
          right.alt(Stock(unit = this.unit)).div(this.unit, left)
        ).values
      )
    }
  }
  
  
  back func avPeriods(sel: ProdRegSel, priorityDate: Date?, exclRegs: [Id?]?, qty: UQty): [Period]? = {
    let pps = productQtys(qty).map{i => i.product.avPeriods(sel, priorityDate, exclRegs, i.qty)}
    pps.drop(1).fold(pps.first, Period.join(acc + _))
  }
}

extend trait IProduct {
  override func doCalcStocks(date: Date?): [StockStore]? = {
    if (isTangible) {
      let ungroupedResult = {
      	if (let d = date) ProdReg.at(0, d).filter(product == this)*.stockStore.result.get
      	else ProdReg.current.filter(product == this)*.stockStore.result.get
      }
      ungroupedResult
        //.groupBy(store, legalEntity, stockType).agg(stock = Stock.sum(unit, _*.stock)).toSeq
        //.map{
        //  StockStore(product = this, legalEntity = legalEntity, store = store, stockType = stockType, stock = stock)
        //}
    }
  }
  override func kitStock(stockStores: [StockStore]?): Stock? = stockStores.first?.stock
  
  extend view productNavView = button("Movements", visible = isTangible) { 
    ProdMovement(product = this).list.open
  }
  extend view productNavView = button("Availability", visible = isTangible) { 
    ProdAvailability(product = this).list.open
  }
  func onStockUpdated(register: ProdReg): Void = {
    touch
    superProduct.touch
  }
  
  override back func avPeriods(sel: ProdRegSel, priorityDate: Date?, exclRegs: [Id?]?, qty: UQty): [Period]? = {
    ProdReg.at((1, Date.min))
      .find(r => r.product == this && sel(r))
      .flatMap(r => r.avPeriods(qty, priorityDate, exclRegs))
      .result.get
  }
  
  func minStock: Qty? = 0
  func minStock(store: IStore): Qty? = 0
}
