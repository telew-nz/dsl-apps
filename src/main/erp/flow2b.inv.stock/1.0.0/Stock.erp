class Stock {
  field qty: Dec[2]? {
    label = "Quantity"
  }
  field reserve: Dec[2]?
  
  func availableReserved: Dec[2]? = reserve.min(qty)
  compute available: Dec[2]? = ((qty - reserve).max(0)) 
  field expectation: Dec[2]?
  compute outlook: Dec[2]? = qty - reserve + expectation 
    
  object func sum(items: [Movement]?): Stock = {
    Stock(qty = items.filter(document.status == Delivered || (document.status == InTransit && moveQty < 0))*.moveQty.sum, 
          reserve = -items.filter(document.status == Planned && moveQty < 0)*.moveQty.sum, 
          expectation = items.filter(document.status != Delivered && moveQty > 0)*.moveQty.sum)
  }
  
  object func byGood(legalCompany: LegalCompany?, store: Store?, goods: [IProduct]): [IGood: Stock]? = {
    GoodMove.all*.movements
      .filter(m => 
              goods.contains(m.good) 
              && (store.isEmpty || m.store == store)
              && (legalCompany.isEmpty || m.legalCompany == legalCompany)
      )
      .groupBy(good).agg(Stock.sum(_))
      .result.toMap
  }
  object func byGood(legalCompany: LegalCompany?, store: Store?, goods: [IProduct], status: DeliveryStatus, date: DateTime): [IGood: Stock]? = {
    GoodMove.all*.movements
      .filter(m => 
              goods.contains(m.good) && 
              (store.isEmpty || m.store == store) && 
              (legalCompany.isEmpty || m.legalCompany == legalCompany) &&
              (m.date < date || (m.document.status != Planned && status == Planned))
      )
      .groupBy(good).agg(Stock.sum(_))
      .result.toMap
  }
  object func byStore(good: IGood) = {
    GoodMove.all*.movements
      .filter(m => m.good == good)
      .groupBy(legalCompany, store).agg(stock = Stock.sum(_))
  }
  func sub(o: Stock?) = if (o.isEmpty) this else Stock(qty - o!.qty, reserve - o!.reserve, expectation - o!.expectation)
}

report StockReport {
  plural = "Stock"
  
  object view list = GoodMove.all*.movements
    .groupBy(legalCompany, store, good).agg(stock = Stock.sum(_))
}

