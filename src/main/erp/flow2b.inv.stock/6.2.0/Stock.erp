class Stock {
  field unit: ProductUnit {views = []}
  field fact: Dec[unit]?
  field reserve: Dec[unit]?
  
  compute available: Dec[unit]? = fact - reserve
  field expectation: Dec[unit]?
  compute outlook: Dec[unit]? = fact - reserve + expectation 
    
  object func sum(unit: ProductUnit, items: [Stock]?): Stock = {
    Stock(
      unit = unit,
      fact = items*.fact.sum, 
      reserve = items*.reserve.sum, 
      expectation = items*.expectation.sum)
  }
  
  object func min(unit: ProductUnit, items: [Stock]?): Stock = {
    Stock(
      unit = unit,
      fact = items.map(fact).min.alt(0), 
      reserve = items.map(reserve).max.alt(0), 
      expectation = items.map(expectation).min.alt(0))
  }
   
  func div(unit: ProductUnit, k: Number): Stock = {
    Stock(
      unit = unit
      fact = (fact/k).as[Qty[unit]],
      reserve = (reserve/k).as[Qty[unit]],
      expectation = (expectation/k).as[Qty[unit]]
    )
  }

  view shortView = x(label = "Stock"){
    (fact.toString)
    ("− " + reserve.withoutUnit + " reserved") >> field(color = "#f21", visible = reserve)
    ("= " + available.withoutUnit + " available") >> field(visible = reserve)
    ("+ " + expectation.withoutUnit  + " expected") >> field(color = "#2a1", visible = expectation)
    ("= " + outlook.withoutUnit + " outlook") >> field(visible = expectation)
  }
  func title = fact + 
    (if (reserve) " − " + reserve.withoutUnit + " reserved = " + available.withoutUnit + " available" else "") + 
    (if (expectation) " + " + expectation.withoutUnit + " expected = " + outlook.withoutUnit + " outlook" else "")
  func toString = title
  view availableView(product: ISubProduct, qty: Qty) = x(visible = product.isTangible) {
    available + " available" >> field(visible = available >= qty, color = "#2a1"),
    outlook + " will be available" >> field(visible = available < qty && outlook >= qty, color = "#b70")
    title + " only" >> field(visible = outlook < qty, color = "#f21") 
  }
  
  func isEmpty: Bool = !fact && !reserve && !expectation
}

class StockStore {
  field product: ISubProduct
  field store: Store
  field legalEntity: LegalEntity
  field stock: Stock
  
  func isEmpty: Bool = stock.isEmpty
  func toString = "$legalEntity, $store -> $stock"
}