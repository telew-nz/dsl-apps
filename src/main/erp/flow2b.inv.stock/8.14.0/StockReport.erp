report StockReport {
  plural = "Stock"
  field legalEntity: OurLegalEntity?
  field store: IStore?
  field product: IProduct? {from = IProduct.all.filter(isTangible)}
  field category: IProductCategory?
  field brand: Brand?
  field tag: IProductTag?
  field stockType: StockType?
  field priceModel: IPriceModel?
  field priceLevel: IPriceLevel {
    default = PriceLevelDefault
    visible = priceModel
  }
  
  field stocktakeEarlier: Date?
  func query = ProdReg.current.filter(
       !isEmpty
    && legalEntity ==? this.legalEntity
    && store ==? this.store
    && product ==? this.product
    && (!category || product.superProduct.allCategories.contains(category!))
    && (!tag || product.superProduct.allTags.contains(tag!))
    && (!brand || product.superProduct.brands.contains(brand!))
    && stockType ==? this.stockType
    && stocktakeEarlier ?>= lastStocktake?.journalDate.alt(Date.min)
    && (!priceModel || priceModel!.contains(priceLevel, product))
  ).map{reg =>
    let ps = (if (let priceModel) priceModel.priceSales(priceLevel, reg.product)).or(reg.product.defPriceSales)
    let salesPrice <- if (let ps) ps.salesPrice
    (reg, salesPrice)
  }.query
  
  impl view list = query >> nav(background = "#2e8e67", newEngine){
    table(mode = Static){
      reg.product >> field (width = 0.4), reg.legalEntity, reg.store, group(label = "Stock") {
        reg.fact, reg.reserve, reg.available, reg.expectation, reg.outlook, reg.quotes
      }, reg.lastStocktake, salesPrice >> field(frame = false, width = 0.3)
    }
    button("Print Labels", icon = "barcode") {
      labelsView.print
    }
  }
  
  view labelsView = y (newEngine) {
    query.flatMap(prodLabels(reg.product, salesPrice, reg.fact)) >> list(frame = false){
      prod.labelView(salesPrice)  >> field(pageBreakAfter)
    }
  }
  
  object func prodLabels(product: ISubProduct, salesPrice: SalesPrice?, qty: Qty?): [ProdWrap]? = {
    if (qty > 0) ProdWrap(prod = product, salesPrice = salesPrice) + prodLabels(product, salesPrice, qty - 1)
  }
}

class ProdWrap{
  field prod: ISubProduct {
    available(Inline)
  }
  field salesPrice: SalesPrice?
}

extend trait IPriceModel { 
  extend view pmNavButtons = button("Stock", icon = "warehouse") {
    StockReport(priceModel = this).list.open
  }
}
