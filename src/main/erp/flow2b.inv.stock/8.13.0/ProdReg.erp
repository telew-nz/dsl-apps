class ProdRegSel {
  field le: OurLegalEntity?
  field store: IStore?
  field product: IProduct?
  field stockType: StockType?
  
  func apply(r: ProdReg): Bool = {
    r.legalEntity ==? le && r.store ==? store && r.product ==? product && r.stockType ==? stockType 
  }
}


register ProdReg {
  key field legalEntity: OurLegalEntity
  key field store: IStore  
  key field product: IProduct
  key field stockType: StockType
  order field sort: UDec[2]?
  order field date: Date
  order field isOut: Bool = qty < 0
  order field priorityDate: Date?
  field doc: RefEntity
  field docItem: AnyEntity? inline {deleteCascade = false}
  field productItems: [IProductItem]?
  func unit = product.unit
  compute isFact: Bool {
    value = !sort
    update = {
      sort = if (new) 0 else 1
    }
  }
  func isReserve = sort > 0 && sort <= 1.5
  
  field isRent: Bool
  field isStocktake: Bool
  field qty: Qty[unit]?
  compute factualQty: Qty[unit]? = if (isFact) qty
  compute reservedQty: Qty[unit]? = if (isReserve && qty < 0) -qty
  compute expectedQty: Qty[unit]? = if (isReserve && qty > 0) qty
  compute quotedQty: Qty[unit]? = if (sort > 1.5 && qty < 0) -qty
  
  func apply(level: StockLevel): Qty[unit]? = level.sales(stock)
  func isAv(level: StockLevel): Bool = apply(level) >= 0
  
  compute factualChange: Qty[unit]? {
    value = if (isStocktake) stocktakeDiffQty else factualQty
    label = "Fact"
  }
   
  stored compute fact: Qty[unit]? = if (isStocktake) factualQty else prev?.fact + factualQty
  
  stored compute reserve: Qty[unit]? = prev?.reserve + reservedQty
  compute available: Qty[unit]? = fact - reserve
  stored compute expectation: Qty[unit]? = prev?.expectation + expectedQty
  compute outlook: Qty[unit]? = fact - reserve + expectation
  stored compute quotes: Qty[unit]? = prev?.quotes + quotedQty
  
  stored compute stocktakeDiffQty: Qty[unit]? = if (isStocktake) factualQty - prev?.fact else 0
  field stocktakeCost: Money[legalEntity.getCurrency]?
  stored compute lastStocktake: Journal? = if (isStocktake) doc.as[Journal]! else prev?.lastStocktake
  func isEmpty = !fact && !reserve && !expectation && !quotes
    
  stored compute awaitingForDocs: [(qty: Qty, item: ProdReg)]?
  compute awaitingForDate: Date? = awaitingForDocs*.item*.date.max
  stored compute reserveQueue: QtyQueue[Qty, ProdReg]?
  impl event onSave = {
    if (let e = expectedQty) {
      reserveQueue = prev?.reserveQueue.enqueue(e, this)
      awaitingForDocs = null
    } else if (let r = reservedQty) {
      if (r > 0 && reserve > fact) {
        let e = prev?.reserveQueue.dequeue((reserve - fact).min(r))
        awaitingForDocs = e.items
        reserveQueue = e.queue
      } else {
        awaitingForDocs = null
        reserveQueue = prev?.reserveQueue
      }
    } else {
      awaitingForDocs = null
      reserveQueue = null
    }
    if (updated) {
      (try? doc)?.touch
      if (!next) {
        product.onStockUpdated(this)
      }
    }
  }
    
  func prevStock: Stock = Stock(
    unit = unit, fact = fact - factualQty, reserve = reserve - reservedQty, expectation = expectation - expectedQty)
  func stock: Stock = {
    Stock(unit = unit, fact = fact, reserve = reserve, expectation = expectation)
  }
  func stockStore: StockStore = {
    StockStore(product = product, store = store, legalEntity = legalEntity, stockType = stockType, stock = stock)
  }
  func prevStockStore: StockStore = StockStore(product = product, store = store, legalEntity = legalEntity, stock = prevStock, stockType = stockType)
  register invLedgers: [LInvBase]? = if (isStocktake && stocktakeDiffQty let so = stockType?.inv?.obj) {
    ProductItem.map(product, stocktakeDiffQty.abs!, items = productItems) {
      so.new(
        journal = doc.as[Journal]!, productItem = item, 
        product = product.as[IProductInv]!, qty = if (stocktakeDiffQty < 0) -trQty else trQty,
        contraAccount = InventoryAdjustments, 
        trAmount = if (stocktakeDiffQty > 0 let qty = qty.positive) {
          if (stocktakeDiffQty == qty) stocktakeCost else stocktakeCost.as[UDec[16]]*stocktakeDiffQty/qty
        }
      )
    }
  }
  
  func availableQtyPeriods(start: Date): [QtyPeriod] = {
    if (let n = next) {
      if (n.outlook != outlook && start < n.date) {
	    QtyPeriod(period = Period(start = start, end = n.date), qty = outlook)
          + n.availableQtyPeriods(n.date)
      } else {
        n.availableQtyPeriods(start)
      }
    } else [QtyPeriod(period = Period(start = start, end = Date.max), qty = outlook)]
  }
  
  func avPeriods(qty: Qty[ProductUnit.Item], priorityDate: Date?, excludeItems: [Id?]?): [Period]? = {
    let av = (qty <= outlook)
    let dates = (if (av) date.min(Date.now)) + next?.availabilitySwitchDates(qty, av, priorityDate, 0, 0, excludeItems) + Date.max
    dates.sliding(2, 2).filter(count == 2).map(Period(start = first, end = last))
  }
  
  func availabilitySwitchDates(qty: Qty[ProductUnit.Item], wasAvailable: Bool, priorityDate: Date?, exclDelta: Qty[ProductUnit.Item]?, priorDelta: Qty[ProductUnit.Item]?, excludeItems: [Id?]?): [Date]? = {
    var exclDelta1 = exclDelta
    var priorDelta1 = priorDelta
    if (excludeItems.contains(id)) {
      exclDelta1 = exclDelta - this.qty
    } else if (let pd1 = this.priorityDate, let pd2 = priorityDate) {
      if (pd2 < pd1) {
        priorDelta1 = (priorDelta - this.qty).max(0)
      }
    }
   
    let av = (qty <= outlook + exclDelta1 + priorDelta1)
    (if (av != wasAvailable) date) + next?.availabilitySwitchDates(qty, av, priorityDate, exclDelta1, priorDelta1, excludeItems)
  }
}

class QtyPeriod {
  field period: Period
  field qty: Qty?
  impl func toString = "$period: $qty"
}
