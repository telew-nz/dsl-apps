trait StockProduct extends IBaseProduct {
  func minStock: Qty? = 0
  func minStock(store: Store): Qty? = 0
}

extend trait IBaseProduct {
  func stocks: [StockRegister]?
  list compute stock: Stock = Stock.sum(unit, stocks)
}
extend trait IProduct {
  compute stocks: [StockRegister]? = {
    if (isTangible) StockRegister.current.filter(good == this) 
    else []
  }
  func stock(legalEntity: LegalEntity, store: Store): StockRegister? = {
    if (isTangible) stocks.find(i => i.legalEntity == legalEntity && i.store == store)
    else null
  }
  
  view movementsButton = button("Movements" visible = isTangible) { GoodsMovement(good = this).list.open}
  view stocksView = stocks >> list (mode = Static, visible = isTangible) {
    grid(labels = None, width = 1) {
      row{store >> field(width = 0.2) legalEntity  >> field(width = 0.2) stock.shortView  >> field(width = 0.6)}
    }
  }
  
  func onStockUpdated(register: StockRegister): Void = {
    touch
    superProduct.touch
  }
}

extend entity Good {
  extend view form = stocksView >> field(label = "Stocks")
  extend view form = extend("nav") {
    movementsButton
  }
}

extend trait ISuperProduct {
  func stocks: [StockRegister]? = subProducts*.stocks
}

extend trait IBasicProduct extends StockProduct