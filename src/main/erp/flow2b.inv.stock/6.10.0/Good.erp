extend trait IBaseProduct {
  compute stocks: Future[[StockStore]?] = if (id) Query(this).map(_.calcStocks).result
  list compute stock: Future[Stock] = {
    let sts <- stocks
    Stock.sum(unit, sts*.stock)
  }
  back func calcStocks: [StockStore]? = {
    subProducts*.calcStocks
      .groupBy(store, legalEntity).agg(stock = Stock.sum(unit, _*.stock)).toSeq
      .map{
        StockStore(product = this, legalEntity = legalEntity, store = store, stock = stock)
      }
  }
  
  back func calcStock(legalEntity: LegalEntity?, stores: [Store]?): Stock? = {
    if (isTangible) {
      let sts = calcStocks.filter(i => i.legalEntity ==? legalEntity && (!stores || stores.contains(i.store)))*.stock
      Stock.sum(unit, sts)
    } 
  }
  view stocksView = stocks >> list (mode = Static, visible = isTangible) {
    grid(labels = None, width = 1) {
      row{store >> field(width = 0.2) legalEntity  >> field(width = 0.2) 
          stock.shortView  >> field(width = 0.6)}
    }
  }
  extend view traitItem = stock.get.shortView
  extend view baseMainView = stocksView >> field(label = "Stock")
}

extend trait ISubProduct {
  final func calcStocks: [StockStore]? = doCalcStocks
  back func doCalcStocks: [StockStore]? = {
    products.toSeq.map(#0.calcStocks)
      .flatMap(i => i).groupBy(store, legalEntity).toSeq.map{i =>
        StockStore(
          product = this, legalEntity = i.legalEntity, store = i.store,
          stock = kitStock(i.#2)!
        )
      }
  }
  func kitStock(stockStores: [StockStore]?): Stock? = {
    if (let ss = stockStores) {
      Stock.min(
        this.unit, 
        products.leftJoin[Stock, Stock](
          ss.map(product.as[IProduct]! -> stock).toMap, 
          right.alt(Stock()).div(this.unit, left)
        ).values
      )
    }
  }
}
extend trait IProduct {
  func doCalcStocks: [StockStore]? = {
    if (isTangible) StockRegister.current.filter(good == this)*.stockStore.result.get
  }
  func kitStock(stockStores: [StockStore]?): Stock? = stockStores.first?.stock
  
  extend view productNavView = button("Movements", visible = isTangible) { GoodsMovement(good = this).list.open}
  func onStockUpdated(register: StockRegister): Void = {
    touch
    superProduct.touch
  }
  
  func minStock: Qty? = 0
  func minStock(store: Store): Qty? = 0
}
