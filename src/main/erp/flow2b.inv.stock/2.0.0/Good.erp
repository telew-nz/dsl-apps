extend trait IProduct {
  func stocks: [StockRegister]? = []
}

extend trait IGood {
  compute stocks: [StockRegister]? = StockRegister.current.filter(good == this)
  compute movements: [StockRegister]? = StockRegister.all.filter(good == this).sortBy(sort.desc, date.desc)
  func stock(legalEntity: LegalEntity, store: Store): StockRegister? = {
    stocks.find(i => i.legalEntity == legalEntity && i.store == store)
  }
  list compute stock: Stock = Stock.sum(unit, stocks)
  view movementsTable = nav{movements >> table(mode = Static, margin = None){
    document >> field (width = 0.8), date, legalEntity, store,
    group(label = "Change") {
      factualChange
      reservedQty
      expectedQty
    }
    group(label = "Stock") {
      fact, available, reserve, expectation, outlook
    }
  }}
  
  view movementsButton = button("Movements") { movementsTable.open}
  view stocksView = stocks >> list (mode = Static) {
    grid(labels = None, width = 2) {
      row{store >> field(width = 0.3) legalEntity  >> field(width = 0.3) stock.shortView  >> field(width = 1.4)}
    }
  }
}

