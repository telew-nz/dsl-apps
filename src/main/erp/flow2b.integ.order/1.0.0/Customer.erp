extend trait LegalEntity extends HasExtId

back interface ECustomer[ID] {
  func extId: ID
  func personFullName: String?
  func emails: [Email]?
  func phones: [Phone]?
  func billingAddresses: [EAddress]?
  func shippingAddresses: [EAddress]?
  func allAddresses = billingAddresses + shippingAddresses
  func allEmails = emails + billingAddresses*.emails + shippingAddresses*.emails
  func allPhones = phones + billingAddresses*.phones + shippingAddresses*.phones
  func getFullName: String = {
    personFullName
      .or(allAddresses.mapOpt(personFullName).first)
      .or(allAddresses.mapOpt(companyName).first)
      .or(allEmails.first)
      .or(allPhones.first)
      .alt("Untitled")
  }
  
  func makeCustomer(service: ExtIdSource[ID]): Future[Customer] = {
    let customer = if (let e = ExtId.all.find(i => i.source == service && i.extId == extId && i.item.is[LegalEntity]).result.get) {
      e.item.as[LegalEntity]!.makeCustomer
    } else {
      Customer(legalEntity = Person(name = getFullName))
    }
    let le = customer.legalEntity
    if (let person = le.as[Person]) {
      person.name =? personFullName
    }
    allEmails.foreach(EmailContact.add(le, _))
    allPhones.foreach(PhoneContact.add(le, _))
    allAddresses.foreach(Location.add(le, fullAddress(le)))
    customer.legalEntity.updateExtId(service, extId)
    customer.save
  }
}

back interface EAddress {
  func personFullName: String?
  func companyName: String?
  func addressString: Address
  func phones: [Phone]?
  func emails: [Email]?
  
  func fullAddress(le: LegalEntity): String = { 
    [personFullName.filter(_ != le.title), companyName.filter(_ != le.title), addressString].filter(!isEmpty).join(" ")!
  }
}