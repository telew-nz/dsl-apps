extend trait IProductTaxonomy extends HasExtId

back interface EProductCategory[ID] {
  func extId: ID
  func photos: [EFile[ID]]? = []
  func superCategory: EProductCategory[ID]? = null
  func name: String
  func description: Text? = ""

  func make(service: ExtIdSource[ID]): ProductCategory = {
    service.findExtId(extId, _.as[ProductCategory])
      .or {
        let name = this.name.lower.trim
        ProductCategory.all.find(pc => pc.name.lower.trim == name).result.get
      }.alt {
        let cat = ProductCategory(
          photos = photos*.make(service)*.as[Image],
          name = name, description = description,
          superCategory = superCategory?.make(service)
        )
        cat.updateExtId(service, extId)
        cat.save
    }
  }
}

back interface EProductTag[ID] {
  func extId: ID
  func title: String
  func description: Text? = ""

  func make(service: ExtIdSource[ID]): ProductTag = {
    service.findExtId(extId, _.as[ProductTag])
      .or {
        let title = this.title.lower.trim
        ProductTag.all.find(pc => pc.title.lower.trim == title).result.get
      }.alt {
        let tag = ProductTag(
          title = title, description = description
        )
        tag.updateExtId(service, extId)
        tag.save
    }
  }
}

back interface EShippingClass[ID] {
  func extId: ID
  func title: String
  func description: Text? = ""

  func make(service: ExtIdSource[ID]): ShippingClass = {
    service.findExtId(extId, _.as[ShippingClass])
      .or {
        let title = this.title.lower.trim
        ShippingClass.all.find(pc => pc.title.lower.trim == title).result.get
      }.alt {
        let scl = ShippingClass(
          title = title, description = description
        )
        scl.updateExtId(service, extId)
        scl.save
    }
  }
}

back interface EBrand[ID] {
  func logo: EFile[ID]? = null
  func extId: ID
  func superBrand: EBrand[ID]? = null
  func name: String
  func description: Text? = ""

  func make(service: ExtIdSource[ID]): Brand = {
    service.findExtId(extId, _.as[Brand])
      .or {
        let name = this.name.lower.trim
        Brand.all.find(pc => pc.name.lower.trim == name).result.get
      }.alt {
        let brand = Brand(
          logo = logo?.make(service)?.as[Image],
          name = name, description = description,
          superBrand = superBrand?.make(service)
        )
        brand.updateExtId(service, extId)
        brand.save
    }
  }
}