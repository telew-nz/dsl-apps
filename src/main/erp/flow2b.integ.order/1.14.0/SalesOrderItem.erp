back interface ESalesOrderItem[ID] {
  func extId: ID?
  func qty: Qty
  func amount: Money?
  
  func product(pr: ISalesOrderImportProvider[ID]): IBaseProduct 
  func make(pr: ISalesOrderImportProvider[ID], so: SalesOrder, sd: SalesDelivery): ISalesItem = {
    let oldItem = if (extId) {
      so.items.find(i => pr.service.extId(i) == extId)
    }
    oldItem.alt {
      let baseProduct = this.product(pr)
      let subProduct = baseProduct.subProducts.first.alt(throw "No subproducts for product $baseProduct")
      let item = SalesItem(
        order = so,
        deliveryItem = DeliveryItem(delivery = sd, product = subProduct, unit = subProduct.unit, qty = qty)
        amountWithGst = amount
      )
      item.updateExtId(pr.service, extId)
      item.save
    }
  }
}

back interface ESalesOrderProductItem[ID] extends ESalesOrderItem[ID] {
  func productId: ID
  func variationId: ID?
  
  func product(pr: ISalesOrderImportProvider[ID]): IBaseProduct = {
    let pid = variationId.alt(productId)
    pr.service.findExtId(pid, _.as[IBaseProduct]).alt(throw "Product $pid not found")
  }
}

back interface ESalesOrderDeliveryItem[ID] extends ESalesOrderItem[ID] {
  func qty: Qty = 1
  func deliveryMethod: String
  
  func product(pr: ISalesOrderImportProvider[ID]): IBaseProduct = {
    pr.deliveryMethodProducts.apply(deliveryMethod).alt(throw "Unknown delivery method $deliveryMethod")
  }
}