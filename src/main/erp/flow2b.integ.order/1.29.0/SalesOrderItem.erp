back interface ESalesOrderItem[ID] {
  func extId: ID?
  func qty: UQty
  func amount: UMoney?
  func itemAmount: UMoney? = amount
  func product(pr: ISalesOrderImportProvider[ID]): IBaseProduct 
  func make(pr: ISalesOrderImportProvider[ID], so: SalesOrder, sd: SalesDelivery): ISalesItem = {
    let oldItem = if (extId) {
      so.allItems.find(i => pr.service.extId(i) == extId)
    }
    oldItem.alt {
      let baseProduct = this.product(pr)
      let subProduct = baseProduct.subProducts.first.alt(throw "No subproducts for product $baseProduct")
      let item = SalesItem(
        order = so,
        deliveryItem = DeliveryItem(delivery = sd, product = subProduct, unit = subProduct.unit, qty = qty)
        amountWithGst = itemAmount
      )
      item.updateExtId(pr.service, extId)
      updateItem(item)
      item.save
    }
  }
  
  func updateItem(item: SalesItem): Void = {
    
  }
}

back interface ESalesOrderProductItem[ID] extends ESalesOrderItem[ID] {
  func productId: ID
  func variationId: ID?
  
  impl func product(pr: ISalesOrderImportProvider[ID]): IBaseProduct = {
    if (let pid = try? variationId.alt(productId)) {
      pr.service.findExtId(pid, _.as[IBaseProduct])
        .or(Good.all.find(title == "$pid not found").result.get)
        .alt(Good(title = "$pid not found", status = NotForSale))
    } else {
      Good.all.find(title =%= "Unknown").result.get.alt(Good(title = "Unknown", status = NotForSale))
    }
  }
}

back interface ESalesOrderDeliveryItem[ID] extends ESalesOrderItem[ID] {
  impl func qty: UQty = 1
  func deliveryMethod: String
  
  impl func product(pr: ISalesOrderImportProvider[ID]): IBaseProduct = {
    pr.deliveryMethodProducts.apply(deliveryMethod)
      .or(pr.missingDeliveryMethod(deliveryMethod, ""))
      .alt(throw "Unknown delivery method $deliveryMethod")
  }
}