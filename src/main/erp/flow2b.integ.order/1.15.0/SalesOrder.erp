interface ISalesOrderImportProvider[ID] {
  func service: ExtIdSource[ID]
  func salesChannel: ISalesChannel
  func legalEntity: OurLegalEntity
  func stores: [IStore]?
  back func paymentMethodAccounts: [String -> FinAccount]?
  back func deliveryMethodProducts: [String -> IProduct]?
  func defaultCurrency: Currency? = null
  back func orderTerms(order: ESalesOrder[ID]): IOrderTerms?
}


trait SalesOrderUpdater[ID] extends SystemService with ExtIdSource[ID] {
  back func uploadOrderState(order: SalesOrder): Void
}

extend trait SalesOrder extends HasExtId {
  event onSave = {
    if (!created && (updated(_state) || updated(paymentState) || updated(deliveryState))) {
      SalesOrderUpdater.all.map {service =>
        if (service.extId(this) && User.current != service) {
          service.uploadOrderState(this)
        }
      }.result
    }
  }
}
extend trait ISalesItem extends HasExtId
extend trait IncomingPayment extends HasExtId

back interface ESalesOrder[ID] {
  func extId: ID
  func number: String?
  func orderDate: UtcDate
  
  func currencyCode: String?
  func billingAddress: EAddress?
  func deliveryAddress: EAddress?
  func customerExtId: ID?
  func personFullName: String? = ""
  func emails: [Email]? = []
  func phones: [Phone]? = []
  func customer: ECustomer[ID] = ECustomerEmpty[ID]() 
  func orderCustomer = EOrderCustomer[ID](order = this, customer = customer)
  func payments: [EIncomingPayment[ID]]?
  func items: [ESalesOrderItem[ID]]? 
  func accepted: Bool = true
  func customerNote: String?
  func deliveryMethod: String? = items*.as[ESalesOrderDeliveryItem[ID]]*.deliveryMethod.first
  
  func make(pr: ISalesOrderImportProvider[ID]): Future[SalesOrder] = {
    let so: SalesOrder = pr.service.findExtId(extId, _.as[SalesOrder]).alt{
      let orderCustomer = this.orderCustomer
      let customer = orderCustomer.make(pr.service)
      let r = SalesOrder(
        date = orderDate, referenceNumber = number, salesChannel = pr.salesChannel,
        currency = Currency.all.find(code == currencyCode).or(pr.defaultCurrency).alt(throw "Cannot find currency for code $currencyCode")
        vendor = pr.legalEntity,
        customer = customer,
        terms = pr.orderTerms(this).or(customer.orderTerms).or(Workspace.current.salesOrderTerms),
        deliveries = [SalesDelivery(
          primary = true, 
          source = pr.stores.first.alt(IStore.all.first.result.get!), 
          shipTo = deliveryAddress?.make(customer.legalEntity)
        )],
        accepted = if (accepted) Date.now
      )
      Activity.setMainEntity(r)
      if (let replyContact = orderCustomer.replyContact(customer)) {
        if (replyContact.canSend) replyContact.join(r)
      }
      if (let fromContact = orderCustomer.fromContact(customer)) {
        Activity.current!.from = fromContact
      }
      if (let cn = customerNote) Activity.current!.comment(cn)
      r
    }
    
    let sd: SalesDelivery = so.deliveries*.as[SalesDelivery].first.alt(
      SalesDelivery(
        primary = true, salesOrders = [so],
        source = pr.stores.first.alt(IStore.all.first.result.get!), 
        shipTo = deliveryAddress?.make(so.customer!.legalEntity)
      ).save
    )
    so.updateExtId(pr.service, extId)
    items*.make(pr, so, sd)
    payments*.make(pr, so)
    so
  }
}



back class EOrderCustomer[ID](order: ESalesOrder[ID], customer: ECustomer[ID]) extends ECustomer[ID] {
  func extId = customer.extId.or(order.customerExtId)
  func personFullName = customer.personFullName.or(order.personFullName)
  func emails = customer.emails + order.emails
  func phones = customer.phones + order.phones
  func billingAddresses = customer.billingAddresses + order.billingAddress.toSeq
  func deliveryAddresses = customer.deliveryAddresses + order.deliveryAddress.toSeq
  func personNickname = customer.personNickname
}


