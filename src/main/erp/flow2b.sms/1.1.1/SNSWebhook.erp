object SNSWebhookRouter extends WorkspaceRouter[SNSWebhookData] {
  impl back func parse(request: IncomingHttpRequest): SNSWebhookData = {
    request.body!.parseJson[SNSWebhookData]
  }
  
  impl back func keys(request: IncomingHttpRequest, data: SNSWebhookData): [String]? = {
    if(let tarn = request.header("x-amz-sns-topic-arn")) [tarn]
  }
}

inline entity SNSWebhookEndpoint extends WorkspaceEndpoint[SNSWebhookData] {
  impl field service: SMSService by snsWebhookEndpoint
  
  impl func keys = if(let arn = service.snsTopicArn)[arn]
  impl func router = SNSWebhookRouter
  
  impl back func process(request: IncomingHttpRequest, data: SNSWebhookData): Future[Any] = {
    HttpResponse(code = 200, request = HttpRequest(url = request.url, ssl = request.ssl))
  }
}

object AWSDateString extends Mapper[Date, String] {
  impl func apply(v: Date): String = v.format("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
  impl func unapply(v: String): Date = Date(v, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
}

object AWSDateStringOpt extends Mapper[Date?, String?] {
  impl func apply(v: Date?): String? = if(let v) AWSDateString.apply(v) 
  impl func unapply(v: String?): Date? = if(let v) AWSDateString.unapply(v) 
}

class SNSWebhookData {
  extFieldNaming = UpperCamelCase
  
  field requestType: String? {extName="Type"}
  
  field signatureVersion: String?
  field signature: String?
  field signingCertURL: Url?
  
  field message: String?
  field messageId: String?
  field topicArn: String?
  field timestamp: String? // Date? {jsonMap = AWSDateStringOpt}
  
  // SubscriptionConfirmation
  field subscribeURL: Url?
  field token: String?
  
  // Notification
  field subject: String?
  field unsubscribeURL: Url?
}
