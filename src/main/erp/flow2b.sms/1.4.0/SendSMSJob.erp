class SendSMSJob extends SystemJob {
  impl field service: SMSService
  
  field destinationNumber: String
  field message: String
  
  impl func do = {
	service.send(destinationNumber, message)
  }  
}

class ActivitySendSMSJob extends SystemJob {
  impl field service: SMSService 
  field activity: Activity inline
  impl func dependsOnRegisters = false
  
  impl func do = {
    let deliveries = activity.deliveries.filter(channel == SMS)
    let contacts: [IPhoneContact] = deliveries*.contact*.as[IPhoneContact]!
    let e = activity.mainEntity

    let verifiedPhones: [IPhoneContact]? <- contacts.oneByOne { c =>
      if (let p = c.phoneE164) {
        let o: IPhoneContact? = c
      	Future(o)
      } else {
        let vp <- PhoneNumberValidationJob(
          service = this.service,
          phoneContact = c,
          countryCode = service.countryCodeForValidation
        ).validate()
        if (let p = vp) {
          c
        } else {
          activity.comment("Can't send sms to $c. Phone number ${c.phone} can't be validated with country code '${service.countryCodeForValidation}'.")
          null[IPhoneContact]
        }
      }
    }.map(_.mapOpt(_))

    deliveries.foreach(_.status = Sending)
    
    let t = activity.template?.as[NotifyTemplate[RefEntity]]
    let msg = if (let t) t.text(e, EMail) else activity.comment
    
    
    let _ <- verifiedPhones.oneByOne { p =>
      let el = msg.parseHtml
      el.select("a[data-href*=Contact]")*.delete
      el.select("a[data-href]").foreach {a =>
        if (let href = a.attr("data-href")) {
          let ps = href.split("/")
          if (ps.count == 3) {
            let r = RefEntity.load(ps.last!).result.get
            if (r.is[RefEntity with Contact]) {
              a.delete
            } else {
              a.setOuterHtml("<span>$(r.realEntity.publicUrl(p, readOnly = true))</span>")
            }
          }
        }
      }      
      let txt0: PlainText? = el.innerHtml
      let txt: PlainText? = txt0.trim
      guard (let txt = txt) else return {}

      let messageId <- service.send(p.phoneE164!, txt)
      //let messageId: String? = "AA"
      
      if(let d = deliveries.find(channel == SMS && contact?.as[IPhoneContact]?.phoneE164 == p.phoneE164!)) {
        if (let mid = messageId) {
          d.messageId = mid
          //mid.log("messageId")
          d.status = Sent
        } else {
          d.status = Failed
        }
      }
      
      e.touch
      activity.touch
      activity.entities.first?.touch
      activity.save
    }
  }
}
