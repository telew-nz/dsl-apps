entity KitPriceModel extends IDynamicPriceModel with NewEngine {
  impl func title = "Kit Price Model"
  impl func priority: Dec[8]? = 0.5
  impl ref field start: Date = now
  impl ref field end: Date?
   
  field discount: Percent[2]? {
    validate = if (discount > 1.0000) "Discount cannot be more than 100%"
  }
  impl func price(level: IPriceLevel, type: PriceType, product: IBaseProduct): IPrice? = {
    if (let kit = product.as[Kit]){
      let prices = kit.products.toSeq.map {i =>
        if (let p = vendor.price(level, type, i.#0)) {
          KitItemPrice(prod = product, price = p, qty = i.#1)
        }
      }
      if (prices.all(_)) {
        KitPrice(model = this, kit = kit, prices = prices.map(_!), discount = discount.noUnit)
      }
    }
  }
}
 
class KitPrice extends IPriceSalesRent {
  impl field model: KitPriceModel
  field kit: Kit
  field prices: [KitItemPrice]
  field discount: Dec[4]?
  impl func priceRent = prices*.price*.as[IPriceRent].first!
  
  impl func priceType: PriceType = if (prices*.price*.as[IPriceRent]) Rent else Sales
  impl func product = kit
  impl func salesPrice(request: PriceRequest): Future[SalesPrice] = {
    amount(request, PriceOrderItem(prod = kit, qty = 1))
  } 
  impl func amount(request: PriceRequest, item: PriceOrderItem): Future[SalesPrice] = {
    let ps <- prices.oneByOne{p => p.price.amount(request, PriceOrderItem(prod = p.prod, qty = p.qty*item.qty))}
    SalesPrice.sum(ps) * (1.0000 - discount).positive
  }
  impl func rentPrices(request: PriceRequest): Future[[DurPrice]?] = {
    let pss <- prices*.price*.as[IPriceRent]!.oneByOne{p => p.rentPrices(request)}
    pss.first.flatMap {ps =>
      if (pss.all(_.exists(_.dur == ps.dur))) {
        let sps: [SalesPrice] = pss.map(_.find(_.dur == ps.dur)!)*.price
        let p: SalesPrice = SalesPrice.sum(sps) * (1.0000 - discount).positive
        [DurPrice(
          unit = ps.unit, dur = ps.dur
          price = p
        )]
      }
    }
  }
} 

class KitItemPrice {
  field prod: IBaseProduct
  field price: IPrice
  field qty: UQty
}