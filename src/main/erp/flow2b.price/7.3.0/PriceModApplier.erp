interface IPriceSalesRent extends IPriceSales with IPriceRentDecorator {
  func priceType: PriceType
  override view form = y {
    x (visible = priceType == Sales) {
      salesPrice >> field(frame = false) model >> field(title = fullTitle, stretch = 1, align = Right)
    }
    x (visible = priceType == Rent) {
      rentPrices >> field(frame = false) model >> field(title = fullTitle, stretch = 1, align = Right)
    }
  }
  override func amount(request: PriceRequest, item: PriceOrderItem): Future[SalesPrice] = throw "Ambiguous amount price"
}

class PriceModApplier extends IPriceSalesRent {
  impl field product: IBaseProduct
  field prevPrice: IPrice
  system impl field model: IPriceModel
  system field mod: IPriceModOwner
  impl func priceRent: IPriceRent = prevPrice.as[IPriceRent]!
  impl func priceType: PriceType = if (prevPrice.is[IPriceRent]) Rent else Sales
  
  impl func salesPrice(request: PriceRequest): Future[SalesPrice] = {
    guard (prevPrice.is[IPriceSales]) else return SalesPrice()
    
    let prevPrice <- prevPrice.as[IPriceSales]!.salesPrice(request)    
    let newPrice <- mod.applyMods(request, PriceOrderItem(prod = product, qty = 1), prevPrice.regular)
    if (newPrice < prevPrice.current) prevPrice.withCurrent(newPrice) else prevPrice
  }
  
  impl func amount(request: PriceRequest, item: PriceOrderItem): Future[SalesPrice] = {
    let prevPrice <- prevPrice.amount(request, item)
    let newPrice <- mod.applyMods(request, item, prevPrice.regular)
    if (newPrice < prevPrice.current) prevPrice.withCurrent(newPrice) else prevPrice
  }
  
  impl func rentPrices(request: PriceRequest): Future[[DurPrice]?] = {
    guard (prevPrice.is[IPriceRent]) else return []
    
    let pss <- priceRent.rentPrices(request)  
    pss.oneByOne{ps =>
      let newPrice <- mod.applyMods(request, PriceOrderItem(prod = product, qty = 1), ps.price.regular)
      if (newPrice < ps.price.current) DurPrice(unit = ps.unit, dur = ps.dur, price = ps.price.withCurrent(newPrice)) else ps
    }
  }
}