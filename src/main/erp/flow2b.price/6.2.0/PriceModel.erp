interface IPriceModel {
  func priority: Dec[8]? = 0
  func date: Date[day] = now
  
  back func contains(product: IBaseProduct): Bool = price(product)
  back func price(product: IBaseProduct): IPrice?
}
trait PriceModel extends Entity with IPriceModel {
  func currency: Currency = vendor.getCurrency
  ref field vendor: IVendor by priceModels =? OurLegalEntity.onlyOne
} 
object EmptyPriceModel extends IPriceModel {
  func price(product: IBaseProduct): IPrice? = null
}

interface IPrice {
  compute salesPrice: Future[SalesPrice] = back {
    salesPrice(vendor.getCurrency, vendor.pricesIncludingGst)
  }
  func vendor: IVendor
  func product: IBaseProduct
  func gstRate: UPercent[2]? = product.gstRate(vendor).alt(0)
  func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice]
  func salesAmount(currency: Currency, customer: ICustomer?, qty: Qty, inclGst: Bool): Future[SalesPrice] = {
    let p <- salesPrice(currency, inclGst)
    p.mul(product.toBase(qty))
  }
  
  view form
}

