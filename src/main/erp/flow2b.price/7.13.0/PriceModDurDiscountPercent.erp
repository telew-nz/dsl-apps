entity PriceModDurDiscountPercent extends IPriceMod {
  singular = "Durational Percentage Discount"
  field thresholds: [DDPThreshold]
  impl func supports(type: PriceType, prod: IBaseProduct): Bool = type == Rent
  impl func apply(request: PriceRequest, item: PriceOrderItem, amount: UMoney?): Future[UMoney?] = {
    if (
      let dur = item.rentPeriod?.dur
      let discount = thresholds.filter(t => t.unit == dur.unit && t.dur <= dur ).sortBy(_.dur.desc).first?.discount
    )  {
      amount * (1.0000 - discount).positive
    } else amount
  }
  impl view form = y{
    label("Durational Percentage Discount") 
    thresholds >> table {
      dur discount
    }
  }
}

class DDPThreshold{
  singular = "Threshold"
  field unit: DurUnit = Day 
  field dur: UQty[unit]{
    label = "Minimum Duration"
    canEditUnit
  }
  field discount: UPercent[2]
}