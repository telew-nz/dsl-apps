interface IMargin {
  field regularMargin: UPercent[2]?{
    default = 0.5
    update = {
      if (old == currentMargin) currentMargin = new
    }
  }
  field currentMargin: UPercent[2]? {
    default = 0.5
  }
  
}

entity MarginPriceModel extends IDynamicPriceModel with IMargin {
  impl ref field start: Date = now
  impl ref field end: Date?
  impl func priority: Dec[8]? = 0.7
  impl back func doContains(level: IPriceLevel, type: PriceType, product: IBaseProduct): Bool = type == Sales && costSource.contains(product)
  impl back func doPrice(level: IPriceLevel, type: PriceType, product: IBaseProduct): IPrice? = {
    if (type == Sales && costSource.contains(product)) {
      let sp = product.superProduct
      let m = productMargins.find(m => m.product == product || m.product == sp)?.as[IMargin]
        .or(categoryMargins.find(m => sp.categories.contains(m.category)))
        .alt(this)
      MarginPrice(model = this, product = product, 
                  regularMargin = m.regularMargin, currentMargin = m.currentMargin)
    }
  }
  
  field costSource: ProductCostSource = Cost
  field rounding: Rounding? = Round()
  field categoryMargins: [CategoryMargin]? inline by model
  field productMargins: [ProductMargin]? inline by model
  impl view form = nav{
    grid{
      row {start end}
      row {vendor, currency}
      levels
      costSource
      row{regularMargin currentMargin}
      rounding
      categoryMargins >> table {
        category regularMargin currentMargin
      }
      productMargins >> table {
        product regularMargin currentMargin
      }
    }
    pmNavButtons
  }
  
  impl func title = "Margin Price Model" 
}
            
class MarginPrice extends IPriceSales with IMargin {
  impl field product: IBaseProduct
  impl field model: MarginPriceModel

  impl func levels = model.levels
  impl back func salesPrice(request: PriceRequest): Future[SalesPrice] = {
    let cost <- model.costSource.cost(product)
    let regular = if (let c = cost, let p = 1.0000 - regularMargin) c/p 
    let current = if (let c = cost, let p = 1.0000 - currentMargin) c/p 
    let rp <- regular.to[UMoney[request.currency]](now)
    let cp <- {
      if (current != regular) {
        current.to[UMoney[request.currency]](now)
      } else Future(rp)
    }
    SalesPrice(currency = request.currency, regular = rp, current = cp)
      .convertGst(gstRate, !vendor.hasGst, request.inclGst)
      .round(model.rounding)
  }
}

extend trait IBaseProduct {
  back func purchasePrices2: [IPriceSales]? = {
    staticPrices.filter(!vendor.is[OurLegalEntity])*.as[IStaticPrice with IPriceSales] 
    + 
    IDynamicPriceModel.all
        .filter(!vendor.is[OurLegalEntity])
        .groupBy(vendor).agg(price = sortBy(b => b.priority).mapOpt(b => b.priceSales(PriceLevelDefault, this)).first)
        .flatMap(price.toSeq)
        .result.get
  }

  back func purchaseCosts: Future[[UMoney?]?] = {
    let ps <- purchasePrices2*.salesPrice(PriceRequest(currency = our, inclGst = false, level = PriceLevelDefault)).allCompleted
    ps*.current
  }
}

enum ProductCostSource(back cost: IBaseProduct => Future[UMoney?], back contains: IBaseProduct => Bool) { 
  case Cost(cost = pr => pr.productCost?.cost, contains = pr => pr.productCost) 
  case MinPrice(cost = pr => pr.purchaseCosts.map(_.min), contains = pr => pr.purchasePrices2) = "Minimum Vendor Price"
  case MaxPrice(cost = pr => pr.purchaseCosts.map(_.max), contains = pr => pr.purchasePrices2) = "Maximum Vendor Price"
}

inline entity CategoryMargin extends IMargin {
  field model: MarginPriceModel by categoryMargins
  field category: ProductCategory
}
inline entity ProductMargin extends IMargin {
  field model: MarginPriceModel by productMargins
  field product: IBaseProduct
}