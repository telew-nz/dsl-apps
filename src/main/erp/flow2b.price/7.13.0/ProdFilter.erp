trait IProdFilterOwner extends AnyEntity {
  field filters: [IProdFilter]? inline by owner
  
  func filterProd(type: PriceType, prod: IBaseProduct): Bool = filters.all(_.filter(type, prod))
}

trait IProdFilter extends InlineEntity {
  system field owner: IProdFilterOwner
  
  func filter(type: PriceType, prod: IBaseProduct): Bool
}

entity ProdFilterCategory extends IProdFilter {
  singular = "By Category"
  field categories: [ProductCategory]
  impl func filter(type: PriceType, prod: IBaseProduct): Bool = prod.superProduct.categories*.tree.intersect(categories)
  impl view form = x{label("by Category") categories}
}

entity ProdFilterBrand extends IProdFilter {
  singular = "By Brand"
  field brands: [Brand]
  impl func filter(type: PriceType, prod: IBaseProduct): Bool = prod.superProduct.brands.intersect(brands)
  impl view form = x{label("by Brand") brands}
}

entity ProdFilterTag extends IProdFilter {
  singular = "By Tag"
  field tags: [ProductTag]
  impl func filter(type: PriceType, prod: IBaseProduct): Bool = prod.superProduct.tags.intersect(tags)
  impl view form = x{label("by Tag") tags}
}

entity ProdFilterProd extends IProdFilter {
  singular = "By Product"
  field products: [IBaseProduct]
  impl func filter(type: PriceType, prod: IBaseProduct): Bool = products.contains(prod) || products.contains(prod.superProduct)
  impl view form = x{label("by Product") products}
}

entity ProdFilterNot extends IProdFilterOwner with IProdFilter {
  singular = "Not"
  impl func filter(type: PriceType, prod: IBaseProduct): Bool = !filterProd(type, prod)
  impl view form = y(frame = true){
    label("Not") 
    filters >> list(frame = false)
  }
}

entity ProdFilterAnd extends IProdFilterOwner with IProdFilter {
  singular = "And"
  impl func filter(type: PriceType, prod: IBaseProduct): Bool = filterProd(type, prod)
  impl view form = y(frame = true){
    label("And") 
    filters >> list(frame = false)
  }
}

entity ProdFilterOr extends IProdFilterOwner with IProdFilter {
  singular = "Or"
  impl func filter(type: PriceType, prod: IBaseProduct): Bool = filters.exists(_.filter(type, prod))
  impl view form = y(frame = true){
    label("Or") 
    filters >> list(frame = false)
  }
}