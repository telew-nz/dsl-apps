interface IMargin {
  field regularMargin: Percent[2]?{
    default = 0.5
    update = {
      if (old == currentMargin) currentMargin = new
    }
  }
  field currentMargin: Percent[2]? {
    default = 0.5
  }
  
}

entity MarginPriceModel extends IDynamicPriceModel with IMargin {
  func priority: Dec[8]? = 1.0
  back func contains(product: IBaseProduct): Bool = costSource.contains(product)
  back func price(product: IBaseProduct): IPrice? = {
    if (costSource.contains(product)) {
      let sp = product.superProduct
      let m = productMargins.find(m => m.product == product || m.product == sp)?.as[IMargin]
        .or(categoryMargins.find(m => sp.categories.contains(m.category)))
        .alt(this)
      MarginPrice(model = this, product = product, rounding = rounding, 
                  regularMargin = m.regularMargin, currentMargin = m.currentMargin)
    }
  }
  
  field costSource: ProductCostSource = Cost
  field rounding: Rounding = Round()
  field categoryMargins: [CategoryMargin]? inline by model
  field productMargins: [ProductMargin]? inline by model
  view form = nav{grid{
    vendor
    costSource
    row{regularMargin currentMargin}
    rounding
    categoryMargins >> table {
      category regularMargin currentMargin
    }
    productMargins >> table {
      product regularMargin currentMargin
    }
  }}
  
  func title = "Margin Price Model" 
}
            
class MarginPrice extends IPrice with IMargin {
  field product: IBaseProduct
  field model: MarginPriceModel
  field rounding: Rounding

  back func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    let cost <- model.costSource.cost(product)
    let regular = if (let c = cost, let p = 1.0000 - regularMargin) c/p 
    let current = if (let c = cost, let p = 1.0000 - currentMargin) c/p 
    let rp <- regular.to[Money[currency]](now)
    let cp <- {
      if (current != regular) {
        current.to[Money[currency]](now)
      } else Future(rp)
    }
    SalesPrice(regular = rp, current = cp)
      .convertGst(gstRate, !vendor.hasGst, inclGst)
      .round(rounding)
  }
  
  view form = grid {row{
    salesPrice >> field(frame = false)
    x (label = "Margin", width = 0.25, flow = false, visible = vendor.legalEntity.our) {
      regularMargin >> field(fontStyle = if (currentMargin == regularMargin) Normal else Strikeout, visible = currentMargin != regularMargin || ui.edit) 
      currentMargin
    }
  }}
}

extend trait IBaseProduct {
  back func purchasePrices2: [IPrice]? = {
    staticPrices.filter(!vendor.is[OurLegalEntity]) + IDynamicPriceModel.all
        .filter(!vendor.is[OurLegalEntity])
        .groupBy(vendor).agg(price = sortBy(b => b.priority).mapOpt(b => b.price(this)).first)
        .flatMap(price.toSeq)
        .result.get
  }

  back func purchaseCosts: Future[[Money?]?] = {
    let ps <- purchasePrices2*.salesPrice(Currency.our, inclGst = false).allCompleted
    ps*.current
  }
}

enum ProductCostSource(back cost: IBaseProduct => Future[Money?], back contains: IBaseProduct => Bool) { 
  case Cost(cost = pr => pr.productCost?.cost, contains = pr => pr.productCost) 
  case MinPrice(cost = pr => pr.purchaseCosts.map(_.min), contains = pr => pr.purchasePrices2) = "Minimum Vendor Price"
  case MaxPrice(cost = pr => pr.purchaseCosts.map(_.max), contains = pr => pr.purchasePrices2) = "Maximum Vendor Price"
}

inline entity CategoryMargin extends IMargin {
  field model: MarginPriceModel by categoryMargins
  field category: ProductCategory
}
inline entity ProductMargin extends IMargin {
  field model: MarginPriceModel by productMargins
  field product: IBaseProduct
}
