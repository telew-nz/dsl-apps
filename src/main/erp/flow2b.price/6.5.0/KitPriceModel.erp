entity KitPriceModel extends IDynamicPriceModel {
  func title = "Kit Price Model"
  func priority: Dec[8]? = 0.5
  field discount: Percent[2]?
  func date: Date[day] = now
  func price(product: IBaseProduct): IPrice? = if (let kit = product.as[Kit]){
    let prices = kit.products.toSeq.map {i =>
      if (let p = vendor.price(i.#0)) KitItemPrice(price = p, qty = i.#1)
    }
    if (prices.all(_)) {
      KitPrice(model = this, kit = kit, prices = prices.map(_!), discount = discount.withoutUnit)
    }
  }
}

class KitPrice extends IPrice {
  field model: KitPriceModel
  field kit: Kit
  field prices: [KitItemPrice]
  field discount: Dec[4]?
  
  func product = kit
  func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    let ps <- prices.map{p => p.price.salesAmount(currency, customer = null, p.qty, inclGst)}.allCompleted
    SalesPrice.sum(ps).mul(1.0000 - discount)
  }
  func salesAmount(currency: Currency, customer: ICustomer?, qty: Qty, inclGst: Bool): Future[SalesPrice] = {
    let ps <- prices.map{p => p.price.salesAmount(currency, customer, p.qty*qty, inclGst)}.allCompleted
    SalesPrice.sum(ps).mul(1.0000 - discount)
  }
  view form = salesPrice >> field(frame = false)
}

class KitItemPrice {
  field price: IPrice
  field qty: Qty
}