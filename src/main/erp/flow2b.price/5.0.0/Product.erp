extend trait IBaseProduct {
  override list compute salesPrice: Future[SalesPrice] = back {
    if (let a = Actor.our, let p = a.price(this)) {
      p.salesPrice(Currency.our, a.pricesIncludingGst) 
    } else {
      Future(SalesPrice.empty)
    }
  } 
  compute prices: Future[[VendorPrice]?] {
    value = if (id) PriceModel.all
      .groupBy(vendor).agg(priceModel = sortBy(priority, date.desc).find(contains(this)))
      .filter(priceModel)
      .map{i => 
        VendorPrice(vendor = i.vendor, model = i.priceModel!, price = i.priceModel!.price(this)!)
      }.result
    availableFor = All
  }
  view pricesView = prices >> list{grid(labels = None){
    row {vendor model}
    price.form >> field(frame = false)
  }}
}

extend entity Good {
  extend view form = extend("main"){pricesView >> field(label = "Prices")}
}
extend entity Service {
  extend view form = extend("main"){pricesView >> field(label = "Prices")}
}
extend entity Kit {
  extend view form = extend("main"){pricesView >> field(label = "Prices")}
}

class VendorPrice {
  field vendor: Actor
  field model: PriceModel
  field price: IPrice
}