entity SaleCampaign extends IDynamicPriceModel with NewEngine {
  impl func priority: Dec[8]? = -0.5
  impl ref field start: Date = now
  impl ref field end: Date?
  ref field name: String
  field rules: [SaleCampaignRule] inline by campaign

  impl func title = "$name $start" + (" â€” " +?  end)
  
  impl func priceSales(product: IBaseProduct): IPriceSales? = {
    if (
      let pp = rules.find(i => i.filterProd(product))
      let prevModel = product.prevPriceModel(this)
    ) {
      SaleCampaignPrice(product = product, prevModel = prevModel, rule = pp)
    }
  }
  
  impl view form = nav{
    grid(label = "Settings") {
      x{state name >> field(fontStyle = H3, stretch = 1)}
      row {start end}
      rules >> list {grid{
        filters >> list(frame = false)
        mods >> list(frame = false)
      }}
    }
    pmNavButtons
  }
}

entity SaleCampaignRule extends InlineEntity with IProdFilterOwner with IPriceModOwner  {
  field campaign: SaleCampaign
  
}

class SaleCampaignPrice extends IPriceSales {
  impl field product: IBaseProduct
  field prevModel: IPriceModel
  system field rule: SaleCampaignRule
  impl func model = rule.campaign
  
  impl func salesPrice(currency: Currency, inclGst: Bool, level: PriceLevel?): Future[SalesPrice] = {
    let prevPrice <- prevModel.priceSales(product)!.salesPrice(currency, inclGst, level)
    
    let newPrice <- rule.applyMods(product, 1, prevPrice.regular)
    if (newPrice < prevPrice.current) prevPrice.withCurrent(newPrice) else prevPrice
  }
  
  impl func salesAmount(currency: Currency, customer: ICustomer?, level: PriceLevel?, qty: UQty, inclGst: Bool): Future[SalesPrice] = {
    let prevPrice <- prevModel.priceSales(product)!.salesAmount(currency, customer, level, qty, inclGst)
    let newPrice <- rule.applyMods(product, qty, prevPrice.regular)
    if (newPrice < prevPrice.current) prevPrice.withCurrent(newPrice) else prevPrice
  }
  
  impl view form = x {salesPrice >> field(frame = false) rule.campaign}
}
