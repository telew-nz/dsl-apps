interface IPriceSalesRent extends IPriceSales with IPriceRentDecorator {
  func priceType: PriceType
  override view form = y {
    levels >> field(visible = !IPriceLevel.onlyOne)
    x (visible = priceType == Sales) {
      salesPrice >> field(frame = false) model >> field(title = fullTitle, stretch = 1, align = Right)
    }
    x (visible = priceType == Rent) {
      rentPrices >> field(frame = false) model >> field(title = fullTitle, stretch = 1, align = Right)
    }
  }
  override func amount(request: PriceRequest, item: PriceOrderItem): Future[SalesPrice] = throw "Ambiguous amount price"
  override func has(type: PriceType): Bool = type == this.priceType
}

class PriceModApplier extends IPriceSalesRent {
  impl field product: IBaseProduct
  field prevPrice: IPrice {
    available(Inline)
  }
  system impl field model: SaleCampaign
  system field mod: IPriceModOwner
  field rounding: Rounding?
  field level: IPriceLevel
  impl func priceRent: IPriceRent = prevPrice.as[IPriceRent]!
  impl field priceType: PriceType
  impl func levels = [level]
  
  impl func autoCategories = model.saleCategories
  impl func autoTags = model.saleTags
  
  impl func salesPrice(request: PriceRequest): Future[SalesPrice] = {
    guard (prevPrice.is[IPriceSales]) else return SalesPrice()
    
    let prevPrice <- prevPrice.as[IPriceSales]!.salesPrice(request)    
    let newPrice <- mod.applyMods(request, PriceOrderItem(prod = product, qty = 1), prevPrice.regular)
    let np1 = if (let rounding) rounding.apply(newPrice) else newPrice
    if (np1 < prevPrice.current) {
      prevPrice.withCurrent(np1) 
    } else {
      prevPrice
    }
  }
  
  impl func amount(request: PriceRequest, item: PriceOrderItem): Future[SalesPrice] = {
    let prevPrice <- prevPrice.amount(request, item)
    let newPrice <- mod.applyMods(request, item, prevPrice.regular)
    let np1 = if (let rounding) {
      rounding.apply(newPrice / item.qty) * item.qty
    } else newPrice
    if (np1 < prevPrice.current) prevPrice.withCurrent(np1) else prevPrice
  }
  
  impl func rentPrices(request: PriceRequest): Future[[DurPrice]?] = {
    guard (prevPrice.is[IPriceRent]) else return []
    
    let pss <- priceRent.rentPrices(request)  
    pss.oneByOne{ps =>
      let newPrice <- mod.applyMods(request, PriceOrderItem(prod = product, qty = 1), ps.price.regular)
      let np1 = if (let rounding) rounding.apply(newPrice) else newPrice
      if (np1 < ps.price.current) DurPrice(unit = ps.unit, dur = ps.dur, price = ps.price.withCurrent(np1)) else ps
    }
  }
}