interface IPriceModel {
  func priority: Number? = 0
  func date: Date[day] = now
  
  func contains(superProduct: ISuperProduct): Bool = superProductPrice(superProduct)
  func superProductPrice(superProduct: ISuperProduct): IPrice?
  func productPrice(product: IProduct): IPrice? = superProductPrice(product.superProduct)
}
trait PriceModel extends IPriceModel {
  func currency: Currency = vendor.getCurrency
  ref field vendor: Actor by priceModels 
}
object EmptyPriceModel extends IPriceModel {
  func superProductPrice(superProduct: ISuperProduct): IPrice? = null
}

interface IPrice {
  func superProduct: ISuperProduct
  func salesPrice(currency: Currency, inclGst: Bool): Future[Money?]
  func salesAmount(currency: Currency, customer: LegalEntity?, qty: Qty, inclGst: Bool): Future[Money?] = {
    let p <- salesPrice(currency, inclGst)
    p*superProduct.toBase(qty)
  }
  func originalPrice(currency: Currency, inclGst: Bool): Future[Money?] = 0
  func originalAmount(currency: Currency, customer: LegalEntity?, qty: Qty, inclGst: Bool): Future[Money?] = {
    let p <- originalPrice(currency, inclGst)
    p*superProduct.toBase(qty)
  }
  func convertGst(gstRate: Percent?, price: Money?, priceInclGst: Bool, expectedInclGst: Bool): Money? = {
    if (priceInclGst == expectedInclGst) price 
    else if (expectedInclGst) price*(gstRate.withoutUnit + 1.0000)
    else price/(gstRate.withoutUnit + 1.0000)
  }
}

class Price extends IPrice {
  field superProduct: ISuperProduct
  field salesPrice: Money?
  field originalPrice: Money?
  func salesPrice(currency: Currency, inclGst: Bool): Future[Money?] = salesPrice.to[Money[currency]](now)
  func originalPrice(currency: Currency, inclGst: Bool): Future[Money?] = originalPrice.to[Money[currency]](now)
}