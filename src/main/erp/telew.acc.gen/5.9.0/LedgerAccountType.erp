enum LedgerAccountType(number: Int, isIncome: Bool, debit: Bool, credit: Bool, isError: Bool) {
  case Asset(number = 100, isIncome = false, debit = true, credit = false, isError = false){background = "#b6d7e2" color = "black"}
  case Liability(number = 200, isIncome = false, debit = false, credit = true, isError = false){background = "#fbd79d" color = "black"}
  case Equity(number = 300, isIncome = false, debit = false, credit = true, isError = false){background = "#dec4ee" color = "black"}
  
  case Revenue(number = 400, isIncome = true, debit = false, credit = true, isError = false){background = "#dea" color = "black"}
  case Expense(number = 500, isIncome = true, debit = true, credit = false, isError = false){background = "#fcc" color = "black"}

  case Trading(number = 600, isIncome = true, debit = true, credit = true, isError = false){background = "#ed9" color = "black"}

  case Error(number = 900, isIncome = true, debit = true, credit = true, isError = true) {background = "#fb786d" color = "#500"}
}

enum LedgerAccountSubType(type: LedgerAccountType, contra: Bool, profit: ProfitType?) {
  case Cash(type = Asset, contra = false, profit = null)
  case Receivables(type = Asset, contra = false, profit = null)
  case LoansProvided(type = Asset, contra = false, profit = null)
  case Inventory(type = Asset, contra = false, profit = null)
  case WorkInProgress(type = Asset, contra = false, profit = null)
  case PrepaidExpenses(type = Asset, contra = false, profit = null)
  case FixedAssets(type = Asset, contra = false, profit = null)
  case CurrentAssets(type = Asset, contra = false, profit = null)
  case Intangibles(type = Asset, contra = false, profit = null)
  case TermDeposits(type = Asset, contra = false, profit = null)
  case Shares(type = Asset, contra = false, profit = null)
  case NonCurrentAssets(type = Asset, contra = false, profit = null)
  case Asset(type = Asset, contra = false, profit = null) = "Other Assets"
  
  case Payables(type = Liability, contra = false, profit = null)
  case LoansReceived(type = Liability, contra = false, profit = null)
  case Provisions(type = Liability, contra = false, profit = null)
  case CurrentLiability(type = Liability, contra = false, profit = null)
  case NonCurrentLiability(type = Liability, contra = false, profit = null)
  case UnearnedRevenues(type = Liability, contra = false, profit = null)
  case CurrentAccountsLiability(type = Liability, contra = false, profit = null)
  case Liability(type = Liability, contra = false) = "Other Liabilities"
  
  case CurrentAccountsReceivable(type = Equity, contra = true, profit = null)
  case CurrentAccountsPayable(type = Equity, contra = false, profit = null)
  case Withdrawals(type = Equity, contra = false, profit = null)
  case DividendsPaid(type = Equity, contra = false, profit = null)
  case Equity(type = Equity, contra = false, profit = null)
  
  case Sales(type = Revenue, contra = false, profit = Gross) 
  case RentRevenue(type = Revenue, contra = false, profit = Gross)
  case InterestRevenue(type = Revenue, contra = false, profit = Net) 
  case DivedendsRevenue(type = Revenue, contra = false, profit = Net) 
  case OperatingRevenue(type = Revenue, contra = false, profit = Operating) 
  case NonOperatingRevenue(type = Revenue, contra = false, profit = Net) 
  case ExceptionalRevenue(type = Revenue, contra = false, profit = Exceptional) 
  case Revenue(type = Revenue, contra = false, profit = Net) = "Other Income"
  
  case CostOfGoodsSold(type = Expense, contra = false, profit = Gross) 
  case OperatingExpense(type = Expense, contra = false, profit = Operating) 
  case Overhead(type = Expense, contra = false, profit = Net) 
  case BadDebts(type = Expense, contra = false, profit = Net) 
  case DepreciationExpense(type = Expense, contra = false, profit = Net)
  case InterestExpense(type = Expense, contra = false, profit = Net) 
  case SalariesExpense(type = Expense, contra = false, profit = Net)
  case ExceptionalExpense(type = Expense, contra = false, profit = Exceptional) 
  case Expense(type = Expense, contra = false, profit = Net) = "Other Expense"
  
  case Trading(type = Trading, contra = false, profit = Net)
  case Error(type = Error, contra = false, profit = Net)
}

enum ProfitType(margin: String?) {
  case Gross(margin = "Gross Margin") = "Gross Profit"
  case Operating(margin = "Operating Margin") = "Operating Profit"
  case Net(margin = "") = "Net Profit"
  case Exceptional(margin = "") = "Exceptional Profit"
}
 
enum LedgerAccount(template: AccTemplate, debits: [LedgerSubAccount]?, credits: [LedgerSubAccount]?, taxable: UPercent[2]?, structureSpecific: Bool, closeWithPeriod: Bool, money: Bool) {
  object func retainedEarnings: LedgerAccount = throw "No Retained earnings account"
  
  func subs = debits + credits
  func debit = debits.first
  func credit = credits.first
  func contains(s: LedgerSubAccount): Bool = debits.contains(s) || credits.contains(s)
}

enum LedgerSubAccount(account: LedgerAccount, number: Int, subType: LedgerAccountSubType) {
  func type = subType.type
  func template = account.template
  func closeWithPeriod = account.closeWithPeriod
}