entity Competency{
  field selectTitle : CompetencyTitle inline by competencyRef
  compute report = "per person, company, department, workgroup, process, industry"
//  field generalPrinciple : [GeneralPrinciple]
    func title = selectTitle.title
    
}
entity CompetencyTitle{
  field manualTitle : String
  field competency : CompetencyLibrary
  field competencyRef : Competency
  func title = competency 
    //if manualTitle else Comptencylibrary
}
    
    entity CompetencyLibrary{
    field title : String
  }
entity OrganisationCompetency{
  field competency: Competency
  field person : [PersonCompetency]
  field status : OrganisationCompetencyStatus 
  compute Report = "per person, company, department, workgroup, process, industry etc" 
  func title = competency + status
}

 enum OrganisationCompetencyStatus {
   case Required
   case Employed
   case Transition // ie inbetween employees
   case AsRequired // ie contractor on call
   case Previous // ie previous employee , not required now
   case Future
 }
                  
                   
entity PersonCompetency {
  field person : Person
  field personCompetencyAssesment: [PersonCompetencyAssement] inline by personCompetency
  //field status = current, investigating, previous, planned, 
  compute report = "rating per process, industry, company, assesment type, date, assesor, assesorpostion"
  func title = person + personCompetencyAssesment
}                

entity PersonCompetencyAssement {
  field person : Person
  field assementType : AssesmentType
  field assesor : Person
  field rating : CompetencyAssesmentRating
//  field process : Process ?
  field task : String // related tasks/ projects
  //compute industry : Industry from company ?
  field organisation : OrganisationCompetency //= person.company ?
  field date : Date // = today
  field status : CompetencyAssesmentStatus = Complete
  field personCompetency : PersonCompetency
 // func entered by = Person.current
  func title = person + status
}
enum CompetencyAssesmentStatus{
  case Pending
  case Complete
  case Discarded
}
  
enum  CompetencyAssesmentRating {
  compute ratingType = "Simple Expectational Rating" 
  field simpleExpectationalRating :SimpleExpectationalRating
}

  enum SimpleExpectationalRating{
    case Execptional
    case ExceedsExpectations
    case MeetsExpectations
    case BelowExpectations
    case NeedsImprovement
  }
  
enum AssesmentType{
  case Observation
  case SelfAssesment
  case Education
  case createMoreMethodCases
  }