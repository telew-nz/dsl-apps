back class UpdateProducts extends SystemJob {
  field service: GoogleMerchantIntegration
  field integ: ECommerceIntegration
  field country: String
  field change: BatchChange[ProductUpdate[ICustomerProduct]]
  
  func do = {
    var n: Int? = 0
    var m: [Int -> ProductUpdate[ICustomerProduct]]? = null
    let rq = ProductsBatch(
      entries = (change.created + change.updated).map {i =>
        n = n + 1
        m = m + [n! -> i]
        ProductsBatchEntry(
          batchId = n!, merchantId = service.merchantId, method = "insert",
          product = GMProduct.create(service, integ, country, i)
        )
      } + change.deleted.map{i =>
        n = n + 1
        m = m + [n! -> i]
        ProductsBatchEntry(
          batchId = n!, merchantId = service.merchantId, method = "delete",
          productId = i.extId(service)
        )
      }
    )
	let response <- service.https("products/batch")
      .param("dryRun", if (service.dryRun) "true" else "false")
      .post(rq.json)
    let r = response.body!.parseJson[ProductsBatch]
    if (!service.dryRun) {
      r.entries.foreach {e =>
        let u = m.apply(e.batchId)!
        if (u.deleted) {
          u.product.deleteExtId(service)
        } else if (let p = e.product) {
          u.product.updateExtId(service, e.product!.id)
        }
      }
    }
    r.check(rq)
  }
  
}

back class ProductsBatch {
  field entries: [ProductsBatchEntry]?
  func check(request: AnyRef): Void = {
     if (let err = entries*.errors*.message) {
       throw err.join(", ") + "\n$(request.json)"
     }
  }
}

back class ProductsBatchEntry {
  field batchId: Int
  field merchantId: Int
  field method: String
  field productId: String?
  field product: GMProduct?
  field errors: GMErrors?
}

back class GMErrors {
  field code: Int
  field message: String
}

