back class GMProduct {
  field id: String?
  field offerId: String
  field itemGroupId: String?
  field targetCountry: String

  field identifierExists: Bool
  field gtin: String?
  field mpn: String?
  
  field title: String
  field pattern: String?
  field description: PlainText?
  field link: Url?
  field imageLink: Url?
  field additionalImageLinks: [Url]?
  field contentLanguage: String = "en"
  field channel: String = "online"
  field availability: String = "in stock"
  field condition: String = "new"
  field color: String?
  
  field googleProductCategory: String?
  field productType: String?
  field additionalProductTypes: [String]?

  field price: GMPrice
  field salePrice: GMPrice
  field isBundle: Bool
  field multipack: Int?
  field brand: String?
 
  object func create(service: GoogleMerchantIntegration, integ: ECommerceIntegration, country: String, u: ProductUpdate[ISubProduct]): GMProduct = {
    let p = u.product
    let v = p.as[IComplexSubProduct]
    let sp = v?.superProduct
    let photos = (p.collectPhotos + sp?.collectPhotos).distinct.mapOpt(_.extUrl(integ))
    let cats = p.superProduct.categories*.gmProductType
    GMProduct(
      offerId = p.sku
      itemGroupId = sp?.sku
      targetCountry = country
      identifierExists = p.refNum
      mpn = p.refNum
      title = p.getGMTitle
      pattern = sp?.title
      link = p.extUrl(integ),
      imageLink = photos.first
      additionalImageLinks = photos.drop(1)
      color = p.as[ISubVariation]?.attrTerms*.as[ColorItem].first?.title
      description = p.shortDescription.or(p.description),
      condition = if (p.isNew) "new" else "used"
      price = GMPrice.create(u.price!.regular!),
      salePrice = GMPrice.create(u.price!.current!)
      brand = p.superProduct.brands.first?.title
      isBundle = p.is[IKit],
      multipack = p.as[IKit]?.products.toSeq.onlyOne?.#1,
      productType = cats.first
      additionalProductTypes = cats.drop(1)
      googleProductCategory = p.superProduct.categories*.googleProductCategory.first
    )
  }
}

back class GMPrice {
  field value: String
  field currency: String?
  object func create(v: Money): GMPrice = {
    GMPrice(value = v.noUnit.unformattedString, currency = v.unit!.name)
  }
}