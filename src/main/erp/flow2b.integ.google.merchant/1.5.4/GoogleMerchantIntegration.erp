entity GoogleMerchantIntegration extends ICatalogIntegration[String] with OAuth2 {
  impl func title = "Google Merchant Integration $label"
  ref field label: String?
  field merchantId: Int
  field targetCountries: [String] {
    default = ["NZ"]
    label = "Target Country Codes"
  }
  field dryRun: Bool
  impl func roles: [Role]? = [Admin]
  impl func authParams = ["access_type" -> "offline", 
                     "include_granted_scopes" -> "true", 
                     "prompt" -> "consent"]
  impl func authAuthorizeUrl: Url = "https://accounts.google.com/o/oauth2/v2/auth"
  impl func authTokenExchangeUrl: Url = "https://www.googleapis.com/oauth2/v4/token"
  impl func authClientId = "905664746404-703m7338nok8remj4flan3q77c4vrpe3.apps.googleusercontent.com"
  impl func authClientSecret = "jOngIi3U1dFQSwPguJPsnYwh"
  impl func authScope: Url = "https://www.googleapis.com/auth/content"
  func endpoint: Url = "www.googleapis.com/content/v2/"
  
  func https(path: Url?): HttpRequest = {
    HttpRequest(url = "$endpoint$path", ssl = true)
      .auth(this)
  } 
     
  impl view form = nav{
    grid(labels = Top){
      issuesView
      serviceState
      errorsCount >> field(editMode = AlwaysRead)
      label
      merchantId
      targetCountries
      integs
      dryRun
    }
    authorizeView
  }
  impl event onSave = {
    if (created || updated(dryRun) || updated(integs) || updated(serviceState) || updated(targetCountries) || updated(merchantId)) {
      if (serviceState == Active && !deleted) {
        updateAllProducts()
      }
    }
  }
  
  impl back func updateProductJobs(integ: ECommerceIntegration, change: BatchChange[ProductUpdate[ISubProduct]]): [SystemJob]? = {
    targetCountries.map{c =>
      UpdateProducts(service = this, integ = integ, country = c, change = change)
    }
  }
}
