entity BullionDealsPricing extends PriceModel {
  func title = "BDP $vendor"
  func contains(superProduct: ISuperProduct): Bool = {
    if (let p = superProduct.as[BullionSuperProduct]) {
      try? p.metalType
    } else false
  }
  field margins: [MetalMargin]
  func superProductSalesPrice(superProduct: ISuperProduct): Future[Money?] = {
    superProductSalesPrice(superProduct, 1)
  }
  func superProductSalesPrice(superProduct: ISuperProduct, qty: Qty): Future[Money?] = {
    if (let p = superProduct.as[BullionSuperProduct]
        let metalMargins = margins.filter(metal == p.metalType).sortBy(minQty)
    ) {
      let q = p.pureWeightOz.as[Qty[ProductUnit.Ounce, 5]]*qty
      let m = metalMargins.find(q.between(minQty, maxQty))
          .alt(if (q < metalMargins.first.minQty) metalMargins.first else metalMargins.last)
      let margin = m.margin(q)
      let minSupplierPrice: Money[currency]? <- BullionSupplierProductPrice.all
          .filter(product == p)
          .map(calcSalesPrice)
          .map(to[Money[currency]](now))
          .agg(min)
          .result
      if (minSupplierPrice) {
        Future.apply(minSupplierPrice + minSupplierPrice*margin)
      } else {
        let metalPrice: Money[currency]? <- p.metalCost.to[Money[currency]](now)
        let sp = metalPrice + metalPrice*m.defaultSupplierMargin
        sp + sp*margin
      }
    } else Future.apply(0)
  }
  func superProductSalesAmount(superProduct: ISuperProduct, qty: Qty, customer: LegalEntity): Future[Money?] = {
    superProductSalesPrice(superProduct, qty)
  }
  view form = nav{grid{
    date
    vendor
    margins >> table {
      metal minQty maxMargin maxQty minMargin defaultSupplierMargin
    }
  }}
}


class MetalMargin {
  field metal: MetalType
  field minQty: Qty[ProductUnit.Ounce]
  field maxMargin: Percent[2]
    
  field maxQty: Qty[ProductUnit.Ounce] {isValid = maxQty != minQty}
  field minMargin: Percent[2]

  field defaultSupplierMargin: Percent[2]
  
  func margin(qty: Qty[ProductUnit.Ounce]): Percent = {
    if (qty <= minQty) maxMargin
    else if (qty >= maxQty) minMargin
    else (qty*(minMargin - maxMargin) + (maxQty*maxMargin - minQty*minMargin))/(maxQty - minQty)
  }
}