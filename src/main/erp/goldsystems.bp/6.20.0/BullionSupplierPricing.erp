entity BullionSupplierPricing extends IStaticPriceModel {
  ref field date: Date = now
  impl func title = "BSP $vendor $date"
  func contains(superProduct: ISuperProduct): Bool  = products.exists(i => i.product == superProduct)
  field products: [BullionSupplierProductPrice]? inline by pricing
  impl func priceSales(product: IBaseProduct) = {
    products.find(i => i.superProduct == product)
  }
  impl view form = nav{grid{
    date
    vendor
    products >> table {
      product >> field(width = 0.4) percentMargin >> field(width = 0.2) fixedMargin >> field(width = 0.2) salesPrice >> field(width = 0.2)
    }
  }}
}
  
inline entity BullionSupplierProductPrice extends IStaticPrice with IPriceSales {
  impl func model = pricing
  func superProduct = product.superProduct
  system field pricing: BullionSupplierPricing inline by products
//  field product: BullionSuperProduct
  field percentMargin: Percent?
  field fixedMargin: Money[currency]?
  
  impl func salesPrice(currency: Currency, inclGst: Bool, level: PriceLevel?): Future[SalesPrice] = {
    let metalPrice <- product.superProduct.as[BullionSuperProduct]?.metalCost.to[UMoney[currency]](now)
    let fm <- fixedMargin.to[UMoney[currency]](now)
    let p = (metalPrice + metalPrice*percentMargin + fm).positive
    SalesPrice(currency = currency, current = p, regular = p)
  }
  impl event onSave = product.touch
    
  impl view form = salesPrice
}
