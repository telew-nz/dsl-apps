entity BullionName {
  field title : String
  field products : [BullionSuperProduct]? read by name
} 
 
trait BullionSuperProduct extends MetalSuperProduct {
  compute title = (if (status == Invalid) "INVALID: " else "") + name + " " + metalType + " "  + size.withoutUnit.as[Number]! + " " + sizeUnit.symbol + " "  + productForm + " " + purity + (if(withAssayCertificate) " with Assay Certificate" else "")
  ref field name : BullionName by products 
  
  ref field productForm : Form {
    label = "Form"
  }
  ref field status : Status = Entered
  field minStock: Dec[2]? {label = "Minimum Stock"}
  ref field size: Qty[sizeUnit, 5] {
    update = puteWeightUpdated()
  }
  ref field sizeUnit: ProductUnit {
    update = puteWeightUpdated()
  }
  field mint : Company? //validate by mint
  field legalTenderAmount : Int?
  field serialised : Bool
  ref field withAssayCertificate: Bool
  field description: Text?
  field alwaysAvailable: Bool {label = "Always Available for Sale"}
  view header = grid(width = 1.2){
    row{sku >> field(width = 0.4) title >> field(width = 0.8)}
    duplicates >> list(css = "background: #f99"){_}
    categories
    status
    name
    row{productForm >> field(width = 0.4) metalType >> field(width = 0.8)}
    row{size >> field(canEditUnit = true) totalWeight totalWeightOz}
    edit{puritySelection}
    row{purity pureWeight pureWeightOz}
    row{mint legalTenderAmount serialised}
    row{withAssayCertificate obsolete alwaysAvailable}
    pricesView >> field(label = "Prices", visible = prices)
    description
  }
  compute duplicates: [BullionSuperProduct]? = {
    let t = try? title
    if (t.isDefined) BullionSuperProduct.all.filter(p => p.title == t && p.id != id) else []
  }
} 

extend enum ProductUnit {
  case Tube (symbol = "Tube" scale = 4, base = null, k = 1)
  case MonsterBox (symbol = "MB" scale = 4, base = Ounce, k = 500)
}

enum Status {
  case Entered {
    background = "#ed9"
  }
  case Approved {
    background = "#efd"
  }
  case Invalid {
    background = "#f99"
  }
}

enum Form {
  case Bar
  case Coin
  case Round
}
