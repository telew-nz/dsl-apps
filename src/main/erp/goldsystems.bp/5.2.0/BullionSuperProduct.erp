entity BullionName {
  field title : String
  field products : [BullionSuperProduct]? read by name
}

trait BullionSuperProduct extends ISuperProduct {
  compute title = (if (status == Invalid) "INVALID: " else "") + name + " " + metalType + " "  + size.withoutUnit.as[Number]! + " " + sizeUnit.symbol + " "  + productForm + " " + purity + (if(withAssayCertificate) " with Assay Certificate" else "")
  ref field name : BullionName by products 
  func isValid = status != Invalid
  ref field productForm : Form {
    label = "Form"
  }
  ref field metalType : MetalType 
  ref field size: Qty[sizeUnit] 
  func unit: ProductUnit = Item
  ref field sizeUnit: ProductUnit
  compute totalWeight : Qty[ProductUnit.Gram] = size*sizeUnit.k
  compute totalWeightOz : Qty[ProductUnit.Ounce] = if (sizeUnit == Ounce) size else totalWeight/ProductUnit.Ounce.k
  compute puritySelection: Purity? {
    value = Purity.all.find(value == purity)
    update = {purity =? new?.value}
  }
  ref field purity: Dec[5]
  compute isPure = purity > metalType.purityThreshold
  compute pureWeight = totalWeight.as[Dec[5]]*purity  // enter or compute from weight and purity
  compute pureWeightOz = totalWeightOz.as[Dec[5]]*purity
  func metalCost = pureWeightOz.as[Money[metalType.currency!]]

  ref field status : Status = Entered
  field minStock: Dec[2]? {label = "Minimum Stock"}
  
  field mint : Company? //validate by mint
  field legalTenderAmount : Int?
  field serialised : Bool
  ref field withAssayCertificate: Bool
  field description: Text?
  view header = grid(width = 1.2){
    row{sku >> field(width = 0.4) title >> field(width = 0.8)}
    duplicates >> list(css = "background: #f99"){_}
    categories
    status
    name
    minStock
    row{productForm >> field(width = 0.4) metalType >> field(width = 0.8)}
    row{size >> field(canEditUnit = true) totalWeight totalWeightOz}
    edit{puritySelection}
    row{purity pureWeight pureWeightOz}
    row{mint legalTenderAmount serialised}
    row{withAssayCertificate space space}
    pricesView >> field(label = "Prices", visible = prices)
    description
  }
  compute duplicates: [BullionSuperProduct]? = {
    let t = try? title
    if (t.isDefined) BullionSuperProduct.all.filter(p => p.title == t && p.id != id) else []
  }
    //field variant : [Variant] inline by product
  // compute StockReport , at product level by location, drill into stocked types, drill into items. Items can hold serialised numbers, condition for circulated
 // add StockTake by product level, or by stocked types 
  // compute margin range from stockedtypes
  //  compute karat from purity 
//  field margin : Margin
//  field supplierPrices : [SupplierPrice] read by product
 

 // field totalTroyOunce : Int //enter or compute from weight
 // field pureTroyOunce : Int //compute from weight/ purity
//  field finess: LegalFiness //inline by product (get it inline from common app )// show users country , and easily navigate other countries, ideally intuatively by most used/ closest
//  field packaging : [Packaging]
//  field certifications : [Certification]?
  //field dated : Bool?
//  field mintageRange : MintageRange?
//  field mintages : [SpecificMintage]?
  
  
 
  //class MintageRange {
//    field mintageRangeFrom : Date
//    field mintageRangeTo : Date
//  }
} 

extend enum ProductUnit {
  case Gram(symbol = "g", scale = 2, base = null, k = 1)
  case Kilo(symbol = "kg", scale = 4, base = Gram, k = 1000)
  case Ounce(symbol = "oz", scale = 4, base = Gram, k = 31.1034768)
  case Tube (symbol = "Tube" scale = 4, base = null, k = 1)
  case MonsterBox (symbol = "MB" scale = 4, base = Ounce, k = 500)
}

enum Status {
  case Entered {
    background = "#ed9"
  }
  case Approved {
    background = "#efd"
  }
  case Invalid {
    background = "#f99"
  }
}

enum Form {
  case Bar
  case Coin
  case Round
}
//entity SpecificMintage{
//  field releaseDate : Date
//  field mint : Company // validate by mint
//  field qty : Int
//  field productDated : Date
//  field mintMark : String
//  func title = mint + " " + releaseDate 
//}
