report MetalPosition {
  view list = StockRegister.current
    .filter(good.superProduct.is[BullionSuperProduct])
    .map(good = good.superProduct.as[BullionSuperProduct]!, fact, outlook)
    .groupBy(good.metalType)
    .agg(fact = map((good.pureWeight*fact).as[Qty[ProductUnit.Gram]]).sum, 
         outlook = map((good.pureWeight*outlook).as[Qty[ProductUnit.Gram]]).sum,
         factOunces = map((good.pureWeightOz*fact).as[Qty[ProductUnit.Ounce]]).sum,
	     outlookOunces = map((good.pureWeightOz*outlook).as[Qty[ProductUnit.Ounce]]).sum
    ).map {
      let factNzd <- factOunces.as[Money[metalType.currency!]].to[Money[NZD]](Date.now)
      let outlookNzd <- outlookOunces.as[Money[metalType.currency!]].to[Money[NZD]](Date.now)
      (metalType, fact, outlook, factOunces, outlookOunces, factNzd, outlookNzd)
    }.total {
      (factNzd.sum, outlookNzd.sum)
    } >> nav {
      total {
        row {space, space, space, space, space, factNzd, outlookNzd}
        table {
          metalType, fact, outlook, factOunces, outlookOunces, factNzd >> field(width = 0.23), outlookNzd  >> field(width = 0.23)
        }
      }
    }
}

extend access FinanceManager {
  menu Finance {
    report MetalPosition
  }
}
extend access InventoryManager {
  menu Inventory {
    report MetalPosition
    report MetalLocation
  }
}

report MetalLocation {
  view list = StockRegister.current
    .filter(good.superProduct.is[BullionSuperProduct])
    .map(store, good = good.superProduct.as[BullionSuperProduct]!, fact, outlook)
    .groupBy(store, good.productForm, good.size, good.metalType)
    .agg(
      factQty = fact.sum,
      outlookQty = outlook.sum,
      factGrams = map((good.pureWeight*fact).as[Qty[ProductUnit.Gram]]).sum, 
      outlookGrams = map((good.pureWeight*outlook).as[Qty[ProductUnit.Gram]]).sum,
      factOunces = map((good.pureWeightOz*fact).as[Qty[ProductUnit.Ounce]]).sum,
	  outlookOunces = map((good.pureWeightOz*outlook).as[Qty[ProductUnit.Ounce]]).sum
    )
}