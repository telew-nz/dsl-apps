entity BullionDealsPricing extends IDynamicPriceModel {
  func title = "BDP $vendor"
  func contains(product: IBaseProduct): Bool = {
    if (let p = product.superProduct.as[IMetalSuperProduct]) {
      if (p.isMetalProduct && !p.is[IKit]) (try? p.metalType) && vendor.hasGst != p.isPure
      else false
    } else false
  }
  field margins: [MetalMargin]
  field clearanceItems: [BullionDealsClearanceItem]? inline by model
  func priceSales(product: IBaseProduct) = {
    if (let p = product.superProduct.as[IMetalSuperProduct]) {
      if (!p.is[IKit] && p.isMetalProduct && vendor.hasGst != p.isPure) BullionDealsPrice(model = this, superProduct = p)
    }
  }
  
  view form = nav{grid{
    vendor
    margins >> table {
      metal minQty maxMargin maxQty minMargin defaultSupplierMargin
    }
    clearanceItems >> list { grid {
      product
      row {minQty maxMargin newMaxPrice originalMaxMargin originalMaxPrice}
      row {maxQty minMargin newMinPrice originalMinMargin originalMinPrice}
    }}
  }}
}

class BullionDealsPrice extends IPriceSales {
  field model: BullionDealsPricing
  func vendor = model.vendor
  field superProduct: IMetalSuperProduct
  func product = superProduct.as[ISuperProduct]!
    
  func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    salesAmount(currency, null, 1.as[UQty[product.unit]]!, inclGst)
  }
  func originalAmount(currency: Currency, customer: ICustomer?, qty: UQty, inclGst: Bool): Future[UMoney?] = {
    let p = superProduct
    if (let metalMargins = model.margins.filter(metal == p.metalType).sortBy(minQty)) {
      let q = p.pureWeightOz.as[UQty[ProductUnit.Ounce, 5]]!*qty
      let m = metalMargins.find(q.between(minQty, maxQty))
          .alt(if (q < metalMargins.first.minQty) metalMargins.first else metalMargins.last)
      let ps <- p.metalProducts.toSeq.map {pp =>
        productPrice(currency, pp.#0, (pp.#1*qty).positive!, m.margin(q), m.defaultSupplierMargin)
      }.allCompleted
      ps.sum
    } else Future(0)
  }
  
  private func productPrice(currency: Currency, p: MetalSuperProduct, qty: UQty, margin: Percent, defaultSupplierMargin: Percent): Future[UMoney?] = {
    let minSupplierPrice <- BullionSupplierProductPrice.all
      .filter(product.superProduct == p)
      .map(i => i.salesPrice(currency, true))
      .agg(current.min)
      .result
    if (minSupplierPrice) {
      Future((minSupplierPrice + minSupplierPrice*margin).positive*qty)
    } else {
      let metalPrice: UMoney[currency]? <- p.metalCost.to[UMoney[currency]](now)
      let sp = (metalPrice + metalPrice*defaultSupplierMargin)*qty
      (sp + sp*margin).positive
    }
  }
  func salesAmount(currency: Currency, customer: ICustomer?, qty: UQty, inclGst: Bool): Future[SalesPrice] = {
    let p = superProduct
    let oam <- originalAmount(currency, customer, qty, inclGst)
    if (let margins = model.clearanceItems.filter(product == p).sortBy(minQty)) {
      let m = margins.find(qty.between(minQty, maxQty))
          .alt(if (qty < margins.first.minQty) margins.first else margins.last)
      let margin = m.margin(qty)
      let metalPrice: UMoney[currency]? <- p.metalCost.to[UMoney[currency]](now)
      SalesPrice(currency = currency, current = (metalPrice + metalPrice*margin).positive*qty, regular = oam)
    } else {
      Future(SalesPrice(currency = currency, current = oam, regular = oam))
    }
  }

  view form = salesPrice
}

interface IMetalMargin {
  func unit: ProductUnit
  field minQty: UQty[unit]
  field maxMargin: Percent[2]
    
  field maxQty: UQty[unit] {validate = if (maxQty < minQty) "Max < Min"}
  field minMargin: Percent[2]
  
  func margin(qty: UQty): Percent = {
    if (qty <= minQty) maxMargin
    else if (qty >= maxQty) minMargin
    else {
      let a = (qty*(minMargin - maxMargin)).as[Qty[8]]
      let b = maxQty.as[Qty[8]]*maxMargin - minQty.as[Qty[8]]*minMargin
      let k = (maxQty - minQty)!
      (a + b)!/k
    }
  }
}
class MetalMargin extends IMetalMargin {
  field metal: MetalType
  field defaultSupplierMargin: Percent[2]
  func unit = ProductUnit.Ounce
}

inline entity BullionDealsClearanceItem extends IMetalMargin {
  singular = "Clearance Item"
  func unit = product.unit
  system field model: BullionDealsPricing by clearanceItems
  field product: BullionSuperProduct
  compute originalMaxMargin: Future[Percent[2]?] = origMaxMarginPrice.map(origMargin)
  compute originalMaxPrice: Future[UMoney?] = origMaxMarginPrice.map(origAmount/minQty)
  compute newMaxPrice: Future[UMoney?] = {
    let o <- origMaxMarginPrice
    let p = o.spotAmount/minQty
    (p + p*maxMargin).positive
  }
  compute origMaxMarginPrice: Future[OrigPrice] = originalMargin(minQty)
  
  compute originalMinMargin: Future[Percent[2]?] = origMinMarginPrice.map(origMargin)
  compute originalMinPrice: Future[UMoney?] = origMinMarginPrice.map(origAmount/maxQty)
  compute newMinPrice: Future[UMoney?] = {
    let o <- origMinMarginPrice
    let p = o.spotAmount/maxQty
    (p + p*minMargin).positive
  }
  compute origMinMarginPrice: Future[OrigPrice] = originalMargin(maxQty)

  func originalMargin(qty: UQty[product.unit]): Future[OrigPrice] = {
    Query(model).map{m =>
      let salesPrice <- m.priceSales(product)!.as[BullionDealsPrice]!.originalAmount(NZD, null, qty, true)
      let spotPrice <- (product.metalCost*qty).to[UMoney[NZD]](now)
      OrigPrice(spotAmount = spotPrice, origAmount = salesPrice)
    }.result
  }
}

class OrigPrice  {
  compute origMargin: Percent[2]? = if (let spotAmount) ((origAmount - spotAmount)/spotAmount).as[Percent[2]]
  field spotAmount: UMoney? 
  field origAmount: UMoney?
}