entity BullionName {
  field title : String
  field products : [BullionSuperProduct]? read by name
}  
      
trait BullionSuperProduct extends MetalSuperProduct {
  compute title = name + " " + metalType + " "  + size.withoutUnit.as[Number]! + " " + sizeUnit.symbol + " "  + productForm + " " + purity + (if(withAssayCertificate) " with Assay Certificate" else "")
  ref field name : BullionName by products 
  
  ref field productForm : Form {
    label = "Form"
  }
  ref field status : ProductStatus = Entered
  field minStock: Dec[2]? {label = "Minimum Stock"}
  ref field size: UQty[sizeUnit, 5] {
    update = puteWeightUpdated()
  }
  ref field sizeUnit: ProductUnit {
    update = puteWeightUpdated()
  }
  field mint : Company? //validate by mint
  field legalTenderAmount : Int?
  field serialised : Bool
  ref field withAssayCertificate: Bool
  field description: Text?
  view header = grid(width = 1.2){
    status >> field(label = "", compact)
    title >> field(label = "", fontStyle = H1)
    row {sku refNum space}
    brands
    categories
    name
    row{productForm >> field(width = 0.4) metalType >> field(width = 0.8)}
    row{size >> field(canEditUnit = true) totalWeight totalWeightOz}
    row{width height depth}
    edit{puritySelection}
    row{purity pureWeight pureWeightOz}
    row{mint legalTenderAmount serialised}
    row{withAssayCertificate space space}
    productCost
    baseMainView
    description
  }
  compute duplicates: [BullionSuperProduct]? = {
    let t = try? title
    if (t.isDefined) BullionSuperProduct.all.filter(p => p.title == t && p.id != id) else []
  }
} 


enum Form {
  case Bar
  case Coin
  case Round
}
