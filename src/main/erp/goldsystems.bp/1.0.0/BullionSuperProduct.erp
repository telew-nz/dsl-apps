entity BullionName {
  field title : String
  field products : [BullionSuperProduct]? read by name
}

trait BullionSuperProduct extends ISuperProduct {
  field number : Int
  //field title: String
  compute title = (if (status == Invalid) "INVALID: " else "") + name + " " + metalType + " "  + size.as[Number] + " " + unit.shortName + " "  + productForm + " " + purity + (if(withAssayCertificate) " with Assay Certificate" else "")
  ref field name : BullionName by products 
  func isValid = status != Invalid
  ref field productForm : Form {
    label = "Form"
  }
  ref field metalType : MetalType 
  ref field size: Dec[5] 
  ref field unit: BullionUnit 
  compute totalWeight : Dec[5] = size*unit.grams
  compute puritySelection: Purity? = (Purity.all.find(value == purity)) {
    update = {purity =? new?.value}
  }
  ref field purity: Dec[5]
  compute pureWeight : Dec[5] = totalWeight*purity  // enter or compute from weight and purity
  ref field status : Status = Entered
  field minStock: Dec[2]? {label = "Minimum Stock"}
  
  field mint : Company? //validate by mint
  field legalTenderAmount : Int?
  field serialised : Bool
  ref field withAssayCertificate: Bool
  view header = grid(width = 1.2){
    row{number >> field(width = 0.4) title >> field(width = 0.8)}
    duplicates >> list(css = "background: #f99"){_}
    status
    name
    minStock
    row{productForm >> field(width = 0.4) metalType >> field(width = 0.8)}
    row{size unit totalWeight}
    edit{puritySelection}
    row{purity pureWeight space}
    row{mint legalTenderAmount serialised}
    row{withAssayCertificate space space}
  }
  compute duplicates: [BullionSuperProduct]? = {
    let t = try? title
    if (t.isDefined) BullionSuperProduct.all.filter(p => p.title == t && p.id != id) else []
  }

    //field variant : [Variant] inline by product
  // compute StockReport , at product level by location, drill into stocked types, drill into items. Items can hold serialised numbers, condition for circulated
 // add StockTake by product level, or by stocked types 
  // compute margin range from stockedtypes
  //  compute karat from purity 
//  field margin : Margin
//  field supplierPrices : [SupplierPrice] read by product
 

 // field totalTroyOunce : Int //enter or compute from weight
 // field pureTroyOunce : Int //compute from weight/ purity
//  field finess: LegalFiness //inline by product (get it inline from common app )// show users country , and easily navigate other countries, ideally intuatively by most used/ closest
//  field packaging : [Packaging]
//  field certifications : [Certification]?
  //field dated : Bool?
//  field mintageRange : MintageRange?
//  field mintages : [SpecificMintage]?
  
  
 
  //class MintageRange {
//    field mintageRangeFrom : Date
//    field mintageRangeTo : Date
//  }
} 

enum BullionUnit(grams: Dec[8], shortName: String) {
  case Gram(grams = 1, shortName = "gram")
  case Ounce(grams = 31.1035, shortName = "oz")
  case Kilo(grams = 1000, shortName = "kilo")
}

enum Status {
  case Entered {
    background = "#ed9"
  }
  case Approved {
    background = "#efd"
  }
  case Invalid {
    background = "#f99"
  }
}

enum Form {
  case Bar
  case Coin
  case Round
}
   
//entity SpecificMintage{
//  field releaseDate : Date
//  field mint : Company // validate by mint
//  field qty : Int
//  field productDated : Date
//  field mintMark : String
//  func title = mint + " " + releaseDate 
//}
