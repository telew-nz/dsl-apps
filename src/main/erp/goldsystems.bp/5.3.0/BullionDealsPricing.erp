entity BullionDealsPricing extends PriceModel {
  func title = "BDP $vendor"
  func contains(superProduct: ISuperProduct): Bool = {
    if (let p = superProduct.as[BullionSuperProduct]) {
      (try? p.metalType) && vendor.as[LegalEntity]?.hasGst.alt(true) != p.isPure
    } else false
  }
  field margins: [MetalMargin]
  field clearanceItems: [BullionDealsClearanceItem]? inline by model
  func superProductPrice(superProduct: ISuperProduct): IPrice? = {
    if (let p = superProduct.as[BullionSuperProduct]) {
      if (vendor.as[LegalEntity]?.hasGst.alt(true) != p.isPure) BullionDealsPrice(model = this, superProduct = p)
    }
  }
  
  view form = nav{grid{
    date
    vendor
    margins >> table {
      metal minQty maxMargin maxQty minMargin defaultSupplierMargin
    }
    clearanceItems >> list { grid {
      product
      row {minQty maxMargin newMaxPrice originalMaxMargin originalMaxPrice}
      row {maxQty minMargin newMinPrice originalMinMargin originalMinPrice}
    }}
  }}
}

class BullionDealsPrice extends IPrice {
  field model: BullionDealsPricing
  field superProduct: BullionSuperProduct
    
  func salesPrice(currency: Currency, inclGst: Bool): Future[Money?] = {
    salesAmount(currency, null, 1.as[Qty[superProduct.unit]], inclGst)
  }
  func originalPrice(currency: Currency, inclGst: Bool): Future[Money?] = {
    originalAmount(currency, null, 1.as[Qty[superProduct.unit]], inclGst)
  }
  func originalAmount(currency: Currency, customer: LegalEntity?, qty: Qty, inclGst: Bool): Future[Money?] = {
    let p = superProduct
    if (let metalMargins = model.margins.filter(metal == p.metalType).sortBy(minQty)) {
      let q = p.pureWeightOz.as[Qty[ProductUnit.Ounce, 5]]*qty
      let m = metalMargins.find(q.between(minQty, maxQty))
          .alt(if (q < metalMargins.first.minQty) metalMargins.first else metalMargins.last)
      let margin = m.margin(q)
      let minSupplierPrice: Money[currency]? <- BullionSupplierProductPrice.all
          .filter(product == p)
          .map(salesPrice(currency, true))
          .agg(min)
          .result
      if (minSupplierPrice) {
        Future((minSupplierPrice + minSupplierPrice*margin)*qty)
      } else {
        let metalPrice: Money[currency]? <- p.metalCost.to[Money[currency]](now)
        let sp = (metalPrice + metalPrice*m.defaultSupplierMargin)*qty
        sp + sp*margin
      }
    } else Future(0)
  }
  func salesAmount(currency: Currency, customer: LegalEntity?, qty: Qty, inclGst: Bool): Future[Money?] = {
    let p = superProduct
    if (let margins = model.clearanceItems.filter(product == p).sortBy(minQty)) {
      let m = margins.find(qty.between(minQty, maxQty))
          .alt(if (qty < margins.first.minQty) margins.first else margins.last)
      let margin = m.margin(qty)
      let metalPrice: Money[currency]? <- p.metalCost.to[Money[currency]](now)
      (metalPrice + metalPrice*margin)*qty
    } else originalAmount(currency, customer, qty, inclGst)
  }
  compute salesPrice: Money? {
    value <- salesPrice(model.vendor.getCurrency, true)
    availableFor = All
  }
  view form = salesPrice
}

class MetalMargin {
  field metal: MetalType
  field minQty: Qty[ProductUnit.Ounce]
  field maxMargin: Percent[2]
    
  field maxQty: Qty[ProductUnit.Ounce] {isValid = maxQty > minQty}
  field minMargin: Percent[2]

  field defaultSupplierMargin: Percent[2]
  
  func margin(qty: Qty[ProductUnit.Ounce]): Percent = {
    if (qty <= minQty) maxMargin
    else if (qty >= maxQty) minMargin
    else (qty*(minMargin - maxMargin) + (maxQty*maxMargin - minQty*minMargin))/(maxQty - minQty)
  }
}

inline entity BullionDealsClearanceItem {
  singular = "Clearance Item"
  system field model: BullionDealsPricing by clearanceItems
  field product: BullionSuperProduct
  field minQty: Qty[product.unit]
  field maxMargin: Percent[2]
  compute originalMaxMargin: Percent[2]? = origMaxMarginPrice.origMargin
  compute originalMaxPrice: Money? = origMaxMarginPrice.origAmount/minQty
  compute newMaxPrice: Money? = {
    let p = origMaxMarginPrice.spotAmount/minQty
    p + p*maxMargin
  }
  compute origMaxMarginPrice: OrigPrice <- originalMargin(minQty)
  
    
  field maxQty: Qty[product.unit] {isValid = maxQty > minQty}
  field minMargin: Percent[2]
  compute originalMinMargin: Percent[2]? = origMinMarginPrice.origMargin
  compute originalMinPrice: Money? = origMinMarginPrice.origAmount/maxQty
  compute newMinPrice: Money? = {
    let p = origMinMarginPrice.spotAmount/maxQty
    p + p*minMargin
  }
  compute origMinMarginPrice: OrigPrice <- originalMargin(maxQty)

  func originalMargin(qty: Qty[product.unit]): Future[OrigPrice] = {
    Query(model).map{m =>
      let salesPrice <- m.superProductPrice(product)!.as[BullionDealsPrice]!.originalAmount(NZD, null, qty, true)
      let spotPrice <- (product.metalCost*qty).to[Money[NZD]](now)
      OrigPrice(spotAmount = spotPrice, origAmount = salesPrice)
    }.result
  }

  func margin(qty: Qty): Percent = {
    if (qty <= minQty) maxMargin
    else if (qty >= maxQty) minMargin
    else (qty*(minMargin - maxMargin) + (maxQty*maxMargin - minQty*minMargin))/(maxQty - minQty)
  }
}

class OrigPrice  {
  compute origMargin: Percent[2]? = ((origAmount - spotAmount)/spotAmount).as[Percent[2]]
  field spotAmount: Money? 
  field origAmount: Money?
}