extend trait IOrder {
  list field verificationStatus: VerificationStatus = (NotVerified) {views = []}  
}

extend entity SalesOrder {
  list compute grossMarginState: GrossMarginState = (if (grossMargin) Defined else Empty){views = []}
  compute duplicates: [SalesOrder]? = (if ((try? number).isDefined) SalesOrder.all.filter(p => p.number == number && p.id != id) else []) {
    views = []
  }
  extend view statusesView = verificationStatus
  extend view statusesView = grossMarginState >> field(visible = isComplete && !grossMargin)
  extend view form = duplicates >> list(css = "background: #f99"){_}
  extend compute number: String = (num) {update = {num = new}}
  ref field num: String {views = []}
  func nakedN = num
}

enum GrossMarginState {
  case Empty {
    label = "Empty Margin"
    background = "#ddd"
  }
  case Defined {
    label = "Defined Margin"
    color = "white"
    background = "#090"
  }
}

extend entity PurchaseOrder {
  extend view statusesView = verificationStatus
}


extend entity ISalesOrder {
  field grossMargin: Money[USD]? {views = []}
  extend view formExt = row{grossMargin, space}
}


enum VerificationStatus {
  case NotVerified {
    background = "#ddd"
  }
  case Verified {
    color = "white"
    background = "#090"
  }
}

enum RestoreState(complete: Bool) {
  case NotRestored(complete = false) {
    background = "#ddd"
  }
  case PartiallyRestored(complete = false) {
    background = "#ed9"
  }
  case Restored(complete = true) {
    color = "white"
    background = "#090"
  }
}
