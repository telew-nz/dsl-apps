entity SharedProduct extends IBasicProduct with IProductInv with BullionSuperProduct with HasLink[LinkedBullionProduct] {

	impl field status: ProductStatus
    
    impl ref compute title = calcTitle
    
    override func gstRate(vendor: LegalEntity?): UPercent[2]?? = if (isPure || (vendor && !vendor!.hasGst)) null else 0.15
    
    compute getPhotos: Future[[Image]?] = {
        let catalogueLink <- linkedEntity.map(_.as[LinkedBullionProduct]!)
        catalogueLink.getPhotos
    }
    
    compute getProduct: Future[BullionSuperProduct] = {
    	let catalogueLink <- linkedEntity.map(_.as[LinkedBullionProduct]!)
        catalogueLink.linkedEntity.map(_.as[BullionSuperProduct]!)
    }
    
    impl event onLoad = {
    	if (let e = try? linkedEntity) {
        	let l <- linkedEntity.map(_.as[LinkedBullionProduct]!)
            let ll <- l.linkedEntity.map(_.as[BullionSuperProduct]!)
            metalType = ll.metalType
            purity = ll.purity
            //revenueType = ll.revenueType
            if (!refNums.exists(_ == ll.sku)) refNums += [ll.sku]
        	save
        }
        else {
        	UI.back
        }
    }

    override view form = nav(onBarcode = if (ui.edit) addBarcode(barcode)){
      tabs {
        grid (labels = None, label = "Main") {
          getPhotos >> field(height = 10, label = "")
          statusView
          title >> field(label = "", fontStyle = H2)
          row {sku refNums trackItems}
          goldView
          getProduct >> x{ _.baseMainView }
        }
        superProductTabView
        subProductTabView
        extension("tabs")
        grid (labels = Top, label = "More") {
          unitsView
          barcodes
          extension
        }
      }
      superProductNavView
      productNavView
      /*
      button("Recode") {
        let _ <- IncomeRecodable.all.filter(income == this.revenueType?.as[IIncomeType])
          .foreach(recode).result
        UI.info("Claimable percentage and GST rate have been updated in the relevant transactions")
      }
      */
      extension("nav")
    }
	
    report Report {
    	impl view list = 
        	LinkedBullionProduct.search("something impossible").unionFuture({
           		let sid = CatalogueConfig.catalogueWid
                if (sid.cluster == 17) LinkedBullionProduct.all.inWorkspaceTry(17, sid.position, true).result
                else if (sid.cluster == 18) LinkedBullionProduct.all.inWorkspaceTry(18, sid.position, true).result
                else Future([]).as[Future[[LinkedBullionProduct]?]]
            })
                .filter(l => {
                	let lid = LongIdDb(l.linkedEntityId)
                    let sid = ShortIdDb(cluster=lid.workspaceCluster, position=lid.workspacePosition)
                    (!sid.isEqual(ShortIdDb(Workspace.current.authId)))
                })
                .filter(approval == Approved)
                .map(l => {
                	let sps <- SharedProduct.all.map(linkedEntityId).result
                    if (sps.exists(id => id == l.id)) {
                    	[].as[[SharedProduct]?]
                    }
                    else {
                    	let ll <- l.linkedEntity.map(_.as[BullionSuperProduct]!)
                        let n: BullionName <- BullionName.search(ll.name.title).result.map(n => {
                            if (let f = n.first) f
                            else BullionName(title = "placeholder")
                        })
                        [SharedProduct(
                            linkedEntityId = l.id.toString!, status = ll.status, name = n,
                            productForm = ll.productForm, size = ll.size, sizeUnit = ll.sizeUnit,
                            metalType = ll.metalType, purity = ll.purity
                        )].as[[SharedProduct]?]
                    }
                	
                })
                .flatMap(_)
                .union(SharedProduct.all)
            	.distinct
                .groupBy(l => l.linkedEntityId)
                .flatMap(m => {
                	if (m.items.count > 3) throw "Unexpected case (>3 linked entities with the same id)"
                    else if (m.items.count == 2) [m.items.filter(!_.id.toString.startsWith("-")).first!]
                    else m.items
                })
            >> nav {
            	list { grid(labels = None) { 
                	title
                } }
            }
    }
    
    impl func mainView = form
    
}