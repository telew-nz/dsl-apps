extend trait BullionSuperProduct extends CanBeLinked {

	impl view catalogueForm = this.goldView

}


entity LinkedBullionProduct extends HasLink[BullionSuperProduct] {
    
    impl func canRead = true
    
    field linkedEntityTitle: String
    field linkedEntityDeleted: Bool {
    	default = false
    }
    field approval: CatalogueApprovalStatus {
    	default = AwaitingReview
    }
    
    compute getPhotos: Future[[Image]?] = {
        let wid = LongIdDb(linkedEntityId)
        let photo_ids <- linkedEntity.map(_.as[BullionSuperProduct]!.photos.map(_.id))
        if (wid.workspaceCluster == 17) {
        	let imgs <- Image.all.inWorkspaceFullWid(17, wid.workspacePosition).result
            imgs.filter(img => photo_ids.exists(pid => pid == img.id))
        }
        else {
        	let imgs <- Image.all.inWorkspaceFullWid(18, wid.workspacePosition).result
            imgs.filter(img => photo_ids.exists(pid => pid == img.id))
        }
    }
    
	impl compute title =
        "[Catalogue${
        	if (let id = try? linkedEntityId) " ${LongIdDb(id).toStringWorkspace}"
            else ""
            }${
    		if (id.isEmpty) " TMP"
        	else ""
    	}] $linkedEntityTitle"
    
    impl event onLoad = {
    	if (let e = try? linkedEntityId) {
        	let l <- linkedEntity
            linkedEntityTitle = l.title
            if (l.deleted && !linkedEntityDeleted) {
                linkedEntityDeleted = true
            }
            if (!l.deleted && linkedEntityDeleted) {
                linkedEntityDeleted = false
            }
        	save
        }
        else {
        	UI.back
        }
    }
    
    impl view form = nav { linkedEntity.map(_.as[StandardBullionProduct]!) >> tabs {
        grid (labels = None, label = "Main") {
          approval >> field(label = "Approval Status", editMode = Original)
          getPhotos >> field(height = 10, label = "")
          statusView
          title >> field(label = "", fontStyle = H2)
          row {sku refNums trackItems}
          goldView
          baseMainView
        }
        superProductTabView
        subProductTabView
        extension("tabs")
        grid (labels = Top, label = "More") {
          unitsView
          barcodes
          extension
        }
      }
    }
    
}
