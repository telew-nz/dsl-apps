trait HasLink extends Entity {

	field linkedEntityId: String

}


trait HasBullionProductLink extends HasLink {

    compute linkedEntity: Future[BullionSuperProduct] = {
		AnyEntity.load(linkedEntityId).result.map(_.as[BullionSuperProduct]!).recover(err => {
			throw "Couldn't convert linked entity to BullionSuperProduct"
		})
    }
    
}


trait CatalogueItem extends HasBullionProductLink {

	field approval: CatalogueApprovalStatus {
    	default = AwaitingReview
    }
    
}


trait SharedItem extends HasBullionProductLink {

	field catalogueLinkId: String
	field catalogueApproval: CatalogueApprovalStatus?
    func getCatalogueApproval: Future[CatalogueApprovalStatus] = {
    	let wid = LongIdDb(catalogueLinkId)
        if (wid.workspaceCluster == 17) {
        	CatalogueItem.all.inWorkspaceFullWid(17, wid.workspacePosition)
                .filter(id.toString! == wid.toStringItem)
                .map(approval)
                .result.map(_.first!)
        }
        else if (wid.workspaceCluster == 18) {
        	CatalogueItem.all.inWorkspaceFullWid(18, wid.workspacePosition)
                .filter(id.toString! == wid.toStringItem)
                .map(approval)
                .result.map(_.first!)
        }
        else throw "Couldn't get catalogue approval status - catalogue cluster '${wid.workspaceCluster}' is not supported."
    }

}


enum CatalogueApprovalStatus {

	case AwaitingReview {
    	icon = "question-circle"
    	background = "#e4d0f1"
    }
    case Approved {
    	icon = "check-circle"
    	background = "#090"
    }
    case Rejected {
    	background = "#f99"
    	icon = "car-crash"
    }

}