extend trait IBaseProduct extends HasExtId 
extend entity File extends HasExtId


extend trait ICustomerSuperProduct {
  event onSave = {
	if (!IUser.current.is[ECommerceIntegration]) {
      customerProducts*.touch
      ECommerceIntegration.all.map {service =>
        if (service.userEnabled) {
          let po <- service.productUpdate(this, updated(photos))
          let b = BatchChange.create(service, [po])
          if (!b.isEmpty) service.uploadProductJobs(b)*.run
        }
      }.result
    }
  }
}

class ProductUpdate[P extends IBaseProduct] extends IHasExtIdDecorator {
  func extIdItem = product
  field product: P
  field stock: Qty?
  field price: SalesPrice
  field photosUpdated: Bool
  field enabled: Bool
  func deleted: Bool = product.deleted
  func toString = "Update($product $enabled)"
}

extend trait ECommerceIntegration {
  back func uploadAllProducts(): Future[Void] = {
    let prods <- ICustomerSuperProduct.all.map(productUpdate(_, photosUpdated = true)).result
    let b = BatchChange.createAndFilter(this, prods, item.enabled || extId)
    if (!b.isEmpty) uploadProductJobs(b)*.run()
  }
  
  back func productUpdate[P extends IBaseProduct](product: P, photosUpdated: Bool): Future[ProductUpdate[P]] = {
    if (product.deleted 
     || !product.forSale
     || (this.categories && !this.categories.intersect(product.superProduct.categories)) 
     || (this.brands && !this.brands.intersect(product.superProduct.brands)) 
    ) {
      ProductUpdate[P](product = product, enabled = false)
    } else if (let pr = legalEntity.price(product)) {
      let sp <- pr.salesPrice(currency, inclGst = true)
      let stock = if (product.status == ForSale) stockLevel.get(product.calcStock(null, legalEntity, stores)).max(0)
      ProductUpdate[P](
        product = product,
        price = sp,
        stock = stock,
        photosUpdated = photosUpdated,
        enabled = !sp.isEmpty && (product.status == AlwaysAvailableForSale || stock)
      ) 
    } else {
      ProductUpdate[P](product = product, enabled = false)
    }
  }
}