extend enum DashboardIssue {
  case ECommerceEmptyPaymentMethod(role = Admin, priority = major)
  case ECommerceEmptyDeliveryMethod(role = Admin, priority = major)
}

trait ECommerceIntegration[ID] extends Entity with SystemService with ExtIdSource[ID] with ISalesOrderImportProvider[ID] with SalesOrderUpdater[ID] with ISalesChannel {
  impl ref field legalEntity: OurLegalEntity {
    default =? onlyOne
    update = {
      inclGst = new.pricesIncludingGst
    }
  }    
  field currency: Currency = Currency.our
      
  system const field initComplete: Bool
  
  field inclGst: Bool {
    label = "Prices including GST"
    default = if (let le = try? legalEntity) le.pricesIncludingGst else true
  }
  impl field stores: [IStore]?
  field inclCategories: [IProductCategory]? {label = "Include Categories"}
  field exclCategories: [IProductCategory]? {label = "Exclude Categories"}
  field brands: [IBrand]?
  field rentalProducts: Bool {
    label = "Including Rental Products"
    default = true
  }
  field paymentMethods: [ECommercePaymentMethod]? inline by service
  field deliveryMethods: [ECommerceDeliveryMethod]? inline by service
  field pricesAutoUpdate: PricesAutoUpdate? inline by service {
    label = "Auto Update Prices"
  }
  field onlyWithPhotos: Bool {label = "Upload products with photos only"}
  field hidePrices: Bool
  field hidePriceCategories: [IProductCategory]? {
    visible = hidePrices
    label = "Hide prices only for categories"
  }
  field prodExtUrlSource: Bool {
    default = true
    label = "Update external URL"
  }
  field stockLevel: SyncStockLevel = Available
  field orderTerms: IOrderTerms?
  impl back func orderTerms(order: ESalesOrder[ID]): IOrderTerms? = if (let dm = order.deliveryMethod){
    deliveryMethods.find(method == dm)?.orderTerms
  }
  impl func service = this
  
  impl func salesChannel = this
  impl func paymentMethodAccounts = paymentMethods.filter(account).map(method, account!).toMap
  impl func deliveryMethodProducts = deliveryMethods.filter(product).map(method, product!).toMap
     
  impl func roles: [Role]? = [Admin]
  override func issues: [DashboardIssue]? = {
    let diss: [DashboardIssue]? = super.issues
    diss + ((if (paymentMethods.exists(!account)) [DashboardIssue.ECommerceEmptyPaymentMethod]) + (if (deliveryMethods.exists(!product)) [DashboardIssue.ECommerceEmptyDeliveryMethod])).toSet
  }
  
  impl view form = nav{tabs {
    grid(labels = Top, label = "Main") {
      issuesView
      serviceState >> field(label = "")
      legalEntity
      orderTerms
      mainView >> field(label = "")
    }
    grid(labels = Top, label = "Products") {
      inclGst
      inclCategories
      exclCategories
      currency
      stockLevel >> field(compact = true)
      rentalProducts
      stores
      onlyWithPhotos
      hidePrices
      hidePriceCategories
      prodExtUrlSource
      productViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Payment") {
      paymentMethods
      paymentViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Delivery") {
      deliveryMethods
      deliveryViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Advanced") {
      pricesAutoUpdate
      advancedViewEx >> field(label = "")
    }
  }}
  
  
  view emptyView = group{}
    
  impl event onSave = {
    if (serviceState == Active && !deleted && (created || settingsUpdated)) {
      syncAll()
    }
  }
  back func settingsUpdated: Bool = {
    updated(stockLevel) || updated(serviceState) || 
      updated(stores) || updated(inclCategories) || 
      updated(exclCategories) || updated(legalEntity) || updated(currency) ||
      updated(inclGst)
  }
  back func createWebhooks(): Void = {
    createWebhookJobs*.enqueue
  }
  
  back func downloadAllCustomers(): Void = {
    downloadCustomersJobs*.enqueue
  }
  back func downloadPaymentMethods(): Void = {
    downloadPaymentMethodJobs*.enqueue
  }
  back func downloadDeliveryMethods(): Void = {
    downloadDeliveryMethodJobs*.enqueue
  }
  
  back func syncAll(): Future[Void] = {
    ECommerceSyncAllJob(service = this).enqueue
  }
  
  back func updatePaymentMethod(method: String, update: ECommercePaymentMethod => Void): Void = {
    update(paymentMethods.find(m => m.method == method).alt(ECommercePaymentMethod(service = this, method = method)).save)
  }
  back func updateDeliveryMethod(method: String, update: ECommerceDeliveryMethod => Void): Void = {
    update(deliveryMethods.find(m => m.method == method).alt(ECommerceDeliveryMethod(service = this, method = method)).save)
  }
}

class ECommerceSyncAllJob extends SystemJob {
  impl field service: ECommerceIntegration
  
  impl func do = {
    if (!service.initComplete) {
      if (let initialDownload = service.initialDownload) {
        initialDownload.run
        InitialDownloadCompleteJob(service = service).enqueue
      } else {
        service.initComplete = true
      }
    }
    service.downloadPaymentMethods()
    service.downloadDeliveryMethods()
    service.downloadAllCustomers()
    service.downloadNewOrders()
    
    service.uploadAllAttrs()
    service.uploadAllAttrTerms()
    service.uploadAllTaxonomies()
    let _ <- service.uploadAllProducts()
    service.createWebhooks()
  }
}

inline entity ECommercePaymentMethod {
  field service: ECommerceIntegration by paymentMethods
  field method: String {label = "Payment Method Code"}
  field name: String? 
  field account: FinAccount?
}

inline entity ECommerceDeliveryMethod {
  field service: ECommerceIntegration by deliveryMethods
  field method: String {label = "Delivery Method Code"}
  field name: String?
  field product: ISubProduct?
  field _orderTerms: IOrderTerms? {views = []}
  compute orderTerms: IOrderTerms? {
    value = _orderTerms.or(service.orderTerms)
    update = {
      _orderTerms = if (new != service.orderTerms) new
    }
  }
}

enum SyncStockLevel(sales: Stock? => Qty?, rent: Stock? => Qty?) {
  case Available(sales = (s: Stock?) => s?.available, rent = (s: Stock?) => s?.outlook) = "Available = Fact - Reserve"
  case Outlook(sales = (s: Stock?) => s?.outlook, rent = (s: Stock?) => s?.outlook) = "Outlook = Fact - Reserve + Expectation"
}
