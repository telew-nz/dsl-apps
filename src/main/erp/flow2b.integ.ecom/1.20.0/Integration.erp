extend enum DashboardIssue {
  case ECommerceEmptyPaymentMethod(role = Admin, priority = major)
  case ECommerceEmptyDeliveryMethod(role = Admin, priority = major)
}

trait ECommerceIntegration[ID] extends Entity with SystemService with ExtIdSource[ID] with ISalesOrderImportProvider[ID] with ISalesChannel {
  ref field legalEntity: OurLegalEntity {
    default =? onlyOne
  }    
  field currency: Currency = Currency.our
      
  system const field initComplete: Bool
  
  field stores: [IStore]?
  field categories: [IProductCategory]?
  field brands: [IBrand]?
  field paymentMethods: [ECommercePaymentMethod]? inline by service
  field deliveryMethods: [ECommerceDeliveryMethod]? inline by service
  field pricesAutoUpdate: PricesAutoUpdate? inline by service {
    label = "Auto Update Prices"
  }
  field stockLevel: SyncStockLevel = Available
  field orderTerms: IOrderTerms?
  back func orderTerms(order: ESalesOrder[ID]): IOrderTerms? = if (let dm = order.deliveryMethod){
    deliveryMethods.find(method == dm)?.orderTerms
  }
  func service = this
  
  func salesChannel = this
  func paymentMethodAccounts = paymentMethods.filter(account).map(method, account!).toMap
  func deliveryMethodProducts = deliveryMethods.filter(product).map(method, product!).toMap
     
  func roles: [Role]? = [Admin]
  func issues: [DashboardIssue]? = {
    let diss: [DashboardIssue]? = super.issues
    diss + ((if (paymentMethods.exists(!account)) [DashboardIssue.ECommerceEmptyPaymentMethod]) + (if (deliveryMethods.exists(!product)) [DashboardIssue.ECommerceEmptyDeliveryMethod])).toSet
  }
  
  view form = nav{tabs {
    grid(labels = Top, label = "Main") {
      issuesView
      serviceState >> field(label = "")
      legalEntity
      orderTerms
      mainView >> field(label = "")
    }
    grid(labels = Top, label = "Products") {
      categories
      currency
      stockLevel >> field(compact = true)
      stores
      productViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Payment") {
      paymentMethods
      paymentViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Delivery") {
      deliveryMethods
      deliveryViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Advanced") {
      pricesAutoUpdate
      advancedViewEx >> field(label = "")
    }
  }}
  
  
  view emptyView = group{}
    
  event onSave = {
    if (serviceState == Active && !deleted && (created || settingsUpdated)) {
      syncAll()
    }
  }
  back func settingsUpdated: Bool = {
    updated(stockLevel) || updated(serviceState) || 
      updated(stores) || updated(categories) || updated(legalEntity) || updated(currency)
  }
  back func createWebhooks(): Void = {
    createWebhookJobs*.run
  }
  
  back func downloadAllCustomers(): Void = {
    downloadCustomersJobs*.run
  }
  back func downloadPaymentMethods(): Void = {
    downloadPaymentMethodJobs*.run
  }
  back func downloadDeliveryMethods(): Void = {
    downloadDeliveryMethodJobs*.run
  }
  
  back func syncAll(): Future[Void] = {
    if (!initComplete) {
      if (let initialDownload) {
        initialDownload.run
        InitialDownloadCompleteJob(service = this).run
      } else {
        initComplete = true
      }
    }
    downloadPaymentMethods()
    downloadDeliveryMethods()
    downloadAllCustomers()
    downloadNewOrders()
    
    uploadAllAttrs()
    uploadAllAttrTerms()
    uploadAllTaxonomies()
    let _ <- uploadAllProducts()
    createWebhooks()
  }
  
  back func updatePaymentMethod(method: String, update: ECommercePaymentMethod => Void): Void = {
    update(paymentMethods.find(m => m.method == method).alt(ECommercePaymentMethod(service = this, method = method)).save)
  }
  back func updateDeliveryMethod(method: String, update: ECommerceDeliveryMethod => Void): Void = {
    update(deliveryMethods.find(m => m.method == method).alt(ECommerceDeliveryMethod(service = this, method = method)).save)
  }
}

inline entity ECommercePaymentMethod {
  field service: ECommerceIntegration by paymentMethods
  const field method: String
  const field name: String?
  field account: FinAccount?
}

inline entity ECommerceDeliveryMethod {
  field service: ECommerceIntegration by deliveryMethods
  const field method: String
  const field name: String?
  field product: ISubProduct?
  field _orderTerms: IOrderTerms? {views = []}
  compute orderTerms: IOrderTerms? {
    value = _orderTerms.or(service.orderTerms)
    update = {
      _orderTerms = if (new != service.orderTerms) new
    }
  }
}

enum SyncStockLevel(get: Stock? => Qty?) {
  case Available(get = (s: Stock?) => s?.available) = "Available = Fact - Reserve"
  case Outlook(get = (s: Stock?) => s?.outlook) = "Outlook = Fact - Reserve + Expectation"
}
