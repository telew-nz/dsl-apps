extend trait IComplexSubProduct {
  event onSaveOrDelete = {
	if (!IUser.current.is[ECommerceIntegration] && touched && !superProduct.touched) {
      ECommerceIntegration.all.map {service =>
        updateECommerce(service)
      }.result
    }
  }
  back func updateECommerce[ID](service: ECommerceIntegration[ID]) = {
    ProductUpdateJob[ID](service = service, product = this, updatedPhotos = updated(photos)).enqueue
  }
}

class ProductUpdateJob[ID] extends SystemJob {
  field service: ECommerceIntegration[ID]
  field product: IComplexSubProduct
  field updatedPhotos: Bool
  func do = {
    let po <- service.baseProductUpdate(force = 0, product, shouldDelete = service.shouldDeleteVariations, updatedPhotos)
    let b = BatchChange.createAndFilter(service, [po], item.enabled || extId)
    if (!b.isEmpty) service.uploadVariationJobs(b)*.enqueue
  }
}
