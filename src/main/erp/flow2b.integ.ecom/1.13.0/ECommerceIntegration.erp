trait ECommerceIntegration[ID] extends Entity with SystemService with ExtIdSource[ID] with ISalesOrderImportProvider[ID] with ISalesChannel {
  ref field legalEntity: OurLegalEntity {
    default =? onlyOne
  }    
  field currency: Currency = Currency.our
      
  field stores: [IStore]?
  field categories: [ProductCategory]?
  field brands: [Brand]?
  field paymentMethods: [ECommercePaymentMethod]? inline by service
  field deliveryMethods: [ECommerceDeliveryMethod]? inline by service
  field pricesAutoUpdate: PricesAutoUpdate? inline by service {
    label = "Auto Update Prices"
  }
  field stockLevel: SyncStockLevel = Available
  field deliveryPolicy: IDeliveryPolicy?
  field paymentTerms: IPaymentTerms?
  
  func service = this
  
  func salesChannel = this
  func paymentMethodAccounts = paymentMethods.map(method, account).toMap
  func deliveryMethodProducts = deliveryMethods.map(method, product).toMap
     
  func roles: [Role]? = [Admin]
  
  view form = nav{tabs {
    grid(labels = Top, label = "Main") {
      issuesView
      serviceState >> field(label = "")
      legalEntity
      mainView >> field(label = "")
    }
    grid(labels = Top, label = "Products") {
      categories
      currency
      stockLevel >> field(compact = true)
      stores
      productViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Payment") {
      paymentTerms
      paymentMethods
      paymentViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Delivery") {
      deliveryPolicy
      deliveryMethods
      deliveryViewEx >> field(label = "")
    }
    grid(labels = Top, label = "Advanced") {
      pricesAutoUpdate
      advancedViewEx >> field(label = "")
    }
  }}
  
  
  view emptyView = group{}
    
  event onSave = {
    if (serviceState == Active && !deleted && (created || settingsUpdated)) {
      syncAll()
    }
  }
  back func settingsUpdated: Bool = {
    updated(stockLevel) || updated(serviceState) || 
      updated(stores) || updated(categories) || updated(legalEntity) || updated(currency)
  }
  back func createWebhooks(): Void = {
    createWebhookJobs*.run
  }
  
  back func downloadAllCustomers(): Void = {
    downloadCustomersJobs*.run
  }
  
  back func syncAll(): Future[Void] = {
    downloadAllCustomers()
    downloadNewOrders()
    
    uploadAllAttrs()
    uploadAllAttrTerms()
    uploadAllCategories()
    uploadAllBrands()
    let _ <- uploadAllProducts()
    createWebhooks()
  }
}

inline entity ECommercePaymentMethod {
  field service: ECommerceIntegration by paymentMethods
  field method: String
  field account: FinAccount
}

inline entity ECommerceDeliveryMethod {
  field service: ECommerceIntegration by deliveryMethods
  field method: String
  field product: IProduct
}

enum SyncStockLevel(get: Stock? => Qty?) {
  case Available(get = (s: Stock?) => s?.available) = "Available = Fact - Reserve"
  case Outlook(get = (s: Stock?) => s?.outlook) = "Outlook = Fact - Reserve + Expectation"
}
