extend trait IBaseProduct extends HasExtId
extend entity File extends HasExtId


extend trait ICustomerSuperProduct {
  field seoTitle: String?
  field seoDescription: PlainText?
  event onSave = {
	if (!IUser.current.is[ECommerceIntegration] && touched) {
      ECommerceIntegration.all.map {service =>
        SuperProductUpdateJob(service = service, product = this, updatedPhotos = updated(photos)).run
      }
    }
  }
  extend view customerSuperView = seoTitle
  extend view customerSuperView = seoDescription
}

class SuperProductUpdateJob[ID] extends SystemJob {
  field service: ECommerceIntegration[ID]
  field product: ICustomerSuperProduct
  field updatedPhotos: Bool
  func do = {
    let po <- service.superProductUpdate(product, shouldDelete = service.shouldDeleteProducts, updatedPhotos)
    let b = BatchChange.createAndFilter(service, [po.product], item.enabled || extId)
    if (!b.isEmpty) service.uploadProductJobs(b)*.run    
    let vars = BatchChange.createAndFilter(service, po.variations, item.enabled || extId)
    if (!vars.isEmpty) service.uploadVariationJobs(vars)*.run()
  }
}

class ProductUpdate[P extends IBaseProduct] extends IHasExtIdDecorator {
  func extIdItem = product
  field product: P

  field stock: Qty?
  field price: SalesPrice
  field photosUpdated: Bool
  field enabled: Bool
  field deleted: Bool = product.deleted
  field availableOptions: [ProductAttrOptions]?
  func toString = "Update($product $enabled $deleted)"
}
class SuperProductUpdate {
  field product: ProductUpdate[ICustomerSuperProduct]
  field variations: [ProductUpdate[ICustomerComplexProduct]]?
}
extend trait ECommerceIntegration {
  back func uploadAllProducts(): Future[Void] = {
    let prods <- ICustomerSuperProduct.all.map(superProductUpdate(_, shouldDelete = shouldDeleteProducts, photosUpdated = true)).result
    let b = BatchChange.createAndFilter(this, prods*.product, item.enabled || extId)
    if (!b.isEmpty) uploadProductJobs(b)*.run()
    let vars = BatchChange.createAndFilter(this, prods*.variations, item.enabled || extId)
    if (!vars.isEmpty) uploadVariationJobs(vars)*.run()
  }
  
  back func superProductUpdate(product: ICustomerSuperProduct, shouldDelete: Bool, photosUpdated: Bool): Future[SuperProductUpdate] = {
    if (product.is[ICustomerProduct]) {
      let u <- baseProductUpdate(force = false, product, shouldDelete, photosUpdated)
      SuperProductUpdate(product = u)
    } else if (let products = product.customerProducts) {
      let pus <- products.map(p => baseProductUpdate(force = false, p.as[ICustomerComplexProduct]!, shouldDeleteVariations, photosUpdated)).allCompleted
      let u <- baseProductUpdate(force = pus.exists(enabled), product, shouldDelete, photosUpdated)
      SuperProductUpdate(product = u, variations = pus)
    } else {
      SuperProductUpdate(product = ProductUpdate(product = product, enabled = false, deleted = product.deleted || shouldDelete))
    }
  }
  
  back func productUpdate[P extends IBaseProduct](product: P, shouldDelete: Bool, photosUpdated: Bool): Future[ProductUpdate[P]] = {
    baseProductUpdate[P](force = false, product, shouldDelete, photosUpdated)
  }
  back func baseProductUpdate[P extends IBaseProduct](force: Bool, product: P, shouldDelete: Bool, photosUpdated: Bool): Future[ProductUpdate[P]] = {
    if (product.deleted 
     || !product.forSale
     || (this.categories && !this.categories.intersect(product.superProduct.categories)) 
     || (this.brands && !this.brands.intersect(product.superProduct.brands)) 
    ) {
      ProductUpdate[P](product = product, enabled = force, deleted = !force && (product.deleted || shouldDelete))
    } else if (let pr = legalEntity.price(product)) {
      let sp <- pr.salesPrice(currency, inclGst = true)
      let stock = if (product.status != AlwaysAvailableForSale) stockLevel.get(product.calcStock(null, Inventory, legalEntity, stores)).max(0)
      let enabled = force || (!sp.isEmpty && (product.status == AlwaysAvailableForSale || stock))
      ProductUpdate[P](
        product = product,
        price = sp,
        stock = stock,
        photosUpdated = photosUpdated,
        enabled = enabled, 
        deleted = !enabled && shouldDelete,
        availableOptions = if (enabled && !product.is[ICustomerProduct]) {
          if (let p = product.as[ICustomerSuperProduct]) {
            p.attrOptions(p.customerProducts.filter{cp => 
              let cpStock = product.calcStock(null, Inventory, legalEntity, stores)
              stockLevel.get(cpStock) > 0
            })
          }
        }
      ) 
    } else {
      ProductUpdate[P](product = product, enabled = force, deleted = !force && shouldDelete)
    }
  }
}