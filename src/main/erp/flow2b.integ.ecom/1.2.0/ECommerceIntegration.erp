trait ECommerceIntegration[ID] extends Entity with SystemService with ExtIdSource[ID] {
  ref field legalEntity: OurLegalEntity {
    default =? onlyOne
  }   
  field currency: Currency = Currency.our
      
  field stores: [Store]?
  field categories: [ProductCategory]?
  field brands: [Brand]?
  field productsWithPhotosOnly: Bool {label = "Syncronize Only Products with Photos"}  
    
  field updateProductsPricesEvery: Duration[hour, 0]?
  field stockLevel: SyncStockLevel = Available
     
  func roles: [Role]? = [Admin]

  back func updateProductJobs(change: BatchChange[ProductUpdate[ICustomerSuperProduct]]): [SystemJob]? = []
  back func updateVariationJobs(change: BatchChange[ProductUpdate[ICustomerComplexProduct]]): [SystemJob]? = [] 
  back func updateCategoryJobs(change: BatchChange[ProductCategory]): [SystemJob]? = [] 
  back func updateBrandJobs(change: BatchChange[Brand]): [SystemJob]? = [] 
  back func updateAttrJobs(change: BatchChange[ProductAttr]): [SystemJob]? = [] 
  back func updateAttrTermJobs(change: BatchChange[ProductAttrTerm]): [SystemJob]? = [] 
  
  back func createWebhookJobs: [SystemJob]? = []
  
  view settings = grid(labels = Top, label = "") {
    serviceState
    legalEntity 
    currency
    stockLevel >> field(compact = true)
    productsWithPhotosOnly
    updateProductsPricesEvery
    stores
    categories
  } 
    
  event onSave = {
    if (serviceState == Active && !deleted && (created || settingsUpdated)) {
      updateAll()
    }
  }
  back func settingsUpdated: Bool = {
    updated(stockLevel) || updated(serviceState) || updated(productsWithPhotosOnly) || 
      updated(stores) || updated(categories) || updated(legalEntity) || updated(currency)
  }
  back func createWebhooks(): Void = {
    createWebhookJobs*.run
  }
  
  back func updateAll(): Future[Void] = {
    updateAllAttrs()
    updateAllAttrTerms()
    updateAllCategories()
    updateAllBrands()
    let _ <- updateAllProducts()
    let _ <- updateAllVariations()
    createWebhooks()
  }
}

enum SyncStockLevel(get: Stock? => Qty?) {
  case Available(get = (s: Stock?) => s?.available) = "Available = Fact - Reserve"
  case Outlook(get = (s: Stock?) => s?.outlook) = "Outlook = Fact - Reserve + Expectation"
}
