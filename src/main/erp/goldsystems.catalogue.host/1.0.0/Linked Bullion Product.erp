extend entity LinkedBullionProduct {

    report Report {
    	impl view list = 
        	BullionSuperProduct.search("something impossible").unionFuture(Workspace.getAllIds.map(filter(_ != Workspace.current.authId && _ != "17_25" && _ != "17_38").oneByOne(wid => {
                let sid = ShortIdDb(wid)
                if (sid.cluster == 17) BullionSuperProduct.all.inWorkspaceTry(17, sid.position, true).filter(!_.is[SharedProduct]).result
                else if (sid.cluster == 18) BullionSuperProduct.all.inWorkspaceTry(18, sid.position, true).filter(!_.is[SharedProduct]).result
                else Future([]).as[Future[[BullionSuperProduct]?]]
            })).flatMap(res => res.flatMap(_)))
        		.filter(p => p.id)
        		.map(p => LinkedBullionProduct(linkedEntityId = p.id.toString!, linkedEntityTitle = p.title))
            	.union(LinkedBullionProduct.all)
            	.distinct
                .groupBy(l => l.linkedEntityId)
                .flatMap(m => {
                	if (m.items.count > 3) throw "Unexpected case (>3 linked entities with the same id)"
                    else if (m.items.count == 2) m.items.filter(!_.id.toString.startsWith("-"))
                    else m.items
                })
            >> nav {
            	list { grid(labels = None) { 
                	title
                } }
            }
    }
    
}
	