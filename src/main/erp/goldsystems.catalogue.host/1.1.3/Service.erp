extend entity BullionCatalogueService {

	object field workspacesToMonitor: [String]?
    system field updateWorkspacesToMonitorJob: UpdateWorkspacesToMonitorJob inline by service
    system field updateCatalogueProductsJob: UpdateCatalogueProductsJob inline by service
    
    extend view form = y{ 
    	x { "Monitored workspaces:" workspacesToMonitor >> field(editMode = AlwaysRead) }
        y(visible = !id.toString.startsWith("-")){
            button("Update workspaces to monitor") {
                updateWorkspacesToMonitorJob.enqueueFirst
            }
            button("Update catalogue products") {
                updateCatalogueProductsJob.enqueueFirst
            }
        }
    }

}


inline entity UpdateWorkspacesToMonitorJob extends ScheduledJob {

    impl field service: BullionCatalogueService by updateWorkspacesToMonitorJob
    impl func schedule = "0 0 13 * * ?"
    field invokedManually: Bool = false
    impl func do: Future[Any] = {
        let wids <- Workspace.getAllIds
        let res <- wids.oneByOne(wid => {
            let sid = ShortIdDb(wid)
            if (sid.cluster == 17) Workspace.all.inWorkspaceFullWid(17, sid.position)
            	.map(apps.keys.toSeq.exists(_ == "goldsystems.catalogue.client")).result.map((wid, _.first!))
            else Workspace.all.inWorkspaceFullWid(18, sid.position)
            	.map(apps.keys.toSeq.exists(_ == "goldsystems.catalogue.client")).result.map((wid, _.first!))
        }).flatMap(_).map(filter(#1)).map(map(#0))
        BullionCatalogueService.workspacesToMonitor = []
        BullionCatalogueService.workspacesToMonitor = res
        service.save
    }
    
}


inline entity UpdateCatalogueProductsJob extends ScheduledJob {

    impl field service: BullionCatalogueService by updateCatalogueProductsJob
    impl func schedule = "0 42 * * * ?"
    impl func do: Future[Any] = {
    	BullionSuperProduct.search("something impossible").unionFuture(BullionCatalogueService.workspacesToMonitor.oneByOne(wid => {
                let sid = ShortIdDb(wid)
                if (sid.cluster == 17) {
                	let sharedItems <- SharedItem.all.inWorkspaceTry(17, sid.position, true).result
                	BullionSuperProduct.all.inWorkspaceTry(17, sid.position, true).filter(b => !sharedItems.exists(_.id == b.id)).result
                }
                else if (sid.cluster == 18) {
                	let sharedItems <- SharedItem.all.inWorkspaceTry(18, sid.position, true).result
                    BullionSuperProduct.all.inWorkspaceTry(18, sid.position, true).filter(b => !sharedItems.exists(_.id == b.id)).result
                }
                else Future([]).as[Future[[BullionSuperProduct]?]]
            }).flatMap(res => res.flatMap(_)))
        		.filter(p => p.id)
                .map {
                	let lid = LongIdDb(_.id.toString!)
                    if (lid.workspaceCluster == 17) {
                    	let wTitle <- Workspace.all.inWorkspaceFullWid(17, lid.workspacePosition).map(_.title).result.map(_.first!)
                        (_, wTitle)
                    }
                    else if (lid.workspaceCluster == 18) {
                    	let wTitle <- Workspace.all.inWorkspaceFullWid(18, lid.workspacePosition).map(_.title).result.map(_.first!)
                        (_, wTitle)
                    }
                }
        		.map { LinkedBullionProduct(linkedEntityId = _!.#0.id.toString!, linkedEntityTitle = _!.#0.title, sourceWorkspaceName = _!.#1) }
            	.union { LinkedBullionProduct.all }
            	.distinct
                .groupBy { linkedEntityId }
                .flatMap {
                	if (_.items.count > 3) throw "Unexpected case (>3 linked entities with the same id)"
                    else if (_.items.count == 2) _.items.filter(i => !i.id.toString.startsWith("-"))
                    else _.items
                }
        		.foreach { save }
    }
    
}