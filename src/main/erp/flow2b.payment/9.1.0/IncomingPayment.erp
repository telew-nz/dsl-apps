entity IncomingPayment extends Payment with IIncomingPayment {
  background = "#d68400"
  func legalEntity = payee
  func sourceAccount: FinanceAccount? = null
  func destinationAccount: FinanceAccount? = account
  func creditAmount: Money[currency]? = amount
  
  func startingBalance: Money[currency]? = amount
  compute unreconciledAmount: Money[currency]? = balance
    
  func title = "$number $payer"
  func number: String = "IP" + n 
  func counterparty: LegalEntity = payer
  ref field payer: LegalEntity =? try? origin!.counterparty!
  ref field payee: LegalEntity {
    available(Ref).with(accounts)
    default =? (try? origin!.legalEntity).or(LegalEntity.ours.onlyOne)
    from = LegalEntity.ours
    update = {
      this.account =? new.accounts.onlyOne
    }
  }
  func isTheir = payer.isTheir
  func isIncoming: Bool = true
  func onSave = {
    debits*.credit*.touch
  }
  func origins: [Setoff]? = debits
  func returns: [Setoff]? = credits
  object view list = IncomingPayment.all >> nav{list{grid(labels = None){
    row{number, date.as[Date[day]]!, payer, space, account}
    row{stateView >> field(width = 0.8), amount >> field(width = 0.2)}
  }}}
  
  view form = nav{grid{
      number
      date
      stateView >> field(label = "State")
      unreconciledAmount
      payer
      payee
      account
      amount >> field(canEditUnit = true)
      accountAmount
      debits >> field(label = "Origins" singular = "Origin")
      credits >> field(label = "Returns" singular = "Return")
      button("Convert to Transfer", visible = !origin) {
        let to = account
        let income = amount
        let r = convertTo(CashTransfer)
        r.to = to
        r.income = income
      }  
    }
    generalLedgerButton
  }
  view stateView = x{reconcileState}
  func mainLedgers: Future[[Ledger]?] = cashLedgers([])
}
