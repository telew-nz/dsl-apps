entity OutgoingPayment extends Payment with OPReasonOwner {
  singularShort = "Out"
  icon = "sign-out-alt"
  background = "#d68400"
  impl func legalEntity = payer
  impl func srcAccount: FinAccount? = account
  impl func dstAccount: FinAccount? = null
  impl func debtAmount = if (!source || !source!.isInstant) ((try? amount) - (try? reasons!)*.delta.sum).max(0)
  impl compute srcAmount: Number? {
    value = -accountAmountEditor
    update = {accountAmountEditor =? (-new).positive}
  }
  impl func movedAmount: Money[currency] = -amount
  impl compute dstAmount: Number? {
    value = 0
    update = {}
  }
  impl compute dstBankData: BankData? {
    value = null
    update = {}
  }
  impl compute srcBankData: BankData?{
    value = bankData
    update = {bankData =? new}
  }
  impl func debtCashFlows = if (let debtAmount) [CashFlowAmount(cashFlow = SalesReturns, amount = debtAmount)]

  impl func cpName: String = "Payee"
  impl func title = "$fullNum $payee"
  impl view ref = x {title account >> field(fontStyle = Label) amount date >> field(fontStyle = Label)}
  impl func numPrefix = "OP"
  impl compute debtCounterparty: LegalEntity? {
    value = if (let source) source.debtCounterparty else payee
    update = {
      if (let n = new) this.payee = n
    }
  }
  ref field payer: OurLegalEntity {
    available(Ref).with(accounts)
    default =? (try? origin!.legalEntity).or(OurLegalEntity.onlyOne)
    update = {
      this.account =? new.accounts.onlyOne
    }
  }
  
  impl ref field payee: LegalEntity? {
    available(Ref).with(opRecon)
    default = try? origin!.debtCounterparty!
    update = {
      defaultRecon
    }
    validate = {
      if (!payee && reasons*.as[PaymentExpense]) "Payee is requiered for expenses"
    }
  }
  impl field paymentMethod: PaymentMethod? {
    from = payee?.paymentMethods
    visible = payee
    init = {
      new.legalEntity =? payee
      if (let bm = new.as[PMBankAccount]) {
        bankData.initMethod(bm)
      }
    }
  }
  
  impl func defaultReasons = try? defaultRecon.toSeq!
  
  func defaultRecon: OPReason? = {
    if (let e = payee?.opRecon, let a = unreconAmount.abs) {
      if (!manLinks && !source) {
        e.opRecon(this, a) 
      }
    }
  }
  
  func isTheir = payee?.isTheir
  impl func isIncoming: Bool = false

  impl event onSave = {
    if (let p = payee) {
      if (created || !origin(payee)) {
        bankData.addTo(p)
	    if (!paymentMethod) {
          paymentMethod = bankData.forcePaymentMethod(p, currency)
        }
      }
    }
  }
  impl object view list = OutgoingPayment.all >> nav{list{grid(labels = None){
    row{number, date.as[Date[day]], payee, account, space }
    row{stateView >> field(width = 0.6), -amount >> field(width = 0.2), space(width = 0.2)}
    recRefs >> list(frame = false){_ >> field(title = title)}
  }}}
 
  impl func isPurchase = true

  impl view form = nav{grid{
      issuesView
      number
      refNum
      date
      stateView >> field(label = "State")
      unreconAmount.abs >> field(label = "Unreconciled", visible = !source && unreconAmount)
      payer
      payee >> field(visible = !source)
      debtCounterparty >> field(visible = source, label = "Payee")
      paymentMethod >> field(visible = paymentMethod)
      account
      
      amount >> field(canEditUnit = true)
      accountAmount
      source >> field(editMode = AlwaysRead)
      reasons 
      debtOriginsView >> field(label = "Origins")
      desc
      bankData >> field(editMode = AlwaysRead)
    }
    button("Convert to Transfer", visible = !origin) {
      convertTo(CashTransfer)
    }   
    ledgerBtn
    extension("nav")
  }
  
  impl func converters = [
    Converter[CashTransfer](to = CashTransfer, convert = {to =>
      let from = account
      let outcome = amount
      let d = bankData
      let date = this.date
      to.silentUpdate(dateIn, date)
      to.dateOut = date
      to.srcBankData = d
      to.from = from
      to.outcome = outcome
    })
  ]
  
  view stateView = x{eReconState uploadState}
  override view posViewDebit = x{account mAmount}
  override view posViewCredit = x{account amount}  
}