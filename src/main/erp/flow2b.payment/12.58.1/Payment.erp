account UnreconciledCredits(template = "Currency", credit = acc(Error, 0)) 
account UnreconciledDebits(template = "Currency", credit = acc(Error, 1)) 
  
enum PaymentDirection {
  case Incoming
  case Outgoing
}

trait PaymentSource extends DebtOrigin {
  field payments: [Payment]? inline by source {
    deleteCascade = false
  }
  override func allManLinks: [DebtOrigin]? = payments
  impl event onDelete = {
    payments.filter(bankData.uploadState != Uploaded)*.delete
  }
}
 
trait Payment extends CashMovement with DebtOrigin with IReasonOwner {
  background = "#d68400"
  
  impl func isInstant = if (let source) source.isInstant else true
  func number: String
  func isIncoming: Bool
  impl var debtCounterparty: LegalEntity?
  
  impl compute dateIn = date
  impl compute dateOut = date
  impl func journal = this
  impl func noCpTitle = number
  override func allManLinks: [DebtOrigin]? = source.toSeq
  impl func hasSource: Bool = source
  field source: PaymentSource? {
    visible = source
  }
  field desc: Text? {label = "Description"}
  func movedAmount: Money[currency]
  impl func debtCurrency = currency
  impl func validateReasons = if (reasons*.delta.sum > amount) "Reasons amount should be â‰¤ payment amount"
  
  
  system stored compute sReconState: ReconState {
    label = "Reconciliation State"
  }
  ref compute eReconState: ReconState {
    label = "Reconciliation State"
    value = if (debtAmount) (try? sReconState).alt(reconState) else Recon
  }
  impl event onSave = {
    if (moneyCalced) {
      sReconState = reconState
    } else if (!try? eReconState) {
      sReconState = Unrecon
    }
    if (!User.isSu && !created && bankData.origin(i => i.uploadState) == Uploaded && 
        	(
              account != origin(account) || 
              date != origin(date) || 
              (if (origin(currency) == account.currency) origin(amount) else origin(accountAmount)).noUnit
              != 
              (if (currency == account.currency) amount else accountAmount).noUnit
            )
    ) {
      throw "The uploaded payment $(this) cannot be modified"
    }
    if (bankData.uploadState == Missing && account != origin(account)) {
      bankData.uploadState = NotUploaded
    }
  }
  impl event onDelete = {
    if (bankData.uploadState == Uploaded && !User.isSu) {
      throw "The uploaded payment $(this) cannot be deleted"
    }
  }
  
  back func moneyCalced: Bool = {
    ledgers*.as[LMoneyDebt].all(calced)
  }
  
  impl func isMissingInBSU = bankData.uploadState == Missing || (bankData.uploadState == NotUploaded && (if (isIncoming) account.uploadedIncoming else account.uploadedOutgoing)?.containsIncl(date))
  override func issueTypes = super.issueTypes + ITUnreconPayment
  
  back func merge(other: Payment): Payment = {
    let isUploaded = bankData.uploadState == Uploaded
    let old = if (isUploaded) other else this
    let new = if (isUploaded) this else other
    new.updateWith(old, onlyMissing = true)
    old.replaceWith(new)
    new.saveMain
    Activity.comment("Merged with $(old.mention)")
    new
  }
  
  func cpName: String
  func debtDueDate: Date? = null
  func origin = allManLinks.first
  ref field amount: UMoney[currency] {
    default =? try? origin?.unreconAmount!.abs
    label = "Paid Amount"
    validate = if (back) if (debtAmount && (debtAmount > 0) == isIncoming) "$amount is larger than reconciled amount $(reasons*.amount.sum)"
    update = {
      amountUpdated()
    }
  }
  compute mAmount: Money[currency] {
    label = "Paid Amount"
    value = -amount
    update = {
      amount = new.abs
    }
  }
  func amountUpdated(): Void = {
    if (reasons.count == 1 && !source && !manLinks) reasons.first!.amount = amount 
  }
  field bankData: BankData = BankData()
  impl back func debtLedgers = try? ledgers*.as[LMoneyDebt]!
 
  func paidAmount = amount
  
  object field gen: Int?
  
  impl ref field date: Date =? if (!updated(dslType)) now
  var paymentMethod: PaymentMethod? 
  impl ref field account: FinAccount {
    default =? BankAccount.default
    update = {
      if (!try? this.currency) this.currency = new.currency
    }
  }
  impl compute hasBankAccount: Bool = account.hasBankData
  impl ref field currency: Currency {
    default =? try? (origin?.debtCurrency).alt(account.currency)
    update = {
      if (currency != account.currency && !accountAmount) {
        if (let a = try? paidAmount) {
          accountAmount = a.as[UMoney[account.currency]]
        }
      }
    }
  }
  compute recRefs: [RefEntity]? {
    availableFor = List
    value = back{reasons*.refs + debtOrigins}
  }
  field accountAmount: UMoney[account.currency]? {
    visible = currency != account.currency
    validate = if (currency != account.currency && !accountAmount) "Account amount is required" 
  }   
  compute accountAmountEditor: UMoney[account.currency] {
    value = if (currency == account.currency) amount else accountAmount!
    update = {
      if (currency == account.currency) {
        amount = new
      } else {
        accountAmount = new
      }
    }
  }
  override func paymentCashFlows = {
    if (source?.isInstant && !manLinks) source!.instantCashFlows
    else super.paymentCashFlows + reasons*.cashFlows
  }
  
  register ledgers: [Ledger]? <- back{
    if (!canceled) {
      let insts <- if (source && source!.isInstant && !manLinks) {
        source!.instantLedgers(this, date)
      }
      var ledgers: [Ledger]? = insts
      if (!ledgers) if (let b = debtAmount) {
        if (let cp = debtCounterparty) {
          ledgers = ledgers + LMoneyDebt(
                journal = this, date = date,
                legalEntity = this.legalEntity, trAmount = b, 
                counterparty = cp, currency = currency)
        } else {
          ledgers = ledgers + LCurrency(account = if (isIncoming) UnreconciledCredits else UnreconciledDebits, 
                    contraAccount = account.ledgerAccount, currency = currency, journal = this, 
                    trAmount = b)
        }
      } 
      let a = if (currency != account.currency) accountAmount else amount
      let cashLedger = LCash(
        journal = this, 
        account = account.ledgerAccount, legalEntity = account.legalEntity, 
        finAccount = account, trAmount = if (isIncoming) a else -a)
      let reasonLedgers <- if (let reasons) {
        let es <- reasons*.ledgers.allCompleted
        es.flatMap(_) + reasons*.gstLedger
      } 
      ledgers = ledgers + reasonLedgers
      procLedgers(cashLedger + ledgers!)
    }
  }
}

