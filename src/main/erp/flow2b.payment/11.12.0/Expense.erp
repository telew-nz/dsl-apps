extend entity ExpenseType {
  extend view form = extend("nav") {
    button("Recode") {
      let _ <- PaymentExpense.all.filter(expense == this)
        .foreach(recode).result
      UI.info("Claimable percentage and GST rate have been updated in the relevant transactions")
    }
  }
}

trait IPaymentExpense extends InlineEntity with IOPOrigin with IAdditOrigin {
  field payment: OutgoingPayment
  func init(payment: OutgoingPayment): Void = {
    this.payment = payment
  }
  
  func remove = delete
  
  func gstLedger: LTax? = null
}

inline entity PaymentExpense extends IPaymentExpense {
  singular = "Expense"
  func vendor = payment.payee?.vendor
  func refs: [RefEntity]? = [expense]
  field expense: IExpenseType {
    update = {
      if (payment.legalEntity.hasGst) {
        this.nonClaimable = expense.nonClaimable
        this.gstRate = if (let p = vendor) expense.gstRate(p)
      }
    }
  } 
  field nonClaimable: UPercent? {
    default = (try? expense)?.nonClaimable
    validate = if (0 > claimable || claimable > 1.00_PercentUnit) "Claimable percentage should be between 0% and 100%"
  }
  func recode(): Void = {
    this.gstRate = if (let p = vendor) expense.gstRate(p)
    this.nonClaimable = expense.nonClaimable
    this.save
  }
  compute claimable: UPercent? {
    label = "Claimable Percentage"
    value = (1.00_PercentUnit - nonClaimable).as[UPercent]
    update = {
      nonClaimable = (1.00_PercentUnit - new).as[UPercent]
    }
  }
  field currentAccount: CurrentAccount? {
    visible = nonClaimable
    from = payment.legalEntity.accounts*.as[CurrentAccount]
  } 
  field amount: Money[payment.currency] =? payment.unreconciledAmount
  compute claimableAmount: Money[payment.currency]? = amount*claimable
  compute nonClaimableAmount: Money[payment.currency]? = amount - claimableAmount
  field gstRate: UPercent[2]?? {
    default = if (let e = try? expense, let p = try? vendor!) e.gstRate(p)
    visible = payment.legalEntity.hasGst
    validate = if (gstRate && vendor?.gstStatus != Registered) "Payee should be registered for GST"
  }
  func cashFlows = {
    (if (let ca = claimableAmount) [CashFlowAmount(category = GeneralExpenses, amount = ca)]) 
    +
    (if (let nca = nonClaimableAmount) [CashFlowAmount(category = Capital, amount = nca)]) 
  }
  compute gstValue: UPercent[2]? {
    label = "GST Rate"
    value = gstRate.alt(0).as[UPercent[2]]
    update = {
      gstRate = new
    }
    visible = hasGst
  }
  compute hasGst: Bool {
    value = gstRate
    update = {
      gstRate = if (new) gstValue else null
    }
  }
  view gstEditor = x(label = "Including GST", flow = false, visible = claimable) {
    hasGst >> field(label = "") gstValue >> field(label = "Rate", align = Left)
  }
  
  event onSave = {
    if (created) {
      if (let payee = payment.payee) {
        if (payment.expenses.count == 1 && !payee.vendor?.expense) {
          if (!OutgoingPayment.all.find(p => p.payee == payee && p != payment).result.get) {
            payee.makeVendor.expense = expense
            payee.save
          }
        }
      }
    }
  }
  func ledgers: Future[[Ledger]?] = {
    if (claimable) {
      if (nonClaimable) {
        let ce <- claimableExpense
        let ne <- nonClaimableExpense
        ce + ne
      }
      else claimableExpense
    } else nonClaimableExpense
  }
  func claimableExpense: Future[[Ledger]?] = {
    if (let ca = claimableAmount) {
      let a = if (let rate = gstRate) ca - ca*rate else ca
      let baseAmount <- a.to[Money[payment.legalEntity.getCurrency]](payment.date)
      [LExpenses(account = GeneralExpenses, journal = payment, trAmount = baseAmount, expenseType = expense)]
    } else []
  }
  func nonClaimableExpense: Future[[Ledger]?] = {
    if (let nca = nonClaimableAmount) {
      if (let curAcc = currentAccount) {
        let am <- nca.to[Money[curAcc.currency]](payment.date)
        [LCash(account = CurrentAccounts, financeAccount = curAcc, journal = payment, 
              trAmount = am, cashFlowCategory = Capital)]
      } else {
        let baseAmount <- nca.to[Money[payment.legalEntity.getCurrency]](payment.date)
        [LExpenses(account = NonClaimableExpenses, journal = payment, trAmount = baseAmount, expenseType = expense)]
      }
    } else null
  }
 
  func gstLedger: LTax? = if (let rate = gstRate, let ca = claimableAmount) {
    LTax(account = TaxesPayable, tax = Gst, currency = payment.currency, 
         journal = payment, origin = payment, rate = gstRate,
         isInstantPayment = true,
         trAmount = ca*rate, 
         taxedAmount = ca - ca*rate)
  }
  
  view form = grid {
    row{expense amount }
    row{claimable >> field(showEmpty) gstEditor >> field(width = 0.3)}
    currentAccount >> field(label = "Current Account for Non-Claimable Percentage", placeholder = "Current Account")
  }
}