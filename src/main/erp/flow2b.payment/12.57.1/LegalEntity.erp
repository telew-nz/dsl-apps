trait IOPRecon extends RefEntity {
  func opRecon(payment: OutgoingPayment, amount: UMoney): OPReason
  func opRecode(cp: LegalEntity, reason: OPReason): Void
}

trait IIPRecon extends RefEntity {
  func ipRecon(payment: IncomingPayment, amount: UMoney): IPReason
//  func ipRecode(cp: LegalEntity, reason: IPReason): Void
}

extend entity ExpenseType extends IOPRecon {
  impl func opRecon(payment: OutgoingPayment, amount: UMoney): OPReason = {
    PaymentExpense(payment = payment, expense = this, amount = amount)
  }
  impl func opRecode(cp: LegalEntity, reason: OPReason): Void = {
    let ee = reason.as[PaymentExpense].alt(reason.convertTo(PaymentExpense))
    ee.expense = this
    ee.gstRate = gstRate(cp)
    ee.recode()
  }
}
extend entity ISalaryType extends IOPRecon {
  impl func opRecon(payment: OutgoingPayment, amount: UMoney): OPReason = {
    Salary(payment = payment, salaryType = this, amount = amount)
  }
  impl func opRecode(cp: LegalEntity, reason: OPReason): Void = {
    let ee = reason.as[Salary].alt(reason.convertTo(Salary))
    ee.salaryType = this
  }
}
extend entity CurrentAccount extends IOPRecon with IIPRecon {
  impl func opRecon(payment: OutgoingPayment, amount: UMoney): OPReason = {
    Withdrawal(payment = payment, currentAccount = this, amount = amount)
  }
  impl func ipRecon(payment: IncomingPayment, amount: UMoney): IPReason = {
    AdditionalCapital(payment = payment, currentAccount = this, amount = amount)
  }
  impl func opRecode(cp: LegalEntity, reason: OPReason): Void = {
    let ee = reason.as[Withdrawal].alt(reason.convertTo(Withdrawal))
    ee.currentAccount = this
  }
}


extend trait LegalEntity {
  field _opRecon: IOPRecon? {
    label = "Outgoing Payment Reconciliation"
  }
  compute opRecon: IOPRecon? {
    value = _opRecon.or(
      currentAccounts.first
    ).or(
      this.as[Person]?.companies.filter(isOur)*.jobTitle*.salaryType.first
    )
    label = "Outgoing Payment Reconciliation"
  }
  
  field _ipRecon: IIPRecon? {
    label = "Incoming Payment Reconciliation"
  }
  compute ipRecon: IIPRecon? {
    value = _ipRecon.or(
      currentAccounts.first
    )
    label = "Incoming Payment Reconciliation"
  }
  
  front func opRecode = {
    let _ <- UI.save(this)
    let _ <- OPReason.all.filter(payment.payee == this.legalEntity)
      .foreach{e => 
        opRecon?.opRecode(this, e)
      }.result
    ExpenseReprocessJob(vendor = this).enqueue
    UI.info("Expense type, claimable percentage and GST rate have been updated in the relevant transactions")
  }
  
  impl event onSave = {
    if (updated(gstStatus) && gstStatus == NotRegistered) {
      PaymentExpense.all.filter(gstRate && payment.payee == this.legalEntity)
        .update(gstRate = null) 
    }
    if (_opRecon && updated(_opRecon)) {
      ExpenseReprocessJob(vendor = this).enqueue
    }
  }
}

extend entity Company {
  extend view form = extend("main"){
    x (label = "Outgoing Payment Reconciliation", visible = opRecon || ui.edit) {
      opRecon >> field (stretch = 1, title = fullTitle)
      button("Recode", visible = ui.edit) {
        opRecode
      }
    }
  }
}
extend entity Person {
  extend view form = extend("main"){
    x (label = "Outgoing Payment Reconciliation",  visible = opRecon || ui.edit) {
      opRecon >> field (stretch = 1, title = fullTitle)
      button("Recode", visible = ui.edit) {
        opRecode
      }
    }
  }
}

object ReconService extends SystemService {
  impl func title: String = "Reconciliation Service"
  impl func roles: [Role]? = [Admin]
  impl func defaultDebug = true
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
}

class ExpenseReprocessJob extends SystemJob {
  field vendor: LegalEntity
  impl func service = ReconService
  impl func do = {
    if (vendor.opRecon) {
      OutgoingPayment.all.filter(payee == vendor && !reconAmount && !reasons && !manLinks && !source)
        .map{p =>
           p.defaultRecon?.save
        }
    }
  }
}