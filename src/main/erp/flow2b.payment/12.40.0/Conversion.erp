back object Conversion extends IConversion {
  func convert(version: [Int?]): Future[Any] = {
    if (version < [12,30,0]) {
      FinanceService.debug = true
      FinanceService.save
    }
    if (version < [12,31,0]) {
      Vendor.all.foreach {v =>
        if (let e = field[ExpenseType?](v, "flow2b.payment.expense")) {
          v.legalEntity.expense = e
          v.legalEntity.save
        }
      }
      PaymentIncome.all.filter(nonTaxable && gstRate)*.touch
    }
    if (version < [12,33,0]) {
      recreateAllRegisters
    }
    if (version < [12,36,0]) {
      Payment.all.update(refNum = field(_, "refNum"))
    }
    if (version < [12,36,1]) {
      recreateAllRegisters
    }
    if (version < [12,37,0]) {
      ITaxPayment.all.update(trType = Payment)
    }
    if (version < [12,39,1]) {
      CashMovement.all.filter(srcBankData?.uploadState == Uploaded && srcAccount).map(date = dateOut, account = srcAccount!)
      .groupBy(account).agg(period = Period(start = date.min, end = date.max)).foreach {
        account.uploadedOutgoing = period
        account.save
      }      
      CashMovement.all.filter(dstBankData?.uploadState == Uploaded && dstAccount).map(date = dateIn, account = dstAccount!)
      .groupBy(account).agg(period = Period(start = date.min, end = date.max)).foreach {
        account.uploadedIncoming = period
        account.save
      }
    }
    if (version < [12,39,3]) {
      if (DebtReason.all.result.get) {
        recreateAllRegisters
      }
    }
  }  
}  
 