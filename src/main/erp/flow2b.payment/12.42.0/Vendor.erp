extend trait LegalEntity {
  field expense: ExpenseType? {
    label = "Usual Expense"
  }
  
  front func recode = {
    let _ <- OPReason.all.filter(payment.payee == this.legalEntity)
      .foreach{e => 
        let ee = e.as[PaymentExpense].alt(e.convertTo(PaymentExpense))
        ee.expense =? this.expense
        ee.gstRate = this.expense?.gstRate(this)
        ee.recode()
      }.result
    UI.info("Expense type, claimable percentage and GST rate have been updated in the relevant transactions")
  }
  
  impl event onSave = {
    if (updated(gstStatus) && gstStatus == NotRegistered) {
      PaymentExpense.all.filter(gstRate && payment.payee == this.legalEntity)
        .update(gstRate = null) 
    }
    if (expense && updated(expense)) {
      ExpenseReprocessJob(vendor = this).enqueue
    }
  }
}

extend entity Company {
  extend view form = extend("main"){
    x (label = "Usual Expense", visible = expense || ui.edit) {
      expense >> field (stretch = 1)
      button("Recode", visible = ui.edit) {
        recode
      }
    }
  }
}
extend entity Person {
  extend view form = extend("main"){
    x (label = "Usual Expense", visible = expense || ui.edit) {
      expense >> field (stretch = 1)
      button("Recode", visible = ui.edit) {
        recode
      }
    }
  }
}

object ReconService extends SystemService {
  impl func title: String = "Reconciliation Service"
  impl func roles: [Role]? = [Admin]
  impl func defaultDebug = true
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
}

class ExpenseReprocessJob extends SystemJob {
  field vendor: LegalEntity
  impl func service = ReconService
  impl func do = {
    if (vendor.expense) {
      OutgoingPayment.all.filter(payee == vendor && !reconAmount && !reasons && !manLinks && !source)
        .map{p =>
           p.defaultExpense?.save
        }
    }
  }
}