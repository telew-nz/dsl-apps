inline entity Setoff {
  field debit: Debt by credits {
    update = {
      this.amount =? this.defAmount
    }
    from = Debt.all.filter(counterparty == credit.counterparty && currency == credit.currency && legalEntity == credit.legalEntity)
  }
  field credit: Debt by debits {
    update = {
      this.amount =? this.defAmount
    }
    from = Debt.all.filter(counterparty == debit.counterparty && currency == debit.currency && legalEntity == debit.legalEntity)
  }
  func journal: Journal = if (debit.isJournal(credit)) debit else credit
  func currency = debit.currency
  //field storedDate: Date?
  /*compute date: Date {
    value = {
      if (storedDate && !debit.definesDate && !credit.definesDate) storedDate!
      else if (debit.journalPriority > credit.journalPriority) debit.journalDate 
      else credit.journalDate 
    } 
    update = {
    	storedDate = new
	}
  }*/
  compute date: Date = journal.journalDate
  
  field amount: Money[currency] {
    default =? defAmount
  }
  
  func defAmount: Money[currency]? = try? debit.balance.abs.min(credit.balance.abs)! 
  
  view form = group {
    edit {
      grid (labels = None) {
        row {debit credit amount}
        //date >> field(visible = !debit.definesDate && !credit.definesDate)
      }
    }
    read {
      x {
        debit credit 
        amount //>> field(visible = debit.debitAmount != amount || credit.creditAmount != amount) 
        //date >> field(visible = storedDate && !debit.definesDate && !credit.definesDate)
      }
    }
  }
}

