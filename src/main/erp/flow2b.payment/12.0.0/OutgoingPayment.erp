entity OutgoingPayment extends Payment {
  background = "#d68400"
  func legalEntity = payer
  func srcAccount: FinAccount? = account
  func dstAccount: FinAccount? = null
  func isDebtDebit = true
  compute srcAmount: Number? {
    value = -accountAmountEditor
    update = {accountAmountEditor = -new!}
  }
  compute dstAmount: Number? {
    value = 0
    update = {}
  }
  compute dstBankData: BankData? {
    value = null
    update = {}
  }
  compute srcBankData: BankData?{
    value = bankData
    update = {bankData =? new}
  }
  func debtCashFlows = if (let debtAmount) [CashFlowAmount(cashFlow = SalesReturns, amount = debtAmount)]

    
  func title = "$number $payee"
  view ref = x {title amount date}
  func number: String = "OP" + n 
  
  compute debtCounterparty: LegalEntity? {
    value = payee
    update = {
      if (let n = new) this.payee = n
    }
  }
  ref field payer: OurLegalEntity {
    available(Ref).with(accounts)
    default =? (try? origin!.legalEntity).or(OurLegalEntity.onlyOne)
    update = {
      this.account =? new.accounts.onlyOne
    }
  }
  
  func counterparty = payee
  ref field payee: LegalEntity? {
    available(Ref).with(vendor, vendor.expense)
    default = try? origin!.debtCounterparty!
    update = {
      if (let e = new?.vendor?.expense) {
        if (!manLinks) {
          PaymentExpense(payment = this, expense = e)
        }
      }
    }
  }
  list field reasons: [OPReason]? inline by payment {
    default = {
      if (let e = payee?.vendor?.expense) {
        if (!manLinks) {
          [PaymentExpense(payment = this, expense = e)]
        }
      }
    }
    singular = "Expense"
  }
  
  func isTheir = payee?.isTheir
  func isIncoming: Bool = false

  object view list = OutgoingPayment.all >> nav{list{grid(labels = None, width = 1.2){
    row{number, date.as[Date[day]]!, payee, account, space, recRefs >> list(frame = false){_ >> field(title = title)} }
    row{stateView >> field(width = 0.6), -amount >> field(width = 0.2), space(width = 0.4)}
  }}}
 
  func isPurchase = true

  view form = nav{grid{
      issuesView
      number
      refNum
      date
      stateView >> field(label = "State")
      unrecon
      payer
      payee
      account
      
      amount >> field(canEditUnit = true)
      accountAmount
      reasons
      manLinks
      debtOriginsView >> field(label = "Origins")
      bankData
    }
    button("Convert to Transfer", visible = !origin) {
      let from = account
      let outcome = amount
      let d = bankData
      let r = convertTo(CashTransfer)
      r.srcBankData = d
      r.from = from
      r.outcome = outcome
    }   
    generalLedgerButton
  }
  view stateView = x{eReconState}
}

trait OPReason extends InlineEntity with IReason {
  field payment: OutgoingPayment
  
  func gstLedger: LTax? = null
}
