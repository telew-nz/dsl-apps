entity CashTransfer extends CashMovement {
  background = "#d68400"
  func itemRoles = [Accountant, BusAdmin]  
  
  func legalEntity = from.legalEntity
  func journalDate = date
  func srcAccount: FinAccount? = from
  func dstAccount: FinAccount? = to
  compute srcAmount: Number? {
    value = -outcome
    update = {outcome =? -new}
  } 
  compute dstAmount: Number? {
    value = income
    update = {income =? new}
  }
  compute srcBankData: BankData?{
    value = outgoingBankData
    update = {outgoingBankData =? new}
  }
  compute dstBankData: BankData? {
    value = incomingBankData
    update = {incomingBankData =? new}
  }
  ref compute hasBankAccount: Bool = from.is[BankAccount] || to.is[BankAccount]
  
  func reconState: ReconState = Recon
  const ref field n: Int? = increment(Payment.gen)
  func title = number
  func number: String = "CTR" + n
  func entityNumbers = [number]
  field date: Date = now
  field from: FinAccount
  field outcome: Money[from.currency] {label = "Outgoing Amount"}
  field to: FinAccount 
  field income: Money[to.currency]  {label = "Incoming Amount"}
  field outgoingBankData: BankData {
    visible = from.is[BankAccount]
  }
  field incomingBankData: BankData {
    visible = to.is[BankAccount]
  }
    
  object view list = CashTransfer.all >> nav{list{grid(labels = None, width = 1.2){
    row{number, date.as[Date[day]]!, legalEntity, from, to, space}
    row{stateView >> field(width = 0.6), -outcome >> field(width = 0.2), income >> field(width = 0.2), space}
  }}}
  
  view form = nav{
    grid{
      row {number, date}
      stateView >> field(visible = hasStates, label = "State")
      row {from, to}
      row {outcome, income}
      row {outgoingBankData, incomingBankData}
    }
    generalLedgerButton
  }
  func hasStates = false
  
  view stateView = x{}
  
  register outcomeLedger = LCash(account = from.ledgerAccount, finAccount = from, journal = this, legalEntity = from.legalEntity, trAmount = -outcome, cashFlow = to.cashFlow)
  register incomeLedger = LCash(account = to.ledgerAccount, finAccount = to, journal = this, legalEntity = to.legalEntity, trAmount = income, cashFlow = from.cashFlow)
  register trading: [Ledger]? <- CurrencyTrading.trade(this, income, outcome)
  register intercompanyDebts: [LInterDebts]? = if (from.legalEntity == to.legalEntity) [] else [
    LInterDebts(journal = this, legalEntity = from.legalEntity, currency = to.currency, counterparty = to.legalEntity.legalEntity, trAmount = income),
    LInterDebts(journal = this, legalEntity = to.legalEntity, currency = to.currency, counterparty = from.legalEntity.legalEntity, trAmount = -income)
  ]
}