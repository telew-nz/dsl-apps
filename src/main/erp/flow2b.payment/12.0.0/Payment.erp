account UnreconciledCredits(template = "Currency", credit = acc(Error, 0)) 
account UnreconciledDebits(template = "Currency", credit = acc(Error, 1)) 
  

extend enum DashboardIssue {
  case UnreconPayment(role = Accountant, priority = major)
}

trait IReason extends AnyEntity {
  func cashFlows: [CashFlowAmount]?
  func ledgers: Future[[Ledger]?]
  func gstLedger: Ledger? = null
  func refs: [RefEntity]? = []
  var amount: Money?
}

trait Payment extends CashMovement with DebtOrigin {
  background = "#d68400"
  
  func number: String
  func isIncoming: Bool
  func reasons: [IReason]?
 
  
  field status: PaymentStatus = Executed
  field refNum: String? {label = "Reference Number"} 
  func entityNumbers = [number, refNum]
  func debtCurrency = currency
  func debtAmount = (amount - reasons*.amount.sum).max(0)
  
  ref stored compute eReconState: ReconState {
    label = "Reconciliation State"
    value = reconState
    update = {
      status = if (new == Canceled) PaymentStatus.Canceled else PaymentStatus.Executed
    }
    from = [reconState, Canceled]
  }
  
  func canceled = status == Canceled
  func issues = if (status != Canceled) {
    if (reconState.isIssue) [UnreconPayment] 
  }
  func fixes(issue: DashboardIssue) = {
    if (issue == UnreconPayment) {
      [Fix(text = "Add a reason for the payment into the Origin field to match $amount")]
    }
  }
  
  func journalDate = date
  func debtDueDate: Date? = null
  func origin = manLinks.first
  ref field amount: Money[currency] {
    default =? try? origin?.unrecon!.abs
    label = "Paid Amount"
    validate = if (back) if (debtAmount < 0) "$amount is larger than reconciled amount $(reasons*.amount.sum)"
    update = {
      amountUpdated()
    }
  }
  func amountUpdated(): Void = {
    if (reasons.count == 1 && !manLinks) reasons.first!.amount = amount 
  }
  field bankData: BankData {
    visible = hasBankAccount
  }
  back func debtLedgers = ledgers*.as[LMoneyDebt]
 
  func paidAmount = amount
  
  object field gen: Int?
  const ref field n: Int? = increment(Payment.gen)
  
  ref field date: Date = now
  func counterparty: LegalEntity?
  ref field account: FinAccount {
    default =? BankAccount.default
    update = {
      if (!try? this.currency) this.currency = new.currency
    }
  }
  compute hasBankAccount: Bool = account.is[BankAccount]
  ref field currency: Currency {
    default =? try? (origin?.debtCurrency).alt(account.currency)
    update = {
      if (currency != account.currency && !accountAmount) {
        if (let a = try? paidAmount) {
          accountAmount = a.as[Money[account.currency]]
        }
      }
    }
  }
  compute recRefs: [RefEntity]? {
    availableFor = List
    value = back{reasons*.refs + debtOrigins}
  }
  field accountAmount: Money[account.currency]? {
    visible = currency != account.currency
  }   
  compute accountAmountEditor: Money[account.currency] {
    value = if (currency == account.currency) amount else accountAmount!
    update = {
      if (currency == account.currency) {
        amount = new
      } else {
        accountAmount = new
      }
    }
  }
  
  register ledgers: [Ledger]? <- back {if (!canceled) makeLedgers}
 
  back func makeLedgers: Future[[Ledger]?] = {
    let cashLedger = LCash(
      journal = this, 
      account = account.ledgerAccount, legalEntity = account.legalEntity, 
      finAccount = account, trAmount = if (isIncoming) amount else -amount)
    let reasonLedgers <- if (let reasons) {
	  let es <- reasons*.ledgers.allCompleted
      es.flatMap(_) + reasons*.gstLedger
    } 
    let unrec = if (let b = debtAmount) {
      if (let cp = counterparty) {
        [LMoneyDebt(
              journal = this, date = date,
              legalEntity = this.legalEntity, trAmount = if (isIncoming) -b else b, 
              counterparty = cp, currency = currency)]
      } else {
        [LCurrency(account = if (isIncoming) UnreconciledCredits else UnreconciledDebits, 
                  contraAccount = account.ledgerAccount, currency = currency, journal = this, 
                  trAmount = if (isIncoming) -b else b)]
      }
    } 
    
    procLedgers(cashLedger + reasonLedgers + unrec)
  }
  
  
}


