extend trait DebtOrigin {
  func canceled = false

  func reconState: ReconState = {
    if (canceled) Canceled
    else if (let da = debtAmount) {
      if (let ra = reconAmount) {
        if (ra == da) Recon else PartRecon
      } else Unrecon
    } else {
      Recon
    } 
  }
  
  back func procLedgers(ledgers: [Ledger]?): Future[[Ledger]?] = {
    if (let ledgers) {
      if (ledgers*.legalEntity.allTheSame) CurrencyTrading.with(ledgers)
      else {
        let lgs: [[Ledger]?]? <- ledgers*.legalEntity.distinct.map {le =>
          let debts: [Ledger]? = ledgers.filter(_.legalEntity != le)
          	.groupBy(legalEntity, currency).agg(trAmount.sum).toSeq
            .map{
               LInterDebts(journal = this, legalEntity = le,  
                 currency = _.currency, counterparty = _.legalEntity.legalEntity, trAmount = _.trAmount)
            }
          CurrencyTrading.with(ledgers.filter(_.legalEntity == le) + debts)
        }.allCompleted
        lgs.flatMap(_)
      }
    } else Future([]) 
  }
  
   view debtOriginsView = debtOriginAmounts >> list (frame = false) {
  	x {origin >> field(title = fullTitle) amount.abs >> field(visible = amount != debtAmount)}
  }
}

