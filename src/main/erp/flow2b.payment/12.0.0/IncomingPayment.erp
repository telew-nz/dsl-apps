entity IncomingPayment extends Payment {
  background = "#d68400"
  func itemRoles = [Accountant, BusAdmin, Salesperson]
  func legalEntity = payee
  func isDebtDebit = false
  func srcAccount: FinAccount? = null
  func dstAccount: FinAccount? = account
  compute srcAmount: Number? {
    value = 0
    update = {}
  }
  compute dstAmount: Number? {
    value = accountAmountEditor
    update = {accountAmountEditor =? new}
  }
  compute srcBankData: BankData? {
    value = null
    update = {}
  }
  compute dstBankData: BankData?{
    value = bankData
    update = {bankData =? new}
  }
  func creditAmount: Money[currency]? = amount
  func debtCashFlows = if (let debtAmount) [CashFlowAmount(cashFlow = PurchaseReturns, amount = debtAmount)]
   
  func title = "$number $payer"
  view ref = x {title amount date}
  func number: String = "IP" + n 
  compute debtCounterparty: LegalEntity? {
    value = payer
    update = {
      if (let n = new) this.payer = n
    }
  }
  func counterparty = payer
  ref field payer: LegalEntity? = try? origin!.debtCounterparty!
  ref field payee: OurLegalEntity {
    available(Ref).with(accounts)
    default =? (try? origin!.legalEntity).or(OurLegalEntity.onlyOne)
    update = {
      this.account =? new.accounts.onlyOne
    }
  }
  func isTheir = payer?.isTheir
  func isIncoming: Bool = true
  field reasons: [IPReason]? inline by payment
  
  object view list = IncomingPayment.all >> nav{list{grid(labels = None, width = 1.2){
    row{number, date.as[Date[day]]!, payer, space, account, recRefs >> list(frame = false){_ >> field(title = title)}}
    row{stateView >> field(width = 0.8), amount >> field(width = 0.2), space(width = 0.2)}
  }}}
  
  view form = nav{grid{
      issuesView
      number
      refNum
      date
      stateView >> field(label = "State")
      unrecon
      payer
      payee
      account
      amount >> field(canEditUnit = true)
      accountAmount
      reasons
      manLinks
      debtOriginsView >> field(label = "Origins")
      bankData
    }
    generalLedgerButton
    button("Convert to Transfer", visible = !origin) {
      let to = account
      let income = amount
      let d = bankData
      let r = convertTo(CashTransfer)
      r.to = to
      r.dstBankData = d
      r.income = income
    }                
  }
  view stateView = x{eReconState}
}

trait IPReason extends InlineEntity with IReason {
  field payment: IncomingPayment
}



