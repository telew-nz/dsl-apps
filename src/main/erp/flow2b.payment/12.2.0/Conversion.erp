back object Conversion extends IConversion {
  func do(version: [Int?]?) = {
    if (version < [12,0,0]) {
      renameField(OutgoingPayment, reasons, "expenses")
      renameField(IncomingPayment, reasons, "incomes")
    }
    if (version < [12,1,0]) {
      renameField(Payment, sReconState, "reconcileState")
      DebtOrigin.all.foreach{m =>
        m.manLinks = {
          field[[ConvEntity]?](m, "credits").map(field[DebtOrigin]("credit")) 
          + 
          field[[ConvEntity]?](m, "debits").map(field[DebtOrigin]("debit")) 
        }
      }
      IncomingPayment.all
        .filter(o => o.manLinks && o.manLinks.all(m => m.legalEntity == o.legalEntity && !o.debtCounterparty && !m.debtCounterparty))
        .foreach {p =>
          let nn = LegalEntity.all.find(title == "No Name").result.get.alt(Company(title = "No Name").save)
          p.payer = nn
          p.save
        }
      OutgoingPayment.all
        .filter(p => p.manLinks.exists(legalEntity != p.legalEntity))
        .update(payer = manLinks!.first.legalEntity)
      OutgoingPayment.all
        .filter(p => p.manLinks.exists(debtCounterparty && debtCounterparty != p.debtCounterparty))
        .update(payee = manLinks!.first.debtCounterparty)
      IncomingPayment.all
        .filter(p => p.manLinks.exists(legalEntity != p.legalEntity))
        .update(payee = manLinks!.first.legalEntity)
      IncomingPayment.all
        .filter(p => p.manLinks.exists(debtCounterparty && debtCounterparty != p.debtCounterparty))
        .update(payer = manLinks!.first.debtCounterparty)
      OutgoingPayment.all
       .filter(o => o.manLinks.exists(legalEntity != o.legalEntity || debtCounterparty != o.debtCounterparty))
       .foreach {o =>
         field[[ConvEntity]?](o, "credits").map{c =>
           let cc = c.field[DebtOrigin]("credit")
           if (let dc = cc.debtCounterparty.or(o.debtCounterparty)) {
             OPDebt(payment = o, legalEntity = cc.legalEntity, counterparty = dc, amount = c.field("amount")).save
           }
         }
       }
      IncomingPayment.all
       .filter(o => o.manLinks.exists(legalEntity != o.legalEntity || debtCounterparty != o.debtCounterparty))
       .foreach {o =>
         field[[ConvEntity]?](o, "debits").map{c =>
           let cc = c.field[DebtOrigin]("debit")
           if (let dc = cc.debtCounterparty.or(o.debtCounterparty)) {
             IPDebt(payment = o, legalEntity = cc.legalEntity, counterparty = dc, amount = c.field("amount")).save
           }
         }
       }

    }
  }  
}    