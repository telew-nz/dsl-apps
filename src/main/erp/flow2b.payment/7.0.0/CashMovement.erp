trait CashMovement extends Journal {
  background = "#d68400"
  func sourceAccount: FinanceAccount? {canSort = true}
  func destinationAccount: FinanceAccount? {canSort = true}
  func date: Date {canSort = true}
  func journalDate = date
  report Report {
    field bookkeeper: Person? {
      from = Person.all.filter(is(Bookkeeper))
    }
    field legalEntity: LegalEntity? {
      from = LegalEntity.ours
    }
    field account: FinanceAccount?
    field state: [ReconcilationState]?
    field from: Date?
    field to: Date?
    
    view list = CashMovement.all.filter(
      (legalEntity ==? this.legalEntity)
      && (sourceAccount ==? account || destinationAccount ==? account)
      && journalDate >=? from && journalDate <=? to 
      && (!this.state || this.state.contains(reconcilationState))
      && isFor(bookkeeper, Bookkeeper)
    ).sortBy(journalDate.desc) >> nav{list{}}
  }
  func reconcilationState: ReconcilationState
}

extend entity BankAccount {
  extend view form = button("Movements") {
    CashMovement.Report(account = this.as[FinanceAccount]).list.open
  }
}
extend entity CashAccount {
  extend view form = button("Movements") {
    CashMovement.Report(account = this.as[FinanceAccount]).list.open
  }
}

