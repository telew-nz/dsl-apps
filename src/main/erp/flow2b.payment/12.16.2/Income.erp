trait IncomeRecodable extends AnyEntity {
  func income: IIncomeType
  func recode(): Void
}

trait PaymentIncome extends InlineEntity with IReason with IncomeRecodable {
  impl func income: IIncomeType
  func vendor: IVendor?
  
  field nonTaxable: UPercent? {
    default = (try? income)?.nonTaxable
    validate = if (0 > taxable || taxable > 1.00_PercentUnit) "Taxable percentage should be between 0% and 100%"
  }
  impl func recode(): Void = {
    this.gstRate = calcGstRate
    this.nonTaxable = income.nonTaxable
    this.save
  }

  compute taxable: UPercent? {
    label = "Taxable Percentage"
    value = (1.00_PercentUnit - nonTaxable).as[UPercent]
    update = {
      nonTaxable = (1.00_PercentUnit - new).as[UPercent]
    }
  }
  
  func currentAccount: CurrentAccount? = null
  impl field amount: UMoney[payment.currency] =? payment.unreconAmount.abs.positive
  compute incomeAmount: UMoney[payment.currency]? = if (currentAccount) amount*taxable else amount
  compute capitalAmount: UMoney[payment.currency]? = if (currentAccount) (amount - incomeAmount).positive
  field gstRate: UPercent[2]?? {
    default = calcGstRate
    visible = payment.legalEntity.hasGst
    validate = if (gstRate && vendor?.gstStatus != Registered) "Payee should be registered for GST"
  }
  
  func calcGstRate: UPercent[2]?? = {
    if (let p = try? vendor!, let e = try? income) {
      if (payment.legalEntity.hasGst) e.gstRate(p)
    }
  }
  compute gstValue: UPercent[2]? {
    label = "GST Rate"
    value = gstRate.alt(0).as[UPercent[2]]
    update = {
      gstRate = new
    }
    visible = hasGst
  }
  compute hasGst: Bool {
    value = gstRate
    update = {
      gstRate = if (new) gstValue else null
    }
  }
  func effectiveGstRate = if (payment.legalEntity.hasGst) gstRate
  view gstEditor = x(label = "Including GST", flow = false, visible = taxable) {
    hasGst >> field(label = "") gstValue >> field(label = "Rate", align = Left)
  }
  field desc: Text? {label = "Description"}
}

extend entity ExpenseType {
  extend view form = extend("nav") {
    button("Recode") {
      let _ <- IncomeRecodable.all.filter(income == this)
        .foreach(recode).result
      UI.info("Claimable percentage and GST rate have been updated in the relevant transactions")
    }
  }
}


inline entity PaymentExpense extends OPReason with PaymentIncome {
  icon = "book"
  singular = "Expense"
  
  impl func vendor = payment.payee?.vendor
  impl func refs: [RefEntity]? = [expense]
  field expense: ExpenseType {
    update = {
      recode()
    }
  } 
  
  impl func income = expense
  
  impl field currentAccount: CurrentAccount? {
    visible = nonTaxable
    from = payment.legalEntity.accounts*.as[CurrentAccount]
  }
  
  impl event onSave = {
    if (created) {
      if (let payee = payment.payee) {
        if (payment.reasons.count == 1 && !payee.vendor?.expense) {
          if (!OutgoingPayment.all.find(p => p.payee == payee && p != payment).result.get) {
            payee.makeVendor.expense = expense
            payee.save
          }
        }
      }
    }
  }
  impl func cashFlows = {
    (if (let ca = incomeAmount) [CashFlowAmount(cashFlow = Expenses, amount = ca)]) 
    +
    (if (let nca = capitalAmount) [CashFlowAmount(cashFlow = Capital, amount = nca)]) 
  }
  impl func ledgers: Future[[Ledger]?] = {
    if (incomeAmount) {
      if (capitalAmount) {
        let ce <- incomeExpense
        let ne <- capitalExpense
        ce + ne
      }
      else incomeExpense
    } else capitalExpense
  }
  func incomeExpense: Future[[Ledger]?] = {
    if (let ca = incomeAmount) {
      let a = if (let rate = effectiveGstRate) ca - ca*rate else ca
      let baseAmount <- a.to[Money[payment.legalEntity.getCurrency]](payment.date)
      [LExpenses(journal = payment, trAmount = baseAmount, expenseType = expense, 
                 taxable = if (currentAccount) 1.0 else taxable)]
    } else []
  }
  func capitalExpense: Future[[Ledger]?] = {
    if (let nca = capitalAmount, let curAcc = currentAccount) {
      let am <- nca.to[Money[curAcc.currency]](payment.date)
      [LCash(account = CurrentAccounts, finAccount = curAcc, journal = payment, 
             trAmount = am, cashFlow = Capital)]
    }
  }
 
  impl func gstLedger: LTax? = if (let rate = effectiveGstRate, let ca = incomeAmount) {
    let k = rate.as[Dec[16]]/(1 + rate)
    let gstAmount = ca*k
    LTax(tax = Gst, currency = payment.currency, 
         journal = payment, rate = gstRate,
         isInstantPayment = true,
         trAmount = gstAmount, 
         taxedAmount = ca - gstAmount)
  }
  
  impl view form = grid {
    row{expense amount }
    row{taxable >> field(showEmpty) gstEditor >> field(width = 0.3)}
    currentAccount >> field(label = "Current Account for Non-Taxable Percentage", placeholder = "Current Account")
    desc
  }
}

inline entity PaymentRevenue extends IPReason with PaymentIncome {
  icon = "book"
  singular = "Revenue"
  
  impl func vendor = payment.legalEntity
  impl func refs: [RefEntity]? = [revenue]
  
  field revenue: RevenueType {
    update = {
      recode()
    }
  } 
  
  impl func income = revenue

  impl func cashFlows = {
    if (let ca = amount) [CashFlowAmount(cashFlow = Sales, amount = ca)]
  }
  impl func ledgers: Future[[Ledger]?] = {
    if (let ca = amount) {
      let a = if (let rate = effectiveGstRate) ca - ca*rate else ca
      let baseAmount <- a.to[Money[payment.legalEntity.getCurrency]](payment.date)
      [LSales(account = Sales, journal = payment, trAmount = -baseAmount, revenueType = revenue, taxable = taxable)]
    }
  }
  impl func gstLedger: LTax? = if (let rate = effectiveGstRate, let ca = amount) {
    let k = rate.as[Dec[16]]/(1 + rate)
    let gstAmount = ca*k
    LTax(tax = Gst, currency = payment.currency, 
         journal = payment, rate = gstRate,
         isInstantPayment = true,
         trAmount = -gstAmount
         taxedAmount = gstAmount - ca)
  }
  
  impl view form = grid {
    row{revenue amount }
    row{taxable >> field(showEmpty) gstEditor >> field(width = 0.3)}
    desc
  }
}