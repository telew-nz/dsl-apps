trait Payment extends CashMovement with IPayment with Debt {
  background = "#d68400"
  func number: String
  func payer: LegalEntity
  func payee: LegalEntity
  func cashFlowCategory: CashFlowCategory = Exchange
  
  func journalDate = date
  func repaymentDate: Date = date
  
  func journalPriority: Int? = 100
  func definesDate: Bool = true
    
  object field gen: Int?
  const ref field n: Int? = increment(Payment.gen)
  
  ref field date: Date = now
  field account: FinanceAccount {
    default =? FinanceAccount.ours.onlyOne
    from = legalEntity.accounts
    update = {
      if (!try? this.currency) this.currency = new.currency
    }
  }
  ref field currency: Currency {
    default =? try? (origin?.currency).alt(account.currency)
    update = {
      if (currency != account.currency && !accountAmount) {
        if (let a = try? paidAmount) {
          accountAmount = a.as[Money[account.currency]]
        }
      }
    }
  }
  field accountAmount: Money[account.currency]? {
    visible = currency != account.currency
    isValid = currency == account.currency || accountAmount
  } 
      
  func unrecociledAmount: Money[currency]?
  register unreconciledCash: LCash? <- {
    let r: Future[LCash?] = if (let a = unrecociledAmount) {
      let trAmount <- a.to[Money[account.currency]](date)
      LCash(journal = this, date = date, account = account.ledgerAccount, 
            financeAccount = account, trAmount = trAmount, cashFlowCategory = Errors) 
    } else null
    r
  }
  register unreconciledError = Unreconciled.contra(unreconciledCash)
}


