entity IncomingPayment extends Payment with IIncomingPayment {
  background = "#d68400"
  func legalEntity = payee
  func srcAccount: FinanceAccount? = null
  func dstAccount: FinanceAccount? = account
  compute srcAmount: Number? {
    value = 0
    update = {}
  }
  compute dstAmount: Number? {
    value = accountAmountEditor
    update = {accountAmountEditor = new}
  }
  compute srcBankData: BankData? {
    value = null
    update = {}
  }
  compute dstBankData: BankData?{
    value = bankData
    update = {bankData =? new}
  }
  func creditAmount: Money[currency]? = amount
  
  func startingBalance: Money[currency]? = amount
  compute unreconciledAmount: Money[currency]? = balance
    
  func title = "$number $(date.date) $payer"
  func number: String = "IP" + n 
  compute debtCounterparty: LegalEntity? {
    value = payer
    update = {
      if (let n = new) this.payer = n
    }
  }
  ref field payer: LegalEntity? = try? origin!.debtCounterparty!
  ref field payee: LegalEntity {
    available(Ref).with(accounts)
    default =? (try? origin!.legalEntity).or(LegalEntity.ours.onlyOne)
    from = LegalEntity.ours
    update = {
      this.account =? new.accounts.onlyOne
    }
  }
  func isTheir = payer?.isTheir.alt(false)
  func isIncoming: Bool = true
  event onSave = {
    debits*.credit*.touch
  }
  func origins: [Setoff]? = debits
  func returns: [Setoff]? = credits
  list compute recRefs: [Entity]? = credits*.credit + debits*.debit
  
  object view list = IncomingPayment.all >> nav{list{grid(labels = None, width = 1.2){
    row{number, date.as[Date[day]]!, payer, space, account, recRefs >> list(frame = false){_ >> field(title = title)}}
    row{stateView >> field(width = 0.8), amount >> field(width = 0.2), space(width = 0.2)}
  }}}
  
  view form = nav{grid{
      number
      date
      stateView >> field(label = "State")
      unreconciledAmount
      payer
      payee
      account
      amount >> field(canEditUnit = true)
      accountAmount
      debits >> field(label = "Origins" singular = "Origin")
      credits >> field(label = "Returns" singular = "Return")
      bankData
    }
    generalLedgerButton
    button("Convert to Transfer", visible = !origin) {
      let to = account
      let income = amount
      let r = convertTo(CashTransfer)
      r.to = to
      r.income = income
    }                
  }
  view stateView = x{reconcileState}
  func mainLedgers: Future[[Ledger]?] = cashLedgers([])
}
