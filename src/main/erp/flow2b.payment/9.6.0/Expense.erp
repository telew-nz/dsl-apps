inline entity PaymentExpense {
  field payment: OutgoingPayment
  field expense: IExpenseType {
    update = {
      this.gstRate = expense.gstRate(payment.payee)
    }
  }
  field nonClaimable: Percent? {
    isValid = 0 <= claimable && claimable <= 1.00_PercentUnit
  }
  compute claimable: Percent? {
    label = "Claimable Percentage"
    value = 1.00_PercentUnit - nonClaimable
    update = {
      nonClaimable = 1.00_PercentUnit - new
    }
  }
  field currentAccount: CurrentAccount? {
    visible = nonClaimable
    from = payment.legalEntity.accounts*.as[CurrentAccount]
  }
  field amount: Money[payment.currency] =? payment.unreconciledAmount
  compute claimableAmount: Money[payment.currency]? = amount*claimable
  compute nonClaimableAmount: Money[payment.currency]? = amount - claimableAmount
  field gstRate: Percent[2]?? 
  compute gstEditor: Percent[2]? {
    label = "GST"
    value = gstRate.alt(0).as[Percent[2]]
    update = {
      gstRate = new
    }
  }
  func claimableExpense: Future[LExpenses?] = {
    if (let ca = claimableAmount) {
      let a = if (let rate = gstRate) ca - ca*rate else ca
      let baseAmount <- a.to[Money[payment.legalEntity.getCurrency]](payment.date)
      LExpenses(account = GeneralExpenses, journal = payment, trAmount = baseAmount, expenseType = expense)
    } else null
  }
  func nonClaimableExpense: Future[Ledger?] = {
    if (let nca = nonClaimableAmount) {
      if (let curAcc = currentAccount) {
        let am <- nca.to[Money[curAcc.currency]](payment.date)
        LCash(account = CurrentAccounts, financeAccount = curAcc, journal = payment, 
              trAmount = am, cashFlowCategory = GeneralExpenses)
      } else {
        let baseAmount <- nca.to[Money[payment.legalEntity.getCurrency]](payment.date)
        LExpenses(account = NonClaimableExpenses, journal = payment, trAmount = baseAmount, expenseType = expense)
      }
    } else null
  }
 
  func gstLedger: LTax? = if (let rate = gstRate) {
    let ca = claimableAmount
    LTax(account = TaxesPayable, tax = Gst, currency = payment.currency, 
         journal = payment, origin = payment, rate = gstRate,
         isInstantPayment = true,
         trAmount = ca*rate, 
         taxedAmount = ca - ca*rate)
  }
}