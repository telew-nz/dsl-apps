trait IPaymentIncome extends InlineEntity with IIPOrigin with IAdditOrigin {
  field payment: IncomingPayment
  func init(payment: IncomingPayment): Void = {
    this.payment = payment
  }
  func remove = delete
}

inline entity AdditionalCapital extends IPaymentIncome {
  field currentAccount: CurrentAccount? {
    from = payment.legalEntity.accounts*.as[CurrentAccount]
  } 
  field amount: Money[payment.currency] =? payment.unreconciledAmount
  func cashFlows = [CashFlowAmount(category = Capital, amount = amount)] 
  
  func ledgers: Future[[Ledger]?] = {
    if (let curAcc = currentAccount) {
      let am <- amount.to[Money[curAcc.currency]](payment.date)
      [LCash(account = CurrentAccounts, financeAccount = curAcc, journal = payment, 
             trAmount = -am, cashFlowCategory = Capital)]
    } else {
      let baseAmount <- amount.to[Money[payment.legalEntity.getCurrency]](payment.date)
      [LCounterparty(account = Capital, counterparty = payment.payer, journal = payment, trAmount = -baseAmount)]
    }
  }
  
  view form = grid {
    h3("Additional Capital")
    row{currentAccount amount }
  }
}