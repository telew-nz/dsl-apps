entity IncomingPayment extends Payment with DebtCredit with IIncomingPayment {
  background = "#d68400"
  func legalEntity = payee
  func sourceAccount: FinanceAccount? = null
  func destinationAccount: FinanceAccount? = account
  func creditAmount: Money[currency]? = amount
  ref field amount: Money[currency] {
    default =? try? origin?.as[DebtDebit]!.debitUnpaid!
    label = "Paid Amount"
  }
  func paidAmount = amount
  func startingBalance: Money[currency]? = amount
  compute unrecociledAmount: Money[currency]? = creditUnpaid
    
  func title = "$number $payer"
  func number: String = "IP" + n 
  func counterparty: LegalEntity = payer
  ref field payer: LegalEntity =? try? origin!.counterparty!
  ref field payee: LegalEntity {
    available(Ref).with(accounts)
    default =? (try? origin!.legalEntity).or(LegalEntity.ours.onlyOne)
    from = LegalEntity.ours
    update = {
      this.account =? new.accounts.onlyOne
    }
  }
  func isTheir = payer.isTheir
  
  func onSave = {
    debits*.credit*.touch
  }
  
  object view list = IncomingPayment.all >> nav{list{grid(labels = None){
    row{number, date.as[Date[day]]!, payer, space, account}
    row{stateView >> field(width = 0.8), amount >> field(width = 0.2)}
  }}}
  
  view form = nav{grid{
      number
      date
      stateView >> field(label = "State")
      unrecociledAmount
      payer
      payee
      account
      amount >> field(canEditUnit = true)
      accountAmount
      debits >> field(label = "Origins" singular = "Origin")
      button("Convert to Transfer", visible = !origin) {
        let to = account
        let income = amount
        let r = convertTo(CashTransfer)
        r.to = to
        r.income = income
      }  
    }
    generalLedgerButton
  }
  view stateView = x{creditState}
  
  func creditOriginLedger(setoff: Setoff): Future[Ledger] = {
    LCash(journal = setoff.journal, date = setoff.date, account = account.ledgerAccount, 
          financeAccount = account, trAmount = if (account.currency == currency) setoff.amount else accountAmount, 
          cashFlowCategory = setoff.debit.cashFlowCategory)
  }
  
}
