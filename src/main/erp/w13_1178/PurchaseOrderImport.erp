object ITPOIUnexpectedInvoiceCount extends IssueType[OrderImport] {
  impl func title = "Unexpected invoice count"
  impl func hasIssue(item: OrderImport) = item.state == Complete && item.expectedInvoiceCount != item.orders.count
}


enum SupportLevel {
  case Full {color = "white" background = "#090"}
  case Partial {background = "#ed9"}
  case Unsupported{background = "#f99"}
}

extend entity OrderImport {
  field expectedIssues: [IssueType]? {
    views = []
    from = [ITPOINoInvoiceType, ITPOINoTotal, ITPOINoTotalMatch, ITPOINoItems, ITPOIGstRate]
  }
  field expectedInvoiceCount: UInt {
    default = 1
    views = []
  }
  extend override func issueTypes = super.issueTypes + ITPOIUnexpectedInvoiceCount
  
  list compute support: SupportLevel {
    value = {
      if (!expectedIssues) Full
      else if (expectedIssues.contains(ITPOINoInvoiceType) || expectedIssues.contains(ITPOINoItems)) Unsupported
      else Partial
    }
    views = []
  }
  impl event onSave = {
    orders*.touch
  }
  
  extend view form = extend("settings") {
    expectedInvoiceCount
    expectedIssues
  }
  extend view stateItemView = support
  func expect(issue: IssueType): Void = {
    expectedIssues += issue
    save
  }
  func unexpect(issue: IssueType): Void = {
    expectedIssues -= issue
    save
  }
}

object ITPOIIssuesNoMatch extends IssueType[ImportedOrder] {
  impl func title = "Issues do not match to expected"
  impl func hasIssue(item: ImportedOrder) = {
    item.poi.state == Complete && item.issueTypes0.filter(_.hasIssue(item)).toSet != item.poi.expectedIssues.toSet
  }
  impl func fixes(item: ImportedOrder) =  {
    let issues <- back{backFixes(item)}
    
    issues.expect.map{i =>
      Fix(text = "Expect issue $i", acts = [Act(label = "Expect", icon = "eye", do = back {
        item.poi.expect(i)
      })])
    } + issues.unexpect.map{i =>
      Fix(text = "Unexpect issue $i", acts = [Act(label = "Unexpect", icon = "eye-slash", do = back {
        item.poi.unexpect(i)
      })])
    } 
  }
  back func backFixes(item: ImportedOrder) = {
    let actualIssues = item.issueTypes0.filter(_.hasIssue(item)).toSet
    let expectedIssues = item.poi.expectedIssues.toSet
    (expect = actualIssues.toSeq.filter(_ !in expectedIssues), unexpect = expectedIssues.toSeq.filter(_ !in actualIssues))
  }
}


extend entity ImportedOrder {  
  extend override func issueTypes = {
    let ists = super.issueTypes
    if (poi.expectedIssues) ists.filter(!poi.expectedIssues.contains(_)) + ITPOIIssuesNoMatch
    else ists 
  }
   
  extend override func success: Bool = !issues && !poi.issues && !poi.expectedIssues
   
  /*extend func fixes(issue: DashboardIssue): Future[[Fix]?] = {
    if (issue == POIIssuesNoMatch) {
      Fix (
        text = "Expected issues $expectedIssues != $issues0"
      )
    }
  }*/
  
}
