entity PurchaseOrderImport extends ImportTask  {
//  background = "#d68400"
  override compute number = "POI$n"
  impl func service = OrderImportService
  
  //field text: PlainText?
  impl func itemRoles = [BusAdmin]
  
  ref compute fileName: String {
    value = files*.name.join(", ")
  }
  list field invoices: [POIInvoice]? by poi {
    deleteCascade
  }
  func success = invoices.all(_.success)
  field from: Contact?
  func vendor: Vendor? = from?.legalEntity?.vendor
  system const field invGen: UInt? = 0
  field files: [File]
  override func title = "$number $(date.date) $fileName"
  impl view form = nav{grid{
    issuesView
    row {number date from}
    files 
    
    extension("settings")
    stateView 
    invoices >> field(editMode = AlwaysRead)
  }}
  impl func createJob = PurchaseOrderImportJob(task = this)

  impl view traitItem = y {
    x {stateItemView >> field(stretch = 0) date >> field(fontStyle = Label) number >> field(fontStyle = Label, width = 0.1) fileName}
    invoices >> list{ref}
  }
  view stateItemView = x {state}
  report Report {
    field state: [ImportTaskState]? {auto}
    impl view list = PurchaseOrderImport.all >> nav{list {
      traitItem
    }}
  }
}

entity POIInvoice extends DashboardItem {
  singular = "Imported Invoice"
  plural = "Imported Invoices"
  field invoiceType: InvoiceType?
  
  func number = "$(poi.number).$n"
  impl func title = "$number $invoiceNumber"
  
  ref field poi: PurchaseOrderImport {label = "Import"}
  ref const field n: UInt = {
    poi.invGen += 1
    poi.save
    poi.invGen!
  }
  func success: Bool = !savedIssues && !poi.savedIssues
  
  field invoiceDate: Date?
  
  ref compute date = invoiceDate.alt(poi.date)
  ref field invoiceNumber: String?
  const field vendorNumber: String?
  field vendor: Vendor? {
    default = poi.vendor
    init = {
      new?.legalEntity?.legalInfo?.gstNumber = vendorNumber
    }
  }
  func vendorId: String? = if (let vendor) vendor.id.toString else vendorNumber
  field dueDate: Date?
  
  field rowsWithGst: Bool { label = "Rows include GST"}
  field currency: Currency = our
  field totalNoGst: Money[currency]?
  field gst: Money[currency]?
  ref compute totalWithGst: Money[currency]? = totalNoGst + gst
  
  field items: [POIInvoiceItem]? inline by invoice
  
  impl view ref = x {title date.date totalWithGst}
  
  impl view form = nav{grid{
    issuesView
    x { poi >> field(stretch = 1) number >> field(fontStyle = Label)}
    invoiceType >> field(label = "")
    row {
      invoiceNumber invoiceDate dueDate
    }
    row {
      y (label = "Vendor") {
        vendorNumber >> field(fontStyle = Label)
        vendor
      } rowsWithGst space
    }
    row {
      totalNoGst gst totalWithGst 
    }
    items >> table {
      y (label = "Description", width = 0.6, margin = None) {
        code >> field(fontStyle = Label) 
        desc
      }
      qty >> field(width = 0.1) 
      gstRateEditor >> field(width = 0.1, label = "GST") 
      amount >> field(width = 0.2) 
    }    
  }}
}
 
enum InvoiceType {
  case TaxInvoice
  case DebitNote
  case CreditNote
  case AdjustmentNote
}

inline entity POIInvoiceItem {
  field invoice: POIInvoice by items
  
  field code: String?
  field desc: PlainText? {
    label = "Description"
  }
  field qty: Qty?
  field amount: Money[invoice.currency]?
  field gstRate: UPercent[2]??
  compute gstRateEditor: UPercent[2]? {
    value = gstRate.alt(0).as[UPercent[2]]
    update = {
      gstRate = new
    }
  }
}
