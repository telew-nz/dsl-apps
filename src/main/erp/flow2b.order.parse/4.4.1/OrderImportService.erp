object OrderImportService extends SystemService with MsgProcActivity {
  impl func title: String = "Order Import Service"
  impl func roles: [Role]? = [Admin]
  impl func priority = 0.7
  impl func defaultDebug = true
  
  //field resolveReferences: Bool = true
  field importMsg: Bool {
    default = true
    label = "Import messages from vendors"
  }
  
  impl func canProc(msg: ExtMsg): Bool = {
       importMsg 
    && msg.attachs.exists(name.lower.endsWith(".pdf"))
    && msg.from.contact?.contactLegalEntity?.vendor
  }
  
  func invoiceTitleTerms = ["tax invoice", "credit note", "debit note", "adjustment note", "sales order", "proforma invoice"]
  impl func refs(msg: ExtMsg): [Entity]? = {
    if (let aa = msg.refActivities.first) [aa.mainEntity]
  }
  impl func item(msg: ExtMsg, from: Contact?, recipients: [Contact], refs: [Entity]?): Future[Entity?] = {
    let files = msg.attachs!*.make
    let invoices <- files
      .filter(is("pdf"))
      .oneByOne{file => file.plainText.map(text => (file, text))}
    guard(let invoices = invoices
      .filter{i =>
        let t = i.text.flex
        invoiceTitleTerms.exists(t.contains(_))
      }*.file
    ) else return {
      files*.delete
      null[Entity]
    }

    Activity.current!.entities = files
    PurchaseOrderImport(files = invoices, from = from)
  }
  
  impl func attachs(msg: ExtMsg, item: Entity): [File]? = []
  
  impl view form = nav{
    grid {
      issuesView
      serviceState
      errorsCount >> field(editMode = AlwaysRead)

      importMsg
      extension
    }
    button("Statistics") {
      OrderImportStatistics.form.open
    }
  }
}

class InvStat(field success: UInt?, field all: UInt?) {
  compute percent: UPercent[2]? = if (let all) success.as[UPercent[2]]/all
  impl view form = x {percent success label("of") all}
}
