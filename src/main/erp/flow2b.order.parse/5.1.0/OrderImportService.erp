object OrderImportService extends SystemService with MsgProcActivity {
  impl func title: String = "Order Import Service"
  impl func roles: [Role]? = [Admin]
  impl func priority = 0.7
  impl func defaultDebug = true
  
  //field resolveReferences: Bool = true
  field import: ImportInvoicesFrom {
    default = FromAllMessages
    label = "Import invoices"
  }
  field allFromEmails: [Email]? {
    default = ["messaging-service@post.xero.com"]
    label = "Process all messages received from EMails (even if it is not vendor's email)"
    singular = "EMail"
  }
  field allToEmails: [EmailContact]? {
    label = "Process all messages sent to EMails (even if it is not vendor's email)"
    singular = "EMail"
  }
  
  impl func canProc(msg: ExtMsg): Bool = {
       import != None
    && msg.attachs.exists(name.lower.endsWith(".pdf"))
    && (
      import == FromAllMessages
      || isForced(msg) 
      || msg.from.contact?.contactLegalEntity?.vendor
      || msg.from.contact?.contactLegalEntity?.customer
    )
  }
  back func isForced(msg: ExtMsg): Bool = {
    allFromEmails.exists(_ =%= msg.from.address)
      || allToEmails.exists(_.email =%= msg.to.address)
  }
  
  func invoiceTitleTerms = ["invoice", "credit note", "debit note", "adjustment note", "sales order"]
  impl func refs(msg: ExtMsg): [Entity]? = { 
    if (let aa = msg.refActivities.first) [aa.mainEntity]
  }
  impl func item(msg: ExtMsg, from: Contact?, recipients: [Contact], refs: [Entity]?): Future[Entity?] = {
    let files = msg.attachs!*.make
    let pdfs = files.filter(is("pdf"))!
    let invoices <- pdfs
      .oneByOne{file => file.plainText.map(text => (file, text))}
    guard(let invoices = invoices
      .filter{i =>
        isForced(msg) || {
          let t = i.text.flex
          invoiceTitleTerms.exists(t.contains(_))
        }
      }*.file
    ) else return {
      files*.delete
      null[Entity]
    }

    Activity.current!.entities = pdfs
    let pois = pdfs.map {file =>
      OrderImport(file = file, from = if (!allFromEmails.exists(_ =%= msg.from.address)) from).save
    }
    pois.first.saveMain
  }
  
  impl func attachs(msg: ExtMsg, item: Entity): [File]? = []
  
  impl view form = nav{
    grid {
      issuesView
      serviceState
      errorsCount >> field(editMode = AlwaysRead)
      
      import
      allFromEmails
      allToEmails
      
      extension
    }
    button("Statistics") {
      OrderImportStatistics.form.open
    }
  }
}

enum ImportInvoicesFrom {
  case FromAllMessages
  case FromVendorEmailsOnly
  case None
}
