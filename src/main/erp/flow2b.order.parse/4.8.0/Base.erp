back interface OrderProcessorBase extends OrderProcessor {
  impl func process(poi: PurchaseOrderImport, text: PlainText) = {
    if (let pages = text.split("\f").mapOpt(_).mapOpt(lines(_))) {
      nextInvs(poi, pages, pageNum = 1)
    }
  }
  
  func nextInvs(poi: PurchaseOrderImport, pages: [[String]], pageNum: UInt): [POIInvoice] = {
    let page = pages.first
    if (let tail = pages.drop(1), let n = page.takeWhile(!isTableHeader(_)).count) {
      let htf = tail.first.span(!isTableHeader(_))
      let page2Header = htf.#0
       
      let d0 = page2Header.count.as[UDec[8]]/n
      let d = if (d0 > 1) 1.as[UDec[8]]/d0! else d0
      let hhtf = htf.#1.span(!canBeTableLine(_))
      let page2TableHeader = hhtf.#0
      let page2TableNFooter = hhtf.#1
      let pph = page.span(!isTableFooter(_))
      let page1HeaderNTable = pph.#0
      let page1Footer = pph.#1 
      let newPage: [String] = {
        if (page2TableNFooter) (page1HeaderNTable + page2TableNFooter + page1Footer + page2Header + page2TableHeader)!
        else (page2Header + page1HeaderNTable + page1Footer)!
      }
      if (pageNum < 10 && (!page2TableNFooter || d < 0.5 || !isInvLastPage(page, pageNum))) {
        nextInvs(poi, [newPage] + tail.drop(1), pageNum + 1)
      } else {
        let inv = makeInv(poi, page)
        if (!inv.totalNoGst) {
          inv.delete
          nextInvs(poi, [newPage] + tail.drop(1), pageNum + 1)
        } else {
          [inv] + nextInvs(poi, tail, pageNum = 1)
        }
      }
    } else {
      [makeInv(poi, page)]
    }
  }
  
  func isInvLastPage(lines: [String], pageNum: UInt): Bool = {
    let rPage: Regex = Regex(pagePattern(pageNum))
    
    (!lines.exists{l => 
      l.all(rPage).exists{p => 
        p.group(1).toUNum > pageNum
      }
    })
  }
  
  func makeInv(poi: PurchaseOrderImport, lines: [String]): POIInvoice = {
    let inv = POIInvoice(poi = poi)
    
    let txt = lines.join("\n").flex
    inv.invoiceType = {
      if (txt.contains("credit note")) CreditNote
      else if (txt.contains("debit note")) DebitNote
      else if (txt.contains("adjustment note")) AdjustmentNote
      else if (txt.contains("tax invoice")) TaxInvoice
      else if (txt.contains("proforma invoice")) Order
      else if (txt.contains("sales order")) Order
    }
    
    let htf = lines.span(!isTableHeader(_))
    let headerLines = htf.#0
    let tf = htf.#1.drop(1).span(!isTableFooter(_))
        
    guard (let tableLines0 = makeTableLines(tf.#0)) else return inv
    let tableLines = filterTableLines(tableLines0)
    
    
    let nums0 = tableLines.map{l => 
      extractLineNum(l).alt([LineNum(line = l, amount = l.decs.last!)])
    }
    let nums1 = selectLineNums(nums0)
    
    let footerLines = nums1.last.line.tail + tf.#1
    nums1.last.line.tail = []
       
    let infoLines = headerLines + footerLines
    
    let footerNums = footerLineNums(nums1, footerLines)
    let nums = nums1 + footerNums
    
    if (let total = extractTotal(nums, infoLines)) {
      if (nums*.amount*.v.sum == total.withGst) {
        inv.rowsWithGst = true
      } 
      if (total.gst) {
        nums*.gstRate = IdxD(v = total.gstRate)
      }
      inv.totalNoGst = total.noGst
      inv.gst = total.gst
    } else {
      let hasGst = nums.all(type)
      if (nums.exists(!type)) {
        let incl = gstInclTerms.exists(txt.contains(_))
        let excl = gstExclTerms.exists(txt.contains(_))
        if (incl && !excl) {
          nums*.type = withGst
        } else if (!incl && excl) {
          nums*.type = noGst
        }
      }
      if (nums.all(type) let type = nums*.type.distinct.onlyOne) {
        inv.rowsWithGst = type == withGst
        let total = Total(
          noGst = if (hasGst) nums*.amountNoGst.sum else nums*.amount*.v.sum, 
          gst = if (hasGst) nums*.gst*.v.sum
        )
        if (let total = checkTotal(infoLines, total)) {
          inv.totalNoGst = total.noGst
          inv.gst = total.gst
          if (nums.exists(!gstRate)) {
            nums*.gstRate = IdxD(v = total.gstRate)
          }
        }
      } else {
        let total = Total(noGst = nums*.amount*.v.sum)
        if (let total = checkTotal(infoLines, total) where total.gst) {
          inv.totalNoGst = total.noGst
          inv.gst = total.gst
          nums*.gstRate = IdxD(v = total.gstRate)
          if (nums*.amount*.v.sum == total.withGst) {
            inv.rowsWithGst = true
          } 
        }
      }
    }
    
    let forceMakeItems = !inv.totalWithGst || nums*.amount*.v.sum !in [inv.totalWithGst, inv.totalNoGst] || nums.all(!qty?.v)
    nums.foreach{ln =>
      if (forceMakeItems || ln.qty?.v || ln.amount?.v) {
        ln.makeItem(inv, extractLineDesc(ln))
      }
    }
    extractInfo(inv, infoLines)

    //inv.text = text
    inv
  }
  
  func intPattern = "\d+"
  func decPattern = "-?\s*\\\$?\s*(\d{0,3}(,?\d{3})*\.\d{2,4})(\s*[CcDd][Rr])?"
  func percentPattern = "\d+(.\d+)?\s?%"
  func codePattern = "^[\^]?\s*(([A-Z0-9]{1,3}\s+)?[A-Z0-9-#.*]+)(\s|\$)"
  func tableLinePattern = ".*\s" + decPattern + "\s*(?i)(GST)?\s*"
  func termLineEndPattern = "([A-Za-z\s]+)([:\s]\s*)(" + decPattern + "\s)*?(" + decPattern + ")\s*(?i)(GST)?\s*\$"
  func wordSepPattern = "[\s=]"
  func datePattern = "(\S*)\s*date\s*:?\s*([^\s]+)"
  func pagePattern(num: UInt): String = "[Pp]age $num of (\d+)(\s|\$)"
  func numberPattern = "([A-Za-z.]+)(\s+[A-Za-z.]+)?(\s+[A-Za-z.]+)?([#:\s]+)(([A-Z.-]*[0-9]{2,}[A-Z]*([-./\\\\\s\)]|\$))+)"
  func invoiceNumberTerms = ["tax invoice", "invoice no", "invoice", "reference", "number", "sales order no"]
  func poNumberTerms = ["purchase order", "customer order no", "your order"]
  func vendorNumberTerms = ["gst number", "abn", "gst no", "gst reg no"]
  func headerTerms = ["description"]
  func footerTerms = [
     "charged to account", "total excluding", "total excl", "total including", "total incl", "total exclusive", "total gst", 
     "comments", "E &O E", "E&OE", "carry forward", "amount on account", "delivery instructions", 
     "rates displayed include", "continued overleaf"
  ]
  func gstInclTerms = ["price includes gst", "total inc gst", "total incl gst", "total (incl gst)"]
  func gstExclTerms = ["price excludes gst", "total exc gst", "total excl gst", "total (excl gst)"]
  func footerLineTerms = ["Freight", "Delivery", "Delivery Fee"]
  field rTableLine = Regex(tableLinePattern)
  field rDec = Regex(decPattern)
  field rInt = Regex(intPattern)
  field rWordSep = Regex(wordSepPattern)
  field rPercent = Regex(percentPattern)
  field rCode = Regex(codePattern)
  field rDate = Regex(datePattern)
  field rNumber = Regex(numberPattern)
  field rTermLineEnd = Regex(termLineEndPattern)
  
  
  func lines(text: PlainText): [String]? = {
    text.lines(None).mapOpt(_)
  }
  func isTableHeader(line: String): Bool = {
    let l = line.flexWholeWords
    headerTerms.exists(l.contains(_))
  }
 
  func isTableFooter(line: String): Bool = {
    let l = line.replace(".", " ").flexWholeWords
    footerTerms.exists(l.contains(_)) || (
         (l.startsWith("total") || l.startsWith("gst")) 
      && line.all(rTermLineEnd)
    )
  }
  func canBeTableLine(line: String): Bool = {
    line.length > 20 && line.matches(rTableLine) //ends with *0.00 or *0.0000
  } 
  func wordType(word: String): LineWordType = {
    if (word.matches(rDec)) dec
    else if (word.matches(rInt)) int
    else if (word.matches(rPercent)) percent
    else if (word =%= "nett" || word =%= "net" || word == "-") any
    else str
  }
  func splitToWords(line: String): [String] = {
    line.split(rWordSep).mapOpt(_)!
  } 
  func cmp(a: IdxD, b: IdxD): Bool = a.v.round(round, 2) == b.v.round(round, 2)
 
  func formula(formula: UDec[2], line: TableLine, cmp: IdxD, amount: IdxD, qty: IdxD, make: (LineNum) => Void): LineNum? = {
    let error = (cmp.v.round(round, 2) - amount.v.round(round, 2)).abs
    if (error <= qty.v.abs.as[UDec[2]]*0.01) { 
      let l = LineNum(line = line, formula = formula, qty = qty, error = error, amount = amount)
      make(l)
      l
    }
  }
  
  func doExtractLineNum(line: TableLine, qtys: [IdxD]?, decs: [IdxD]?): [LineNum]? = {
    let arr: [[LineNum]?] = [
      //qty*price + gst == amount
      qtys.flatMap{qty =>
        decs.combinations(3)*.permutations
          .filter{i => (((i(1)*qty).absV > i(2).absV && i(2).v) || !i(3).v)}
          .mapOpt {i =>
            formula(100, line, cmp = i(1)*qty + i(2), amount = i(2), qty) {l =>
              l.type = withGst
              l.gstRate = if (let q = i(1).v*qty.v) IdxD(v = i(2).v.as[UPercent[2]]/q)
              l.gst = i(2)
              l.others = [i(1)]
            }
          }
      } 
    
      //qty*(price + gst) == amount
      qtys.distinct.flatMap{qty =>
        decs.combinations(3)*.permutations
          .filter(i => i(1).absV > i(2).absV || !i(3).v)
          .mapOpt{i =>
            formula(99, line, cmp = (i(1) + i(2))*qty, amount = i(3), qty) {l =>
              l.gstRate = if (i(1).v) i(2)/i(1)
              l.type = withGst
              l.gst = i(2)*qty
              l.others = [i(1)]
            }
          }
      }
    
      //qty*price - discount == amount
      qtys.flatMap{qty =>
        decs.combinations(3)*.permutations
          .filter(i => qty.v && i(1).v && (i(2).v > 0 || !i(3).v))
          .mapOpt{i =>
            formula(98, line, cmp = i(1)*qty - i(2), amount = i(3), qty) {
              others = [i(1)]
            }
          }
      }

      //qty*price*(100% - discount) == amount
       qtys.flatMap{qty =>
        line.percents.flatMap {discount =>
          decs.combinations(2)*.permutations
            .mapOpt{i =>
              formula(97, line, cmp = i(1)*qty*((1 - discount.v).positive), amount = i(2), qty){
                others = [i(1)]
              }
            }
        }
      }

      //Such as Bunnings
      //round(priceNoGst*(1+gst/amountExclGst)*(1-discount))*qty = amountWithGst
      if (decs.count >= 4) {
        qtys.flatMap{qty =>
          line.percents.flatMap {discount =>
            decs.combinations(4)*.permutations
              .filter(i => i(3).v && i(2).absV < i(3).absV && i(3).absV <= i(4).absV)
              .mapOpt{i =>
                formula(
                  95, line, 
                  cmp = IdxD(v = (i(1).v.as[UDec[8]]*(1 + (i(2).v/i(3).v!).round(round, 2))*(1 - discount.v).positive).round(round, 2)*qty.v),
                  amount = i(4), qty
                ) {l =>
                  l.type = withGst
                  l.gstRate = i(2)/i(3)
                  l.gst = i(2)
                  l.others = [i(1), i(3)]
                }
              }
          }
        }
      }
    
      //Such as Bunnings Landscape
      //round(priceNoGst*(1+gst/amountExclGst))*qty = amountWithGst
      if (decs.count >= 4) {
        qtys.flatMap{qty =>
          decs.combinations(4)*.permutations
            .filter(i => i(3).v && i(2).absV < i(3).absV && i(3).absV <= i(4).absV)
            .mapOpt{i =>
                formula(
                  94, line, 
                  cmp = IdxD(v = (i(1).v.as[UDec[8]]*(1 + (i(2).v/i(3).v!).round(round, 2))).round(round, 2)*qty.v),
                  amount = i(4), qty
                ) {l =>
                  l.type = withGst
                  l.gstRate = i(2)/i(3)
                  l.gst = i(2)
                  l.others = [i(1), i(3)]
                }
              }
        }
      }

      //qty*price == amount
      qtys.flatMap{qty =>
        decs.combinations(2)*.permutations
          .mapOpt{i =>
            formula(90, line, cmp = i(1)*qty, amount = i(2), qty = qty) {l =>
              l.others = [i(1)]
            }
          }
      }
      
      //qty*price/pricePerQty == amount
      qtys.combinations(2)*.permutations.filter(qi => qi(2).v).flatMap{qi =>
        decs.combinations(2)*.permutations
          .mapOpt {i =>
            formula(89, line, cmp = i(1)*qi(1)/qi(2), amount = i(2), qty = qi(1)){
              others = [i(1), qi(2)]
            }
          }
      }
    ]
    arr.flatMap(_)
  }
  
  func extractLineNum(line: TableLine): [LineNum]? = {
    let decs = line.decs
    let candidates = {
      if (let qtys = line.ints) {
         doExtractLineNum(line, qtys, decs)
      } 
      + 
      //qty is decimal
      decs.flatMap {qty =>
        doExtractLineNum(line, [qty], decs.filter{d => d.i != qty.i})
      }
    }.filter{
      (qty?.v <= 0 && amount?.v <= 0) || (qty?.v >= 0 && amount?.v >= 0)
    } + {
        //amount*gstRate == gst
        if (let pers = line.percents.distinct) {
          pers.filter(v <= 0.4).flatMap{gstRate =>
            decs.combinations(2)*.permutations
              .filter(i => cmp((i(1)*gstRate), i(2)))
              .map{i =>
                LineNum(formula = 10, line = line, amount = i(1), gstRate = gstRate, type = noGst, gst = i(2))
              }
          }
        }
        +
        //gst/(amount - gst) in gstRates
        decs.combinations(2)*.permutations
          .filter{i => (i(1).v - i(2).v) && (i(2).v/(i(1).v - i(2).v)!).round(round, 2) in gstRates}
          .map{i =>
            LineNum(formula = 9, line = line, amount = i(1), gstRate = i(2)/(i(1) - i(2)), type = withGst, gst = i(2))
          }
        +
        //gst/amount in gstRates
        decs.combinations(2)*.permutations
          .filter{i => i(1).v && (i(2).v/i(1).v!).round(round, 2) in gstRates}
          .map{i =>
            LineNum(formula = 8, line = line, amount = i(1), gstRate = i(2)/i(1), type = noGst, gst = i(2))
          } 
    }
    
    candidates.sortBy(error, formula.desc, amount?.i, qty?.v.desc)
  }
  
  func selectLineNums(ls: [[LineNum]]): [LineNum] = {
    guard (let sample = 1.range(ls.count)
      .combinations(2)
      .map {is =>
        let lsa: [LineNum] = ls(is(1))
        ls(is(1)).flatMap{a =>
          ls(is(2)).map{b =>
            (sim = a.sim(b), lidx = if (a.formula < b.formula) is(2) else is(1), line = if (a.formula < b.formula) b else a, amountI = a.amount?.i.min(b.amount?.i), qtyV = a.qty?.v.max(b.qty?.v))
          }
        }.sortBy(sim.desc, line.formula.desc, amountI, qtyV)
       .first!
      }
      .sortBy(sim.desc, line.formula.desc, amountI, qtyV)
      .first
      where sample.sim || (sample.line.formula && ls.exists(!first.formula))
    ) else return ls*.first
    
    var i: Int? = ls.count
    var merge: TableLine? = null
    
    ls.reverse.mapOpt {l =>
      let ll = if (i == sample.lidx) {
        sample.line
      } else {
        let s = l.map{b =>
            (sim = sample.line.sim(b), line = b)
          }.sortBy(sim.desc, line.formula.desc, line.amount?.i, line.qty?.v)
          .first
        if (s.sim > 0 || i == 1) {
          s.line
        } 
      }
      if (let m = merge) {
        let line = ll?.line.alt(l.first.line)
        line.tail = line.tail + [m.str] + m.tail
        merge = null
      }
      if (!ll) {
        merge = l.first.line
      }
      i -= 1
      ll
    }.reverse!
  }
  
  func footerLineNums(nums: [LineNum], lines: [String]?): [LineNum]? = {
    lines.mapOpt{l =>
      if (let le = l.all(rTermLineEnd).first 
          let amount = IdxS.toNum(le.group(7))
          let term = footerLineTerms.find{le.group(1).flexWholeWords.endsWith(_)}
            where !nums.exists(line.str.flex.contains(term))
      ) {
        LineNum(line = TableLine(str = term), amount = IdxD(v = amount))
      }
    }
  }
  
  func extractLineDesc(num: LineNum): LineDesc? = {
    let nums = num.qty?.v.toSeq + num.amount?.v.toSeq + num.gst?.v.toSeq + (if (let r = num.gstRate?.v) [r*100]) + num.others*.v
    var n: Int? = 0
    let f = num.line.words.takeWhile{s =>
      n += s.v.length + 1
      n < 19 || (try? IdxS.toNum(s.v)) !in nums
    }.map(v).join(" ")
    let desc = ([f] + num.line.tail).join("\n")
    let code = desc.all(rCode).onlyOne?.group(1)
    LineDesc(line = num.line, code = code, desc = if (code) desc.replace(rCode, "").trim else desc)
  }
  func extractTotal(nums: [LineNum], lines: [String]?): Total? = {
    let decs = lines*.all(rDec).map(IdxS.toNum(_.toString))
    (if (let i = decs.combinations(3)*.permutations
      .filter(i => i(1).abs > i(2).abs && i(3).abs >= i(1).abs && i(2))
      .filter(i => i(1) + i(2) == i(3))
      .sortBy(_(3).desc, _(2).desc)
      .first
    ) {
      Total(noGst = i(1), gst = i(2))
    }).or {
      if (
        let noGst = nums*.amountNoGst.sum
        let i = decs.combinations(2)*.permutations
          .filter(i => noGst.abs > i(1).abs && i(2).abs >= noGst.abs && i(1))
          .filter(i => noGst + i(1) == i(2))
          .sortBy(_(2).desc)
          .first
      ) {
        Total(noGst = noGst, gst = i(1))
      }
    }
  }
  func gstRates: [UPercent]? = [0.10, 0.15]
  func checkTotal(lines: [String]?, total: Total): Total? = {
    let decs = lines*.all(rDec).map(IdxS.toNum(_.toString))
    
    if (total.gst) {
      if ([total.noGst, total.withGst].exists(n => n in decs)) {
        total
      }
    } else if (
      total.withGst in decs
      let gst = gstRates
        .map(rate => (total.withGst * rate /(1 + rate)).round(round, 2))
        .find(n => n in decs)         
    ) {
      Total(gst = gst, noGst = total.withGst - gst)
    }
  }
  
  func extractInfo(inv: POIInvoice, lines: [String]?): Void = {
    lines.foreach {line =>
      let ll = line.lower
      ll.all(rDate).foreach {d =>
        if (d.group(1) == "due") {
          if (!inv.dueDate) {
            inv.dueDate = try? Date(d.group(2)!)
          }
        } else {
          if (!inv.invoiceDate) {
            inv.invoiceDate = try? Date(d.group(2)!)
          }
        }
      }
    }
    let nums = lines.flatMap {line =>
      line.all(rNumber).map {g =>
        (name = " " + (g.group(1).trim + " " + g.group(2).trim + " " + g.group(3).trim).trim!.replace(".", "").replace(":", "").lower, 
         num = g.group(5).trim.dropSuffix(")").trim!)
      }
    }
    inv.vendorNumber = vendorNumberTerms.mapOpt {n =>
      nums.find(name.endsWith(" " + n))?.num
    }.first
    inv.invoiceNumber = invoiceNumberTerms.mapOpt {n =>
      nums.find(name.endsWith(" " + n) && num != inv.vendorNumber)?.num
    }.first 
    inv.poNumber = poNumberTerms.mapOpt {n =>
      nums.find(name.endsWith(" " + n) && num != inv.vendorNumber)?.num
    }.first 
  }
  
  back class TableLine {
    field str: String
    field tail: [String]?
    field words: [IdxS] = {
      var i: UInt = 1
      splitToWords(str).reverse.map {w =>
        let r = IdxS(i = i, v = w)
        i += 1
        r
      }.reverse
    }
    field pattern = words.map(w => wordType(w.v)).dropWhile(_ == str).reverse
    
    func ints: [IdxD]? = words.filter(v.matches(rInt)).map(toNum)
    func decs: [IdxD]? = words.filter(v.matches(rDec)).map(toNum)
    func percents: [IdxD]? = words.filter(v.matches(rPercent)).map{IdxD(i = i, v = v.toNum.as[Dec[4]]/100)}
    func text: PlainText = ([str] + tail).join("\n")
    func matchLevel(other: TableLine): Dec[4]? = {
      let m = pattern.zip(other.pattern).takeWhile(left == right || left == any || right == any).count.as[UDec[4]]
      if (m >= 3) m
      else {
        let q0 = (str.length.as[Dec[4]]/other.str.length)
        let q = ((if (q0 > 1) 1/q0 else q0) + 0.3).min(1)
        m*q
      }
    }
    impl func toString = "$str\n$(tail.join('\n'))".trim
  }
  
  
  back class LineNum(formula: Dec?, line: TableLine, qty: IdxD?, amount: IdxD?, gstRate: IdxD?, gst: IdxD?, type: LineAmountType?, others: [IdxD]?, error: UDec[4]?) {
    func makeItem(inv: POIInvoice, desc: LineDesc?) = POIInvoiceItem(
      invoice = inv, 
      qty = qty?.v, amount = amount?.v, 
      gstRate = gstRate?.v.positive, gstIssue = gstRate?.v && gstRate?.v.round(round, 2) !in gstRates
      code = desc?.code
      desc = desc?.desc
    )
    compute amountWithGst = if (type == withGst) amount?.v else amount?.v + gst?.v
    compute amountNoGst = if (type == withGst) amount?.v - gst?.v else amount?.v
    
    func idxSim(a: IdxD?, b: IdxD?): Dec[4]? = {
      if (let ai = a?.i, let bi = b?.i) {
        (1 - (ai - bi).abs/2).max(0)
      } 
    }
    func sim(o: LineNum): Dec[4]? = {
      if (formula && o.formula) {
        let k = idxSim(qty, o.qty)*3 + idxSim(amount, o.amount)*3
        k*(if (formula == o.formula) 1.0 else 0.9)*(if (!o.error && !error) 1.0 else 0.5)
      }
    }
    impl func toString = "LineNum$formula($qty*p = $amount ± $error, gst = $gst, rate = $gstRate, others = $others)"
  }
  back class LineDesc(line: TableLine, desc: String?, code: String?)
  back class Total(noGst: Money[4]?, gst: Money[4]?) {
    compute withGst: Money[4]? = noGst + gst
    compute gstRate: UPercent[2]? = if (let noGst) (gst/noGst).abs
    
    impl func toString = "Total($noGst + $gst = $withGst)"
  }
  
  
  func makeTableLines(lines: [String]?): [TableLine]? = {
    guard (let tableLines = lines.dropWhile(!canBeTableLine(_))) else return []
    
    var tl = TableLine(str = tableLines.first)
    var ret: [TableLine] = [tl]
    tableLines.drop(1).foreach{line => 
      if (tl.tail.count < 8 && canBeTableLine(line)) {
        tl = TableLine(str = line)
        ret += tl
      } else {
        tl.tail += [line]
      }
    }
    ret
  }
  
  func filterTableLines(lines: [TableLine]): [TableLine] = {
    var l = lines.first
    if (l.words.first.v == "1" && lines.exists(_.words.first.v == "2")) return {
      var i = 1
      var ret: [TableLine]? = []
      lines.foreach {ll =>
        if (ll.words.first.v == i.toString && ll.words.count > 1) {
          l = ll
          l.words = l.words.drop(1)!
          l.str = l.str.dropPrefix(i.toString).trim!
          ret += l
          i += 1
        } else {
          l.tail = l.tail + [ll.str] + ll.tail
        }
      }
      ret!
    }
    
    guard (let levels = lines.drop(1).map(line => (line, level = line.matchLevel(l)))) else return lines
    
    let threshold = (levels*.level.max * 0.7).min(3)
    var ret = [l]
    levels.foreach {ll =>
      if (ll.level >= threshold || ll.line.pattern.takeWhile(_ != str).count >= 3) {
        l = ll.line
        ret += l
      } else {
        l.tail = l.tail + [ll.line.str] + ll.line.tail
      }
    }
    ret
  }
}

class IdxS(field i: UInt?, field v: String) {
  func toNum: IdxD = IdxD(i = i, v = IdxS.toNum(v))
  impl func toString = "$i:$v"
  
  object func toNum(s: String?): Number? = s.lower.dropSuffixes(["cr", "dr"]).toNum
}

class IdxD(field i: UInt?, field v: Number?) extends Ord {
  func mul(o: IdxD): IdxD = IdxD(v = v*o.v)
  func div(o: IdxD): IdxD = IdxD(v = v/o.v!)
  func add(o: IdxD): IdxD = IdxD(v = v + o.v)
  func sub(o: IdxD): IdxD = IdxD(v = v - o.v)
  func add(o: Number?): IdxD = IdxD(v = v + o, i = i)
  func mul(o: Number?): IdxD = IdxD(v = v*o, i = i)
  func absV = v.abs
  impl func more(other: IdxD): Bool = (other.v >= 0 && v > other.v) || (v <= 0 && v > other.v)
  override func compare(other: IdxD): Int? = if (v == other.v) 0 else if (v > other.v) 1 else -1
  impl func toString = "$i:$v"
}

enum LineAmountType {
  case withGst
  case noGst
}

enum LineWordType {
  case dec
  case int
  case percent
  case str
  case any
}