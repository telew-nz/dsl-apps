object OrderImportStatistics extends Entity {
  impl func title = "Order Import Statistics"
  field statUnit: DateUnit = day
  field statPeriod: UDuration[statUnit]? {
    canEditUnit
    default = 30_day
    label = "Show statistics for last"
  }
  compute invStat {
    value = ImportedOrder.all
      .filter((!statPeriod || date > Date.now - statPeriod) && type)
      .agg(InvStat(all = count, success = filter(_.success).count) )
      .result
    label = "Fully processed invoices"
  }
  
  compute vendorStat {
    value = ImportedOrder.all
      .filter((!statPeriod || date > Date.now - statPeriod) && type && vendorId && poi.orders*.vendorId.onlyOne)
      .groupBy(vendorId!)
      .agg(success = _.all(i => i.success))
      .agg(InvStat(all = count, success = filter(_.success).count))
      .result
    label = "Fully processed vendors"
  }
  
  compute fileStat {
    value = OrderImport.all
      .filter((!statPeriod || date > Date.now - statPeriod) && orders.exists(type))
      .agg(InvStat(all = count, success = filter(_.success).count) )
      .result
    label = "Fully processed files"
  }
  
  impl view form = nav{
    grid {
      statPeriod
      invStat
      vendorStat
      fileStat
    }
  }
}

class InvStat(field success: UInt?, field all: UInt?) {
  compute percent: UPercent[2]? = if (let all) success.as[UPercent[2]]/all
  impl view form = x {percent success label("of") all}
}