extend entity SalesOrder {  
  field purchaseOrders: [SalesPurchaseOrder]? inline by salesOrder {
    init = {
      let po = new.purchaseOrder
      new.items =? unavailableItems.map(SalesPurchaseOrderItem(product = product, qty = unavailable))
      po.addMissingItems
      if (po.id.isEmpty) {
        po.buyer = seller
        po.shipToLocation = source 
      }
    }  
  }
  compute purchaseOrderDeliveries: [PurchaseOrderDelivery]? = (purchaseOrders*.purchaseOrder*.deliveries) {views = []}
  compute dropShipDeliveries: [IOrderDelivery]? = (purchaseOrderDeliveries.filter{_.delivery.shipTo == this.shipTo}) {views = []}
  func orderDeliveries: [IOrderDelivery]? = deliveries + dropShipDeliveries
}

extend entity SalesOrderItem {
  compute ordered: Dec[2]? = order.purchaseOrders*.items.filter(product == this.product)*.qty.sum
  extend view qtyStatus = "Ordered: " + ordered >> field(visible = qtyToDeliver > 0 && ordered > 0, style = CommerceStyle.right)          
}