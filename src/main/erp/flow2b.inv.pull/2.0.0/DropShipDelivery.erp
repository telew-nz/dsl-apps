entity DropShipDelivery extends ISalesDelivery with IPurchaseDelivery {  
  //Delivery
  func deliverySupplier: LegalEntity = supplier
  func deliveryReceiver: LegalEntity = receiver 
  func allOrderItems: [OrderItem]? = salesOrders*.items*.as[OrderItem] + purchaseOrders*.items
  
  //Fields
  extend field purchaseOrders: [PurchaseOrder]? {
    init = {
      new.vendor = supplier
      new.currency = supplier.getCurrency
      new.customer = salesOrder.vendor
      new.items = items.map(PurchaseOrderItem(product = product, unit = unit, qty = qty, amount = product.price(new)*product.toBase(qty)))
    }
  }
  field supplier: LegalEntity =? (purchaseOrder?.vendor?.legalEntities.onlyOne) {
    //from = purchaseOrder?.vendor?.legalEntities
  }
  field receiver: LegalEntity =? (try? salesOrder.getReceiver.legalEntities.onlyOne!) {
    from = salesOrder.getReceiver.legalEntities
  }
  field shipTo: Location? = (try? salesOrder.shipTo!) {
    from = Location.all.filter(l => l.actor == receiver || l.actor == receiver.top || l.mutual)
    init = {new.actor = receiver}
  }
  field items: [DropShipDeliveryItem] inline by delivery =? try? salesOrder.undeliveredQtys.map(createItem(product, qty))! {
     isValid = items.isUnique(product)
  }
  
  //Compute
  func title = number + " " + deliveryDate.as[Date[day]]!
  func salesOrder = salesOrders.first!
  func purchaseOrder = purchaseOrders.first
    
  ref compute number = "DD" + salesOrder.n + "." + (salesOrder.deliveries.indexOf(this) + 1)
  func createItem(product: IProduct, qty: Qty): DropShipDeliveryItem = {
    let unit = productUnit(product)
    DropShipDeliveryItem(product = product, unit = unit, qty = product.fromBase(to = unit, qty))
  }
  
  
  //Views
  object view list = DropShipDelivery.all >> nav{list{grid(labels = None){
    row{number deliveryDate.as[Date[day]]! supplier}
    status
  }}}
  view ref = x{
    status title
  }
  view header = grid {
    row {number, status}
    salesOrders >> list {
      x{salesEntirety(_) title}
    }
    row {dispatchDate, deliveryDate}
    row {receiver, shipTo}
    row {supplier, space}
    purchaseOrders >> list(editMode = AlwaysRefRead) {
      x{purchaseEntirety(_) title}
    }
  }
  view form = nav{grid(labels = Top) { 
    header
    items
  }}
}


inline entity DropShipDeliveryItem extends DeliveryItem {
  //Field
  field delivery: DropShipDelivery by items
  field product: IProduct {
    from = delivery.allOrderItems*.product.distinct
    update = {
      this.unit = delivery.productUnit(new)
    }
  }
    
  //Views
  view form = grid {
    row{product >> field(width = 0.7) qty >> field(width = 0.3)}
  }
}
