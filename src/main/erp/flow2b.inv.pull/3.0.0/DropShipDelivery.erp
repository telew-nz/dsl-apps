entity DropShipDelivery extends ISalesDelivery with IPurchaseDelivery {  
  //Delivery
  func deliverySupplier: LegalEntity = supplier!
  func deliveryReceiver: LegalEntity = receiver 
  func allOrderItems: [OrderItem]? = salesOrders*.items*.as[OrderItem] + purchaseOrders*.items
  func legalEntity: LegalEntity = vendor
    
  //Fields
  extend field purchaseOrders: [PurchaseOrder]? {
    init = {
      new.currency = supplier!.getCurrency
      new.items = items.map(PurchaseOrderItem(product = product, unit = unit, qty = qty, amount = product.price(new)*product.toBase(qty)))
    }
  }
  
  compute supplier: LegalEntity? = purchaseOrder?.vendor
  compute vendor: LegalEntity = salesOrder.vendor
  compute customer: LegalEntity = salesOrder.customer
  ref field receiver: LegalEntity = (salesOrder.getReceiver)
    
  field shipTo: Location? = (try? salesOrder.shipTo!) {
    from = Location.all.filter(l => l.actor == receiver || l.actor == receiver.top || l.mutual)
    init = {new.actor = receiver}
  }
  field items: [DropShipDeliveryItem] inline by delivery =? try? salesOrder.undeliveredQtys.map(createItem(product, qty))! {
     isValid = items.isUnique(product)
  }
  
  //Compute
  func title = "$number $receiver"
  func salesOrder = salesOrders.first!
  func purchaseOrder = purchaseOrders.first
    
  ref compute number = "DD" + salesOrder.n + "." + (salesOrder.deliveries.indexOf(this) + 1)
  func createItem(product: IProduct, qty: Qty): DropShipDeliveryItem = {
    let unit = productUnit(product)
    DropShipDeliveryItem(product = product, unit = unit, qty = product.fromBase(to = unit, qty))
  }
  
  
  //Views
  object view list = DropShipDelivery.all >> nav{list{grid(labels = None){
    row{number deliveryDate.as[Date[day]]! supplier}
    status
  }}}
  view ref = x{
    status title
  }
  view header = grid {
    row {number, status}
    salesOrders >> list {
      x{salesEntirety(_) title}
    }
    row {dispatchDate, deliveryDate}
    row {customer, vendor}
    row {receiver, supplier}
    row {shipTo, space}
    purchaseOrders >> list(editMode = AlwaysRefRead) {
      x{purchaseEntirety(_) title}
    }
  }
  view form = nav{grid(labels = Top) { 
    header
    items
    generalLedgerButton
  }}
}


inline entity DropShipDeliveryItem extends DeliveryItem {
  //Field
  field delivery: DropShipDelivery by items
  field product: IProduct {
    from = delivery.allOrderItems*.product.distinct
    update = {
      this.unit = delivery.productUnit(new)
    }
  }
  
  compute salesAmounts: [(Qty, Money?)]? = delivery.salesItemsAmounts.apply(this)
  compute purchaseAmounts: [(Qty, Money?)]? = delivery.purchaseItemsAmounts.apply(this)
    
  register ledgers: [Ledger]? <- if (delivery.status != Delivered) Future.apply([]) else {
    let pbas <- purchaseAmounts.filter(#1 != 0).map{a =>
      let trade <- CurrencyTrading.close(delivery, a.#1)
      (qty = a.#0, amount = a.#1, trade, baseAmount = -trade?.baseTrAmount.alt(-a.#1))
    }.allCompleted
    let sbas <- salesAmounts.filter(#1 != 0).map{a =>
      let trade <- CurrencyTrading.close(delivery, -a.#1)
      (qty = a.#0, amount = a.#1, trade, baseAmount = trade?.baseTrAmount.alt(a.#1))
    }.allCompleted

    let sales = sbas.flatMap{a =>
      [LUnearnedRevenues(journal = delivery, counterparty = delivery.customer, trAmount = a.amount, currency = a.amount.unit!.as[Currency]!),
       LSales(journal = delivery, product = product, qty = a.qty, counterparty = delivery.customer, trAmount = -a.baseAmount)
      ] + a.trade
    }
      
    let purchase = pbas.flatMap{a =>
      let inv = {
        if (let good = product.as[IGood]) LCostOfGoodsSold(journal = delivery, product = good, qty = a.qty, trAmount = a.baseAmount)
        else LPurchaseExpenses(journal = delivery, product = product, qty = a.qty, trAmount = a.baseAmount)
      }
      [inv,
        LPrepaidExpenses(journal = delivery, counterparty = delivery.supplier!, trAmount = -a.amount, currency = a.amount.unit!.as[Currency]!)
      ] + a.trade
    }
    purchase + sales
  }
  
  compute revenue = -ledgers*.as[LSales]*.amount.sum
  compute cost = ledgers.filter(_.is[LCostOfGoodsSold] || _.is[LPurchaseExpenses])*.amount.sum
  compute grossMargin = revenue - cost
  compute grossMarginPercent = (grossMargin.as[Dec[8]]/revenue.as[Dec[8]]).as[Percent[2]]
    
  //Views
  view form = grid {
    row{product >> field(width = 0.7) qty >> field(width = 0.3)}
    row {
      revenue >> field(width = 0.4) cost >> field(width = 0.3) x(width = 0.3, label = "Gross Margin", visible = cost) {grossMargin grossMarginPercent} 
    }
  }
}
