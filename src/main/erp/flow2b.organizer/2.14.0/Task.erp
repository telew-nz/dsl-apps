entity Task extends DashboardItem {
  background = "#498898"
  func done: Bool = status == Done
  list field subjects: [HasTasks]? by tasks
  ref field status: TaskStatus = Entered
  field title: String
  field description: Text?
  ref field roles: [Role]? =?  if (front) if (let c = Dashboard.current) [c.role]
  
  func itemRoles = roles
  func activeRoles = if (status.active) roles
  
  func active = status.active
  report Report {
    field owner: User? = User.current
    field activeOnly: Bool = true
    view list = Task.all.filter(isFor(owner) && (!this.activeOnly || active)) >> nav{list{grid(labels = None){
      subjects
      x{status >> field(editMode = AlwaysEdit, label = "") title}
    }}}
  }
  view form = nav{grid {
    title
    status >> field(editMode = AlwaysEdit, compact = true) 
    roles
    subjects
    description
  }}
  view ref = x{status >> field(editMode = AlwaysEdit, compact = true) title}
}

trait HasTasks extends Entity {
  field tasks: [Task]? read by subjects
}


enum TaskStatus(active: Bool) {
  case Entered(active = true) {
    background = "#ed9"
  }
  case InProgress(active = true) {
    background = "#8bf"
  }
  case Done(active = false) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false) {
    background = "#999"
  }
}