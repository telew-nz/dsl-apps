extend trait IProductItem {
  func canBook: Bool = true
  func user: IUser? = null
  func manualAcceptance = user?.userEnabled && canBook
}

entity ResourceType extends IBasicSubProduct with IProduct {
  impl func isTangible = true
  impl func status = NotForSale
  impl field description: Text?
  impl func rentStockType = Resource
  
  impl func skuPrefix: String = "RST"
  impl ref field trackItems: TrackItems? {
    label = "Track Resources"
    default = Always
  }
  
  impl field title: String
  impl func productItems = resources
  field resources: [Resource]? by type
  
  impl view form = nav(onBarcode = if (ui.edit) addBarcode(barcode)){
    tabs {
      grid (labels = Top, label = "Main") {
        photos >> field(height = 10, label = "")
        title >> field(label = "", fontStyle = H1)
        row {sku refNum trackItems}
        rentStatus
        resources

        baseMainView
        extension
        description
      }
      superProductTabView
      subProductTabView
      extension("tabs")
      grid (labels = Top, label = "More") {
        extension
      }
    }
    productNavView
    extension("nav")
  }
}

entity Resource extends IProductItem with HasN {
  impl func numPrefix: String = "RES"
  impl func nextN = increment(ProductItem.gen)
  impl func title = "$type $(refNum.alt(number))"
  impl compute products = [type]
  
  ref field type: ResourceType by resources
  field legalEntity: OurLegalEntity =? onlyOne
  field store: IStore =? onlyOne
  field address: Address?
  field desc: Text? {label = "Description"}
  impl view form = nav{grid{
    type
    row{refNum number}
    legalEntity
    store
    desc
  }}
  impl view itemView = grid{_}
  
  register prodReg: ProdItemReg = {
    ProdItemReg(
      item = this, date = Date.min, doc = this, 
      newLegalEntity = legalEntity, 
      newStockType = Resource,
      newStore = store, qty = 1, 
      isStocktake = true, autoProdReg = true
    )
  }
}