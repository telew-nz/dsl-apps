trait IEcwidIntegration extends ECommerceIntegration[Int] with OAuth2 {
  field title: String
  
  field ecwidStoreId: String
  //teststore: "12169019"
  
  func uploadCategoryJobs(change: BatchChange[ProductCategory]): [SystemJob]? = {
    change.created.map(UpdateCategoryToEcwidJob(service = this, category = _)) +
    change.updated.map(UpdateCategoryToEcwidJob(service = this, category = _)) +
    change.deleted.map(RemoveCategoryFromEcwidJob(service = this, category = _))
  }
  
  func uploadProductJobs(change: BatchChange[ProductUpdate[ICustomerSuperProduct]]): [SystemJob]? = {
    change.created.map(UpdateProductToEcwidJob(service = this, productUpdate = _)) +
    change.updated.map(UpdateProductToEcwidJob(service = this, productUpdate = _)) +
    change.deleted.map(RemoveProductFromEcwidJob(service = this, product = _.product))
  }
  
  func uploadVariationJobs(change: BatchChange[ProductUpdate[ICustomerComplexProduct]]): [SystemJob]? = {
    change.created.map(UpdateProductVariationToEcwidJob(service = this, productUpdate = _)) +
    change.updated.map(UpdateProductVariationToEcwidJob(service = this, productUpdate = _)) +
    change.deleted.map(RemoveProductVariationFromEcwidJob(service = this, variation = _.product))
  }
  func shouldDeleteVariations = true

  back func downloadOrdersJobs(from: Date?) : [SystemJob]? = {
  	[DownloadEcwidOrdersJob(service = this, dateFrom = from)]
  }
  
  back func uploadOrderStateJobs(orders: [SalesOrder]) : [SystemJob]? = orders.map { o =>
    UpdateOrderToEcwid(service = this, order = o)
  }

  
  field productsWithPhotosOnly: Bool {label = "Syncronize Only Products with Photos"}

  system field webhookEndpoint: EcwidWebhookEndpoint inline by service
  
  func roles: [Role]? = [Admin]
  func apiBaseUrl: Url
  func extUrl: Url = "$apiBaseUrl$ecwidStoreId/"
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url
  func authClientId: String
  func authClientSecret: String
  func authScope: String
  func http(path: Url): HttpRequest = HttpRequest(url = "$extUrl$path")

  // ecwid uses `token` url param instead of standart oath2 way
  func https(path: Url): HttpRequest = HttpRequest(url = "$extUrl$path", ssl = true).param("token", accessToken!)  
  
  view mainView =
    grid(label = "Settings"){
      title
      legalEntity
      ecwidStoreId
      currency
      stockLevel >> field(compact = true)
      deliveryPolicy
      productsWithPhotosOnly
      stores
      categories
      serviceState
      authorizeView
  	}
    /*grid(label = "Testing(dev)"){
      retrieveLatestOrdersJob.lastUpdate >> field (label = "Last Orders update")
      button("Retrieve Orders") {
      	retrieveLatestOrdersJob.run()
        UI.info("Retriving orders...")
      }
    }*/
}

entity EcwidIntegration extends IEcwidIntegration {
  
  func authAuthorizeUrl: Url = "https://my.ecwid.com/api/oauth/authorize"
  func authTokenExchangeUrl: Url = "https://my.ecwid.com/api/oauth/token"
  func authClientId = "flow2b-bullion-deals"
  func authClientSecret = "WoNzVqVAVvKarTjfsTVR7QMkzGfJEHWZ"
  func authScope = "read_store_profile update_orders read_orders create_catalog update_catalog read_catalog update_discount_coupons create_discount_coupons read_discount_coupons read_customers"
  func apiBaseUrl = "app.ecwid.com/api/v3/"
  object view list = EcwidIntegration.all >> nav{list{grid(labels = None){
    x {title serviceState}
  }}}
}

enum SyncStockLevel(get: Stock? => Qty?) {
  case Available(get = (s: Stock?) => s?.available) = "Available = Fact - Reserve"
  case Outlook(get = (s: Stock?) => s?.outlook) = "Outlook = Fact - Reserve + Expectation"
}
