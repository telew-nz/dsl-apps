back class UpdateProductToEcwidJob extends SystemJob {
  field service: IEcwidIntegration
  field productUpdate: ProductUpdate[ICustomerSuperProduct]
  
  func do = {
    let product = productUpdate.product
  	let productRequest = EcwidProductRequest (
      name = product.title,
      description = product.description,
      sku = product.sku,
      weight = product.weightSize?.weight?.as[Qty[WeightUnit.Gram]], // ???
      price = productUpdate.price?.current,
      options = product.attrOptions.map{ o =>
      	EcwidOption(
      		name = o.attr.attrName, type=Radio,
            choices = o.options.map{ c => EcwidOptionChoice(text = c.title) } //TODO: get available from productUpdate
    	)
      }
    )
    // quantity or unlimited
    if (!product.superProduct.obsolete) {
      if (product.superProduct.alwaysAvailable) {
        productRequest.unlimited = true
      } else {
        productRequest.quantity = productUpdate.stock.max(0) //ecwid will return error if qty < 0
      } 
    }
    // enabled
    productRequest.enabled = productUpdate.enabled
    // add or update
    let _ <- if (let pId = product.extId(service)) { 
      doUpdateProduct(pId, productRequest)
    } else if (productRequest.enabled) {
      doAddProduct(productRequest)
    }
    // product image
    let _ <- if (productUpdate.photosUpdated) {
      if (let pId = product.extId(service)) {
        let productCollectedPhotos = product.collectPhotos
        let _ <- if (let imgUrl = productCollectedPhotos.first?.url) {
          doUpdateProductImage(pId, imgUrl)
        } else {
          doRemoveProductImage(pId)
        }
        //product gallery images       
        let _ <- doRemoveAllProductGalleryImages(pId)
        productCollectedPhotos*.url.map(u => doUploadProductGalleryImage(pId, u)).allCompleted
      }   
    }
  }
  
  class EcwidProductRequest {
    field sku: String?
    field weight: Number?
    field price: Money? = 0
    field quantity: Qty? = 0
    field unlimited = false
 
    field name: String
    field description: Html?
    field options: [EcwidOption]?
    field enabled = true
  }
  
  back func doUpdateProduct(productId: Int, productRequest: EcwidProductRequest): Future[Any] = {
    service.https("products/$productId").put(productRequest.json)
    .flatRecover{
      if (let r = _.as[HttpResponse]) {
        if (r.code == 404) {
          doAddProduct(productRequest)
        }
      }
    }
  }

  class AddResponse {
    field id: Int
  }
  back func doAddProduct(productRequest: EcwidProductRequest): Future[Any] = {
    let responseAdd <- service.https("products").post(productRequest.json)
    productUpdate.product.updateExtId(service, responseAdd.body!.parseJson[AddResponse].id)
  }
  
  func doUpdateProductImage(ecwidProductId: Int, imageUrl: Url): Future[Any] = {
    service.https("products/$ecwidProductId/image")
      .header("Content-Type", "application/octet-stream") 
      .param("externalUrl", imageUrl)
      .post
  }
  
  func doRemoveProductImage(ecwidProductId: Int): Future[Any] = {
    service.https("products/$ecwidProductId/image").delete
  }
  
  func doUploadProductGalleryImage(ecwidProductId: Int, imageUrl: Url): Future[Any] = {
    service.https("products/$ecwidProductId/gallery")
    						 .header("Content-Type", "application/octet-stream") 
    						 .param("externalUrl", imageUrl)
                             .post
  }
  
  func doRemoveAllProductGalleryImages(ecwidProductId: Int): Future[Any] = {
    service.https("products/$ecwidProductId/gallery").delete
  }
}


class RemoveProductFromEcwidJob extends SystemJob {
  field service: IEcwidIntegration
  field product: ICustomerSuperProduct
  
  class DeleteResponse {
    field deleteCount: Int
  }
  
  func do = {
    if (let productId = product.extId(service)) {
      let response <- service.https("products/$productId").delete
      
      if(let resBody = response.body) {
        if((resBody.parseJson[DeleteResponse].deleteCount > 0) &&
           (!product.deleted)) {
          product.deleteExtId(service)
        }
      }
    }
  }
}


// options
enum EcwidOptionType(id: String?) {
  case Select   (id = "SELECT")
  case Radio    (id = "RADIO")
  case CheckBox (id = "CHECKBOX")
  case TextField(id = "TEXTFIELD")
  case TextArea (id = "TEXTAREA")
  case DateField(id = "DATE")
  case Files    (id = "FILES")
}
enum EcwidPriceModifierType(id: String) {
  case Absolute(id = "ABSOLUTE")
  case Percent(id = "PERCENT")
}
class EcwidOptionChoice {
  field text: String
  field priceModifier: Int = 0
  field priceModifierType: EcwidPriceModifierType {
    jsonMap[String](apply = _.id, unapply = v => EcwidPriceModifierType.all.find(id == v)!),
    default = Absolute
  }
}
class EcwidOption {
  field name: String
  field type: EcwidOptionType? {
    jsonMap[String?](apply = _?.id, unapply = v => EcwidOptionType.all.find(id == v)!)
  }
  field choices: [EcwidOptionChoice]?
  field defaultChoice: Int?
  field required: Bool = true
}