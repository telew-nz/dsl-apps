back class RetrieveOrderJob extends SystemJob {
  field service: IEcwidIntegration
  field orderId: Int
  
  func do: Future[Any] = {    
    service.https("orders/$orderId").get.flatMap{ result =>
      result.body!.parseJson[EcwidOrderEntry].make(service)
    }
  }
}

back class DownloadEcwidOrdersJob extends SystemJob {
  field service: IEcwidIntegration
  field dateFrom: Date?
  
  func do: Future[Any] = {
    service.ordersDownloaded(now)
  	nextPage(0, 100)
  }
  
  back func nextPage(offset: Int, limit: Int): Future[Any] = {
    let queryBase = service.https("orders")    	   
    	   .param("offset", offset)
    	   .param("limit", limit)
    let query = if(let from = dateFrom) {
      queryBase.param("createdFrom", from.format("yyyy-MM-dd HH:mm:ss Z"))
    } else queryBase
    
    query.get.flatMap{ result =>
      let page = result.body!.parseJson[EcwidOrdersPage]
      let _ <- page.orders*.make(service)
      //next page
      if (page.total > page.offset + page.count) {
        let newOffset:Int = (offset + page.count)!
        nextPage(newOffset, limit)
      }
    }
  }
}

back class EcwidOrdersPage {
  field total: Int?
  field count: Int?
  field offset: Int?
  field limit: Int?
  field orders: [EcwidOrderEntry]? {extName = "items"}
}

back class EcwidOrderEntry extends ESalesOrder[Int] {
  func extId = orderNumber
  func orderDate = createDate
  
  func number: String? = orderNumber
  
  func emails = [email]
  func currencyCode: String? = null
  func billingAddress: EAddress? = billingPerson
  func deliveryAddress: EAddress? = shippingPerson
  
  func customerExtId: Int? = customerId
  func customerNote: String? = null
  func payments: [EIncomingPayment[Int]]? = null
  func items: [ESalesOrderItem[Int]]? = ecwidItems
  
  
  field orderNumber: Int
  field vendorOrderNumber: String
  field createDate: Date {
  	jsonMap[String](apply = _, unapply = v => Date(v))
  }
  
  field customerId: Int?
  field email: String
  field billingPerson: EcwidAddress?
  field shippingPerson: EcwidAddress?
  field ecwidItems: [EcwidOrderItem]? {extName = "items"}
  

}

back class EcwidOrderItem extends ESalesOrderItem[Int]{
  func extId = id
  func qty = quantity.alt(0)
  func amount = price

  func product(pr: ISalesOrderImportProvider[Int]) = {
    if (let superProduct = pr.service.findExtId(ecwidProductId, _.as[ICustomerSuperProduct])) { // ??? same ids in different classes?
      if (let selectedOpts = this.selectedOptions) {
        if(let variation = superProduct.customerProducts.find(ecwidOptionsValues == selectedOpts)){
          variation
        } else throw "No variation found. Product id: ${this.ecwidProductId}, options: ${selectedOpts}, service: ${pr.service}"
      } else superProduct
    } else throw "No product with ecwid id ${this.ecwidProductId} for service ${pr.service}"
  }

  field id: Int
  field ecwidProductId: Int {extName = "productId"}
  field quantity: Int?
  field price: Money
  field selectedOptions: [EcwidOptionValue]?
}