class UpdateOrderToEcwid extends SystemJob {
  field order: SalesOrder
  field service: IEcwidIntegration
  
  const object field deliveryMapping: [OrderDeliveryState -> EcwidFulfillmentStatus] = [
    InTransit    -> Shipped,
    Delivered    -> Delivered,
    NotDelivered -> WillNotDeliver
  ]
  const object field paymentMapping: [PaymentState -> EcwidPaymentStatus] = [
    Paid          -> Paid,
    Unpaid        -> AwaitingPayment,
    PartPaid -> AwaitingPayment
  ]
  
  func do = {
    if(let orderId = service.extId(order)) {
      var request = UpdateOrderRequest()
      request.fulfillmentStatus = object.deliveryMapping.apply(order.deliveryState).alt(Processing)
      request.paymentStatus = object.paymentMapping.apply(order.paymentState).alt(AwaitingPayment)
      
      service.https("orders/$orderId").put(request.json)
    }
  }
}

enum EcwidFulfillmentStatus (id: String) {
  case AwaitingProcessing (id = "AWAITING_PROCESSING")
  case Processing         (id = "PROCESSING")
  case Shipped            (id = "SHIPPED")
  case Delivered          (id = "DELIVERED")
  case WillNotDeliver     (id = "WILL_NOT_DELIVER")
  case Returned           (id = "RETURNED")
  case ReadyForPickup     (id = "READY_FOR_PICKUP")
}

enum EcwidPaymentStatus (id: String) {
  case AwaitingPayment   (id = "AWAITING_PAYMENT")
  case Paid              (id = "PAID")
  case Cancelled         (id = "CANCELLED")
  case Refunded          (id = "REFUNDED")
  case PartiallyRefunded (id = "PARTIALLY_REFUNDED")
}

class UpdateOrderRequest {
  field fulfillmentStatus: EcwidFulfillmentStatus {
    jsonMap[String](apply = _.id, unapply = v => EcwidFulfillmentStatus.all.find(id == v)!),
    default = AwaitingProcessing
  }
  
  field paymentStatus: EcwidPaymentStatus {
    jsonMap[String](apply = _.id, unapply = v => EcwidPaymentStatus.all.find(id == v)!),
    default = AwaitingPayment
  }
  
}