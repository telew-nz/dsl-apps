extend trait ICustomerProduct {
  func ecwidOptionsValues = {
    attrTerms.map { t =>
      EcwidOptionValue(
        name  = t.object.attrName,
        value = t.title
      )
    }
  }
}


back class UpdateProductVariationToEcwidJob extends SystemJob {
  field service: IEcwidIntegration
  field productUpdate: ProductUpdate[ICustomerComplexProduct]
  
  func do = {
    let variation = productUpdate.product
    let product = variation.customerSuperProduct
  	let variationRequest = EcwidProductVariationRequest (
      sku = variation.sku,
      weight = variation.weightSize?.weight?.as[Qty[WeightUnit.Gram]], // ???
      price = productUpdate.price?.current,
      options = variation.ecwidOptionsValues
    )
    if (let pId = product.extId(service)) {
      let _ <- if (let cId = variation.extId(service)) {
        doUpdateProductVariation(pId, cId, variationRequest)
      } else { 
        doAddProductVariation(pId, variationRequest)
      }
      // image
      let _ <- if (productUpdate.photosUpdated) {
        if (let cId = variation.extId(service)) {
          if (let imgUrl = variation.photos.first?.url) {
            doUpdateProductVariationImage(pId, cId, imgUrl)
          } else {
            doRemoveProductVariationImage(pId, cId)
          }   
        }
      }
    } else throw "Ecwid: No product id for variation: $variation"
  }
  
  class EcwidProductVariationRequest {
    field sku: String?
    field weight: Number?
    field price: Money? = 0
    field quantity: Qty? = 0
    field unlimited = false

    field options: [EcwidOptionValue]?
  }

  func doUpdateProductVariation(productId: Int, combinationId: Int, productRequest: EcwidProductVariationRequest): Future[Any] = {
    service.https("products/$productId/combinations/$combinationId").put(productRequest.json)
      .flatRecover{
        if (let r = _.as[HttpResponse]) {
          if (r.code == 404) {
            doAddProductVariation(productId, productRequest)
          }
        }
      }
  }
  
  func doAddProductVariation(productId:Int, productRequest: EcwidProductVariationRequest): Future[Any] = {
    let responseAdd <- service.https("products/$productId/combinations").post(productRequest.json)    
    productUpdate.product.updateExtId(service, responseAdd.body!.parseJson[AddResponse].id)
    responseAdd
  }
  
  func doUpdateProductVariationImage(productId: Int, combinationId: Int, imageUrl: Url): Future[Any] = {
   service.https("products/$productId/combinations/$combinationId/image")
      .header("Content-Type", "application/octet-stream") 
      .param("externalUrl", imageUrl)
      .post
  }
  
  func doRemoveProductVariationImage(productId: Int, combinationId: Int): Future[Any] = {
    service.https("products/$productId/combinations/$combinationId/image").delete
  }

  class AddResponse {
    field id: Int
  }
  
}


back class RemoveProductVariationFromEcwidJob extends SystemJob {
  field service: IEcwidIntegration
  field variation: ICustomerComplexProduct
  
  class DeleteResponse {
    field deleteCount: Int
  }
  
  func do = {
    if (let combinationId = variation.extId(service)) {
      if (let productId = variation.customerSuperProduct.extId(service)) {
        let response <- service.https("products/$productId/combinations/$combinationId").delete

        if(let resBody = response.body) {
          if((resBody.parseJson[DeleteResponse].deleteCount > 0) &&
             (!variation.deleted)) {
            variation.deleteExtId(service)
          }
        }
      }
    }
  }
}


class EcwidOptionValue {
  field name: String
  field value: String
}
