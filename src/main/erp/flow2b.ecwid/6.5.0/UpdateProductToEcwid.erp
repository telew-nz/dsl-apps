back class UpdateProductToEcwid extends SystemJob {
  field service: IEcwidIntegration
  field product: IEcwidProduct
  field updatePhotos: Bool = false
 
  
  func getPrice(product: IEcwidProductBase): Future[SalesPrice?] = {
    if (let superProductPrice = service.legalEntity.price(product.superProduct)) {
      superProductPrice*.salesPrice(service.currency, true)
    } 
  }
  
  // Product jobs:
  func doUpdateProduct(ecwidId: Int, productRequest: EcwidProductRequest): Future[Any] = {
    service.https("products/$ecwidId").put(productRequest.json)
  }

  class AddResponse {
    field id: Int
  }
  func doAddProduct(ecwidIdToUpdate: EcwidId, productRequest: EcwidProductRequest): Future[Any] = {
    let responseAdd <- service.https("products").post(productRequest.json)
    ecwidIdToUpdate.ecwidId = responseAdd.body!.parseJson[AddResponse].id
    ecwidIdToUpdate.save()
    responseAdd
  }

  func doUpdateProductImage(ecwidProductId: Int, imageUrl: Url): Future[Any] = {
    service.https("products/$ecwidProductId/image")
      .header("Content-Type", "application/octet-stream") 
      .param("externalUrl", imageUrl)
      .post
  }
  
  func doRemoveProductImage(ecwidProductId: Int): Future[Any] = {
    service.https("products/$ecwidProductId/image").delete
  }
  
  func doUploadProductGalleryImage(ecwidProductId: Int, imageUrl: Url): Future[Any] = {
    service.https("products/$ecwidProductId/gallery")
    						 .header("Content-Type", "application/octet-stream") 
    						 .param("externalUrl", imageUrl)
                             .post
  }
  
  func doRemoveAllProductGalleryImages(ecwidProductId: Int): Future[Any] = {
    service.https("products/$ecwidProductId/gallery").delete
  }

  //Variations jobs:
  func doRemoveUnavailableVariations(): Future[Any] = {
    product.ecwidVariations
      .filter(!stockAvailable(service))
      .map (
        RemoveProductVariationFromEcwid(
            service   = this.service,
            variation = _
          )
      )*.do
      .allCompleted
  }
  
  func doUpdateProductVariation(productId:Int, combinationId: EcwidCombinationId, productRequest: EcwidProductVariationRequest): Future[Any] = {
    service.https("products/$productId/combinations/$combinationId").put(productRequest.json)
      .flatRecover{
        if (let r = _.as[HttpResponse]) {
          if (r.code == 404) {
            doAddProductVariation(productId, combinationId, productRequest)
          }
        }
      }
  }
  
  func doAddProductVariation(productId:Int, ecwidCombinationIdToUpdate: EcwidCombinationId, productRequest: EcwidProductVariationRequest): Future[Any] = {
    let responseVarAdd <- service.https("products/$productId/combinations").post(productRequest.json)    
    ecwidCombinationIdToUpdate.combinationId = responseVarAdd.body!.parseJson[AddResponse].id
    ecwidCombinationIdToUpdate.save()
    responseVarAdd
  }
  
  func doUpdateProductVariationImage(ecwidProductId: Int, ecwidCombinationId: Int, imageUrl: Url): Future[Any] = {
   service.https("products/$ecwidProductId/combinations/$ecwidCombinationId/image")
      .header("Content-Type", "application/octet-stream") 
      .param("externalUrl", imageUrl)
      .post
  }
  
  func doRemoveProductVariationImage(ecwidProductId: Int, ecwidCombinationId: Int): Future[Any] = {
    service.https("products/$ecwidProductId/combinations/$ecwidCombinationId/image").delete
  }

  // base request
  func fillBaseProductRequest(productRequest: IEcwidProductBaseRequest, product: IEcwidProductBase): Future[Any] = {
    productRequest.sku = product.sku
    productRequest.weight = product.weightInGrams
    //price
    let actualPrice <- getPrice(product)
    productRequest.price = actualPrice?.current
    //quantity or unlimited
    if (product.forSale) {
      if (product.alwaysAvailable) {
        productRequest.unlimited = true
      } else {
        productRequest.quantity = service.stockLevel.get(product.calcStock(null, service.legalEntity, service.stores)).max(0) //ecwid will return error if qty < 0
      } 
    }
    productRequest
  }
  
  
  func do = {
    if (let ecwidIdToUpdate = product.ecwidIds.find(pId => pId.service == service)) {    
      
      let _ <- if(ecwidIdToUpdate.ecwidId) doRemoveUnavailableVariations()
      
      let productRequest = EcwidProductRequest(
          name = product.ecwidName,
          description = product.description,
          options = product.ecwidOptions(service)
        )
      let _ <- fillBaseProductRequest(productRequest, product)
      //enabled
      productRequest.enabled = product.superProduct.forSale && 
        (!service.productsWithPhotosOnly || product.collectPhotos) &&
      	(productRequest.price != 0) && 
      	(productRequest.unlimited || (productRequest.quantity > 0))

      //productRequest.enabled.log("product enabled")
      // do add or update
      let _ <- if (let pId = ecwidIdToUpdate.ecwidId) { 
        doUpdateProduct(pId, productRequest)
      } else if (productRequest.enabled) {
        doAddProduct(ecwidIdToUpdate, productRequest)
      }
      
      if (let pId = ecwidIdToUpdate.ecwidId) {
        //product image
        let _ <- if (updatePhotos) {
          let productCollectedPhotos = product.collectPhotos
          let _ <- if (let imgUrl = productCollectedPhotos.first?.url) {
            doUpdateProductImage(pId, imgUrl)
          } else {
            doRemoveProductImage(pId)
          }
          //product gallery images       
          let _ <- doRemoveAllProductGalleryImages(pId)
          productCollectedPhotos*.url.map(u => doUploadProductGalleryImage(pId, u)).allCompleted
        }
        
        // when product is updated update variations
        product.ecwidVariations.filter(stockAvailable(service)).map { v =>
          if (let ecwidCombinationIdToUpdate = v.getEcwidCombinationIdForService(service)) {    
            let productVariationRequest = EcwidProductVariationRequest(
                options = v.ecwidOptionsValues
              )
            let _ <- fillBaseProductRequest(productVariationRequest, v)
            let _ <- if (let cId = ecwidCombinationIdToUpdate.combinationId) {
              doUpdateProductVariation(pId, ecwidCombinationIdToUpdate, productVariationRequest)
            } else { 
              doAddProductVariation(pId, ecwidCombinationIdToUpdate, productVariationRequest)
            }
            if (let cId = ecwidCombinationIdToUpdate.combinationId) {
              // variation image
              if(updatePhotos) {
                if (let imgUrl = v.photos.first?.url) {
                  doUpdateProductVariationImage(pId, cId, imgUrl)
                } else {
                  doRemoveProductVariationImage(pId, cId)
                }   
              }
            }
          }
        }.allCompleted
        
      }
    }
  }
}


interface IEcwidProductBaseRequest {
  field sku: String?
  field weight: Number?
  field price: Money? = 0
  field quantity: Qty? = 0
  field unlimited = false

}

class EcwidProductRequest extends IEcwidProductBaseRequest {
  field name: String
  field description: Html?
  field options: [EcwidOption]?
  field enabled = true
}

class EcwidProductVariationRequest extends IEcwidProductBaseRequest {
  field options: [EcwidOptionValue]?
}

class EcwidProductImageRequest {
  field externalUrl: Url
}
