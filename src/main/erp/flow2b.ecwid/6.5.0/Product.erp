/*
IEcwidProduct

Extend your product type (trait) with this trait to add ecwid integration.
IBasicProduct is extended by default

*/

// product id
inline entity EcwidId {
  field ecwidId: Int?
  field service: IEcwidIntegration =? IEcwidIntegration.all.first
  field product: IEcwidProduct by ecwidIds
}

// options
enum EcwidOptionType(id: String?) {
  case Select   (id = "SELECT")
  case Radio    (id = "RADIO")
  case CheckBox (id = "CHECKBOX")
  case TextField(id = "TEXTFIELD")
  case TextArea (id = "TEXTAREA")
  case DateField(id = "DATE")
  case Files    (id = "FILES")
}
enum EcwidPriceModifierType(id: String) {
  case Absolute(id = "ABSOLUTE")
  case Percent(id = "PERCENT")
}
class EcwidOptionChoice {
  field text: String
  field priceModifier: Int = 0
  field priceModifierType: EcwidPriceModifierType {
    jsonMap[String](apply = _.id, unapply = v => EcwidPriceModifierType.all.find(id == v)!),
    default = Absolute
  }
}
class EcwidOption {
  field name: String
  field type: EcwidOptionType? {
    jsonMap[String?](apply = _?.id, unapply = v => EcwidOptionType.all.find(id == v)!)
  }
  field choices: [EcwidOptionChoice]?
  field defaultChoice: Int?
  field required: Bool = true
}


trait IEcwidProduct extends IEcwidProductBase{
  system field ecwidIds: [EcwidId]? inline
  
  func description: Text?
  
  back func ecwidName: String = title
  
  back func ecwidOptions(service: IEcwidIntegration): [EcwidOption]? = []
  
  back func ecwidVariations = subProducts*.as[IEcwidProductVariation]
  
  func collectPhotos: [Image]?

  
  event onSave() = {
    if (!IUser.current.is[IEcwidIntegration]) {
      updateEcwid(updated(photos))
    }
  }
  
  
  back func makeUpdateEcwidServiceJob(serviceToUpdate: IEcwidIntegration, needToUpdatePhotos: Bool = false): SystemJob? = {
    if (!deleted &&
        (superProduct.forSale || ecwidIds.find(eId => eId.service == serviceToUpdate)) &&
        (!serviceToUpdate.categories ||
         superProduct.categories.exists(c => serviceToUpdate.categories.contains(c)))) {
      var updateImages = needToUpdatePhotos
      if (!ecwidIds.find(service == serviceToUpdate)) { // add if needed
        ecwidIds = ecwidIds + EcwidId(service = serviceToUpdate)
        this.save()
        updateImages = true
      }
      UpdateProductToEcwid(product = this, service = serviceToUpdate, updatePhotos = updateImages)
  	} else {
      RemoveProductFromEcwid(
        service = serviceToUpdate,
        product = this
      )
    }
  }
  
  
  func updateEcwid(updatePhotos: Bool): Void = {
    IEcwidIntegration.all.foreach{s => 
      if (this.ecwidEnabled(s)) {
        this.makeUpdateEcwidServiceJob(s, updatePhotos)?.run()
      }
    }
  }
  
  view ecwidIdsView = ecwidIds >> list {grid{row{
    ecwidId
    service
  }}}
}


extend trait IBasicSubProduct extends IEcwidProduct

extend entity Kit {
  extend view form = ecwidIdsView
}
extend entity Good {
  extend view form = ecwidIdsView
}
extend entity Service {
  extend view form = ecwidIdsView
}