class EcwidOptionValue {
  field name: String
  field value: String
}


inline entity EcwidCombinationId {
  field combinationId: Int?
  system field service: IEcwidIntegration 
  system field productVariation: IEcwidProductVariation by ecwidCombinationIds
}


trait IEcwidProductVariation extends IEcwidProductBase { 
  system field ecwidCombinationIds: [EcwidCombinationId]? inline
  
  back func ecwidProduct = superProduct.as[IEcwidProduct]
  back func ecwidOptionsValues: [EcwidOptionValue]?
  
  back func stockAvailable(service: IEcwidIntegration): Bool = {
  	(alwaysAvailable) ||
    (service.stockLevel.get(calcStock(null, Inventory, service.legalEntity, service.stores)) > 0)
  }
  
  func getEcwidCombinationIdForService(service: IEcwidIntegration) = {
    if (!deleted &&
        (forSale || ecwidCombinationIds.find(c => c.service == service)) &&
        (!service.categories ||
         superProduct.categories.exists(c => service.categories.contains(c)))) {
      var id = ecwidCombinationIds.find(c => c.service == service)
      if (!id) { // add if needed
        id = EcwidCombinationId(service = service)
        ecwidCombinationIds = ecwidCombinationIds + id
      }
      id
    } else {
      null
    }
  }
  
  event onSave() = {
    if (!IUser.current.is[IEcwidIntegration] && touched) {
      if ( deleted ) {
        ecwidCombinationIds.map(
          RemoveProductVariationFromEcwid(
            service   = _.service,
            variation = this
          ).run
        )
      } else {
        ecwidProduct?.updateEcwid(updated(photos))
      }
    }
  }
  
  view ecwidCombinationIdsView = ecwidCombinationIds >> list {grid{row{
    combinationId
    service
  }}}
}