inline entity EcwidCategoryId {
  field categoryId: Int?
  system field service: IEcwidIntegration =? IEcwidIntegration.all.first
  system field category: IEcwidCategory by ecwidCategoryIds
}

trait IEcwidCategory extends Entity {
  system field ecwidCategoryIds: [EcwidCategoryId]? inline {views = []}
  
  func ecwidCategoryName: String = title
  func description: String?
  
  func products: [ISuperProduct]?
  func ecwidProducts = products*.as[IEcwidProduct]
  
  func getEcwidCategoryIdForService(service: IEcwidIntegration) = {
    if (!deleted) {
      var id = ecwidCategoryIds.find(c => c.service == service)
      if (!id) { // add if needed
        id = EcwidCategoryId(service = service)
        ecwidCategoryIds = ecwidCategoryIds + id
      }
      id
    } 
  }  

  func makeUpdateEcwidServiceJob(serviceToUpdate: IEcwidIntegration): SystemJob? = {
    if(!deleted &&
       (!serviceToUpdate.categories ||
        serviceToUpdate.categories*.as[IEcwidCategory].contains(this))) {
      UpdateCategoryToEcwid(category = this, service = serviceToUpdate)
    } else {
      RemoveCategoryFromEcwid (
        service = serviceToUpdate,
        category = this
      )
    }
  } 
  
  func updateEcwid(): Void = {
    IEcwidIntegration.all.map{ s => 
      makeUpdateEcwidServiceJob(s)?.run()
    }
  }  
  
  event onSave = {
    if (!IUser.current.is[IEcwidIntegration] && touched) {
  	  updateEcwid()
    }
  } 
  
  view ecwidIdsView = ecwidCategoryIds >> list {grid{row{
    categoryId
    service
  }}}
}


extend entity ProductCategory extends IEcwidCategory {
  extend view form = ecwidIdsView
}
