object EcwidWebhookRouter extends WorkspaceRouter[EcwidWebhookData] {
  back func parse(request: IncomingHttpRequest): EcwidWebhookData = {
    request.body.as[Data]!.parseJson[EcwidWebhookData]
  }
  back func keys(request: IncomingHttpRequest, data: EcwidWebhookData): [String]? = {
    if (data.eventType == "order.created" && data.entityId > 0) [data.storeId]
  }
}

inline entity EcwidWebhookEndpoint extends WorkspaceEndpoint[EcwidWebhookData] {
  field service: IEcwidIntegration by webhookEndpoint
  func keys = [service.ecwidStoreId]
  func router = EcwidWebhookRouter
  
  back func process(request: IncomingHttpRequest, data: EcwidWebhookData): Future[Any] = {
    let secret = service.authClientSecret
    let headerSignature = request.header("X-Ecwid-Webhook-Signature")
    let encodedSignature = "${data.eventCreated.epoch.withoutUnit.as[Int]}.${data.eventId}".hmac(secret).sha256.base64
    if(headerSignature != encodedSignature) {
      throw "Unsigned: $headerSignature != $encodedSignature"
    }
    //if ((data.eventType == "order.created") && (data.entityId > 0)){
      RetrieveOrderJob(
        service = this.service,
        orderId = data.entityId
      ).run
    //}
    // TODO: process customer events (created/updated/deleted)
  }
}

class EcwidWebhookData {
  field eventId: String
  field eventCreated: Date {
    jsonMap[Int](
      apply = _.epoch!,
      unapply = Date.fromEpoch(_)
    )
  }
  field eventType: String
  field storeId: Int
  field entityId: Int
}
