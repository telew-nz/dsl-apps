back class RetrieveOrderJob extends SystemJob {
  field service: IEcwidIntegration
  field orderId: Int
  
  func do: Future[Any] = {    
    service.https("orders/$orderId").get.flatMap{ result =>
      result.body!.parseJson[EcwidOrderEntry].process(service)
    }
  }
}

/*inline entity RetrieveLatestOrdersJob extends ScheduledJob {
  field service: IEcwidIntegration by retrieveLatestOrdersJob
  func schedule = "0 30 * * * ?" //Every hour
  field lastUpdate: Date? {format = "yyyy-MM-dd"}
  
  func do: Future[Any] = {
    let d: Date = if (let lu = lastUpdate) lu else service.createdOn
    //d.log("Retrieving sold items")
    
    this.lastUpdate = Date.now
    save()
  	nextPage(d, 0, 100)
  }
  
  back func nextPage(createdFrom: Date, offset: Int, limit: Int): Future[Any] = {
    service.https("orders")
    	   .param("createdFrom", createdFrom.format("yyyy-MM-dd HH:mm:ss Z"))
    	   .param("offset", offset)
    	   .param("limit", limit)
    .get.flatMap{ result =>
      let page = result.body!.parseJson[EcwidOrdersPage]
      page.orders*.process(service)
      //next page
      if (page.total > page.offset + page.count) {
        let newOffset:Int = (offset + page.count)!
        nextPage(createdFrom, newOffset, limit)
      }
    }
  }
}*/

class EcwidOrdersPage {
  field total: Int?
  field count: Int?
  field offset: Int?
  field limit: Int?
  field orders: [EcwidOrderEntry]? {extName = "items"}
}

class EcwidOrderEntry {
  field orderNumber: Int
  field createDate: Date {
  	jsonMap[String](apply = _, unapply = v => Date(v))
  }
  
  field customerId: Int?
  field email: String
  field billingPerson: EcwidAddress?
  field shippingPerson: EcwidAddress?
  field items: [EcwidOrderItem]?
  
  back func process (ecwidService: IEcwidIntegration) = {
    //customer
    let existCustomer: EcwidCustomer? = 
    EcwidCustomer.all
    .find(ec => 
          (ec.service == ecwidService) &&
          (if (this.customerId) { 
            ec.customerId == this.customerId
           } else {
            ec.email == this.email
          })) // I suggest customer is uniqu for email
    let customer = existCustomer.alt(
      EcwidCustomer(
        service = ecwidService,
        email = this.email,
        billingPerson =? this.billingPerson,
        customerId = this.customerId
      )
    )
    customer.save

    //order
    let existOrder: SalesOrder? = 
    SalesOrder.all
    .find(so => 
         so.ecwidOrderId &&
         (so.ecwidOrderId?.service == ecwidService) &&
         (so.ecwidOrderId?.ecwidOrderId == orderNumber))
    let order = existOrder.alt(
      SalesOrder(
        ecwidOrderId = EcwidOrderId(
          service = ecwidService,
          ecwidOrderId = orderNumber
        ),
        deliveries = [],
        salesChannel = ecwidService,
        referenceNumber = orderNumber,
        date = createDate,
        vendor = ecwidService.legalEntity,
        customer = customer.person 
      )
    )
    order.joinAll(Salesperson)*.notify()
    order.save

    let shipTo = {
      if (let a = if(shippingPerson) shippingPerson else billingPerson) {
        customer.person.locations.find(address == a.address).alt({
          a.actor = customer.person
          a
        })
      } else null
    }

    items.map { p =>
      let product = p.ecwidProduct(ecwidService)
      var qty = p.quantity.as[Qty[product.superProduct.unit]]

      if (product.superProduct.isTangible){
        let regs: [StockRegister]? = StockRegister.current
        .filter(product.subProducts.contains(good) && 
                (!ecwidService.stores || ecwidService.stores.contains(store)) && available > 0)
        regs.foreach {reg =>
          if (qty > 0) {
            let delivery = order.deliveries*.as[SalesDelivery].find(source == reg.store)
            .alt(SalesDelivery(primary = order.deliveries.isEmpty, policy = ecwidService.deliveryPolicy,
                               salesOrders = [order],
                               source = reg.store,
                               shipTo =? shipTo))
            let q = qty!.min(reg.available!)
            let salesItem = order.allItems*.as[SalesItem].find(ecwidOrderItemId == p.id && deliveryItem.delivery == delivery).alt(
              SalesItem(
                order = order,
                ecwidOrderItemId = p.id,
                ecwidProduct = product,
                deliveryItem = DeliveryItem(delivery = delivery, product = reg.good, unit = reg.good.unit, qty = q)
                amount = p.price*q
              ))
            salesItem.save
            qty = qty - q
          }
        }
      }

      if (qty > 0) {
        let delivery = order.deliveries.first
        .alt(SalesDelivery(primary = order.deliveries.isEmpty,
                           policy = ecwidService.deliveryPolicy,
                           salesOrders = [order],
                           source = Store.ours.first!,
                           shipTo =? shipTo))
        let good = product.subProducts.first!
        let salesItem = order.allItems*.as[SalesItem].find(ecwidOrderItemId == p.id).alt(SalesItem(
          order = order,
          ecwidOrderItemId = p.id,
          ecwidProduct = product,
          deliveryItem = DeliveryItem(delivery = delivery, product = good, unit = good.unit, qty = qty!)
          amount = p.price*qty!
        ))
        salesItem.save
      }
    }
  }
}

class EcwidOrderItem {
  field id: Int
  field productId: Int
  field quantity: Int?
  field price: Money
  field selectedOptions: [EcwidOptionValue]?
  
  back func ecwidProduct(ecwidService: IEcwidIntegration): IEcwidProductBase = {
    if (let superProduct = EcwidId.all.find(
      _.service == ecwidService && _.ecwidId == this.productId
    )?.product) {
      if (let selectedOpts = this.selectedOptions) {
        if(let variation = superProduct.ecwidVariations.find(ecwidOptionsValues == selectedOpts)){
          variation
        } else throw "No variation found. Product id: ${this.productId}, options: ${selectedOpts}, service: ${ecwidService}"
      } else superProduct
    } else throw "No product with ecwid id ${this.productId} for service ${ecwidService}"
  }
}

inline entity EcwidOrderId {
  field ecwidOrderId: Int?
  field service: IEcwidIntegration =? IEcwidIntegration.all.first
  field order: SalesOrder by ecwidOrderId
}

extend entity SalesOrder {
  system const field ecwidOrderId: EcwidOrderId?
  
  event onSave = {
  	if (let ecwidOrderId) {
      if (!created && (updated(status) || updated(paymentState) || updated(deliveryState))) {
        UpdateOrderToEcwid(
          order = this
        ).run
      }
    }
  }
}

extend entity SalesItem {
  system const field ecwidOrderItemId: Int?
  system const field ecwidProduct: IEcwidProductBase? 
}
