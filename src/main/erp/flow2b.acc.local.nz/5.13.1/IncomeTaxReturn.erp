extend enum DashboardIssue {
  case AccountingErrors(role = Accountant, priority = major)
  case UnknownNZExpenseType(role = Accountant, priority = major)
  case UnknownNZAssetType(role = Accountant, priority = major)
  case IR4IR10ProfitMatch(role = Accountant, priority = major) = "IR4 & IR10 profit does not match"
  case IR10Unbalanced(role = Accountant, priority = major)
}

entity IncomeTaxReturn extends TaxReturn with Journal {
  impl func title = "IR $(year.unformattedString) $legalEntity"
  ref compute year = period.end.year
  field period: Period = Period(start = Date.now.start(of = DateUnit.year) - 9_month, end = Date.now.start(of = DateUnit.year) + 3_month)
  impl ref field legalEntity: OurLegalEntity =? OurLegalEntity.onlyOne
  
  field ir4: IR4Y18 inline by ir {
    availableFor = Inline
    visible = id
  }
  field ir10Income: IR10Y14Income inline by ir {
    availableFor = Inline
    visible = id
  }
  field ir10Balance: IR10Y14Balance inline by ir {
    availableFor = Inline
    visible = id
  }
  field ir10Other: IR10Y14Other inline by ir {
    availableFor = Inline
    visible = id
  }
  
  impl view traitItem = y{h3("Income Tax Return") x{title status}}
  impl view ref = x {title status}
  impl view form = nav{
    tabs {
      grid(labels = Top, label = "Settings"){
        issuesView
        date
        status
        period
        legalEntity
      }
      ir4 >> field(label = "IR4")
      ir10Income >> field (label = "IR10: Income Statement")
      ir10Balance >> field (label = "IR10: Balance Sheet")
      ir10Other >> field(label = "IR10: Other information")
    }
    button("Recalculate", visible = id) {
      back {
        this.recalc()
      }
    } 
    generalLedgerButton
  }
  
  impl event onSave = {
    let _ <- if (created) {
      recalc()
    }
    ledgers = 
      if (ir4.tax || ir4.taxedAmount) {
        [LTax(tax = IncomeTax, trType = Accrual, journal = this, currency = NZD, amount = -ir4.tax, taxedAmount = -ir4.taxedAmount)]
      } +
      if (let tax = ir4.f32b + ir4.provTaxBalance) {
        [LTax(tax = ProvisionalTax, trType = Accrual, journal = this, currency = NZD, amount = -tax)]
      } +
      if (let tax = ir4.tax + ir4.f32b + ir4.provTaxBalance) {
        [LBasic(account = IncomeTaxExpense, journal = this, amount = tax)]
      }
      
  }
  
  register ledgers: [Ledger]?
  
  back func recalc(): Future[Void] = {
    this.touch()
    
    date = now
    ir4.defaultAllFields()
    ir10Income.defaultAllFields()
    ir10Balance.defaultAllFields()
    ir10Other.defaultAllFields()
    let _ <- ir4.calc()
    let _ <- ir10Income.calc()
    let _ <- ir10Balance.calc()
    ir10Other.calc()
  }
  
  override func issues = super.issues + {
    (if (ir10Income.unknownExpenseTypes) [DashboardIssue.UnknownNZExpenseType])
    + 
    (if (ir10Balance.unknownAssets) [DashboardIssue.UnknownNZAssetType])
    +
    (if (ir10Income.hasErrors) [DashboardIssue.AccountingErrors])
    +
    (if (ir4.f24 != ir10Income.f29) [DashboardIssue.IR4IR10ProfitMatch])
    +
    (if (ir10Balance.unbalanced) [DashboardIssue.IR10Unbalanced])
  }.toSet
  
  override func fixes(issue: DashboardIssue) = {
    if (issue == UnknownNZExpenseType) [
      Fix(
        text = "Choose a relevant New Zealand standard expense type", 
        acts = ir10Income.unknownExpenseTypes.map(a =>
          Act(label = a.title, do = a.form.open)
        ))
    ] else if (issue == UnknownNZAssetType) [
      Fix(
        text = "Choose a relevant New Zealand standard asset type", 
        acts = ir10Balance.unknownAssets.map(a =>
          Act(label = a.title, do = a.form.open)
        ))
    ] else if (issue == AccountingErrors) [
      Fix(
        text = "Fix all accounting issue in $period"
      )
    ] else if (issue == IR4IR10ProfitMatch) [
      Fix(
        text = "Make sure that the IR4 field #24 matches the IR10 income statement field #29"
      )
    ] else if (issue == IR10Unbalanced) [
      Fix(
        text = "Make sure that the IR10 balance sheet is balanced and #43 - #50 = #51"
      )
    ] else super.fixes(issue)
  }

}
