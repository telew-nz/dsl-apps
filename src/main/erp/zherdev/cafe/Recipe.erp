entity Recipe {
  field title: String
  field output: Dec[2] {
    width = 0.1
  }
  field unit: Unit
  func foodCost: Dec[2]? = steps*.foodCost.sum
  func labourCost: Dec[2]? = steps*.labourCost.sum
  func equipmentCost: Dec[2]? = steps*.equipmentCost.sum
    
  field serving: RecipeServing inline by recipe
 
  field steps: [RecipeStep] inline by recipe
     
  view form = nav {
    scroll {
      grid  {
        row {
          grid {
	        row{title}
    	    row{output, unit}
            serving
          }
        }
        
        steps >> list {
          grid  {
            row {
              grid {
                description >> field(label = "")
                ingredients >> table(label = "", singular = "Ingredient") {
                  ingredient, quantity, unit, total
                }
                labourers >> table(label = "", singular = "Labourer") {
				  role, minutes, cost
                }
                equipments >> table(label = "", singular = "Equipment") {
				  equipment, minutes, cost
                }
              }
            }
          }
        }
      }
    }
  }
}

inline entity RecipeServing {
  field recipe: Recipe
  field quantity: Dec[2]
  field unit: Unit
  field total: Dec[2]
  func multiplier: Dec[8] = quantity/Unit.conv(recipe.output, recipe.unit, unit)
  compute foodCost: Dec[2]? = recipe.foodCost*multiplier
  compute foodCostPercentage: Dec[2]? = foodCost/total*100
  compute equipmentCost: Dec[2]? = recipe.equipmentCost*multiplier
  compute labourCost: Dec[2]? = recipe.labourCost*multiplier
  compute cost: Dec[2]? = foodCost + equipmentCost + labourCost
  compute grossProfit: Dec[2]? = total - cost
    
  view form = grid {
    row{quantity, unit, total, space}
    row{foodCost, foodCostPercentage, equipmentCost, labourCost}
    row{cost, grossProfit, space, space}
  }
}

inline entity RecipeIngredient {
  field recipe: Recipe
  field ingredient: Ingredient
  field quantity: Dec[2]
  field unit: Unit 
  compute price: Dec[8] = Unit.conv(ingredient.cost, ingredient.unit, unit)
  compute total: Dec[2] = quantity*price
}

entity RecipeStep {
  field recipe: Recipe
  compute foodCost: Dec[2]? = ingredients*.total.sum
  compute labourCost: Dec[2]? = labourers*.cost.sum  
  compute equipmentCost: Dec[2]? = equipments*.cost.sum  
  field ingredients: [RecipeStepIngredient]? inline by step
  field labourers: [RecipeStepLabourer]? inline by step
  field equipments: [RecipeStepEquipment]? inline by step
  field description: Text
    func title = "Step"
}

inline entity RecipeStepIngredient {
  field step: RecipeStep
  field ingredient: Ingredient
  field quantity: Dec[2]
  field unit: Unit 
  compute price: Dec[8] = Unit.conv(ingredient.cost, ingredient.unit, unit)
  compute total: Dec[2] = quantity*price
}

inline entity RecipeStepEquipment {
  field step: RecipeStep
  field equipment: Equipment
  field minutes: Int
  compute cost: Dec[2] = equipment.usageCostPerHour*minutes/60
}

inline entity RecipeStepLabourer {
  field step: RecipeStep
  field role: Role 
  field minutes: Int
  compute cost: Dec[2] = role.salaryPerHour*minutes/60
}
