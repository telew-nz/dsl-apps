back class UpdateProducts extends SystemJob {
  field service: FacebookShopIntegration
  field integ: ECommerceIntegration
  field change: BatchChange[ProductUpdate[ISubProduct]]
  
  func do = {
    let rq = change.created.map {i =>
        ProductsBatchEntry(
          retailerId = i.product.sku, method = "CREATE",
          data = FBProduct.create(isNew = true, service, integ, i)
        )
      } + change.updated.map {i =>
        ProductsBatchEntry(
          retailerId = i.product.sku, method = "UPDATE",
          data = FBProduct.create(isNew = false, service, integ, i)
        )
      } + change.deleted.map{i =>
        ProductsBatchEntry(
          retailerId = i.product.sku, method = "DELETE"
        )
      }
	let response <- service.https("$(service.catalogId)/batch")
      .form(["requests" -> rq.json])
      .post
    
    let r = response.body!.parseJson[ProductsBatchResponse]
    change.updateExtIds(service, change.created*.product*.sku)
    r.check(rq)
  }
  
}

back class ProductsBatchEntry {
  extFieldNaming = Underscore
  field retailerId: String
  field method: String
  field data: FBProduct?
}

back class ProductsBatchResponse {
  extFieldNaming = Underscore
  field handles: [String]?
  field validationStatus: [ValidationStatus]?
  
  func check(request: [ProductsBatchEntry]?): Void = {
    if (let err = validationStatus*.errors*.message) {
      throw (err.join(", ") + "\n$(request.json[ ..5000))")
    }
  }
}

back class ValidationStatus {
  extFieldNaming = Underscore
  field retailerId: String
  field errors: [FBError]?
}
back class FBError {
  field message: String
}
