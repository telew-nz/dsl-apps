back class FBProduct {
  extFieldNaming = Underscore
  
  //field retailerId: String?
  field retailerProductGroupId: String?

  field gtin: String?
  field manufacturerPartNumber: String?
  field currency: String?
  
  field name: String
  field pattern: String?
  field description: PlainText
  //field shortDescription: PlainText?
  field url: Url
  field checkoutUrl: Url?
  //field orderingIndex: Int?
  field imageUrl: Url
  field additionalImageUrls: [Url]?
  field availability: String = "in stock"
  field condition: String = "new"
  field color: String?
  //field inventory: Int?
  
  field brand: String?
  field category: String?
//  field googleProductCategory: String?
  field productType: String?

  field price: Int?
  field salePrice: Int?
  
 
  object func create(isNew: Bool, service: FacebookShopIntegration, integ: ECommerceIntegration, u: ProductUpdate[ISubProduct]): FBProduct = {
    let p = u.product
    let v = p.as[ISubVariation]
    let sp = v?.superProduct
    let photos = (p.collectPhotos + sp?.collectPhotos).distinct.mapOpt(_.extUrl(integ))
    let cats = p.superProduct.categories*.gmProductType
    FBProduct(
      //retailerId = p.sku
      retailerProductGroupId = if (isNew) sp?.sku
      //orderingIndex = if (isNew) if (let sp) sp.customerProducts.indexOf(p)
      
      manufacturerPartNumber = p.refNum
      name = p.title
      pattern = sp?.title
      url = p.extUrl(integ)!,
      checkoutUrl = integ.checkoutUrl(p)
      imageUrl = photos.first!
      additionalImageUrls = photos.drop(1)
      color = v?.attrTerms*.as[ColorItem].first?.title
      description = p.description
      //shortDescription = p.shortDescription
      price = u.price!.regular*100,
      salePrice = u.price!.current*100
      brand = p.superProduct.brands.first?.title
      currency = u.price!.regular.unit!.as[Currency].name
      //inventory = u.stock
      
      
      category = cats.first
      productType = cats.join(", ")
      //googleProductCategory = p.superProduct.categories*.googleProductCategory.first
    )
  }
  object func formatPrice(v: Money?): String = {
    "$(v.noUnit.toString) $(v.unit!.as[Currency].name)"
  }
}