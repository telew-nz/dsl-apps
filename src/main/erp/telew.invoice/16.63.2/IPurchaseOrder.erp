trait IPurchaseOrder extends IOrder {
  impl func isPurchase: Bool = true
  
  func customer = legalEntity
  impl func payee: Vendor?
  func vendor: Vendor?
  impl func payer = legalEntity
  //override func debtBalance = payee?.debtBalance
  impl func cpDebtAllowance = cptAcc?.creditAllowance
  override func issueTypes = super.issueTypes + ITPOToPay
  

  impl func isInstantPaid: Bool = {
    if (let c = payments.onlyOne?.as[OutgoingPayment], let r = invoices.onlyOne.or(allRevisions.onlyOne)) {
      c.amount == r.invoiceTotal && (c.date - r.date).abs <= 3600.as[UDuration[second]] && (!invoices || allItems.all(!invoiceNotIssued))
    }
  }
  
  impl func cashFlow = Purchases
  impl func instantCashFlows = if (let invoiceTotal) [CashFlowAmount(cashFlow = Purchases, amount = -invoiceTotal)]
  
  view paymentsView = y(label = "Payments", visible = ui.edit || debtOriginAmounts) {
    payments >> list(visible = ui.edit, canAdd = false) {
      posViewCredit
    }
    addPaymentView
    debtOriginsView >> field(visible = !ui.edit) 
  }
} 