entity SalesOpportunity extends HasN with Entity with NewEngine with IActiveItem {
  ref impl field activeState: ActiveState {
    default = InProgress
    label = "State"
  }
  ref field customer: Customer by opportunities {
    available(Inline).for(Inline)
  }
  object field gen: Int?
  
  impl func numPrefix = "OP"
  impl func title = "$fullNum $customer"
  
  override func entitySubject = OurActor.our!.title
  compute person = customer.legalEntity.as[Person]!
  func personTo = customer.legalEntity.as[Person].toSeq
  ref system field _state: OpportunityState = Entered
  ref stored compute state: OpportunityState {
    label = "Stage"
    value = if (_state in [Lost, NoSale, OnHold]) _state else calcState
    from = {
      let st = calcState
      ([st, OpportunityState.Lost, OpportunityState.OnHold] + (if (fittingAppointment) [OpportunityState.Complete]) + (if (st == Booked) [OpportunityState.NoSale]) ).toSet
    }
    update = {
      _state = new
      if (!_state.active) {
        activeState = Closed
      }
    }
  }
  func calcState: OpportunityState = {
    if (let fa = fittingAppointment) {
      if (_state == Complete) Complete 
      else FittingBooked
    } else if (let dresses = salesOrders.filter(state !in [Quote, Canceled])*.items*.as[SalesItem].filter{_.product.is[DressVariation]}) {
      if (dresses.all(_.deliveryItem.isAv && _.deliveryItem.outStocks && _.deliveryItem.outStocks.all(calced) && !_.order.terms?.isRetail)) ReadyForFitting
      else if (dresses.all(_.order.terms?.isRetail)) SoldWithNoFitting else Sold
    } else if (salesOrders.filter(state !in [Quote, Canceled])*.items*.as[SalesItem].filter(product.is[RevenueType])) {
      Sold
    } else if (bridalAppointment) Booked
    else Entered
  }
  field measurments: PerMeasurments?
  impl event onSave = {
  }
  impl func nextN = increment(gen)
  field appointments: [BridalAppointment]? read by opportunity
  field details: BridalDetails?
  
  field salesOrders: [SalesOrder]? read by opportunity {
    init = {
      new.silentUpdate(i => i.customer, this.customer)
    }
  }
  compute contacts = customer.legalEntity.contacts*.address
  field dresses: [OpportunityDress]? inline by opportunity {
    label = "Selected Dresses"
  }
  compute bridalAppointment = appointments.find(type == Bridal && state != Cancelled)
  compute fittingAppointment = appointments.find(type == Fitting && state != Cancelled)
  
  impl view form = nav{grid{
    x(label = ""){activeState >> field (editMode = AlwaysEdit) state >> field (editMode = AlwaysEdit) customer >> field (stretch = 1, fontStyle = H2) number >> field(fontStyle = Label)}
    followUpDate
    contacts >> field(label = "")
    appointments
    details
    measurments >> field(label = "Measurements")
    dresses >> list {grid(labels = None){
      //x {dress >> field(stretch = 1) add("Sales Order", visible = !salesOrders) {newSO}}
      dress
      notes
    }}
    salesOrders
  }}
  impl view ref = x {activeState >> field (editMode = AlwaysEdit) state >> field (editMode = AlwaysEdit) title}
  
  impl func itemRoles = [Salesperson]
  
  report Report {
    impl view list = SalesOpportunity.all >> nav{list{
      ref
    }}
  }
}

inline entity OpportunityDress {
  field opportunity: SalesOpportunity by dresses 
  field dress: Dress
  field notes: Text?
  
  /*front func newSO = {
    SalesOrder.incomplete(customer = opportunity.customer, items = [
     SalesItem(deliveryItem = DeliveryItem(product = dress))
    ]).form.open
  }*/
}

enum OpportunityState(active: Bool) {
  case Entered(active = true) {
    background = "#ed9"
    icon = "play"
  }
  case Booked(active = true) {
    background = "#8bf"
    icon = "book"
  }
  case Sold(active = false) {
    background = "#dea"
    icon = "check"
  }
  case NoSale(active = false) {
    background = "#f99"
    icon = "bullhorn"
  }
  case ReadyForFitting(active = true) {
    icon = "flag-checkered"
    background = "#dea"
  }
  case FittingBooked(active = true) {
    icon = "book-reader"
    background = "#dea"
  }
  case Complete(active = false) {
    color = "white"
    background = "#090"
    icon = "check-circle"
  }
  case SoldWithNoFitting(active = false) {
    background = "#dea"
    icon = "check"
  }
  case OnHold(active = false) {
    background = "#f99"
    icon = "pause-circle"
  }
  case Lost(active = false) {
    background = "#999"
    icon = "times-circle"
  }  
}


class BridalDetails {
  field weddingDate: Date?
  field budget: UMoney?
  field address: Text?
  field notes: Text?
}


extend entity SalesOrder {
  field opportunity: SalesOpportunity? by salesOrders {views = []}
  
  extend view posView = opportunity
  
  impl event onSave = {
    if (touched) opportunity?.touch
  }
}

extend entity Customer {
  field opportunities: [SalesOpportunity]? read by customer
}

class PerMeasurments {
  field unit: LengthUnit = Centimetre
  field shoulder: Dec[unit] {canEditUnit}
  field chest: Dec[unit] {canEditUnit}
  field waist: Dec[unit] {canEditUnit}
  field hip: Dec[unit] {canEditUnit}
  field notes: Text?
  impl view form = grid {
    row{shoulder chest waist hip}
    notes
  }
}

extend trait IOrderTerms {
  func isRetail: Bool = false
}

extend entity OrderTerms {
  impl field isRetail: Bool
}