entity BookApi extends SystemService with IEndpoint {
  impl func title = "Book API"
  impl func service = this
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
    
    model
    bridalProduct
    fittingProduct
    legalEntity
    store
    
    fittingConfirm
    bridalConfirm
  }}
  
  field model: BookPriceModel
  field bridalProduct: JobType
  field fittingProduct: JobType
  field legalEntity: OurLegalEntity =? onlyOne
  field store: IStore =? onlyOne
  field fittingConfirm: PlainText {
    label = "Final fitting confirmation text"
  }
  field bridalConfirm: PlainText {
    label = "Bridal appointment confirmation text"
  }
  
  /*
   *  POST $endpoint/newAppointment
   */
  back func postNewAppointment(body: NewApptRequest): NewApptResponse = {
    let person = EmailContact.all.find(email =%= body.email && addressee.title =%= body.name).result.get?.addressee?.as[Person].alt{
      Person(name = body.name)
    }
    person.addEmail(body.email)
    person.addPhone(Mobile, body.phone)
    
    let appt = {
      if (body.type == "bridal") BridalAppointment(customer = person.makeCustomer).as[IAppointment]
      else FittingAppointment(customer = person.makeCustomer)
    }.saveMain
    
    let prod = product(appt)
    NewApptResponse(
      appointmentId = appt.n!,
      dates = model.priceRent(prod)
        ?.rentAvPeriods(Date.now, rentCalcItem(prod))
         .map(period.start.date).distinct
         .first(300)
         .map(format("yyyy-MM-dd"))
    )
  }
  
  
  /*
   *  GET $endpoint/periods?appointmentId=...&date=yyyy-MM-dd
   */
  back func getPeriods(appointmentId: Int, date: Date): PeriodsResponse = {
    let appt = appt(appointmentId)
    let prod = product(appt)
    PeriodsResponse(
      periods = model.priceRent(prod)
        ?.rentAvPeriods(date, rentCalcItem(prod))
         .first(200) 
         .takeWhile(period.start.date == date)
         .groupBy(period).agg(item = first.items.first!).toSeq.sortBy(period.start)
         .map(PeriodDataItem(start = period.start.format("HH:mm"), end = period.end.format("HH:mm"), data = item.id))
    )
  }
  
  /*
   *  POST $endpoint/selectPeriod
   */
  back func postSelectPeriod(body: SelPeriodRequest): Future[ConfirmResponse] = {
    let appt = appt(body.appointmentId)
    let prod = product(appt)
    
    let so = SalesOrder(
      vendor = legalEntity, appointment = appt, customer = appt.customer
      deliveries = [SalesDelivery(store = store, start = Date(body.date + " " + body.period.start), end = Date(body.date + " " + body.period.end))]
    ).saveMain
    let si = SalesRentItem(
      order = so
      deliveryItem = RentDeliveryItem(delivery = so.deliveries.first, product = prod, productItems = [Person.load(body.period.data!).result.get])
    )
    let _ <- si.deliveryItem.updateDur()
    let _ <- si.deliveryItem.updateAmount()
    
    ConfirmResponse(confirm = if (appt.is[FittingAppointment]) fittingConfirm)
  }
  
  /*
   * POST $endpoint/details
   */
  back func postDetails(body: DetailsRequest): ConfirmResponse = {
    let appt = appt(body.appointmentId).as[BridalAppointment]!
    appt.details = body.copy(BridalAppointmentDetails)
    appt.saveMain
    ConfirmResponse(confirm = bridalConfirm)
  }
  
////////////////////////////////////////////////////////////////////////////////////////////////////
  back func appt(num: Int): IAppointment = {
    IAppointment.all.find{a => a.n == num}.result.get!
  }
  
  back func product(appt: IAppointment): ISubProduct = {
    if (appt.is[BridalAppointment]) bridalProduct else fittingProduct
  }
  
  back func rentCalcItem(prod: ISubProduct) = {
    RentAvCalcItem(
      priorityDate = now
      le = legalEntity
      store = store
      retStore = store
      product = prod
      dur = 1, qty = 1
    )
  }
}

extend role Public {
  entity BookApi = readOnly
}


class NewApptRequest {
  field type: String
  field email: String
  field phone: String
  field name: String
}

class NewApptResponse {
  field appointmentId: Int
  field dates: [String]?
}

class PeriodsResponse {
  field periods: [PeriodDataItem]?
}
class PeriodDataItem {
  field start: String
  field end: String
  field data: String?
}

class SelPeriodRequest {
  field appointmentId: Int
  field date: String
  field period: PeriodDataItem
}

class ConfirmResponse {
  field confirm: PlainText?
}
class DetailsRequest {
  field appointmentId: Int
  field weddingDate: Date
  field budget: UMoney?
  field address: PlainText?
  field notes: PlainText?
}