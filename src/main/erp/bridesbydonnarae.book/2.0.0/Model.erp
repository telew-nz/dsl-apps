entity BookPriceModel extends IPriceModel {
  impl func title = "Book Price Model"
  impl func isSalesModel = false
  impl func isRentModel = true
  impl func hasSlots = true
  stored compute minDur: UDuration[minute] = products*.dur.min
  stored compute maxDur: UDuration[minute] = products*.dur.max
  field products: [BookProdPrice] inline by model 
  field people: [BookPricePerson] inline
 
  /*func goDayPeriods(date: Date, schedule: ISchedule, dur: UDuration, avPeriods: [Period]): [Period]? = {
    dayPeriods(date, schedule, dur, avPeriods) + goDayPeriods(date + 1_day, schedule, dur, avPeriods)
  }*/
  
  func dayPeriods(date: Date, schedule: ISchedule, dur: UDuration, avPeriods: [Period]): [Period]? = {
    if (
      let p = schedule.workingOrNextPeriod(date) where p.start.date == date.date
      let avPers = avPeriods.mapOpt(_.intersect(p))
    ) {
          avPers.flatMap(softDurPeriods(dur, _))
      .or(avPers.flatMap(hardDurPeriods(dur, _)))
    }
  }
  
  func softDurPeriods(dur: UDuration, per: Period): [Period]? = {
    if (per.duration >= maxDur + dur) {
      let p0 = Period(start = per.start, end = per.start + dur)
      let rest = Period(start = per.start + maxDur, end = per.end)
      if (let pers = softDurPeriods(dur, rest)) {
        p0 + pers
      } else {
        [p0, Period(start = per.end - dur, end = per.end)]
      }
    }
  }
  
  func hardDurPeriods(dur: UDuration, per: Period): [Period]? = {
    if (per.duration == dur) [per]
    else if (per.duration > dur) {
      Period(start = per.start, end = per.start + dur) + hardDurPeriods(dur, Period(start = per.start + minDur, end = per.end))
    }
  }
  
  
  impl func priceRent(product: IBaseProduct): IPriceRent? = {
    products.find(p => p.product == product)
  }
  
  impl view form = nav{grid{
    people >> table {
      person >> field(width = 0.5)
      schedule >> field(width = 0.5)
    }
    products >> table {
      product >> field(width = 0.5)
      dur >> field(width = 0.2)
      price  >> field(width = 0.3)
    }
  }}
}

inline entity BookPricePerson {
  field person: Person
  field schedule: ISchedule
  impl func toString = "$person ($schedule)"
}


inline entity BookProdPrice extends IPriceRent {
  impl field model: BookPriceModel
  override func currency = model.currency
  impl field product: JobType
  field dur: UDuration[minute] {
    default = 45_minute
    label = "Duration"
  }
  field price: SalesPrice
  impl func defaultDur = dur.as[UQty[DurUnit.Minute]]
  override ref compute rentDurUnits: [DurUnit]? = [Minute]
  
  impl back func rentAmount(currency: Currency, inclGst: Bool, customer: ICustomer?, qty: UQty, period: RentPeriod): Future[SalesPrice] = {
    price.mul(qty).convertGst(gstRate, true, inclGst)
  }
  
  override func rentAvPeriods(from: Date, item: RentAvCalcItem): [RentAvPeriodItem]? = {
    if (let pers = model.people.mapOpt {bp =>
      if (let periods = bp.person.avPeriods(item.prodRegSel, item.priorityDate, item.exclRegs)) {
        (bp, periods)
      }
    }) {
      nextRentAvPeriods(from.mainTz, pers)
    }
  }
  
  private back func nextRentAvPeriods(from: Date, avPeriods: [(bp: BookPricePerson, periods: [Period])]): [RentAvPeriodItem]? = {
    avPeriods.flatMap {i =>
      model.dayPeriods(from, i.bp.schedule, this.dur, i.periods)
        .map(p => RentAvPeriodItem(period = p, items = [i.bp.person]))
    }.sortBy(period.start) + nextRentAvPeriods((from + 1_day).start(of = day), avPeriods)
  }

  impl back func rentPrices(currency: Currency, inclGst: Bool): Future[[DurPrice]?] = {
    [DurPrice(unit = Minute, dur = dur, price = price).convertGst(gstRate, true, inclGst)]
  }
  
  impl view form = grid{
    row{product dur price}
  }
}
