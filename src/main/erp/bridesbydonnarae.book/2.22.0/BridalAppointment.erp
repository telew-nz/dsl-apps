object ITSalespersonUnav extends IssueType[BridalAppointment] {
  impl func title = "Salesperson is unavailable"
  impl func hasIssue(item: BridalAppointment) = item.isUnav && item.period.end > now
}

entity BridalAppointment extends Event with EventParticipant {
  ref field opportunity: SalesOpportunity by appointments
  impl ref field period: Period
  ref field type: ApptType
  ref field state: ApptState = Confirmed
  system field cancelDate: Date?
  compute person: Person = opportunity.customer.legalEntity.as[Person]!
  func personTo: [Person]? = opportunity.customer.legalEntity.as[Person].toSeq
  ref field salesperson: Person {
    from = Person.all.filter(user?.is(Salesperson))
  }
  impl func event = this
  impl func participant = salesperson
  impl func numPrefix = "BAP"
  impl func title = "$(opportunity.customer)"
  override func active = state.active
  override func issueTypes = super.issueTypes + ITSalespersonUnav
  impl func itemRoles = [Salesperson]
  
  impl view form = nav{grid{
    x (label = "") {type state opportunity >> field(stretch = 1 fontStyle = H2, title = title) number >> field(fontStyle = Label) } 
    period
    salesperson
    label ("Unavailable", color = "red", visible = isUnav)
    periods >> list(frame = false, visible = ui.edit, label = "Available At $(period.start.date)") {
      button(label = "$(period.start.time) - $(period.end.time) $(items.first)") {
        this.period = _.period
        this.salesperson = _.items!.first.as[Person]!
      }
    }
  }}
  impl view ref = grid(spacing = false, labels = None, width = 0.67) {
    row{number >> field(fontStyle = Label width = 0.09) x {period.start >> field(fontStyle = Label) label("—") period.end >> field(fontStyle = Label)}}
    row{type state >> field(editMode = AlwaysEdit, width = 0.09, compact) title}
  }
  
  impl view traitItem = grid(spacing = false, labels = None){
    x {type state opportunity >> field(stretch = 1 title = title) number >> field(fontStyle = Label)}
    x { period.start >> field(fontStyle = Label) label("—") period.end >> field(fontStyle = Label, stretch = 1) salesperson >> field(title = title)}
  }
  
  
  impl event onSave = {
    if (created) salesperson.user!.join(this).notify
    opportunity.touch
    if (updated(state)) cancelDate = if (state == Cancelled) now
  }
  
  compute periods: Future[[RentAvPeriodItem]?] = if (state.active) {
    back{
      let d = period.start.start(of = day)
      BookApi.one.rentAvPeriods(type.product, d).takeWhile(_.period.start.start(of = day) == d)
    }
  }
}

enum ApptType(product: JobType) {
  case Bridal(product = BookApi.one.bridalProduct) {
    icon = "book"
    background = "#8bf"
  }
  case Fitting(product = BookApi.one.fittingProduct) {
    icon = "book-reader"
    background = "#dea"
  }
}

enum ApptState(active: Bool) {
  case Pending(active = true) {
    background = "#8bf"
    icon = "spinner"
  }
  case Confirmed(active = true) { 
    icon = "check"
    background = "#dea"
  }
  case Complete(active = false) {
    color = "white"
    background = "#090"
    icon = "check-circle"
  }
  case Cancelled(active = false) {
    background = "#999"
    icon = "times-circle" 
  }
}