trait IReconRuleCp extends IReconRule {
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    if (let cp = cp(payment.bankData)) {
      payment.debtCounterparty =cp
      payment
    }
  }
  
  back func cp(data: BankData): LegalEntity? 
 
}
object ReconCpPaymentMethod extends IReconRule {
  impl func title = "Payment method"
  impl func pr = 200
  impl func backDescr = "Set counterparty if the counterparty account number is entered as a payment method for the actor"
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    if (let a = payment.bankData.thierAccount.trim where a.length > 3
        let pm = PMBankAccount.all.find(number =%= a).result.get
    ) {
        payment.paymentMethod = pm
        payment.debtCounterparty = pm.legalEntity
        payment
    }
  }
}

object ReconCpRefNumFull extends IReconRuleCp {
  impl func title = "Full Document Number"
  impl func pr = 300
  impl func backDescr = "If a full document or reference number is mentioned in anywhere in bank data fields, it will set the counterparty from the document"
  impl func cp(data: BankData): LegalEntity? = {
    Entity.numbers(data.fullMemo).flatMap {number =>
      DebtOrigin.all.filter(_.entityNumbers.exists(n => n =%= number)).result.get
    }*.debtCounterparty.distinct.onlyOne
  }
}

object ReconCpNameFull extends IReconRuleCp {
  impl func title = "Full Counterparty Name"
  impl func pr = 310
  impl func backDescr = "Finds counterparty by the name using the company or person name or alternative name"
  impl func cp(data: BankData): LegalEntity? = {
    LegalEntity.filterByName(data.thierName).filter(!our).onlyOne
  }
  impl func isCounterparty(actor: LegalEntity, payment: Payment): Bool = {
    actor.isName(payment.bankData.thierName) 
  }
}

object ReconCpRefNumNoPrefix extends IReconRuleCp {
  impl func title = "Document Name without prefix"
  impl func pr = 320
  impl func backDescr = "If a document number without a prefix is mentioned in anywhere in bank data fields and the debt amount for the document matches to the payment's amount, it will set the counterparty from the document"
  impl func cp(data: BankData): LegalEntity? = {
     let memo = data.fullMemo.replace(" ", "").replace("-", "").flex
      //4. Reference without a prefix contains in memo (INVSO1397 || SO 1397) 
      //&& Amount matches

      DebtOrigin.all
        .filter(debtCounterparty && debtUnpaidAmount == data.amount && _.mainOrigin.entityNumbers.exists(memo.contains(_)))
        .result.get
        *.debtCounterparty.distinct.onlyOne
  }
}


object ReconCpNameAllParts extends IReconRuleCp {
  impl func title = "All parts of counterparty name in memo"
  impl func pr = 330
  impl func backDescr = "<p>Search for a counterparty which has a name or an alternative name which has all parts of the name in the memo.</p>
<ul>
Only if:
<li>Companies: 2 words 3 characters each at least or 1 word 4 characters at least</li>
<li>Person: 2 words 3 characters each at least</li>
<li>Alternative name or legal name: 2 words  3 characters each at least</li>
</ul>
"
  impl func cp(data: BankData): LegalEntity? = {
    let in = data.fullMemo.flexWholeWords
    let candidates: [(LegalEntity, [String])]? = LegalEntity.all.flatMap{e => (if (let words = actorContainsWords(in, e)) (e, words)).toSeq}.result.get
    chooseLe(null, [], candidates)
  }
  
  back func chooseLe(le: LegalEntity?, words: [String]?, candidates: [(LegalEntity, [String])]?): LegalEntity? = {
    if (let f = candidates.first) {
      if (words.all(w => f.#1.exists(v => v.flexWholeWords.startsWith(w)))) {
        chooseLe(f.#0, f.#1, candidates.drop(1))
      } else if (f.#1.all(w => words.exists(v => v.flexWholeWords.startsWith(w)))) {
        chooseLe(le, words, candidates.drop(1))
      } else {
        null
      }
    } else {
      le
    }
  }
  
  back func actorContainsWords(fullMemo: FlexString, e: LegalEntity): [String]? = {
    let words = e.title.words
    (if ( (words.filter(_.length >= 3).count >= 2 || (e.is[Company] && words.exists(_.length >= 4)) ) && words.all(fullMemo.contains(_)) ) [e.title]) 
    +
    (if (let n = e.legalInfo?.name.trim where n.length >= 3 && fullMemo.contains(n)) [n])
    +
    e.altNames.filter(n => n.trim.length >= 3 && fullMemo.contains(n))
  }
  
  impl func isCounterparty(actor: LegalEntity, payment: Payment): Bool = {
    actorContainsWords(payment.bankData.fullMemo.flexWholeWords, actor)
  }
}

object ReconCpNamePart extends IReconRuleCp {
  impl func title = "Part of counterparty Name in memo"
  impl func pr = 340
  impl func backDescr = "Search for a counterparty which has a name or an alternative name which has a word 3 characters or longer in the memo and an unpaid amount on an invoice equal to the payment"
  impl func cp(data: BankData): LegalEntity? = {
    let in = data.fullMemo.flexWholeWords
    DebtOrigin.all
        .filter(debtCounterparty && debtUnpaidAmount == data.amount && actorContainsForTrans(in, debtCounterparty!))
        .result.get
        *.debtCounterparty.distinct.onlyOne
  } 
  back func actorContainsForTrans(fullMemo: FlexString, e: LegalEntity): Bool = {
    e.title
      .replace(".", " ").words
      .exists{w => 
        w.lower !in ["ltd"] && w.length >= 3 && fullMemo.contains(w)
      }
  }
  impl func isCounterparty(actor: LegalEntity, payment: Payment): Bool = {
    actorContainsForTrans(payment.bankData.fullMemo.flexWholeWords, actor)
        && DebtOrigin.all
             .exists(debtCounterparty == actor && debtUnpaidAmount == payment.bankData.amount)
             .result.get
  }
}
