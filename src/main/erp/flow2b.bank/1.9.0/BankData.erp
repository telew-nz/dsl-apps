extend class BankData {
  back func ourContraAccount: FinAccount? = if (let a = thierAccount) {
    BankAccount.all.find(number == a).result.get?.as[FinAccount]
      .or(CardAccount.all.find(number == a).result.get)
  }
  back func paymentMethod: PMBankAccount? = if (let a = thierAccount) {
    PMBankAccount.all.find(number == a).result.get
  }
  back func counterparty: LegalEntity? = {
    origins*.debtCounterparty.distinct.onlyOne
    LegalEntity.filterByName(thierName).onlyOne
      .or(origins*.debtCounterparty.distinct.onlyOne)
  }
  
  back func origins: [DebtOrigin]? = {
    Entity.findReferences(fullMemo)*.as[DebtOrigin]
  }
}
extend trait Entity {
  back object func findReferences(in: String?): [Entity]? = {
    in
       .all(Regex("(((^|[\s(,:])(([A-Za-z]{1,3}[0-9]+[A-Za-z0-9\-\.]{2,})|([0-9\-]{4,})))|(#\s*[A-Za-z0-9\-\.]+))(?=[\s),:;.]|\$)"))
       .flatMap {n =>
          Entity.filterByNumber(n.toString.trim.dropPrefix("#").trim)
        }
  }
}