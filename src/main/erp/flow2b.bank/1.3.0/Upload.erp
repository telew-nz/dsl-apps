entity BankStatementUpload {
  background = "#d68400"
  object field gen: Int?
  const ref field n: Int? = increment(gen)
  compute number = "BSU$n"
  ref field date: Date = now
  const field state: BankStatementUploadState = Entered
  const field errorDetails: Text? {visible = state == Error}
   
  field type: BankStatementType?
  field account: BankAccount? {
    visible = !type?.knowOurAccount.alt(false)
    validate = if (!account && !type?.knowOurAccount.alt(true)) "Account should be selected"
  }
  field files: [File]
  const field payments: [CashMovement]? by uploads
  list compute paymentsCount { 
    value = payments.count
    label = "Payments Uploaded"
  }
  func title = "$number $date"
  view form = nav{grid{
    number
    date
    state
    errorDetails
    account
    files
    button("Process Again", visible = state != Entered) {
      StatementProcessJob(upload = this).run()
    }
    payments
  }}
  event onSave = {
    if (!deleted && User.current != BankService && (created || state == Error)) StatementProcessJob(upload = this).run()
  }
  report Report {
    view list = BankStatementUpload.all >> nav{table {
      date state account type paymentsCount
    }}
  }
}

enum BankStatementUploadState {
  case Entered {background = "#ed9"}
  case Error {background = "#f99"}
  case Imported {color = "white" background = "#090"}
}

object BankService extends SystemService {
   func title: String = "BankService"
   func roles: [Role]? = [Admin]
}




