class StatementProcessJob extends SystemJob {
  func service = BankService
  field upload: BankStatementUpload
  func do = {
    let ret = {
      let payments <- upload.files.map{file =>
        let data <- file.content
        let processor = BankStatementType.all.find(_.canProcess(file, data)).alt(throw "Cannot determine statement type for $file")
        if (!processor.knowOurAccount && !upload.account) throw "Please enter an account into the account field"
        let result = processor.process(file, data)
        if (let items = result.items) {
          let minDate = items*.date.min
          let maxDate = items*.date.max
          var payments: [Payment]? = Payment.all.filter(minDate <= _.date && _.date <= maxDate)
          items.filter(amount).map {p =>
            let accountNumber = p.accountNumber.or(result.accountNumber)
            if (let account = {
              if (let a = accountNumber) BankAccount.all.find(legalEntity.isOur && number == a)
              else upload.account
            }) {
              let data = p.data(account)
              if (let old = payments
                .filter(i => i.account == account && (p.same(i) + data.same(i.bankData)) >= 1.5)
                .first) 
              {
                payments = payments - old
                null[Payment]
              } else {
                if (p.amount > 0) IncomingPayment(
                  date = p.date
                  upload = upload
                  account = account
                  bankData = data
                  amount = if (p.currency) p.amountInCurrency else p.amount
                  currency = p.currency.alt(account.currency)
                  accountAmount = if (p.currency) p.amount!
                  payee = account.legalEntity
                )
                else OutgoingPayment(
                  date = p.date
                  upload = upload
                  account = account
                  bankData = data
                  amount = if (p.currency) -p.amountInCurrency else -p.amount
                  currency = p.currency.alt(account.currency)
                  accountAmount = if (p.currency) p.amount!
                  payer = account.legalEntity
                )
              }
            } else if (accountNumber) {
              throw "Account '$accountNumber' not found"
            } else {
              throw "Please enter an account into the account field"
            }
          }
        }
      }.allCompleted
      upload.state = Imported
      upload.save
    }
    ret.recover{err =>
      upload.state = Error
      upload.errorDetails = err
      upload.save
    }
  }
}