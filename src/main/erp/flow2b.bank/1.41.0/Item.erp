interface BankStatementItem {
  func date: Date
  func accountNumber: String? = ""  
  func data(account: FinAccount): BankData
}
 
extend class BankData {
  back func same(o: BankData): Dec[2]? = {
    if (bankId && o.bankId) {
      if (bankId == o.bankId) 1
      else 0
    } else if (memo && o.memo) {
      if (memo == o.memo) 1 else 0
    } else {
      0.5
    }
  }
  
  back func same(account: FinAccount, movement: CashMovement): Dec[2]? = {
    let pa = (if (amount < 0) movement.srcAmount else movement.dstAmount).noUnit
    let pData = if (amount < 0) movement.srcBankData! else movement.dstBankData!
    let md = if (amount < 0) movement.dateOut else movement.dateIn
    if (pData.uploaded) {
      if (pData.bankId && pData.bankId == bankId) 2.0
      else if (pa == amount && pData.date.alt(md) == date) 1.00 + same(pData)
    } else if (let amountRank = 
      (if (pa == amount) 1.00
      else if (!account.isPrecise && pa - 0.50 <= amount && amount <= pa + 0.50) 0.75)
    ) {
      if (md - 3_hour <= date && date <= md + 3_hour) amountRank + 1.0
      else if (!account.isPrecise) {
        if (md - 1_hour <= date && date <= md + 1_day) amountRank + 1.0
        else if (md - 4_day <= date && date <= md + 4_day) amountRank + 0.75
      }
    }
  }
  
  back func sameContra(movement: CashMovement): Dec[2]? = {
    let pa = (if (amount > 0) movement.srcAmount else movement.dstAmount).noUnit
    if (let amountRank = if (pa == -amount) 1.00) {
      if (amount > 0) {
        if (movement.dateOut - 1_day <= date) amountRank + 0.75
        else if (movement.dateOut - 4_day <= date) amountRank + 0.5
      } else if (amount < 0) {
        if (date <= movement.dateIn + 1_day) amountRank + 0.75
        else if (date <= movement.dateIn + 4_day) amountRank + 0.5
      }
    }
  }
}
