class StatementProcessJob extends SystemJob {
  func service = BankService
  field upload: BankStatementUpload
  func do = {
    let ret = {
      let payments <- upload.files.map{file =>
        let data <- file.content
        let processor = BankStatementType.all.find(_.canProcess(file, data)).alt(throw "Cannot determine statement type for $file")
        if (!processor.knowOurAccount && !upload.account) throw "Please enter an account into the account field"
        let result = processor.process(file, data)
        if (let items = result.items) {
          let minDate = items*.date.min
          let maxDate = items*.date.max
          var movements: [CashMovement]? = CashMovement.all.filter(minDate - 3_day <= _.date && _.date <= maxDate + 1_day)
          var accounts: [BankAccount]? = []
          let ret = items.filter(amount).map {p =>
            let accountNumber = p.accountNumber.or(result.accountNumber)
            if (let account = {
              if (let a = accountNumber) BankAccount.all.find(legalEntity.isOur && number == a)
              else upload.account
            }) {
              if (!accounts.contains(account)) accounts = accounts + account
              let data = p.data(account)
              data.uploadState = Uploaded
              data.date = p.date
              if (let old = movements
                .filter(i => (if (p.amount < 0) i.srcAccount else i.dstAccount) == account)
                .mapOpt{payment =>
                  let rank = p.same(payment, data)
                  if (rank >= 1.5) (rank, payment)
                }
                .sortBy(rank.desc)
                .first?.payment) 
              {
                movements = movements - old
                if (if (p.amount < 0) old.srcBankData!.uploaded else old.dstBankData!.uploaded) null[CashMovement]
                else {
                  old.uploads = old.uploads + upload
                  if (p.amount < 0) {
                    old.srcBankData = data
                    old.srcAmount = p.amount
                  } else {
                    old.dstBankData = data
                    old.dstAmount = p.amount
                  }
                  if (let oldP = old.as[Payment]) {
                    oldP.date = p.date
                  }
                  old.save
                }
              } else {
                if (p.amount > 0) IncomingPayment(
                  date = p.date
                  uploads = [upload]
                  account = account
                  bankData = data
                  amount = if (p.currency) p.amountInCurrency else p.amount
                  currency = p.currency.alt(account.currency)
                  accountAmount = if (p.currency) p.amount!
                  payee = account.legalEntity
                )
                else OutgoingPayment(
                  date = p.date
                  uploads = [upload]
                  account = account
                  bankData = data
                  amount = if (p.currency) -p.amountInCurrency else -p.amount
                  currency = p.currency.alt(account.currency)
                  accountAmount = if (p.currency) p.amount!
                  payer = account.legalEntity
                )
              }
            } else if (accountNumber) {
              throw "Account '$accountNumber' not found"
            } else {
              throw "Please enter an account into the account field"
            }
          }
          movements.filter(minDate<= _.date && _.date <= maxDate).foreach{m =>
            if (m.srcAccount.in(accounts) && !m.srcBankData!.uploaded) {
              m.srcBankData!.uploadState = Missing
              m.touch
              m.save
            }
            if (m.dstAccount.in(accounts) && !m.dstBankData!.uploaded) {
              m.dstBankData!.uploadState = Missing
              m.touch
              m.save
            }
          }
          ret
        }
      }.allCompleted
      upload.state = Imported
      upload.save
    }
    ret.recover{err =>
      upload.state = Error
      upload.errorDetails = err
      upload.save
    }
  }
}