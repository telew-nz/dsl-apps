entity ReconFilterData extends IReconFilter {
  singular = "By Bank Data"
  
  field fld: BankDataField = AnyField
  field op: StrBoolOp
  field str: String {
    label = "String"
  }
  
  impl func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    let s = fld.str(payment.bankData)
    op.applyFlex(s.flex, str)
  }
  impl view form = x {fld op str >> field(stretch = 1)}
}

enum BankDataField(str: BankData => String?) {
  case AnyField(str = (BankDataField.all - AnyField).map(e => e.str(_)).join(" "))
  case Memo(str = _.memo)
  case CounterpartyName(str = _.thierName)
  case CounterpartyAccountNumber(str = _.thierAccount)
  case CardNumber(str = _.cardNumber)
  case BankComment(str = _.bankComment)
}

enum StrBoolOp(apply: (x: String?, y: String?) => Bool, applyFlex: (x: FlexString, y: String?) => Bool) {
  case Equal(apply = x == y, applyFlex = x == y.flex)
  case Contains(apply = x.contains(y), applyFlex = x.contains(y))
  case StartsWith(apply = x.startsWith(y), applyFlex = x.startsWith(y))
  case EndsWith(apply = x.endsWith(y), applyFlex = x.endsWith(y))
}

entity ReconFilterPaymentType extends IReconFilter {
  singular = "By Payment Type"
  
  field type: PaymentDirection 
  
  impl func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    (type == Incoming && payment.is[IncomingPayment]) || (type == Outgoing && payment.is[OutgoingPayment])
  }
  impl view form = x{type >> field(compact = false) label("Payments")}
}

entity ReconFilterAccount extends IReconFilter {
  singular = "By Account"
  
  field accounts: [FinAccount]
  
  impl func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    payment.account in accounts
  }
  impl view form = grid {
    accounts
  }
}

entity ReconFilterBankStm extends IReconFilter {
  singular = "By Bank Statement Type"
  
  field types: [BankStatementType] {label = "Bank Statement Types"}
  
  impl func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    payment.bankData.stmType in types
  }
  impl view form = grid {
    types
  }
}

entity ReconFilterOr extends IReconFilter with IReconFilterOwner {
  singular = "Or"
    
  override func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    filters.exists(_.filter(movements, payment))
  }
  impl view form = grid {
    filters >> field(label = "Or")
  }
}

entity ReconFilterAnd extends IReconFilter with IReconFilterOwner {
  singular = "And"

  impl view form = grid {
    filters >> field(label = "And")
  }
}
entity ReconFilterNot extends IReconFilter with IReconFilterOwner {
  singular = "Not"

  impl view form = grid {
    filters >> field(label = "Not")
  }
  override func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    !filters.exists(_.filter(movements, payment))
  }
}