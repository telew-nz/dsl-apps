class PaymentsReprocessJob extends SystemJob {
  impl func service = FinanceService
  impl back func do = {
    IncomingPayment.all.filter(!payer && bankData.uploaded && !reconAmount && !source && !reasons && !manLinks).foreach(PaymentReprocessJob(payment = _).enqueue)
    OutgoingPayment.all.filter(!payee && bankData.uploaded && !reconAmount && !source && !reasons && !manLinks).foreach(PaymentReprocessJob(payment = _).enqueue)
  }
}

class PaymentReprocessJob extends SystemJob {
  impl func service = FinanceService
  field payment: Payment
  impl back func do = {
    payment.reprocessData
  }
}

extend trait Payment {
  back func reprocessData: Bool
}

extend entity IncomingPayment extends BankStatementItem {
  impl back func reprocessData: Bool = {
    if (!this.payer) {
      let paymentMethod = account.paymentMethod(this, bankData)
      if (let cp = paymentMethod?.legalEntity.or(account.counterparty(this, bankData, false))) {
        this.payer = cp
        this.paymentMethod = paymentMethod
        save 
        true
      }
    }
  }
  impl func stmAmount = amount.noUnit
  impl func stmCurrency: Currency? = currency
  impl func data(account: FinAccount): BankData = bankData
}

extend entity OutgoingPayment extends BankStatementItem {
  impl back func reprocessData: Bool = {
    if (!this.payee) {
      let paymentMethod = account.paymentMethod(this, bankData)
      if (let cp = paymentMethod?.legalEntity.or(account.counterparty(this, bankData, false))) {
        this.payee = cp
        this.paymentMethod = paymentMethod
        save 
        true
      }
    }
  }
  impl func stmAmount = -amount.noUnit
  impl func stmCurrency: Currency? = currency
  impl func data(account: FinAccount): BankData = bankData
}