trait IReconFilterOwner extends AnyEntity {
  field filters: [IReconFilter] inline by filterOwner
  back func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    filters.all(_.filter(movements, payment))
  }
}

trait IReconOwner extends AnyEntity {
  field recons: [IRecon] inline by reconOwner {
    label = "Reconciliations"
  }
  back func recon(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    recons.fold(null[CashMovement]) {
      if (let acc) acc
      else apply(movements, payment)
    }
  }
}

entity ReconRule extends IReconRule with IReconFilterOwner with IReconOwner {
  singular = "Reconciliation Rule"
  impl field title: String
  field descr: Text? {label = "Description"}
  impl func backDescr: Text? = descr
  impl func pr: Dec[4]? = 1
  
  impl back func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    if (filter(movements, payment)) {
      recon(movements, payment)
    }
  }
  override view form = nav{
    grid{
      x{state title >> field(fontStyle = H2, stretch = 1)}
      descr

      priority
      movementsView
      filters
      recons
    }
    button(icon = "running", "Execute") {
      let _ <- UI.save(this)
      back{run}
    }
  }
}

trait IReconFilter extends InlineEntity {
  system field filterOwner: IReconFilterOwner by filters
  
  back func filter(movements: [CashMovement]?, payment: Payment): Bool
}

trait IRecon extends InlineEntity {
  system field reconOwner: IReconOwner by recons
  
  back func apply(movements: [CashMovement]?, payment: Payment): CashMovement?
}