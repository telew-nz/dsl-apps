trait IReconRule extends Entity {
  singular = "Reconciliation Rule"
  plural = "Reconciliation Rules"
  
  back func backDescr: Text?
  func pr: Dec[4]?
  back func apply(movements: [CashMovement]?, payment: Payment): CashMovement?
  back func isCounterparty(actor: LegalEntity, payment: Payment): Bool = false
  
  field _priority: Dec[4]??
  ref compute priority: Dec[4]? = _priority.alt(pr)
  
  compute frontDescr {
    value = back{backDescr}
    availableFor = Inline
  }
  
  
  ref field state: ReconRuleState = defaultState
  func defaultState: ReconRuleState = Active
  
  impl view ref = x{state title}
  impl view form = nav{grid{
    x{state title >> field(fontStyle = H2, stretch = 1)}
    frontDescr >> field(label = "")
    priority
  }}
  report Report {
    impl view list = IReconRule.all.sortBy(priority.desc) >> nav{list {
      x{state title >> field(stretch = 1) priority >> field(fontStyle = Label)}
    }}
  }
  object back func process(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    IReconRule.all
      .filter(state == Active)
      .sortBy(priority.desc).result.get
      .fold(null[CashMovement]) {
        if (let acc) acc
        else apply(movements, payment)
      }
  }
  object back func isCounterparty(actor: LegalEntity, payment: Payment): Bool = {
    IReconRule.all
      .filter(state == Active)
      .sortBy(priority.desc)
      .exists(_.isCounterparty(actor, payment))
  }
}

enum ReconRuleState {
  case Active {background = "#dea" icon = "robot"}
  case Inactive {background = "#999" icon = "times-circle"}
}

extend role Accountant {
  extend view menu = extend("Finance") {
    IReconRule
  }
}

trait IReconFilterOwner extends AnyEntity {
  field filters: [IReconFilter]? inline by filterOwner
  back func filter(movements: [CashMovement]?, payment: Payment): Bool = {
    filters.all(_.filter(movements, payment))
  }
}

trait IReconOwner extends AnyEntity {
  field recons: [IRecon]? inline by reconOwner {
    label = "Reconciliations"
  }
  back func recon(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    recons.fold(null[CashMovement]) {
      if (let acc) acc
      else apply(movements, payment)
    }
  }
}

entity ReconRule extends IReconRule with IReconFilterOwner with IReconOwner {
  singular = "Reconciliation Rule"
  impl field title: String
  field descr: Text? {label = "Description"}
  impl func backDescr: Text? = descr
  impl func pr: Dec[4]? = 0
  
  
  
  impl back func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    if (filter(movements, payment)) {
      recon(movements, payment)
    }
  }
  override view form = nav{grid{
    x{state title >> field(fontStyle = H2, stretch = 1)}
    descr
    
    priority
    filters
    recons
  }}
}

trait IReconFilter extends InlineEntity {
  system field filterOwner: IReconFilterOwner by filters
  
  back func filter(movements: [CashMovement]?, payment: Payment): Bool
}

trait IRecon extends InlineEntity {
  system field reconOwner: IReconOwner by recons
  
  back func apply(movements: [CashMovement]?, payment: Payment): CashMovement?
}