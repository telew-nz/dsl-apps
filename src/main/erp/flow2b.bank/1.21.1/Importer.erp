back object BankImporter {
  func import(directions: [PaymentDirection], account: FinAccount?, items: [BankStatementItem]?): Future[[CashMovement]?] = if (let items) {
    let minDate = items*.date.min
    let maxDate = items*.date.max
    var movements: [CashMovement]? = CashMovement.all.filter(minDate - 4_day <= _.date && _.date <= maxDate + 4_day)
    var accounts: [FinAccount]? = []
    var updated = false
    let ret = items.filter(stmAmount).flatMap {p =>
      if (let account = {
        if (let a = p.accountNumber) FinAccount.withNumber(a)
        else account
      }) {
        if (!accounts.contains(account)) {
          accounts = accounts + account
        }
        
        let data = p.data(account)
        data.uploadState = Uploaded
        data.date = p.date
        let amount: Money = p.stmAmount!
        
        let tr = if (let old = movements
            .filter(i => (if (amount < 0) i.srcAccount else i.dstAccount) == account)
            .mapOpt{payment =>
              let rank = p.same(account, payment, data)
              if (rank >= 1.5) (rank, payment)
            }
            .sortBy(rank.desc)
            .first?.payment) 
        {
          movements = movements - old
          if (if (amount < 0) old.srcBankData!.uploaded else old.dstBankData!.uploaded) {
            null[CashMovement]
          } else {
            updated = true
            if (amount < 0) {
              old.srcBankData = data
              old.srcAmount = amount
            } else {
              old.dstBankData = data
              old.dstAmount = amount
            }
            if (let oldP = old.as[Payment]) {
              oldP.date = p.date
            }
            old.save
          }
        } else {
          updated = true
          createMovement(movements, account, p, data)
        }
        if (p.itemType == BankFee) {
          if (let op = tr?.as[OutgoingPayment]) {
            op.reasons = [
              BankFees(amount = op.amount).save
            ]
            [op]
          }
        } else if (p.itemType == Interest) {
          if (let ip = tr?.as[IncomingPayment]) {
            ip.reasons = [
              IncomingInterest(amount = ip.amount, withholdingTax = p.withholdingTax).save
            ]
          } else if (let op = tr?.as[OutgoingPayment]) {
            op.reasons = [
              OutgoingInterest(amount = op.amount).save
            ]
          }
        } else if (p.itemType == Tax) {
          if (let ip = tr?.as[IncomingPayment], let tax = p.tax) {
            ip.reasons = [
              TaxReturn(amount = ip.amount, tax = tax).save
            ]
          } else if (let op = tr?.as[OutgoingPayment], let tax = p.tax) {
            op.reasons = [
              TaxPayment(amount = op.amount, tax = tax).save
            ]
          }
        }
        if (let tr, let fee = p.fee) {
          if (p.stmAmount) {
            let op = OutgoingPayment(
              date = p.date
              account = account
              bankData = data
              amount = fee
              payer = account.legalEntity,
              feeTr = tr
            ).save
            op.reasons = [
              BankFees(amount = op.amount).save
            ]
            [tr, op]
          } else {
            [tr]
          }
        } else {
          tr.toSeq
        }
      } else if (p.accountNumber) {
        throw "Account '$(p.accountNumber)' not found"
      } else {
        throw "Please enter an account into the account field"
      }
    }

    movements.filter(minDate <= _.date && _.date <= maxDate).foreach{m =>
      if (directions.contains(Outgoing) && m.srcAccount.in(accounts) && !m.srcBankData!.uploaded) {
        updated = true
        m.srcBankData!.uploadState = Missing
        m.touch
        m.save
      }
      if (directions.contains(Incoming) && m.dstAccount.in(accounts) && !m.dstBankData!.uploaded) {
        updated = true
        m.dstBankData!.uploadState = Missing
        m.touch
        m.save
      }
    }
    if (!updated) Activity.current!.comment = "No new data found"
    ret
  }
    
  private func createMovement(movements: [CashMovement]?, account: FinAccount, p: BankStatementItem, data: BankData): CashMovement = {
    let amount: Money = p.stmAmount!
    if (let contraAccount = account.ourContraAccount(p, data)) {
      if (let old = movements*.as[Payment]
          .filter{i => (if (amount > 0) i.srcAccount else i.dstAccount) == contraAccount 
                  && !i.reconAmount && !i.counterparty
                 }
          .mapOpt{payment =>
            let rank = p.sameContra(account, payment, data)
            if (rank >= 1.5) (rank, payment)
          }
          .sortBy(rank.desc)
          .first?.payment
         ) {
        let tr = old.toTransfer
        if (amount < 0) {
          tr.dateOut = p.date.min(tr.dateIn)
          tr.from = account
          tr.outgoingBankData = data
          tr.outcome = (-amount).as[UMoney[account.currency]]!
        } else {
          tr.dateIn = p.date.max(tr.dateOut)
          tr.to = account
          tr.incomingBankData = data
          tr.income = amount.as[UMoney[account.currency]]!
        }
        tr.save
      } else {
        let tr = CashTransfer(
          dateOut = p.date, dateIn = p.date
        )
        if (amount < 0) {
          tr.from = account
          tr.to = contraAccount
          tr.outgoingBankData = data
          tr.outcome = (-amount).as[UMoney[account.currency]]!
          tr.income = (-amount).as[UMoney[contraAccount.currency]]!
        } else {
          tr.from = contraAccount
          tr.to = account
          tr.incomingBankData = data
          tr.outcome = amount.as[UMoney[contraAccount.currency]]!
          tr.income = amount.as[UMoney[account.currency]]!
        }
        tr.save
      }
    } else {
      let paymentMethod = account.paymentMethod(p, data)
      let cp = paymentMethod?.legalEntity.or(account.counterparty(p, data))
      let currency = p.stmCurrency.alt(account.currency)
      if (amount > 0) {
        IncomingPayment(
          date = p.date
          account = account
          bankData = data
          amount = (if (p.stmCurrency) p.amountInCurrency! else amount).as[UMoney[currency]]!
          currency = currency
          accountAmount = if (p.stmCurrency) amount.positive.as[UMoney[account.currency]]!
          payee = account.legalEntity, payer = cp, paymentMethod = paymentMethod
        ).save
      } else {
        OutgoingPayment(
          date = p.date
          account = account
          bankData = data
          amount = (if (p.stmCurrency) -p.amountInCurrency! else -amount).as[UMoney[currency]]!
          currency = currency
          accountAmount = if (p.stmCurrency) amount.negative.as[UMoney[account.currency]]!
          payer = account.legalEntity, payee = cp, paymentMethod = paymentMethod
        ).save
      }
    }
  }
}