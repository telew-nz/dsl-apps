object ReconTransfer extends IReconRule {
  impl func title = "Transfer based on counterparty account number"
  impl func pr = -1
  impl func backDescr = "If the Counterparty Account Number matches to one of our account, it will make a transfer to or from this account or convert an existing payment on the account to transfer."
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    if (let num = FinAccount.clearNum(payment.bankData.thierAccount)) {
      let contraAccount = FinAccount.all.filter{a =>
        if (num.startsWith("%")) {
          a.searchNums.exists(n => n.endsWith(num.dropPrefix("%")))
        } else {
          a.searchNums.contains(num)
        }
      }.result.get.onlyOne
      if (let contraAccount) {
        make(movements, payment, contraAccount)
      }
    }
  }
  back func make(movements: [CashMovement]?, payment: Payment, contraAccount: FinAccount): CashTransfer = { 
    let ip = payment.as[IncomingPayment]
    if (let old = movements*.as[Payment]
        .filter{i => (if (ip) i.srcAccount else i.dstAccount) == contraAccount 
                && !i.reconAmount && !i.debtCounterparty
               }
        .mapOpt{p =>
          let rank = payment.bankData.sameContra(p)
          if (rank >= 1.5) (rank, payment)
        }
        .sortBy(rank.desc)
        .first?.payment
       ) {
      let tr = old.convertTo(CashTransfer)
      if (!ip) {
        tr.dateOut = payment.date.min(tr.dateIn)
        tr.from = payment.account
        tr.outgoingBankData = payment.bankData
        tr.outcome = payment.amount.as[UMoney[payment.account.currency]]
      } else {
        tr.dateIn = payment.date.max(tr.dateOut)
        tr.to = payment.account
        tr.incomingBankData = payment.bankData
        tr.income = payment.amount.as[UMoney[payment.account.currency]]
      }
      payment.delete
      tr.save
    } else {
      let tr = payment.convertTo(CashTransfer)
      if (!try? tr.from) {
        tr.from = contraAccount
      } else {
        tr.to = contraAccount
      }
      tr
    }
  }
}

object ReconEftposTransfer extends IReconRule {
  impl func title = "Transfer from Eftpos provider account"
  impl func pr = -2
  impl func backDescr = "If the bank statement format determines that it's a transfer from Eftpos provider's account, a transfer will be made from the Eftpos account"
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    if (payment.bankData.itemType == CardTransfer let contraAccount = ICardAccount.all.result.get.onlyOne) {
       ReconTransfer.make(movements, payment, contraAccount)
    }
  }
}