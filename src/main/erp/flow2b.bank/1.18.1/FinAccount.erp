extend trait FinAccount {
  back func isContraAccount(item: BankStatementItem, data: BankData): Bool = {
    data.thierAccount && number == data.thierAccount
  }
  
  back func ourContraAccount(item: BankStatementItem, data: BankData): FinAccount? = {
    FinAccount.all.find(isContraAccount(item, data)).result.get
  }
  
  back func counterparty(item: BankStatementItem, data: BankData): LegalEntity? = {
    LegalEntity.filterByName(data.thierName).filter(!our).onlyOne
      .or(origins(item, data)*.debtCounterparty.distinct.onlyOne)
      .or(LegalEntity.findNames(data.fullMemo).filter(!our).onlyOne)
  }
  
  back func origins(item: BankStatementItem, data: BankData): [HasDebtCounterparty]? = {
    Entity.findReferences(data.fullMemo)*.as[Entity with HasDebtCounterparty]
  }
  
  back func paymentMethod(item: BankStatementItem, data: BankData): PMBankAccount? = if (let a = data.thierAccount) {
    if (a.length > 3) {
      PMBankAccount.all.find(number == a).result.get
    }
  }
}