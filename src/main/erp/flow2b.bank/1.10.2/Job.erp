class StatementProcessJob extends ImportJob {
  field task: BankStatementUpload
  func import = {
    task.files.map{file =>
      let data <- file.content
      let processor = BankStatementType.all.find(_.canProcess(file, data)).alt(throw "Cannot determine statement type for $file")
      if (!processor.knowOurAccount && !task.account) throw "Please enter an account into the account field"
      let result = processor.process(file, data)
      if (let items = result.items) {
        let minDate = items*.date.min
        let maxDate = items*.date.max
        var movements: [CashMovement]? = CashMovement.all.filter(minDate - 3_day <= _.date && _.date <= maxDate + 1_day)
        var accounts: [BankAccount]? = []
        var updated = false
        let ret = items.filter(amount).mapOpt {p =>
          let accountNumber = p.accountNumber.or(result.accountNumber)
          if (let account = {
            if (let a = accountNumber) BankAccount.all.find(number == a)
            else task.account
          }) {
            if (!accounts.contains(account)) accounts = accounts + account
            let data = p.data(account)
            data.uploadState = Uploaded
            data.date = p.date
            if (let old = movements
                .filter(i => (if (p.amount < 0) i.srcAccount else i.dstAccount) == account)
                .mapOpt{payment =>
                  let rank = p.same(payment, data)
                  if (rank >= 1.5) (rank, payment)
                }
                .sortBy(rank.desc)
                .first?.payment) 
            {
              movements = movements - old
              if (if (p.amount < 0) old.srcBankData!.uploaded else old.dstBankData!.uploaded) null[CashMovement]
              else {
                updated = true
                old.uploads = old.uploads + task
                if (p.amount < 0) {
                  old.srcBankData = data
                  old.srcAmount = p.amount
                } else {
                  old.dstBankData = data
                  old.dstAmount = p.amount
                }
                if (let oldP = old.as[Payment]) {
                  oldP.date = p.date
                }
                old.save
              }
            } else {
              updated = true
              if (let contraAccount = data.ourContraAccount) {
                let tr = CashTransfer(
                  date = p.date
                  uploads = [task]
                )
                if (p.amount < 0) {
                  tr.from = account
                  tr.to = contraAccount
                  tr.outgoingBankData = data
                  tr.outcome = -p.amount!.as[Money[account.currency]]!
                  tr.income = -p.amount!.as[Money[contraAccount.currency]]!
                } else {
                  tr.from = contraAccount
                  tr.to = account
                  tr.incomingBankData = data
                  tr.outcome = p.amount!.as[Money[contraAccount.currency]]!
                  tr.income = p.amount!.as[Money[account.currency]]!
                }
                tr.save
              } else {
                let paymentMethod = data.paymentMethod
                let cp = paymentMethod?.legalEntity.or(data.counterparty)
                if (p.amount > 0) {
                  IncomingPayment(
                    date = p.date
                    uploads = [task]
                    account = account
                    bankData = data
                    amount = if (p.currency) p.amountInCurrency! else p.amount!.as[Money[account.currency]]!
                    currency = p.currency.alt(account.currency)
                    accountAmount = if (p.currency) p.amount!
                    payee = account.legalEntity, payer = cp
                  ).save
                } else {
                  OutgoingPayment(
                    date = p.date
                    uploads = [task]
                    account = account
                    bankData = data
                    amount = if (p.currency) -p.amountInCurrency! else -p.amount!.as[Money[account.currency]]!
                    currency = p.currency.alt(account.currency)
                    accountAmount = if (p.currency) -p.amount!
                    payer = account.legalEntity, payee = cp
                  ).save
                }
              }
            }
          } else if (accountNumber) {
            throw "Account '$accountNumber' not found"
          } else {
            throw "Please enter an account into the account field"
          }
        }
        
        movements.filter(minDate<= _.date && _.date <= maxDate).foreach{m =>
          if (m.srcAccount.in(accounts) && !m.srcBankData!.uploaded) {
            updated = true
            m.srcBankData!.uploadState = Missing
            m.touch
            m.save
          }
          if (m.dstAccount.in(accounts) && !m.dstBankData!.uploaded) {
            updated = true
            m.dstBankData!.uploadState = Missing
            m.touch
            m.save
          }
        }
        if (!updated) Activity.current!.comment = "No new data found"
        ret
      }
    }.allCompleted
  }
}