back object BankImporter {
  func import(account: FinAccount?, items: [BankStatementItem]?): Future[[CashMovement]?] = if (let items) {
    let minDate = items*.date.min
    let maxDate = items*.date.max
    var movements: [CashMovement]? = CashMovement.all.filter(minDate - 3_day <= _.date && _.date <= maxDate + 1_day)
    var accounts: [FinAccount]? = []
    var updated = false
    let ret = items.filter(amount).mapOpt {p =>
      if (let account = {
        if (let a = p.accountNumber) BankAccount.all.find(number == a)
        else account
      }) {
        if (!accounts.contains(account)) accounts = accounts + account
        let data = p.data(account)
        data.uploadState = Uploaded
        data.date = p.date
        if (let old = movements
            .filter(i => (if (p.amount < 0) i.srcAccount else i.dstAccount) == account)
            .mapOpt{payment =>
              let rank = p.same(payment, data)
              if (rank >= 1.5) (rank, payment)
            }
            .sortBy(rank.desc)
            .first?.payment) 
        {
          movements = movements - old
          if (if (p.amount < 0) old.srcBankData!.uploaded else old.dstBankData!.uploaded) null[CashMovement]
          else {
            updated = true
            if (p.amount < 0) {
              old.srcBankData = data
              old.srcAmount = p.amount
            } else {
              old.dstBankData = data
              old.dstAmount = p.amount
            }
            if (let oldP = old.as[Payment]) {
              oldP.date = p.date
            }
            old.save
          }
        } else {
          updated = true
          if (let contraAccount = account.ourContraAccount(p, data)) {
            if (let old = movements*.as[Payment]
                .filter{i => (if (p.amount > 0) i.srcAccount else i.dstAccount) == contraAccount 
                        && !i.reconAmount && !i.counterparty
                       }
                .mapOpt{payment =>
                  let rank = p.sameContra(payment, data)
                  if (rank >= 1.5) (rank, payment)
                }
                .sortBy(rank.desc)
                .first?.payment
               ) {
              let tr = old.toTransfer
              if (p.amount < 0) {
                tr.from = account
                tr.outgoingBankData = data
                tr.outcome = -p.amount!.as[Money[account.currency]]!
              } else {
                tr.to = account
                tr.incomingBankData = data
                tr.income = p.amount!.as[Money[account.currency]]!
              }
              tr.save
            } else {
              let tr = CashTransfer(
                date = p.date
              )
              if (p.amount < 0) {
                tr.from = account
                tr.to = contraAccount
                tr.outgoingBankData = data
                tr.outcome = -p.amount!.as[Money[account.currency]]!
                tr.income = -p.amount!.as[Money[contraAccount.currency]]!
              } else {
                tr.from = contraAccount
                tr.to = account
                tr.incomingBankData = data
                tr.outcome = p.amount!.as[Money[contraAccount.currency]]!
                tr.income = p.amount!.as[Money[account.currency]]!
              }
              tr.save
            }
          } else {
            let paymentMethod = account.paymentMethod(p, data)
            let cp = paymentMethod?.legalEntity.or(account.counterparty(p, data))
            if (p.amount > 0) {
              IncomingPayment(
                date = p.date
                account = account
                bankData = data
                amount = if (p.currency) p.amountInCurrency! else p.amount!.as[Money[account.currency]]!
                currency = p.currency.alt(account.currency)
                accountAmount = if (p.currency) p.amount!
                payee = account.legalEntity, payer = cp
              ).save
            } else {
              OutgoingPayment(
                date = p.date
                account = account
                bankData = data
                amount = if (p.currency) -p.amountInCurrency! else -p.amount!.as[Money[account.currency]]!
                currency = p.currency.alt(account.currency)
                accountAmount = if (p.currency) -p.amount!
                payer = account.legalEntity, payee = cp
              ).save
            }
          }
        }
      } else if (p.accountNumber) {
        throw "Account '$(p.accountNumber)' not found"
      } else {
        throw "Please enter an account into the account field"
      }
    }

    movements.filter(minDate<= _.date && _.date <= maxDate).foreach{m =>
      if (m.srcAccount.in(accounts) && !m.srcBankData!.uploaded) {
        updated = true
        m.srcBankData!.uploadState = Missing
        m.touch
        m.save
      }
      if (m.dstAccount.in(accounts) && !m.dstBankData!.uploaded) {
        updated = true
        m.dstBankData!.uploadState = Missing
        m.touch
        m.save
      }
    }
    if (!updated) Activity.current!.comment = "No new data found"
    ret
  }
}