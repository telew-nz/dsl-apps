trait IReconRule extends Entity {
  singular = "Reconciliation Rule"
  plural = "Reconciliation Rules"
  
  func priority: Dec[4]?
  func filter(payment: Payment): Bool
  func recon(payment: Payment): Void
  func apply(payment: Payment): Void = if (filter(payment)) recon(payment)
  
  ref field state: ReconRuleState = defaultState
  func defaultState: ReconRuleState = Active
  impl view ref = x{state title}
  report Report {
    impl view list = IReconRule.all.sortBy(priority.desc) >> nav{list {
      x{state title >> field(stretch = 1) priority >> field(fontStyle = Label)}
    }}
  }
}

enum ReconRuleState {
  case Active {background = "#8bf" icon = "spinner"}
  case Inactive {background = "#999" icon = "times-circle"}
}

extend role Accountant {
  extend view menu = extend("Finance") {
    IReconRule
  }
}

entity ReconRule extends IReconRule {
  singular = "Reconciliation Rule"
  impl field title: String
  impl ref field priority: Dec[4]?
  field descr: Text? {label = "Description"}
 
  field filters: [IReconFilter]? inline by rule
  field recon: IRecon inline by rule
  impl func filter(payment: Payment): Bool = filters.all(_.filter(payment))
  impl func recon(payment: Payment): Void = recon
  impl view form = nav{grid{
    x{state title >> field(fontStyle = H2, stretch = 1)}
    descr
    
    priority
    filters
    recon
  }}
}

trait IReconFilter extends InlineEntity {
  field rule: ReconRule by filters
  
  func filter(payment: Payment): Bool
}

trait IRecon extends InlineEntity {
  field rule: ReconRule by recon
  
  func apply(payment: Payment): Void
}