back object BankImporter {
  func import(request: ImportRequest): Future[[CashMovement]?] = if (let items = request.items) {
    let minDate = request.start.alt(Date.max).min(items*.date.min)
    let maxDate = request.end.alt(Date.min).max(items*.date.max)
    var movements: [CashMovement]? = CashMovement.all.filter(minDate - 4_day <= _.date && _.date <= maxDate + 4_day)
    var accounts: [FinAccount]? = []
    var updated = false
    let ret = items.filter(stmAmount).flatMap {p =>
      if (let account = {
        if (let a = p.accountNumber) FinAccount.withNumber(a)
        else request.account
      }) {
        if (!accounts.contains(account)) {
          accounts = accounts + account
        }
        
        let data = p.data(account)
        data.uploadState = Uploaded
        data.date = p.date
        let amount: Money = p.stmAmount!
        
        let tr = if (let old = movements
            .filter(i => !i.as[Payment]?.feeTr && (if (amount < 0) i.srcAccount else i.dstAccount) == account)
            .mapOpt{payment =>
              let rank = p.same(account, payment, data)
              if (rank >= 1.5) (rank, payment)
            }
            .sortBy(rank.desc)
            .first?.payment) 
        {
          movements = movements - old
          if (old.is[Payment] let contraAccount = account.ourContraAccount(p, data)) {
            let tr = old.convertTo(CashTransfer)
            updated = true
            if (amount < 0) {
              tr.to = contraAccount
              tr.income = (-amount).as[UMoney[account.currency]]!
              tr.srcBankData = data
              tr.srcAmount = amount
              tr.dateOut = p.date              
            } else {
              tr.from = contraAccount
              tr.outcome = amount.as[UMoney[account.currency]]!
              tr.dstBankData = data
              tr.dstAmount = amount
              tr.dateIn = p.date
            }
            tr.save
          } else if (if (amount < 0) old.srcBankData!.uploaded else old.dstBankData!.uploaded) {
            if (p.fee && p.stmAmount let op = old.fees.find(f => f.movedAmount == -p.fee)) {
              movements = movements - op
            }
            null[CashMovement]
          } else {
            updated = true
            if (amount < 0) {
              old.srcBankData = data
              old.srcAmount = amount
              old.dateOut = p.date
            } else {
              old.dstBankData = data
              old.dstAmount = amount
              old.dateIn = p.date
            }
            old.save
          }
        } else {
          updated = true
          let crtd = createMovement(movements, account, p, data)
          movements -= crtd
          crtd
        }
        if (p.itemType == BankFee) {
          if (let op = tr?.as[OutgoingPayment]) {
            op.reasons = [
              BankFees(amount = op.amount)
            ]
            [op]
          }
        } else if (p.itemType == Interest) {
          if (let ip = tr?.as[IncomingPayment]) {
            ip.reasons = [
              IncomingInterest(amount = ip.amount, withholdingTax = p.withholdingTax)
            ]
          } else if (let op = tr?.as[OutgoingPayment]) {
            op.reasons = [
              OutgoingInterest(amount = op.amount)
            ]
          }
        } else if (p.itemType == Tax) {
          if (let ip = tr?.as[IncomingPayment], let tax = p.tax) {
            ip.reasons = [
              TaxReturn(amount = ip.amount, tax = tax)
            ]
          } else if (let op = tr?.as[OutgoingPayment], let tax = p.tax) {
            op.reasons = [
              TaxPayment(amount = op.amount, tax = tax)
            ]
          }
        }
        if (let tr, let fee = p.fee) {
          if (p.stmAmount) {
            if (let op = tr.fees.find(f => f.movedAmount == -fee)) {
              movements = movements - op
              [tr, op]
            } else if (let fee = fee.positive) {
              let op = OutgoingPayment(
                date = p.date
                account = account
                currency = account.currency
                bankData = data
                amount = fee
                payer = account.legalEntity,
                feeTr = tr
              ).save
              op.reasons = [
                BankFees(amount = op.amount)
              ]
              [tr, op]
            } else {
              let fee = fee.negative!
              let ip = IncomingPayment(
                date = p.date
                account = account
                currency = account.currency
                bankData = data
                amount = fee
                payee = account.legalEntity,
                feeTr = tr
              ).save
              IPReturn(payment = ip, reasons = [
                BankFees(amount = ip.amount)
              ])
              [tr, ip]
            }
          } else {
            [tr]
          }
        } else {
          tr.toSeq
        }
      } else if (p.accountNumber) {
        throw "Account '$(p.accountNumber)' not found"
      } else {
        throw "Please enter an account into the account field"
      }
    }

    movements.filter(minDate <= _.date && _.date < maxDate).foreach{m =>
      if (request.directions.contains(PaymentDirection.Outgoing) && m.srcAccount.in(accounts)) {
        updated = true
        //if (m.srcBankData!.uploadState == Uploaded) {
        //  throw "The uploaded payment $m is missing in the statement"
        //} else {
          m.srcBankData!.uploadState = Missing
          m.touch
          m.save
        //}
      }
      if (request.directions.contains(PaymentDirection.Incoming) && m.dstAccount.in(accounts)) {
        updated = true
        //if (m.dstBankData!.uploadState == Uploaded) {
        //  throw "The uploaded payment $m is missing in the statement"
        //} else {
          m.dstBankData!.uploadState = Missing
          m.touch
          m.save
        //}
      }
    }
    if (!updated) Activity.current!.comment = "No new data found"
    
    accounts.foreach{ account =>
      if (let rp = request.period) {
        if (request.directions.contains(Incoming)) {
           account.uploadedIncoming = if (let p = account.uploadedIncoming) Period(start = rp.start.min(p.start), end = rp.end.max(p.end)) else rp
        }
        if (request.directions.contains(Outgoing)) {
           account.uploadedOutgoing = if (let p = account.uploadedOutgoing) Period(start = rp.start.min(p.start), end = rp.end.max(p.end)) else rp
        }
      }
    }    
        
    ret
  }
  
  private func createMovement(movements: [CashMovement]?, account: FinAccount, p: BankStatementItem, data: BankData): CashMovement = {
    let amount: Money = p.stmAmount!
    if (let contraAccount = account.ourContraAccount(p, data)) {
      if (let old = movements*.as[Payment]
          .filter{i => (if (amount > 0) i.srcAccount else i.dstAccount) == contraAccount 
                  && !i.reconAmount && !i.debtCounterparty
                 }
          .mapOpt{payment =>
            let rank = p.sameContra(account, payment, data)
            if (rank >= 1.5) (rank, payment)
          }
          .sortBy(rank.desc)
          .first?.payment
         ) {
        let tr = old.convertTo(CashTransfer)
        if (amount < 0) {
          tr.dateOut = p.date.min(tr.dateIn)
          tr.from = account
          tr.outgoingBankData = data
          tr.outcome = (-amount).as[UMoney[account.currency]]!
        } else {
          tr.dateIn = p.date.max(tr.dateOut)
          tr.to = account
          tr.incomingBankData = data
          tr.income = amount.as[UMoney[account.currency]]!
        }
        tr.save
      } else {
        if (amount < 0) {
          CashTransfer(
            dateOut = p.date, dateIn = p.date
            from = account
            to = contraAccount
            outgoingBankData = data
            outcome = (-amount).as[UMoney[account.currency]]!
            income = (-amount).as[UMoney[contraAccount.currency]]!
          ).save
        } else {
          CashTransfer(
            dateOut = p.date, dateIn = p.date
            from = contraAccount
            to = account
            incomingBankData = data
            outcome = amount.as[UMoney[contraAccount.currency]]!
            income = amount.as[UMoney[account.currency]]!
          ).save
        }
      }
    } else {
      let paymentMethod = account.paymentMethod(p, data)
      let cp = paymentMethod?.legalEntity.or(account.counterparty(p, data))
      let currency = p.stmCurrency.alt(account.currency)
      if (amount > 0) {
        IncomingPayment(
          date = p.date
          account = account
          bankData = data
          amount = (if (p.stmCurrency) p.amountInCurrency! else amount).as[UMoney[currency]]!
          currency = currency
          accountAmount = if (p.stmCurrency) amount.positive.as[UMoney[account.currency]]!
          payee = account.legalEntity, payer = cp, paymentMethod = paymentMethod
        ).save
      } else {
        OutgoingPayment(
          date = p.date
          account = account
          bankData = data
          amount = (if (p.stmCurrency) -p.amountInCurrency! else -amount).as[UMoney[currency]]!
          currency = currency
          accountAmount = if (p.stmCurrency) amount.negative.as[UMoney[account.currency]]!
          payer = account.legalEntity, payee = cp, paymentMethod = paymentMethod
        ).save
      }
    }
  }
}