entity RentPriceModel extends PriceModel with BondPriceModel {
  ref field date: Date[day] = now
  ref field products: [RentPriceModelProduct]? inline by model {available(All)}
  func superProductPrice(superProduct: ISuperProduct): IPrice? = products.find(product == superProduct)
     
  func rentReturnDate(delivery: RentDeliveryDesc, returnSchedule: Schedule?, duration: Duration?): Date = {
      let wholeDays: Duration[day]? = duration.days.floor(0)
      let partDay: Duration[day]? = duration.days - wholeDays
      let d = delivery.dispatchDate + wholeDays
      let rsh = returnSchedule!
      let d2 = if (partDay) {
        let dsh = delivery.schedule!
        if (dsh.workingOrPrevPeriod(delivery.dispatchDate).end.sub(delivery.dispatchDate).minutes <= 30_minute) {
          rsh.workingOrPrevPeriod(d + 1_day).start + 30_minute
        } else {
          d + partDay.hours/3
        }
      } else d
      rsh.prevWorkingDate(d2).max(delivery.dispatchDate)
  }
  
  func rentDuration(delivery: RentDeliveryDesc, assetReturn: RentDeliveryDesc): Duration? = {
    let dd = delivery.dispatchDate
    let rd = assetReturn.deliveryDate
    let dur = (rd - dd).hours
    let dsh = delivery.schedule!
    let rsh = assetReturn.schedule!
    if (dur < 24_hour) {
      insideDayDuration(dd, dsh, rd, rsh, dur)
    } else {
      let wholeDays: Duration[day]? = dur.days.floor(0)
      wholeDays.hours + insideDayDuration(dd, dsh, rd, rsh, dur - wholeDays.hours)
    }
  }
  
  func insideDayDuration(dd: Date, dsh: Schedule, rd: Date, rsh: Schedule, dur: Duration?): Duration? = {
    if (dur <= 0) 0
    else if (dur <= 4_hour) 12_hour
    else {
      if (
        dsh.workingOrPrevPeriod(dd).end.sub(dd).minutes <= 30_minute 
        && rd.sub(rsh.workingOrNextPeriod(rd).start).minutes <= 30_minute
      ) {
        12_hour
      } else 24_hour
    }
  }
   
  func bondAmount(items: [RentDeliveryItem]): Future[Money?] = {
    items.map(superProductPrice(product)?.as[RentPriceModelProduct]?.bond*itemsQty).sum
  }
  
  func title = "RPM $vendor $date"
  view form = nav{grid{
    date
    vendor
    products >> table {
      product >> field(width = 0.4) halfDayPrice >> field(width = 0.2) fullDayPrice >> field(width = 0.2) bond >> field(width = 0.2)
    }
  }}
}

inline entity RentPriceModelProduct extends IPrice {
  func superProduct: ISuperProduct = product
  field model: RentPriceModel by products
  field product: AssetRentService
  func currency = model.currency
  field halfDayPrice: Money[currency]
  field fullDayPrice: Money[currency]
  field bond: Money[currency]? = 30
  func gstRate: Percent[2]? = product.gstRate(model.vendor).alt(0)
  func salesPrice(currency: Currency, inclGst: Bool): Future[Money?] = {
    convertGst(gstRate, fullDayPrice, true, inclGst).to[Money[currency]](now)
  }
  func rentSalesAmount(currency: Currency, customer: LegalEntity?, itemsQty: Int, duration: Duration, inclGst: Bool): Future[Money?] = {
    let days = duration.days
    let pr = {
      if (days.withoutUnit < 1) halfDayPrice*2*days*itemsQty 
      else fullDayPrice*days*itemsQty
    }
    convertGst(gstRate, pr, true, inclGst).to[Money[currency]](now)
  }
  view form = grid {
    row{halfDayPrice fullDayPrice bond}
  }
}
 