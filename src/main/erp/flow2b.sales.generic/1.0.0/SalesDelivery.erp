enum DeliveryStatus(general: GeneralDeliveryStatus) {
  case Planned(general = GeneralDeliveryStatus.Planned) {
    background = "#ed9"
  }
  case Delivered(general = GeneralDeliveryStatus.Delivered)  {
    color = "white"
    background = "#090"
  }
}

entity SalesDelivery {
  ref field number: String {width = 0.15}
  ref field customer: LegalActor
  field plannedDate: DateTime = now
  field deliveryDate: DateTime?
  func date: DateTime = {
    if (status == Planned) plannedDate
    else deliveryDate!
  }
  field legalCompany: ThisLegalCompany = ThisLegalCompany.force
  field status: DeliveryStatus = (Planned) {
    update = {
      if (new == Delivered) deliveryDate = now
    }
  }
  func generalStatus = status.general


  field orders: [SalesOrderDelivery] inline by delivery
  func title = number + " " + customer
  view form = nav{grid(labels = Top){
    header
    orders
  }}
  
  view header = grid {
    number
    row{
      plannedDate
      deliveryDate >> field(visible = status == Delivered)
    }
    status >> field(label = "")
    row{customer legalCompany}
  }
  
  object view list = SalesDelivery.all >> nav{table {
    number
    status >> field(label = "Status" width = 0.3)
    customer
    legalCompany
    plannedDate
    deliveryDate
  }}
}

inline entity SalesOrderDelivery extends ISalesDelivery {
  singular = "Delivery"
  ref field salesOrder: SalesOrder
  ref field delivery: SalesDelivery inline by orders
  
  func srcActor: LegalActor = delivery.legalCompany
  func dstActor: LegalActor = delivery.customer
  func status = delivery.status
  func generalStatus = delivery.generalStatus
  func title = delivery.title
  func date = delivery.date
    
  field items: [SalesDeliveryItem] inline by orderDelivery = {
    salesOrder.orderItems.filter(qtyToDeliver > 0)
      .map(SalesDeliveryItem(product = product, qty = qtyToDeliver, amount = amount))
      ??[SalesDeliveryItem()]
  }
  view form = nav{grid{
    delivery.header
    salesOrder
    panel(collapsed = true, label = "Items", frame = false) {
      items >> table {
		product 
        qty
        price
        amount
      }
    }
  }}
  
  func deliveryItems: [IProduct: Dec[2]] = items.map(product, qty).toMap
}

inline entity SalesDeliveryItem {
  field product: IProduct
  field qty: Dec[2] {
    label = "Quantity"
    update = {if (old.isDefined) amount = amount/old!*new}
  }
  compute price: Dec[2] = (amount/qty) {
    update = {amount = qty*new}
  }
  field amount: Dec[2]

  system field orderDelivery: SalesOrderDelivery
}