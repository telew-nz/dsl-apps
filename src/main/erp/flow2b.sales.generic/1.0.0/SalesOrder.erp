entity SalesOrder extends Order[SalesOrderItem] with ISalesOrder[SalesOrderItem] {
  ref field number: String
  ref field date: DateTime = now
  ref field status: OrderStatus = InProcess
  func title = number + " " + date.date + " " + customer
  ref field customer: Actor by salesOrders
  func setCustomer(customer: Actor): Void = {
    this.customer = customer
  }
  field items: [SalesOrderItem] inline by order 
  func orderItems: [SalesOrderItem] = items 
  func payedTotal: Dec[2]? = 0
  func active: Bool = deliveryState != Delivered || paymentState != Paid
  
  field deliveries: [SalesOrderDelivery]? inline by salesOrder {
    init = {
      new.delivery.customer = customer.forceLegalActor
    }
  }
  func invoices = orderInvoices*.invoice
  field orderInvoices: [SalesOrderInvoice]? inline by order {
    label = "Invoices"
    singular = "Invoice"
    init = {
      new.invoice.customer = customer.forceLegalActor
    }
  }
  
  object view list = SalesOrder.all >> nav{list{grid(labels = None) {
    row{"#" + number, date.date, customer, orderTotal}
    row {statusesView, owner >> field(width = 0.25)}
  }}}
  
  view form = nav { grid {
    row{number, date}
    row{customer, orderTotal}
    owner
    statusesView
    formExt
    items >> table {
		product 
      	column(label = "Quantity"){
          qty
          "To deliver: " + qtyToDeliver >> field(visible = qtyToDeliver > 0 && order.deliveries.nonEmpty, style = CommerceStyle.incompleteRightAlign) 
        }
        price
        column(label = "Amount"){
          amount
          "To invoice: " + amountToInvoice >> field(visible = amountToInvoice > 0 && order.invoices.nonEmpty, style = CommerceStyle.incompleteRightAlign) 
        }
    }
    deliveries
    orderInvoices
  }}
  
  view statusesView = x {
    status >> field(visible = state != Complete)
    state >> field(visible = state == Complete)
    invoiceState >> field(visible = state != Complete)
    paymentState >> field(visible = state != Complete && invoiceState != NotInvoiced) 
    deliveryState >> field(visible = state != Complete)
  }
}


inline entity SalesOrderItem extends OrderItem[SalesOrder] {
  field product: IProduct {
    update = {amount = new.price*qty}
  }

  field order: SalesOrder
}
