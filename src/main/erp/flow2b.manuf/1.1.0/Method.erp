entity Method extends Entity with IMethod {
  object field gen: Int?
  const ref field n: Int? = increment(Method.gen)
  compute number = "MT$n"
  ref field name: String?  
  func title = "$number $mainProduct $name".trim!
  field materials: [MethodMaterial]? inline by method
  field resources: [MethodResource]? inline by method {
    singular = "Resource"
  }
  field outputs: [MethodOutput] inline by method
  
  
  view form = nav {grid {
    row {number name}
    outputs >> table{
      outputProduct >> field(width = 0.6) qty >> field(width = 0.2) costWeight  >> field(width = 0.2)
    }
    materials >> table{
      material >> field(width = 0.6) qty >> field(width = 0.2) space(width = 0.2, label = "")
    }
    resources >> table{
      resource >> field(width = 0.6) duration >> field(width = 0.2) space(width = 0.2, label = "")
    }
  }}
}

trait HasProductQty extends AnyEntity {
  func baseProduct: IBaseProduct
  
  field unit: ProductUnit {
    default =? (try? baseProduct)?.unit
    from = baseProduct.units    
  }
  field qty: Qty[unit] {
    canEditUnit
    default = 1
    label = "Quantity"  
  }
  func productUpdated() = {
    this.silentUpdate(unit, baseProduct.unit)
    this.qty = this.qty.as[Qty[this.unit]]!
  }
}

inline entity MethodMaterial extends HasProductQty with IMethodMaterial  {
  field method: Method
  field material: Material by methodMaterials {
    available(Ref).with(product.unit, product.altUnits)
    update = {
      productUpdated()
    }
  }
  func baseProduct = material.product
}

inline entity MethodOutput extends HasProductQty with IMethodOutput {
  field method: Method
  field outputProduct: OutputProduct by methodOutputs {
    label = "Product"
    available(Ref).with(product.unit, product.altUnits)
    update = {
      productUpdated()
    }
  }
  field costWeight: Dec[2] = 1
  func baseProduct = outputProduct.product
}

inline entity MethodResource extends IMethodResource {
  field method: Method
  field resource: Resource by methodResources
  field duration: Duration[DateUnit.hour]
}