extend entity IProduct {
  field outputProduct: OutputProduct? inline by product
  compute canBeProduced: Bool {
    value = outputProduct
    update = {
      outputProduct = if (new) OutputProduct()
    }
  }
  field material: Material? inline by product
  compute isMaterial: Bool {
    value = material
    update = {
      material = if (new) Material()
    }
  }
  func makeMaterial = if (let m = material) m else Material(product = this).save
  func makeOutput = if (let o = outputProduct) o else OutputProduct(product = this).save
  extend view productTabView = grid(label = "Manufacturing", labels = Top, visible = ui.edit || outputProduct || material) {
    canBeProduced
    outputProduct!.form
    isMaterial
    material!.form
  }
}

entity OutputProduct extends PseudoEntity {
  impl func mainEntity = product
  ref field product: IProduct by outputProduct {
    from = IProduct.all.filter(isTangible)
  }
  field methodOutputs: [MethodOutput]? inline by outputProduct {
    deleteCascade = false
  }
  compute methods: [Method]? {
    label = "Production Methods"
    value = methodOutputs*.method
  }
  impl view form = grid(labels = Top){
    methods
    add("Method"){
      Method(outputs = [MethodOutput(outputProduct = this)]).form.open
    }
  }  
}

entity Material extends PseudoEntity {
  impl func mainEntity = product
  ref field product: IProduct by material {
    from = IProduct.all.filter(isTangible)
  }
  field methodMaterials: [MethodMaterial]? inline by material {
    deleteCascade = false
  }
  compute methods: [Method]? {
    label = "Used in Methods"
    value = methodMaterials*.method
  }
  impl view form = grid(labels = Top){
    methods
  }  
}
