entity OneoffProductionOrder extends IProductionOrder with IMethod {
  impl func number = "PR" + n
  impl ref compute title: String = if (let n = refNum) "$number ($n) $mainProduct" else "$number $mainProduct"
  impl field materials: [OproMethodMaterial]? inline by order
  impl field resources: [OproMethodResource]? inline by order {
    singular = "Resource"
  }
  impl field outputs: [OproMethodOutput] inline by order
  func items = materials
  impl func method = this
  override func qtyK: UDec[8] = 1
  
  impl view form = nav {
    grid(width = 1.2){
      issuesView
      row{number refNum outputStockType >> field(compact)}
      x {status >> field(editMode = AlwaysEdit) availability }
      row {dispatchDate deliveryDate space}
      row {legalEntity supplier >> field(visible = ui.edit || sSupplier || sReceiver) receiver >> field(visible = ui.edit || sSupplier || sReceiver)}
      row {factory materialStore >> field(visible = ui.edit || sMaterialStore || sOutputStore) outputStore >> field(visible = ui.edit || sMaterialStore || sOutputStore)}
      outputs >> table{
        header{label("Code", width = 0.15) label("Product", width = 0.35)  label("Quantity", align = Right, width = 0.25) label("Transfer GST", width = 0.25, visible = sReceiver) label("Cost Weight", width = 0.2) }
        body {
          row{outputProduct.product.fullNum >> field (fontStyle = Label, rowSpan = 2) outputProduct >> field(title = title) qty gstEditor costWeight }
          row(visible = (try? product.trackItems!)) {grid(span = 4, width = 0.9, labels = None) {snView}}
        }
      }
      materials >> table{
        header{label("Code", width = 0.15) label("Product", width = 0.35)  label("Quantity", align = Right, width = 0.25) label("Transfer GST", width = 0.25, visible = sSupplier) label("", width = 0.2) }
        body{
          row {material.product.fullNum >> field (fontStyle = Label, rowSpan = 4) material >> field(title = title) qty gstEditor >> field(visible = sSupplier) space}
          row {y(span = 4, visible = status == Planned || !isAv){stockDesc}}
          row {y(span = 4, visible = !isAv){availableView}}
          row (visible = (try? product.trackItems!)) {y(span = 4) {snView}}
        }
      }
      resources >> table{
        resource >> field(width = 0.5, title = title) duration >> field(width = 0.25) space(width = 0.45, label = "")
      }
    }
    generalLedgerButton
  }
  impl view ref = x{status >> field(editMode = AlwaysEdit) availability title}
}

inline entity OproMethodMaterial extends IProdAmountQtyItem with IProdMoveItemOut with IMethodMaterial with FProductItems {
  impl func moveItemActive = order.status != Canceled
  impl func prodMoveOut = order
  impl func moveOutStockType = Inventory
  
  field order: OneoffProductionOrder
  impl field material: Material {
    available(Ref).with(product.unit, product.altUnits)
    update = {
      productUpdated()
    }
  }
  impl func product = material.product
  impl func updateGstRate(): Void = {
    gstRate = product.gstRate(order.supplier.legalEntity)
  }
}

inline entity OproMethodOutput extends IProdAmountQtyItem with IProdMoveItemIn with IMethodOutput with FProductItemsInline {
  impl func moveItemActive = order.status != Canceled
  impl func prodMoveIn = order
  impl func moveInStockType = order.outputStockType.stock
  
  field order: OneoffProductionOrder
  impl field outputProduct: OutputProduct {
    label = "Product"
    available(Ref).with(product.unit, product.altUnits)
    update = {
      productUpdated()
    }
  }
  impl field costWeight: Dec[2] = 1
  impl func product = outputProduct.product
  impl func updateGstRate(): Void = {
    gstRate = product.gstRate(order.legalEntity.legalEntity)
  }
}

inline entity OproMethodResource extends IMethodResource {
  field order: OneoffProductionOrder
  impl field resource: Resource
  impl field duration: UDuration[DateUnit.hour]
}