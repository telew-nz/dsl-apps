entity OneoffProductionOrder extends IProductionOrder with IMethod {
  func number = "OPRO" + n
  func title: String = "$number $mainProduct"
  field materials: [OproMethodMaterial]? inline by order
  field resources: [OproMethodResource]? inline by order {
    singular = "Resource"
  }
  field outputs: [OproMethodOutput] inline by order
  func items = materials
  func method = this
  func qtyK: Dec[8] = 1
  
  view form = nav {
    grid{
      issuesView
      row{number legalEntity space}
      x {status >> field(editMode = AlwaysEdit) availability}
      row {dispatchDate deliveryDate space}
      row {factory space space}
      outputs >> table{
        outputProduct >> field(width = 0.5, rowSpan = 3) qty >> field(width = 0.25) costWeight  >> field(width = 0.25)
      }
      materials >> table{
        header{label("Product", width = 0.5)  label("Quantity", align = Right, width = 0.25) label("", width = 0.25) }
        body{
          row {material >> field(rowSpan = 3) qty space}
          row {y(span = 2, visible = status == Planned || !isAvailableNow){stockDesc}}
          row {y(span = 2, visible = !isAvailableNow){availableView}}
        }
      }
      resources >> table{
        resource >> field(width = 0.5) duration >> field(width = 0.25) space(width = 0.25, label = "")
      }
    }
    generalLedgerButton
  }
  view ref = x{status >> field(editMode = AlwaysEdit) availability title}
}

inline entity OproMethodMaterial extends HasProductQty with IOutgoingDeliveryItem with IMethodMaterial {
  field order: OneoffProductionOrder
  field material: Material {
    available(Ref).with(product.unit, product.altUnits)
    update = {
      productUpdated()
    }
  }
  func baseProduct = material.product
  func itemDelivery = order
  func active = order.status != Canceled
  func product = material.product
}

inline entity OproMethodOutput extends HasProductQty with IIIncomingDeliveryItem with IMethodOutput {
  field order: OneoffProductionOrder
  field outputProduct: OutputProduct {
    label = "Product"
    available(Ref).with(product.unit, product.altUnits)
    update = {
      productUpdated()
    }
  }
  field costWeight: Dec[2] = 1
  func baseProduct = outputProduct.product
  func itemDelivery = order
  func active = order.status != Canceled
  func product = outputProduct.product
}

inline entity OproMethodResource extends IMethodResource {
  field order: OneoffProductionOrder
  field resource: Resource
  field duration: Duration[DateUnit.hour]
}