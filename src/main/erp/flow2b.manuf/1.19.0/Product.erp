extend entity IProductInv {
  field outputProduct: OutputProduct? inline by product
  field material: Material? inline by product
  func makeMaterial = if (let m = material) m else Material(product = this).save
  func makeOutput = if (let o = outputProduct) o else OutputProduct(product = this).save
  extend view productTabView = grid(label = "Manufacturing", labels = Top, visible = ui.edit || outputProduct || material) {
    outputProduct
    material
  }
}

entity OutputProduct extends PseudoEntity {
  impl func mainEntity = product
  ref field product: IProductInv by outputProduct {
    from = IProductInv.all.filter(isTangible)
  }
  field methodOutputs: [MethodOutput]? inline by outputProduct {
    deleteCascade = false
  }
  compute methods: [Method]? {
    label = "Production Methods"
    value = methodOutputs*.method
  }
  impl view form = grid(labels = Top){
    methods >> field(editMode = AlwaysRead)
    add("Method"){
      Method(outputs = [MethodOutput(outputProduct = this, unit = product.unit)]).form.open
    }
  }  
}

entity Material extends PseudoEntity {
  impl func mainEntity = product
  ref field product: IProductInv by material {
    from = IProductInv.all.filter(isTangible)
  }
  field methodMaterials: [MethodMaterial]? inline by material {
    deleteCascade = false
  }
  compute methods: [Method]? {
    label = "Used in Methods"
    value = methodMaterials*.method
  }
  impl view form = grid(labels = Top){
    methods >> field(editMode = AlwaysRead)
    add("Method") {
      Method.incomplete(materials = [MethodMaterial(material = this, unit = product.unit)]).form.open
    }
  }  
}
