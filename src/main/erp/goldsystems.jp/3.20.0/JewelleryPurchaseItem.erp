inline entity JewelleryDeliveryItem extends IDlvProductItem {
  impl func moveOutStockType = Inventory
  impl func moveInStockType = Inventory
  
  
  field jewelleryProduct: QuantityJewelleryProduct {
    available(Ref).with(conditions)
    label = "Product"
    update = {
      selectProduct(try? condition)
    }
  }
  compute condition: ProdCondition {
    value = product.condition
    update = {
      selectProduct(new)
    }
  }
  impl func productItems = []
  impl field product: JewelleryProductCondition inline {
    update = {
      let _ <- if (let p = purchase) p.updateAmount()
      jewelleryProduct = new.superProduct
    }
  }
  func selectProduct(condition: ProdCondition?): Void = {
    if (let p = try? jewelleryProduct, let c = condition) {
      product = p.variations.find(_.condition == c).alt(JewelleryProductCondition(superProduct = p, condition = c))
    } else clear(product)
  }
  impl func unit: ProductUnit = Item
  impl field qty: UQty[ProductUnit.Item] {
    default = 1
    label = "Quantity"  
    update = {
      if (old) {
        if (let p = purchase) p.sAmount = p.sAmount*(new.as[UDec[12]]/old!)
        updateAmount()
      }
    }
  }
  impl func needsRevision: Bool = updated(product) || updated(qty)
  impl func sameAsPrev(prev: IDlvProductItem): Bool = {
    let p = prev.as[JewelleryDeliveryItem]!
    p.product == product && p.qty == qty
  }
  func itemDelivery = delivery
  
  impl func sales: SalesItem? = null
  impl field purchase: JewelleryPurchaseItem? inline by deliveryItem 
  func clearSales: Void = {}
  func clearPurchase: Void = purchase = null
  
  impl view form = grid(width = 1.2, margin = TopBottom) {
    row{jewelleryProduct >> field (width = 0.8) qty >> field(width = 0.4)}
    row{condition product.target product.resaleMultiplier}
  }
  
  impl view rowView = row{
    jewelleryProduct.fullNum >> field (fontStyle = Label)
    jewelleryProduct >> field (title = title, span = 2)
    qty 
  }
}

inline entity JewelleryPurchaseItem extends IPurchaseProductItem{
  singular = "Quantity Jewellery"
  impl field deliveryItem: JewelleryDeliveryItem inline by purchase
  field spotPriceLevel: Percent? {
    default = 0.5
    update = {
      updateAmount()
    }
  }
  compute spotPrice: Future[Money[order.currency]?] = {
    if (let c = try? deliveryItem.jewelleryProduct.metalCost) c.to[Money[order.currency]](order.date)
    else 0
  }
  func updateAmount(): Future[Void] = {
    let sp <- spotPrice
    sAmount = (sp*spotPriceLevel).positive
  }

  impl view form = grid(width = 1.2, margin = None) {
    deliveryItem.form
    row {spotPriceLevel priceEditor amountEditor}
    read {
      space(width = 0.95) 
      discountEditor >> field(width = 0.25)
    }
    deliveryItem.delivery >> field(visible = this.order.deliveries.count > 1)
    edit {
      panel(collapsed = !discount, label = "More", frame = false, margin = None) {
        grid(width = 1.2, margin = Bottom) {
          row{gstEditor >> field(width = 0.2) discountEditor >> field(width = 0.25) space(width = 0.75)}
        }
      }
    }
  }
  
  impl view rowView = group {
    row{
      deliveryItem.product.fullNum >> field (fontStyle = Label, rowSpan = 2)
      deliveryItem.product >> field(rowSpan = 2, span = 2)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor 
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
}
