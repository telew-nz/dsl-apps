entity OneoffJewelleryProduct 
  extends IBasicProduct with JewellerySuperProduct with JewelleryProduct  
{
  func ecwidEnabled(integration: IEcwidIntegration): Bool = false 
  field condition: Condition
  view form = nav{grid(width = 1.2, margin = TopBottom) {
      photos >> field(height = 8, label = "")
      sku
      row {metalType >> field(width = 0.4) productForm >> field(width = 0.8)}
      row {size >> field(canEditUnit = true) totalWeight totalWeightOz}
      edit{puritySelection}
      row {purity pureWeight pureWeightOz}
      condition
      row {target resaleMultiplier manufacturer}
      pricesView >> field(label = "Prices")
    }
    movementsButton
  }
  
  func puteWeightUpdated(): Future[Void] = {
    if (!id) if (let p = purchaseItem?.purchase) p.updateAmount()
  }
  func description: Text? = ""
  func items: [IProductItem]? = []

  func forceGstRate(vendor: Actor?): Percent[2]?? = if (vendor && vendor!.forceHasGst) {
    getGstRate.or(vendor!.defaultGstRate.rate)
  }
  view traitItem = grid(labels = None) {
    x{h3("Oneoff Jewellery:") title}
  }
  field purchaseItem: OneoffDeliveryItem? inline by product
  func weightInGrams = totalWeight
  func isTangible = true
  func unit = Item
  func isValid = true
  func obsolete = false
  func alwaysAvailable = false
  func productItems = []
  ref compute title: String = {
    "$sku $productForm $metalType $purity $totalWeight $manufacturer $(target.short)"
  }
}

enum Target(short: String) {
  case Resale(short = "R")
  case Liquidation(short = "L")
}