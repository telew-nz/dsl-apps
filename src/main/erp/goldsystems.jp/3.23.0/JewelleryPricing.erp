entity JewelleryPricing extends IDynamicPriceModel with ScheduledJob {
  background = "#bf9f00"
  impl func title = "JP $vendor"
  ref impl field start: Date = now
  impl field end: Date?
  
  impl func schedule = "0 41 */1 * * ?"
  func contains(product: IBaseProduct): Bool = {
    product.is[JewelleryProduct]
  }

  impl func price(level: IPriceLevel, type: PriceType, product: IBaseProduct) = {
    if (type == Sales let p = product.as[JewelleryProduct]) {
      JewelleryPrice(model = this, product = p)
    }
  }
  
  impl view form = nav{grid{
    row {start end}
    vendor
  }}
}

class JewelleryPrice extends IPriceSales {
  impl field model: JewelleryPricing
  impl field product: JewelleryProduct
  func superProduct: JewellerySuperProduct = product.superProduct.as[JewellerySuperProduct]!
  impl func salesPrice(request: PriceRequest): Future[SalesPrice] = {
    let spotPrice <- superProduct.metalCost.to[UMoney[request.currency]](now)
    let price = (spotPrice * product.resaleMultiplier).positive
    SalesPrice(current = price, regular = price).convertGst(gstRate, false, request.inclGst)
  }
  impl func levels = model.levels
}
