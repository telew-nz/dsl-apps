inline entity OneoffPurchaseItem extends IPurchaseProductItem {
  singular = "Oneoff Jewellery"
  field deliveryItem: OneoffDeliveryItem inline by purchase
  compute spotPrice: Future[Money[order.currency]?] = {
    if (let c = try? deliveryItem.product.metalCost) c.to[Money[order.currency]](order.date)
    else 0
  }
  field spotPriceLevel: Percent? {
    default = 0.5
    update = {
      updateAmount()
    }
  }
  func updateAmount(): Future[Void] = {
    let sp <- spotPrice
    sAmount = sp*spotPriceLevel
  }
  view form = grid(width = 1.2, margin = None) {
    read {
      deliveryItem.product >> field(title = title)
    }
    edit {
      deliveryItem.product.mainView
    }
    row {spotPriceLevel priceEditor amountEditor}
    read {
      space(width = 0.95) 
      discountEditor >> field(width = 0.25)
    }
    deliveryItem.delivery >> field(visible = this.order.deliveries.count > 1)
    edit {
      panel(collapsed = !discount, label = "More", frame = false, margin = None) {
        grid(width = 1.2, margin = Bottom) {
          row{gstEditor >> field(width = 0.2) discountEditor >> field(width = 0.25) space(width = 0.75)}
        }
      }
    }
  } 

  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2, title = title)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor 
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
}
 
inline entity OneoffDeliveryItem extends IDeliveryProductItem with IIncomingDeliveryItem  {
  field purchase: OneoffPurchaseItem? inline by deliveryItem
  field product: OneoffJewelleryProduct inline by purchaseItem {
    deleteCascade = false
  }
  func productItems = []
  
  func needsRevision: Bool = false
  func qty: Qty[unit] = 1
  func unit: ProductUnit = Item
  func sales: ISalesItem? = null
  view form = grid(labels = None, width = 1.2, margin = TopBottom) {
    row{product >> field(rowSpan = 2, title = title), qty}
  }
}
