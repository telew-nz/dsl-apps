inline entity JewelleryDeliveryItem extends IDeliveryProductItem  with IIncomingDeliveryItem  {
  field jewelleryProduct: QuantityJewelleryProduct {
    available(Ref).with(conditions)
    label = "Product"
    update = {
      selectProduct(try? condition)
    }
  }
  compute condition: JewelleryCondition {
    value = product.condition
    update = {
      selectProduct(new)
    }
  }
  func productItems = []
  field product: JewelleryProductCondition inline {
    update = {
      let _ <- if (let p = purchase) p.updateAmount()
      jewelleryProduct = new.product
    }
  }
  func selectProduct(condition: JewelleryCondition?): Void = {
    if (let p = try? jewelleryProduct, let c = condition) {
      product = p.conditions.find(_.condition == c).alt(JewelleryProductCondition(product = p, condition = c))
    } else clear(product)
  }
  func unit: ProductUnit = Item
  field qty: Qty[ProductUnit.Item] {
    default = 1
    label = "Quantity"  
    update = {
      if (old) {
        if (let p = purchase) p.sAmount = p.sAmount*(new.as[Dec[12]]/old!)
        updateAmount()
      }
    }
  }
  func needsRevision: Bool = updated(product) || updated(qty)
  func itemDelivery = delivery
  
  func sales: SalesItem? = null
  field purchase: JewelleryPurchaseItem? inline by deliveryItem 
  func clearSales: Void = {}
  func clearPurchase: Void = purchase = null
  
  view form = grid(width = 1.2, margin = TopBottom) {
    row{jewelleryProduct >> field (width = 0.8) qty >> field(width = 0.4)}
    row{condition product.target product.resaleMultiplier}
  }
}

inline entity JewelleryPurchaseItem extends IPurchaseProductItem{
  singular = "Quantity Jewellery"
  field deliveryItem: JewelleryDeliveryItem inline by purchase
  field spotPriceLevel: Percent? {
    default = 0.5
    update = {
      updateAmount()
    }
  }
  compute spotPrice: Future[Money[order.currency]?] = {
    if (let c = try? deliveryItem.jewelleryProduct.metalCost) c.to[Money[order.currency]](order.date)
    else 0
  }
  func updateAmount(): Future[Void] = {
    let sp <- spotPrice
    sAmount = sp*spotPriceLevel
  }

  view form = grid(width = 1.2, margin = None) {
    deliveryItem.form
    row {spotPriceLevel priceEditor amountEditor}
    read {
      space(width = 0.95) 
      discountEditor >> field(width = 0.25)
    }
    deliveryItem.delivery >> field(visible = this.order.deliveries.count > 1)
    edit {
      panel(collapsed = !discount, label = "More", frame = false, margin = None) {
        grid(width = 1.2, margin = Bottom) {
          row{gstEditor >> field(width = 0.2) discountEditor >> field(width = 0.25) space(width = 0.75)}
        }
      }
    }
  }
  
  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor 
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
}
