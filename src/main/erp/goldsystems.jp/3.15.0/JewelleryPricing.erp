entity JewelleryPricing extends IDynamicPriceModel {
  background = "#bf9f00"
  func title = "JP $vendor"
  func contains(product: IBaseProduct): Bool = {
    product.is[JewelleryProduct]
  }

  func price(product: IBaseProduct): IPrice? = {
    if (let p = product.as[JewelleryProduct]) {
      JewelleryPrice(model = this, product = p)
    }
  }
  
  view form = nav{grid{
    vendor
  }}
}

class JewelleryPrice extends IPrice {
  field model: JewelleryPricing
  func vendor = model.vendor
  field product: JewelleryProduct
  func superProduct: JewellerySuperProduct = product.superProduct.as[JewellerySuperProduct]!
  compute gstRate: UPercent[2]? = product.gstRate(model.vendor).alt(0)
  func salesPrice(currency: Currency, inclGst: Bool): Future[SalesPrice] = {
    let spotPrice <- superProduct.metalCost.to[Money[currency]](now)
    let price = spotPrice * product.resaleMultiplier
    SalesPrice(current = price, regular = price).convertGst(gstRate, false, inclGst)
  }
  view form = salesPrice
}
