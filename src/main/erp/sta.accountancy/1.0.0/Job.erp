entity Job extends Todo {
  list compute client: Client? = legalActor.actor.client
  ref field legalActor: LegalActor
  ref field jobType: JobType {
    update = {frequency = new.defaultFrequency}
  }
  system field prev: Job? by next
  system field next: Job? by prev
  field accountant: Person?  {
    from = Person.all.filter(is(Accountant))
    update = {
      if (status != CompletedForReview) owner = new
    }
  }
  field owner: Person?
  field frequency: Frequency? {width = 0.2, visible = jobType.group != Registration}
  ref field status: JobStatus = (ToDo) {
    update = {
      if (new == CompletedForReview) owner = accountant?.accountantGroup?.reviewer
      else owner = accountant
    }
  }
  ref field progress: Progress = (P0) {visible = status == InProgress || status == Waiting }
  ref field dueDate: Date
  ref field extensionDate: Date? {
    visible = jobType.group == Tax
  }
  compute overdueState: OverdueState = (if (status.active && dueDate < now) Overdue else NoOverdue) {
    visible = status.active && finalDueDate < now 
  }
  compute finalDueDate = extensionDate.alt(dueDate)
  func active = status.active
  func hasUncreatedNext: Bool = !next && frequency && status != Canceled
  func createNext: Job = Job(this, prev = this, dueDate = frequency!.next(dueDate), status = ToDo, progress = P0)
    
  func title = legalActor.title + " " + jobType + " " + dueDate
  view form = nav{grid{
    client
    legalActor
    jobType
    frequency
    row{dueDate, extensionDate}
    x(label = "Status"){status, overdueState}
    progress
    accountant
    owner
  }}
  object view list = Job.all
    .streams(if(hasUncreatedNext) createNext else null)
    .weaveBy(dueDate) >> 
  nav{
    table(action = {
        if (!next?.id) next = null
        form.open
    }) {
      x(label = "Status", width = 0.4){status progress overdueState} 
      jobType client legalActor owner dueDate extensionDate frequency
    }
  }
  
  view ref = x{
    status progress overdueState title
  }
}


enum OverdueState {
  case NoOverdue {background = "#dea"}
  case Overdue {background = "#f99"}
}
      
enum JobStatus(active: Bool) {
  case ToDo(active = true) {
    background = "#ccf"
  }
  case InProgress(active = true) {
    background = "#8bf"
  }
  case Waiting(active = true) {
    background = "#ecd"
  }
  case CompletedForReview(active = true) {
    background = "#dea"
  }
  case CompletedForApproval(active = true) {
    background = "#dea"
  }
  case ReadyForFiling(active = true) {
    background = "#dea"
  }
  case Done(active = false) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false) {
    background = "#999"
  }
}

