extend entity Actor {
  ref compute clientAccountant: Person? = accountant.or(top.accountant)
  field accountant: Person?  {
    from = Person.all.filter(is(Accountant))
  }
  compute incompleteJobs = Job.all
    .filter(j => legalEntities.contains(j.legalEntity))
    .map(j => if (!j.active && j.hasUncreatedNext) j.createNext else j)
    .filter(active)
}

extend trait LegalEntity {
  ref field irdNumber: String?
  field jobs: [Job]? read by legalEntity {views = []}
  view ref = y{title irdNumber >> field(css = "font-size: 70%; padding-bottom: 0.2em")}
}

extend entity Person {
  extend view form = group {
    irdNumber
    accountant
    incompleteJobs
  }
  view traitItem = grid(labels = None) {title}
}

extend entity CompanyGroup {
  extend view form = group {
    accountant
    incompleteJobs
  }
}


report Client {
  view list = LegalEntity.all.filter(jobs)*.top2.distinct >> nav{list{grid(labels = None){
    title
  }}}
}

extend trait LegalEntity {
  func top2: Actor = group?.as[Actor].alt(this)
}