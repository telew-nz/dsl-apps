back class UploadShippingClassesJob extends SystemJob {
  impl field service: WooCommerceIntegration
  field change: BatchChange[ShippingClass] 
  impl func dependsOnRegisters = false
  impl func do: Future[Any] = {
    change.regroup(service)
    let u = BatchShippingClassUpdate(
      create = change.created.map(ShippingClassData.create(service, _)),
      update = change.updated.map(ShippingClassData.create(service, _)),
      delete = change.deleted*.extId(service)
    )
    let response <- service.https("/products/shipping_classes/batch").post(u.json)
    let r = response.body!.parseJson[BatchShippingClassResponse]
    change.updateExtIds(service, r.create.map(id))
    change.updateExtCodes(service, r.create.map(slug), r.update.map(slug))
    r.check(this, u, change, process = false)  
  }
}

back class DownloadShippingClassesJob extends SystemJob {
  impl field service: WooCommerceIntegration
  impl func dependsOnRegisters = false
  impl func do: Future[Any] = {
    let response <- service.https("/products/shipping_classes").get
    response.body!.parseJson[[ShippingClassData]?]*.make(service)
  }
}
 
 
back class BatchShippingClassUpdate {
  field create: [ShippingClassData]?
  field update: [ShippingClassData]?
  field delete: [Int]?
}

back class BatchShippingClassResponse extends WooResponse[ShippingClassData] {
  impl field create: [ShippingClassData]?
  impl field update: [ShippingClassData]?
  impl field delete: [ShippingClassData]?
}

back class ShippingClassData extends WooData with EShippingClass[Int] {
  extFieldNaming = Underscore
  field id: Int?
  field name: String
  field slug: String?
  impl field description: Text?
  
  impl func extId = id!
  impl func title = name
  
  object func create(service: WooCommerceIntegration, u: ShippingClass): ShippingClassData = {
    ShippingClassData(
      id = service.extId(u), name = u.name, description = u.description)
  }
  
  override func make(service: ExtIdSource[Int]): ShippingClass = {
    let scl = super.make(service)
    scl.updateExtCode(service, slug)
    scl
  }
}
