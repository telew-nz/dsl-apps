back class UploadProductsJob extends SystemJob {
  field service: WooCommerceIntegration
  field change: BatchChange[ProductUpdate[ICustomerSuperProduct]] 
  func do: Future[Any] = {
    let u = BatchProductUpdate(
      create = change.created.map(ProductData.create(service, _)),
      update = change.updated.map(ProductData.create(service, _)),
      delete = change.deleted*.product*.extId(service)
    )
    let response <- service.https("/products/batch").post(u.json)
    let r = response.body!.parseJson[BatchProductResponse]
    change.updateExtIds(service, r.create.map(id))
    change.updateExtUrls(service, r.create.map(permalink), r.update.map(permalink))
    u.create*.images.zip(r.create*.images, left.file?.updateExtId(service, right.id))
    u.update*.images.zip(r.update*.images, left.file?.updateExtId(service, right.id))
    u.create*.images.zip(r.create*.images, left.file?.updateExtUrl(service, right.src))
    u.update*.images.zip(r.update*.images, left.file?.updateExtUrl(service, right.src))
    r.check(u)
    service.productsUploaded(change)
  }
}
 
back class BatchProductUpdate {
  field create: [ProductData]?
  field update: [ProductData]?
  field delete: [Int]?
}

back class BatchProductResponse extends WooResponse[ProductData2] {
  field create: [ProductData2]?
  field update: [ProductData2]?
  field delete: [ProductData2]?
}
 
back class ProductData extends WooData {
  extFieldNaming = Underscore
  field id: Int?
  field name: String
  field type: String
  field shortDescription: Text?
  field description: Text?
  field sku: String
  field regularPrice: String? 
  field salePrice: String? 
  field stockQuantity: Int?
  field inStock: Bool
  field manageStock: Bool
  field catalogVisibility: String = "visible"
  field images: [WooImage]? {extRequired}
  field categories: [WooProductCategory]? {extRequired}
  field brands: [Int]? {extRequired}
  field attributes: [WooProductAttr]? {extRequired}
  field defaultAttributes: [WooProductAttrValue]? {extRequired}
  
  object func create(service: WooCommerceIntegration, u: ProductUpdate[ICustomerSuperProduct]): ProductData = {
    let p = u.product
    var pos: Int? = -1
    var apos: Int? = -1
    let attrOptions = p.attrOptions
    ProductData(
      id = service.extId(u.product), name = p.title, 
      description = p.description, shortDescription = p.shortDescription, sku = p.sku,
      type = if (p.is[ICustomerProduct]) "simple" else "variable",
      regularPrice = u.price.regular, salePrice = u.price.current, 
      stockQuantity = u.stock, manageStock = p.status != AlwaysAvailableForSale, inStock = u.stock > 0 || p.status == AlwaysAvailableForSale,
      images = p.collectPhotos.map{f => 
        pos = pos + 1
        WooImage.create(service, f, pos)
      },
      catalogVisibility = if (u.enabled) "visible" else "hidden",
      categories = p.superProduct.categories.mapOpt(service.extId(_)).map(cid => WooProductCategory(id = cid)),
      brands = p.superProduct.brands.mapOpt(service.extId(_)),
      attributes = p.attrOptions.map{
        apos = apos + 1
        let attrId = attr.extId(service)!
        WooProductAttr(id = attrId, name = attr.attrName, position = apos, options = _.options*.as[Entity]*.title, variation = true)
      },
      defaultAttributes = p.customerProducts.first?.wooAttrValues(service)
    )
  }
}
back class ProductData2 extends WooData {
  extFieldNaming = Underscore
  field id: Int?
  
  field name: String
  field type: String
  field permalink: Url?
  field description: Text?
  field sku: String
  field regularPrice: String? 
  field salePrice: String? 
  field stockQuantity: Int?
  field manageStock: Bool
  field catalogVisibility: String
  field images: [WooImage]? {extRequired}
  field categories: [WooProductCategory]? {extRequired}
  field brands: [BrandData2]? {extRequired}
  field attributes: [WooProductAttr]? {extRequired}
  field defaultAttributes: [WooProductAttrValue]? {extRequired}
}