back class UploadAttrTermsJob extends SystemJob {
  impl field service: WooCommerceIntegration
  system field attr: IProductAttr
  field change: BatchChange[IProductAttrTerm]
  field repeatCnt: UInt? = 0
  const field repeatLimit: UInt = 5
  const field repeatDelay: UDuration = 10.as[UDuration[second]]
  impl func do: Future[Any] = {
    change.regroup(service)
    change.all.foreach(_.syncStatus = Syncing)
    let u = BatchAttrTermUpdate(
      create = change.created.map(AttrTermData.create(service, _)),
      update = change.updated.map(AttrTermData.create(service, _)),
      delete = change.deleted*.extId(service)
    )
    guard (let attrExtId = attr.extId(service)) else return {
    	if (repeatCnt >= repeatLimit)
    		throw "External id is empty for attribute $(attr)"
        else
        	UploadAttrTermsJob(
            	service = this.service,
                attr = this.attr,
                change = this.change,
                repeatCnt = this.repeatCnt + 1
            ).enqueue(repeatDelay)
    }
    
    let response <- service.https("/products/attributes/$(attrExtId)/terms/batch").post(u.json)
    let r = response.body!.parseJson[BatchAttrTermResponse]
    change.updateExtIds(service, r.create.map(id))
    change.all.foreach(_.syncStatus = Synced)
    r.check(this, u, change) {
      if (code == "invalid_taxonomy") {
        service.findExtId(data.id, item)!.deleteExtItem(service)
        UploadAttrTermsJob(service = service, attr = attr, change = BatchChange.create(service, [item])).enqueueFirst
        true
      } else if (code == "term_exists") {
        RetrieveTermId(service = service, attr = attr, term = item).enqueueFirst
        true
      } else {
        false
      }
    }
  }
}

back class RetrieveTermId extends SystemJob {
  impl field service: WooCommerceIntegration
  field attr: IProductAttr inline
  field term: IProductAttrTerm
  
  impl func do = {
    let response <- service.https("/products/attributes/$(attr.extId(service))/terms").param("search", term.title).get
    let items = response.body!.parseJson[[AttrTermData]?]
    let item = items.find(i => i.name =%= term.title).alt(throw "Cannot find term $term for attribute $attr")
    if (item.id == term.extId(service)) {
      throw "Same id $(item.id) for term $(term)"
    }
    term.updateExtId(service, item.id!)
    UploadAttrTermsJob(service = service, attr = attr, change = BatchChange.create(service, [term])).enqueueFirst
    term.save
  }
}


back class BatchAttrTermUpdate {
  field create: [AttrTermData]?
  field update: [AttrTermData]?
  field delete: [Int]?
}

back class BatchAttrTermResponse extends WooResponse[AttrTermData] {
  impl field create: [AttrTermData]?
  impl field update: [AttrTermData]?
  impl field delete: [AttrTermData]?
}
back class AttrTermData extends WooData {
  extFieldNaming = Underscore
  field id: Int?
  field name: String
  //field color: String?
  
  object func create(service: WooCommerceIntegration, u: IProductAttrTerm): AttrTermData = {
    AttrTermData(
      id = service.extId(u), name = u.title//, color = u.as[ColorItem]?.color
    )
  }
}