back class UploadVariationsJob extends SystemJob {
  impl field service: WooCommerceIntegration
  field superProduct: ISuperProduct
  field change: BatchChange[ProductUpdate[ISubVariation]] 
  impl func do: Future[Any] = {
    change.regroup(service)
    if (let pid = superProduct.extId(service)) {
      let u = BatchVariationUpdate(
        create = change.created.map(VariationData.create(service, _)),
        update = change.updated.map(VariationData.create(service, _)),
        delete = change.deleted*.product*.extId(service)
      )
      let response <- service.https("/products/$pid/variations/batch").post(u.json)
      let r = if (response.body!.toString == "[]") BatchVariationResponse() else response.body!.parseJson[BatchVariationResponse]
      change.updateExtIds(service, r.create.map(id))
      change.updateExtUrls(service, r.create.map(permalink), r.update.map(permalink))
      r.check(this, u, change){
        if (code == "product_invalid_sku") {
          RetrieveVariationId(service = service, variation = item.product).enqueueFirst
          true
        } else if (code == "woocommerce_rest_product_variation_invalid_id") {
          service.findExtId(data.id, item.product)!.deleteExtItem(service)
          item.product.superProduct.superUpdateECommerce(service)
          true
        } else if (code == "woocommerce_product_invalid_image_id") {
          if (
            repeatCount > 2 
            let i = try? data.errorString.trim("#" .. " ").toUNum!
            let img = item.product.collectPhotos.find(_.extId(service) == i)
          ) {
            img.deleteExtItem(service)
            item.product.superProduct.superUpdateECommerce(service)
            true
          } else {
            let d: Duration = 10_second
            throw RepeatJob(times = 5, on = Date.now + d*repeatCount, reason = data.errorString)
          }
        } else {
          false
        }
      }
      (u.create + u.update).zip(r.create + r.update).map{
        if (let left = left.image, let right = right.image) {
          if (right.id == 1) {
            service.postError("$(this.toString):\nImage with id 1. Request:\n$(u.json)\nResponse:\n$(response.body!)")
          } else {
            left.updateExtId(service, right)
          }
        }
      }
     
      service.variationsUploaded(change)
    } else {
      change.deleteAllExtItems(service)
    }
  }
}

back class RetrieveVariationId extends SystemJob {
  impl field service: WooCommerceIntegration
  field variation: ISubVariation
  
  impl func do = {
    let sp = variation.superProduct
    if (let pid = sp.extId(service)) {
      let response <- service.https("/products/$pid/variations").param("sku", variation.sku).get
      let items = response.body!.parseJson[[VariationData2]?]
      let item = items.find(i => i.sku == variation.sku).alt(throw "Cannot find sku ${variation.sku} for $variation")
      if (item.id == variation.extId(service)) {
        throw "Same id $(item.id) for sku $(variation.sku)"
      }
      variation.updateExtId(service, item.id!)
      variation.updateExtUrl(service, item.permalink!)
      variation.updateECommerce(service)
      variation.save
    }
  }
}
 
back class BatchVariationUpdate {
  field create: [VariationData]?
  field update: [VariationData]?
  field delete: [Int]?
}

back class BatchVariationResponse extends WooResponse[VariationData2] {
  impl field create: [VariationData2]?
  impl field update: [VariationData2]?
  impl field delete: [VariationData2]?
}
back class VariationData extends WooData {
  extFieldNaming = Underscore
  field id: Int?
  field sku: String
  field regularPrice: String? {extRequired}
  field permalink: Url?
  field salePrice: String? {extRequired}
  field stockQuantity: Int?
  field manageStock: Bool
  field inStock: Bool
  field visible: Bool
  field menuOrder: Int? {extRequired}
  field image: WooImage? {extRequired}
  field attributes: [WooProductAttrValue]? {extRequired}
 
  object func create(service: WooCommerceIntegration, u: ProductUpdate[ISubVariation]): VariationData = {
    let p = u.product
    VariationData(
      id = service.extId(u.product), sku = p.sku,
      regularPrice = if (let p = u.price) p.regular.noUnit.unformattedString, 
      salePrice = if (let p = u.price) p.current.noUnit.unformattedString, 
      stockQuantity = u.stock, 
      image = p.variationPhotos.first.map{f => 
        WooImage.create(service, f, 0)
      },
      menuOrder = p.superProduct.subProducts.indexOf(p) + 1,
      visible = u.enabled,
      manageStock = !u.alwaysAvailable, inStock = u.stock > 0 || u.alwaysAvailable,
      attributes = p.wooAttrValues(service)
    )
  }
}

back class VariationData2 extends WooData {
  extFieldNaming = Underscore
  field id: Int?
  field sku: String?
  field regularPrice: String? 
  field permalink: Url?
  field salePrice: String? 
  field stockQuantity: Int?
  field inStock: Bool
  field visible: Bool
//  field manageStock: Bool
  field menuOrder: Int? 
  field image: WooImage? 
  field attributes: [WooProductAttrValue]?
  
  impl func toString = "Variation $id $sku"
}
