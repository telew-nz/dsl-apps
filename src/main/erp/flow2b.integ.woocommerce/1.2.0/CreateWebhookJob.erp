back class CreateWebhooksJob extends SystemJob {
  field service: WooCommerceIntegration
  func do: Future[Any] = {
    let _ <- if (!service.webhookOrderCreatedId) {
      let rid <- createWebhook("Flow2b Order Created", "order.created", "orderCreated")
      service.webhookOrderCreatedId = rid
      service.save
    }
    let _ <- if (!service.webhookCustomerCreatedId) {
      let rid <- createWebhook("Flow2b Customer Created", "customer.created", "customerCreated")
      service.webhookCustomerCreatedId = rid
      service.save
    }
    if (!service.webhookCustomerUpdatedId) {
      let rid <- createWebhook("Flow2b Customer Updated", "customer.updated", "customerUpdated")
      service.webhookCustomerUpdatedId = rid
      service.save
    }
  }
  
  func createWebhook(name: String, topic: String, f: String): Future[Int] = {
    let u = WooWebhook(name = name, topic = topic, 
                         secret = service.webhookSecret,
                         deliveryUrl = service.apiUrl(f))
    let response <- service.https("/webhooks").post(u.json)
    let r = response.body!.parseJson[WooWebhook]
    r.id!
  }
}

extend entity WooCommerceIntegration extends ECommerceIntegration[Int] with Endpoint {
  func service = this
  system const field webhookSecret: Password = String.randomKey(16)
  system const field webhookOrderCreatedId: Int?
  system const field webhookCustomerCreatedId: Int?
  system const field webhookCustomerUpdatedId: Int?
  func createWebhookJobs: [SystemJob]? = {
    if (!webhookOrderCreatedId) [CreateWebhooksJob(service = this)]
  }
  
  back func process(request: IncomingHttpRequest): Future[Any] = {
    let signature = request.headers.apply("X-WC-Webhook-Signature")
    let expected = request.body.hmac(webhookSecret).sha256.base64
    if (signature != expected) throw "Wrond signature"

    let body: Data = request.body!
    if (request.url.endsWith("orderCreated")) {
      orderCreated(body)
    } else if (request.url.endsWith("customerCreated") || request.url.endsWith("customerUpdated")) {
      customerUpdated(body)
    } else {
      throw "Unexpected url $(request.url)"
    }
  }
}

back class WooWebhook {
  extFieldNaming = Underscore
  field id: Int?
  field name: String
  field topic: String
  field secret: String?
  field deliveryUrl: Url  
}