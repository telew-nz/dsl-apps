back class UploadProductsJob extends SystemJob {
  field service: WooCommerceIntegration
  field change: BatchChange[ProductUpdate[ICustomerSuperProduct]] 
  func do: Future[Any] = {
    change.regroup(service)
    let u = BatchProductUpdate(
      create = change.created.map(ProductData.create(service, _)),
      update = change.updated.map(ProductData.create(service, _)),
      delete = change.deleted*.product*.extId(service)
    )
    let response <- service.https("/products/batch").post(u.json)
    if (response.body!.toString == "[]") {
      throw "Empty array [] response for request\n${u.json}"
    }
    let r = response.body!.parseJson[BatchProductResponse]
    change.updateExtIds(service, r.create.map(id))
    change.updateExtUrls(service, r.create.map(permalink), r.update.map(permalink))
    r.check(this, u, change) {
      if (code == "product_invalid_sku") {
        RetrieveProductId(service = service, product = item.product).run
        true
      } else if (code == "woocommerce_rest_product_invalid_id") {
        service.findExtId(data.id, item.product)!.deleteExtItem(service)
        item.product.superUpdateECommerce(service)
        true
      } else {
        false
      }
    }
    (u.create + u.update).zip(r.create + r.update, (ll, rr) => {
      if (ll.images) {
        if (ll.images.count > rr.images.count) {
          if (!rr.error) {
            service.postError("$(this.toString):\nDifferent images size for $(ll.name). Request:\n$(u.json)\nResponse:\n$(response.body!)")
          }
        } else {
          ll.images.zip(rr.images.first(ll.images.count!), left.updateExtId(service, right))
        }
      }
    })
    
    
    service.productsUploaded(change)
  }
  //func toString = "UploadProducts($change)"
}

back class RetrieveProductId extends SystemJob {
  field service: WooCommerceIntegration
  field product: ICustomerSuperProduct
  
  func do = {
    let response <- service.https("/products").param("sku", product.sku).get
    let items = response.body!.parseJson[[ProductData2]?]
    let item = items.find(i => i.sku == product.sku).alt(throw "Cannot find sku ${product.sku} for $product")
    product.updateExtId(service, item.id!)
    product.updateExtUrl(service, item.permalink!)
    product.superUpdateECommerce(service)
    product.save
  }
}


back class DownloadProductsJob extends SystemJob {
  field service: WooCommerceIntegration
  func do: Future[Any] = {
    let response <- service.https("/products").get
    let prods = response.body!.parseJson[[ProductData2]?]
    if (let store = service.initialDownload!.stocktakeStore) {
      let stocktake = Stocktake(store = store).save
      prods*.make(service, stocktake)
    } else {
      prods*.make(service)
    }
  }
}
 

back class BatchProductUpdate {
  field create: [ProductData]?
  field update: [ProductData]?
  field delete: [Int]?
}

back class BatchProductResponse extends WooResponse[ProductData2] {
  field create: [ProductData2]?
  field update: [ProductData2]?
  field delete: [ProductData2]?
}
 
back class ProductData extends WooData {
  extFieldNaming = Underscore
  field id: Int?
  field name: String
  field type: String
  field shortDescription: Text?
  field description: Text?
  field sku: String
  field regularPrice: String? 
  field salePrice: String? 
  field stockQuantity: Int?
  field inStock: Bool
  field manageStock: Bool
  field catalogVisibility: String = "visible"
  field images: [WooImage]? {extRequired}
  field categories: [WooProductCategory]? {extRequired}
  field tags: [WooProductCategory]? {extRequired}
  field brands: [Int]? {extRequired}
  field attributes: [WooProductAttr]? {extRequired}
  field defaultAttributes: [WooProductAttrValue]? {extRequired}
  field upsellIds: [Int]? {extRequired}
  field crossSellIds: [Int]? {extRequired}
  
  object func create(service: WooCommerceIntegration, u: ProductUpdate[ICustomerSuperProduct]): ProductData = {
    let p = u.product
    var pos: Int? = -1
    var apos: Int? = -1
    let attrOptions = p.attrOptions
    ProductData(
      id = service.extId(u.product), name = p.title, 
      description = p.description, shortDescription = p.shortDescription, sku = p.sku,
      type = if (p.is[ICustomerProduct]) "simple" else "variable",
      regularPrice = u.price.regular, salePrice = u.price.current, 
      stockQuantity = u.stock, manageStock = !p.alwaysAvailable, inStock = u.stock > 0 || p.alwaysAvailable,
      images = p.collectPhotos.map{f => 
        pos = pos + 1
        WooImage.create(service, f, pos)
      },
      catalogVisibility = if (u.enabled) "visible" else "hidden",
      categories = p.superProduct.categories.mapOpt(service.extId(_)).map(cid => WooProductCategory(id = cid)),
      tags = p.superProduct.tags.mapOpt(service.extId(_)).map(cid => WooProductCategory(id = cid)),
      brands = p.superProduct.brands.mapOpt(service.extId(_)),
      attributes = p.attrOptions.map{
        apos = apos + 1
        let attrId = attr.extId(service)!
        WooProductAttr(id = attrId, name = attr.attrName, position = apos, options = _.options*.as[Entity]*.title, variation = true)
      },
      defaultAttributes = p.customerProducts.first?.wooAttrValues(service),
      crossSellIds = p.superProduct.crossSellProducts*.as[ICustomerSuperProduct].mapOpt(extId(service))
      upsellIds = (p.superProduct.upsells + p.superProduct.kits)*.as[ICustomerSuperProduct].mapOpt(extId(service))
    )
  }
}
back class ProductData2 extends WooData with ESuperProduct[Int] {
  extFieldNaming = Underscore
  field id: Int?
  
  field name: String?
  field type: String
  field permalink: Url?
  field description: Text?
  field sku: String?
  field regularPrice: String? 
  field price: String?
  field salePrice: String? 
  field stockQuantity: Int?
  field manageStock: Bool
  field catalogVisibility: String
  field images: [WooImage]? {extRequired}
  field categories: [WooProductCategory]? {extRequired}
  field brands: [BrandData2]? {extRequired}
  field tags: [WooProductCategory]? {extRequired}
  field attributes: [WooProductAttr]? {extRequired}
  field defaultAttributes: [WooProductAttrValue]? {extRequired}
  
  func extId = id!
  func extUrl = permalink
  func isTangible = true
  func photos = images
  func title = name!
  func categoryIds = categories*.id
  func tagIds = tags*.id
  func brandIds = brands*.id
  func salesPrice = if (let p = price, let rp = regularPrice) SalesPrice(current = p.toNumber, regular = rp.toNumber)
  func stock = stockQuantity
  
  func toString = "Product $id $sku $name"
}