back class UploadTagsJob extends SystemJob {
  impl field service: WooCommerceIntegration
  field change: BatchChange[IProductTag] 
  system field batchLimit: UInt = 100
  impl func dependsOnRegisters = false
  impl func do: Future[Any] = {
    change.regroup(service)
    if (change.count > batchLimit) {
    	var batchedChange = BatchChange()
        var itemsLeft = batchLimit
        batchedChange.created = change.created.first(batchLimit)
        if (batchedChange.count < itemsLeft) {
        	itemsLeft = (itemsLeft - batchedChange.created.count).max(1)
            batchedChange.updated = change.updated.first(itemsLeft)
            if (batchedChange.updated.count < itemsLeft) {
        		itemsLeft = (itemsLeft - batchedChange.updated.count).max(1)
            	batchedChange.deleted = change.deleted.first(itemsLeft)
        	}
        }
        var leftoverChange = BatchChange()
        leftoverChange.created = change.created.filter(i => !batchedChange.created.exists(_ == i))
        leftoverChange.updated = change.updated.filter(i => !batchedChange.updated.exists(_ == i))
        leftoverChange.deleted = change.deleted.filter(i => !batchedChange.deleted.exists(_ == i))
        UploadTagsJob(service=this.service, change=batchedChange).enqueue
        UploadTagsJob(service=this.service, change=leftoverChange).enqueue
    }
    else {
    	let u = BatchTagUpdate(
          create = change.created.map(TagData.create(service, _)),
          update = change.updated.map(TagData.create(service, _)),
          delete = change.deleted*.extId(service)
        )
        let response <- service.https("/products/tags/batch").post(u.json)
        let r = response.body!.parseJson[BatchTagResponse]
        change.updateExtIds(service, r.create.map(id))
        r.check(this, u, change, process = false)  
    }
  }
}

back class DownloadTagsJob extends SystemJob {
  impl field service: WooCommerceIntegration
  impl func dependsOnRegisters = false
  impl func do: Future[Any] = {
    procPage(1)
  }
  func procPage(page: UInt): Future[Void] = {
   	let response <- service.https("/products/tags").param("page", page).param("per_page", "100").get
    let tagData = response.body!.parseJson[[TagData]?]
    tagData*.make(service)
    if (tagData.count == 100) {
        procPage(page + 1)
    }
  }
}
 
 
back class BatchTagUpdate {
  field create: [TagData]?
  field update: [TagData]?
  field delete: [Int]?
}

back class BatchTagResponse extends WooResponse[TagData] {
  impl field create: [TagData]?
  impl field update: [TagData]?
  impl field delete: [TagData]?
}
back class TagData extends WooData with EProductTag[Int] {
  extFieldNaming = Underscore
  field id: Int?
  field name: String
  impl field description: Text?
  
  impl func extId = id!
  impl func title = name
  
  object func create(service: WooCommerceIntegration, u: IProductTag): TagData = {
    TagData(
      id = service.extId(u), name = u.name, description = u.description)
  }
}