back class UploadCategoriesJob extends SystemJob {
  impl field service: WooCommerceIntegration
  field change: BatchChange[IProductCategory] 
  impl func dependsOnRegisters = false
  impl func do: Future[Any] = {
    change.regroup(service)
    let u = BatchCategoryUpdate(
      create = change.created.map(CategoryData.create(service, _)),
      update = change.updated.map(CategoryData.create(service, _)),
      delete = change.deleted*.extId(service)
    )
    let response <- service.https("/products/categories/batch").post(u.json)
    let r = response.body!.parseJson[BatchCategoryResponse]
    change.updateExtIds(service, r.create.map(id))
    (u.create + u.update).zip(r.create + r.update).map{ 
      if (let left = left.image, let right = right.image) {
        left.updateExtId(service, right)
      }
    }
    r.check(this, u, change) {
      if (code == "invalid_taxonomy") {
        service.findExtId(data.id, item)!.deleteExtItem(service)
        UploadCategoriesJob(service = service, change = BatchChange.create(service, [item])).enqueueFirst
        true
      } else {
        false
      }
    }
  }
}

back class DownloadCategoriesJob extends SystemJob {
  impl field service: WooCommerceIntegration
  impl func dependsOnRegisters = false
  impl func do: Future[Any] = {
    let response <- service.https("/products/categories").get
    let cats: [Int -> CategoryData]? = response.body!.parseJson[[CategoryData]?].toMap(_.id!)
    cats.values.foreach {cat =>
      if (let parent = cat.parent) {
        cat.superCategory = cats(parent)
      }
    }
    cats.values*.make(service)
  }
}
 
back class BatchCategoryUpdate {
  field create: [CategoryData]?
  field update: [CategoryData]?
  field delete: [Int]?
}

back class BatchCategoryResponse extends WooResponse[CategoryData] {
  impl field create: [CategoryData]?
  impl field update: [CategoryData]?
  impl field delete: [CategoryData]?
}
back class CategoryData extends WooData with EProductCategory[Int] {
  extFieldNaming = Underscore
  field id: Int?
  impl field name: String
  field parent: Int?
  field slug: String?
  impl field description: Text?
  field image: WooImage? {extRequired}
  field menuOrder: UInt? {extRequired}
  
  impl field superCategory: CategoryData? {transient}
  impl func extId = id!
  impl func photos = image.toSeq
  
  object func create(service: WooCommerceIntegration, u: IProductCategory): CategoryData = {
    CategoryData(
      id = service.extId(u), name = u.name, parent = u.superCategory?.extId(service), description = u.description,
      slug = u.slug,
      image = u.collectPhotos.first.map{f => 
        WooImage.create(service, f, 0)
      }
      menuOrder = u.wooCommerceMenuOrder
    )
  }
}

extend trait IProductCategory {
  func wooCommerceMenuOrder: UInt? = 0
  func wooCommerceProductsMenuOrder: UInt? = 0
}
extend entity ProductCategory {
  impl field wooCommerceMenuOrder: UInt?
  impl field wooCommerceProductsMenuOrder: UInt?
}