extend entity WooCommerceIntegration  {
  back func orderCreated(body: Data): Future[String?] = {
    let orderData = body.parseJson[OrderData]
    let so <- orderData.make(this)
    so.id.toString
  }
}

back class DownloadOrdersJob extends SystemJob {
  field service: WooCommerceIntegration
  field from: Date?
  func do: Future[Any] = {
    service.ordersDownloaded(now)
    procPage(1)
  }
  func procPage(page: UInt): Future[Void] = {
    let req = service.https("/orders").param("page", page).param("per_page", "10")
    if (let from) req.param("after", from.format("yyyy-MM-dd'T'HH:mm:ss"))
    let response <- req.get
    let orders = response.body!.parseJson[[OrderData]?]
    let madeOrders <- orders*.make(service).allCompleted
    if (orders.count == 10) {
      procPage(page + 1)
    }
  }
}

back class OrderData extends ESalesOrder[Int] with WooData {
  extFieldNaming = Underscore
  field id: Int
  field number: String
  field status: WooOrderStatus {
    jsonMap(_.extName, n => WooOrderStatus.all.find(_.extName == n)!)
  }
  field currency: String?
  field dateCreatedGmt: UtcDate
  field pricesIncludeTax: Bool
  field customerId: Int?
  field billing: WooAddress
  field shipping: WooAddress
  field paymentMethod: String?
  field paymentMethodTitle: String?
  field transactionId: String?
  field datePaidGmt: UtcDate?
  field customerNote: String?
  field total: Money
  field dateCompletedGmt: UtcDate?
  field lineItems: [OrderDataLine]
  field shippingLines: [ShippingLine]?
  field feeLines: [FeeLine]?
  field couponLines: [CouponLine]?
  
  func extId = id
  func customerExtId = customerId
  func orderDate = dateCreatedGmt
  func billingAddress = billing
  func deliveryAddress = shipping
  func payments = if (datePaidGmt && paymentMethod) [OrderPayment(order = this)]
  func items = lineItems + shippingLines
  func currencyCode: String? = currency
}

enum WooOrderStatus(extName: String) {
  case pending(extName = "pending")
  case processing(extName = "processing")
  case onHold(extName = "on-hold")
  case completed(extName = "completed")
  case cancelled(extName = "cancelled")
  case refunded(extName = "refunded")
  case failed(extName = "failed")
}

back class OrderPayment(order: OrderData) extends EIncomingPayment[Int] {
  func extId: Int = order.extId
  func amount = order.total
  func paymentMethod = order.paymentMethod!
  func transactionId = order.transactionId
  func paymentDate = order.datePaidGmt!
}

back class OrderDataLine extends ESalesOrderProductItem[Int] {
  extFieldNaming = Underscore
  field id: Int
  field wooProductId: Int? {extName = "product_id"}
  func productId = wooProductId!
  field variationId: Int?
  field quantity: Qty
  field subtotal: Money?
  field taxClass: String?
  field total: Money?
  field totalTax: Money?

  func extId = id
  func amount = total
  func gstAmount = totalTax
  func discount = subtotal - total
  func qty = quantity
}
back class ShippingLine extends ESalesOrderDeliveryItem[Int] {
  extFieldNaming = Underscore
  field id: Int
  field methodTitle: String?
  field methodId: String
  field total: Money?
  field totalTax: Money?
  
  func extId = id
  func amount = total
  func gstAmount = totalTax
  func deliveryMethod = methodId
}
back class FeeLine {
  extFieldNaming = Underscore
  field id: Int
  field name: String
  field total: Money?
  field totalTax: Money?
}
back class CouponLine {
  extFieldNaming = Underscore
  field id: Int
  field code: String
  field discount: Money?
  field discountTax: Money?
}

