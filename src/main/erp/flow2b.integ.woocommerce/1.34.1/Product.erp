back class UploadProductsJob extends SystemJob {
  impl field service: WooCommerceIntegration
  field change: BatchChange[ProductUpdate[ISuperProduct]] 
  impl func do: Future[Any] = {
    change.regroup(service)
    let u = BatchProductUpdate(
      create = change.created.map(ProductData.create(service, _)),
      update = change.updated.map(ProductData.create(service, _)),
      delete = change.deleted*.product*.extId(service)
    )
    let response <- service.https("/products/batch").post(u.json)
    if (response.body!.toString == "[]") {
      throw RepeatJob(times = 3, on = Date.now + 1_minute, reason = "Empty array [] response for request\n${u.json}")
    }
    let r = response.body!.parseJson[BatchProductResponse]
    change.updateExtIds(service, r.create.map(id))
    change.updateExtUrls(service, r.create.map(permalink), r.update.map(permalink))
    r.check(this, u, change) {
      if (code == "product_invalid_sku") {
        RetrieveProductId(service = service, product = item.product).enqueueFirst
        true
      } else if (code == "woocommerce_rest_product_invalid_id") {
        let eid: Int? = item.product.extId(service)
        if (let eid) {
          if (data.id != eid) {
            throw "Unexpected id for woocommerce_rest_product_invalid_id $(data.id) != $eid"
          }
          item.product.deleteExtItem(service)
          item.product.superUpdateECommerce(service)
        }
        true
      } else if (code == "woocommerce_product_invalid_image_id") {
        if (
          repeatCount > 2 
          let i = try? data.errorString.trim("#" .. " ").toUNum!
          let img = item.product.collectPhotos.find(_.extId(service) == i)
        ) {
          img.deleteExtItem(service)
          item.product.superUpdateECommerce(service)
          true
        } else {
          let d: Duration = 10_second
          throw RepeatJob(times = 5, on = Date.now + d*repeatCount, reason = data.errorString)
        }
      } else {
        false
      }
    }
    (u.create + u.update).zip(r.create + r.update).map{
      if (left.images) {
        if (left.images.count > right.images.count) {
          if (!right.error) {
            service.postError("$(this.toString):\nDifferent images size for $(left.name). Request:\n$(u.json)\nResponse:\n$(response.body!)")
          }
        } else {
          left.images.zip(right.images.first(left.images.count!)).map{i => 
            if (i.right.id == 1) {
              service.postError("$(this.toString):\nImage with id 1. Request:\n$(u.json)\nResponse:\n$(response.body!)")
            } else {
              i.left.updateExtId(service, i.right)
            }
          }
        }
      }
    }
    
    
    service.productsUploaded(change)
  }
  //func toString = "UploadProducts($change)"
}

extend trait IBaseProduct {
  back func wooAttrValues(service: WooCommerceIntegration): [WooProductAttrValue]? = attrTerms.map{v =>
    let attrId = v.object.extId(service)!
    WooProductAttrValue(id = attrId, name = v.object.attrName, option = v.title)
  }
}

back class RetrieveProductId extends SystemJob {
  impl field service: WooCommerceIntegration
  field product: ISuperProduct
  
  impl func do = {
    let response <- service.https("/products").param("sku", product.sku).get
    let items = response.body!.parseJson[[ProductData2]?]
    let item = items.find(i => i.sku == product.sku).alt(throw "Cannot find sku ${product.sku} for $product")
    if (item.id != product.extId(service)) {
      product.updateExtId(service, item.id!)
      product.updateExtUrl(service, item.permalink!)
      product.superUpdateECommerce(service)
      product.save
    }
  }
}


back class DownloadProductsJob extends SystemJob {
  impl field service: WooCommerceIntegration
  impl func do: Future[Any] = {
    let response <- service.https("/products").get
    let prods = response.body!.parseJson[[ProductData2]?]
    if (let store = service.initialDownload!.stocktakeStore) {
      let stocktake = Stocktake(store = store, stockType = Inventory, legalEntity = service.legalEntity).save
      prods*.make(service, stocktake)
    } else {
      prods*.make(service)
    }
  }
}
 

back class BatchProductUpdate {
  field create: [ProductData]?
  field update: [ProductData]?
  field delete: [Int]?
}

back class BatchProductResponse extends WooResponse[ProductData2] {
  impl field create: [ProductData2]?
  impl field update: [ProductData2]?
  impl field delete: [ProductData2]?
}
 
back class ProductData extends WooData {
  extFieldNaming = Underscore
  field id: Int?
  field name: String
  field slug: String?
  field type: String
  field shippingClass: String?
  field shortDescription: Text? {extRequired}
  field description: Text? {extRequired}
  field sku: String
  field regularPrice: String? {extRequired}
  field salePrice: String? {extRequired}
  field rentPrices: [RentPriceData]?{extRequired}
  field stockQuantity: Int?{extRequired}
  field inStock: Bool
  field manageStock: Bool
  field featured: Bool
  field catalogVisibility: String = "visible"
  field images: [WooImage]? {extRequired}
  field categories: [WooProductCategory]? {extRequired}
  field tags: [WooProductCategory]? {extRequired}
  field brands: [Int]? {extRequired}
  field attributes: [WooProductAttr]? {extRequired}
  field defaultAttributes: [WooProductAttrValue]? {extRequired}
  field upsellIds: [Int]? {extRequired}
  field crossSellIds: [Int]? {extRequired}
  field menuOrder: Int? {extRequired}
  
  object func create(service: WooCommerceIntegration, u: ProductUpdate[ISuperProduct]): ProductData = {
    let p = u.product
    var pos: Int? = -1
    var apos: Int? = -1
    
    let desc = p.description.parseHtml
    
    desc.select('a[href*="youtube.com"], a[href*="youtu.be"]').foreach {el =>
      let t = el.plainText
      if (t.contains("youtube.com") || t.contains("youtu.be")) {
        el.setInnerHtml(el.plainText)
      }
    }
    desc.select('[style]').foreach {el =>
      el.attr("style", "")
    }
    ProductData(
      id = service.extId(u.product), name = p.title, slug = p.slug,
      description = desc.innerHtml, shortDescription = p.shortDescription, 
      sku = service.prodNum.apply(p),
      type = if (p.is[ISuperProduct with ISubProduct] || !p.subProducts) "simple" else "variable",
      regularPrice = if (let p = u.price) p.regular.noUnit.unformattedString, 
      salePrice = if (let p = u.price) p.current.noUnit.unformattedString, 
      rentPrices = u.rentPrices.map(rp => RentPriceData(
        regularPrice = rp.price.regular.noUnit.unformattedString, salePrice = rp.price.current.noUnit.unformattedString,
        periodCode = rp.unit.name, periodName = rp.unit.toString!
      ))
      stockQuantity = u.stock , manageStock = !u.alwaysAvailable, inStock = u.stock > 0 || u.alwaysAvailable,
      images = p.collectPhotos.distinct.map{f => 
        pos = pos + 1
        WooImage.create(service, f, pos)
      },
      featured = service.featuredTag.in(p.superProduct.tags),
      shippingClass = p.superProduct.shippingClass?.extCode(service)
      catalogVisibility = if (u.enabled) "visible" else "hidden",
      categories = p.superProduct.allCategories.mapOpt(service.extId(_)).map(cid => WooProductCategory(id = cid)),
      tags = p.superProduct.allTags.mapOpt(service.extId(_)).map(cid => WooProductCategory(id = cid)),
      brands = p.superProduct.brands.mapOpt(service.extId(_)),
      attributes = p.attrTerms.mapOpt{v =>
        apos = apos + 1
        if (let attrId = v.object.extId(service)) {
          WooProductAttr(id = attrId, name = v.object.attrName, position = apos, 
                         options = [v.title], 
                         visible = true, variation = false)
        }
      } + p.as[IVariableSuperProduct]?.attrOptions.map{
        apos = apos + 1
        let attrId = attr.extId(service)!
        WooProductAttr(id = attrId, name = attr.attrName, position = apos, 
                       options = _.options*.as[Entity]*.title, 
                       visible = false, variation = true)
      },
      defaultAttributes = p.wooAttrValues(service) + p.subProducts.first?.as[ISubVariation]?.wooAttrValues(service),
      crossSellIds = p.superProduct.crossSellProducts*.as[ISuperProduct].mapOpt(extId(service))
      upsellIds = (p.superProduct.upsells + p.superProduct.kits)*.as[ISuperProduct].mapOpt(extId(service))
      menuOrder = p.superProduct.wooCommerceMenuOrder
    )
  }
}

extend trait ISuperProduct {
  compute wooCommerceMenuOrder: UInt? = {
    allCategories*.wooCommerceProductsMenuOrder.min
  }
}


back class RentPriceData {
  extFieldNaming = Underscore
  field regularPrice: String?
  field salePrice: String?
  field periodCode: String
  field periodName: String
}

back class ProductData2 extends WooData with ESuperProduct[Int] {
  extFieldNaming = Underscore
  field id: Int?
  
  field name: String?
  field type: String
  field permalink: Url?
  impl field description: Text?
  field sku: String?
  field regularPrice: String? 
  field price: String?
  field salePrice: String? 
  field stockQuantity: Int?
  field manageStock: Bool
  field featured: Bool
  field catalogVisibility: String
  field images: [WooImage]? {extRequired}
  field categories: [WooProductCategory]? {extRequired}
  field brands: [BrandData2]? {extRequired}
  field tags: [WooProductCategory]? {extRequired}
  field attributes: [WooProductAttr]? {extRequired}
  field defaultAttributes: [WooProductAttrValue]? {extRequired}
  
  impl func extId = id!
  impl func extUrl = permalink
  impl func isTangible = true
  impl func photos = images
  impl func title = name!
  impl func categoryIds = categories*.id
  impl func tagIds = tags*.id
  impl func brandIds = brands*.id
  impl func salesPrice = if (let p = price, let rp = regularPrice) SalesPrice(current = p.toUNum, regular = rp.toUNum)
  impl func stock = stockQuantity
  
  impl func toString = "Product $id $sku $name"
}