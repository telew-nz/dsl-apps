extend entity User {
  
  ref field developerRole: [DeveloperRole]? {
    views = []
    visible = is(Developer)
  }
  extend view form = extend {
    developerRole
  }

}

class DeveloperProjectIssueItems {
    field label: String
    field items: [DeveloperProject]? {
      available(List)
    }
    field count: UInt? = items.count
    func cut = if (items.count <= 50) this else this.copy(items = items.first(50))
    field level: IssueTypeLevel
    
    object func getProjectsToReview: Future[[DeveloperProjectIssueItems]?] = {
    	let projectsToReview: [DeveloperProject]? <- DeveloperProject.all
        	//.filter(_.owner != User.current! && !_.proposals.exists(_.owner == User.current!))
        DeveloperProjectIssueItems(label = "Projects to review", items = projectsToReview, level = ToDo)
    }
}

role Developer {
	
    entity DeveloperProject = readOnly
    entity DeveloperRole = readWrite
    entity Proposal = readWrite
    
    impl view dashboard = DeveloperProjectIssueItems.getProjectsToReview.get.map(label, level, count, items) >> subtotal {
      x (background = level.background, color = level.color) {
        count >> field(fontStyle = Badge, background = "rgba(0, 0, 0, 0.2)")
        label(label = label, fontStyle = Bold, icon = level.icon, color = "white")
      }
      list(action = form.open) {
        fullDash
      }
    }
    
}

role Stakeholder {
	entity DeveloperProject = readWrite
	entity DeveloperRole = readWrite
	entity Proposal = readOnly
    
	impl view menu = y{
    	DeveloperProject >> item(fastAdd)
    }
}