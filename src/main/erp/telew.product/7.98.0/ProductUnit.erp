enum ProductUnit(impl field symbol: String, impl field scale: Int?, base: ProductUnit?, k: UNumber) extends Unit {
  impl func position: UnitPosition = SuffixWithSpace
  case Item(symbol = "item", scale = 0, base = null, k = 1)
  case Inner(symbol = "inner", scale = 0, base = null, k = 1) = "Inner Box"
  case Outer(symbol = "outer", scale = 0, base = null, k = 1) = "Outer Box"
  case Pair(symbol = "pair", scale = 0, base = null, k = 1)
  case Gram(symbol = "g", scale = 0, base = null, k = 1)
  case Kilogram(symbol = "kg", scale = 3, base = Gram, k = 1000)
  case Litre(symbol = "L", scale = 3, base = null, k = 1)
  case Hour(symbol = "hour", scale = 2, base = null, k = 1)
  case Metre(symbol = "m", scale = 3, base = null, k = 1)
  case Part(symbol = "part", scale = 4, base = null, k = 1)
}
interface IWeightSize {
  impl final func weightSize: IWeightSize? = this
  
  func weightUnit: WeightUnit
  func weight: UQty[weightUnit]?
  func lengthUnit: LengthUnit
  func width: UQty[lengthUnit]?
  func height: UQty[lengthUnit]?
  func depth: UQty[lengthUnit]?
  
  compute volumeUnit: VolumeUnit = lengthUnit.volume
  compute volume: UQty[volumeUnit]? = (width*height*depth).as[UQty[volumeUnit]]
  func volume(unit: VolumeUnit): UQty[unit]? = unit.convert(volume).positive
  func weight(unit: WeightUnit): UQty[unit]? = unit.convert(weight).positive
}

interface TWeightSizeOnly extends IWeightSize {  
  impl field lengthUnit: LengthUnit = Centimetre
  impl field width: UQty[lengthUnit]? {canEditUnit}
  impl field height: UQty[lengthUnit]? {canEditUnit}
  impl field depth: UQty[lengthUnit]? {canEditUnit} 
}

interface TWeightSize extends TWeightSizeOnly {  
  impl field weightUnit: WeightUnit = Gram
  impl field weight: UQty[weightUnit]? {canEditUnit}
}

enum WeightUnit(impl field symbol: String, impl field scale: Int?, k: UDec[8]) extends Unit {
  impl func position: UnitPosition = SuffixWithSpace
  case Milligram(symbol = "㎎", scale = 1, k = 0.001)
  case Gram(symbol = "g", scale = 1, k = 1)
  case Kilogram(symbol = "㎏", scale = 2, k = 1000)
  case Tonne(symbol = "t", scale = 3, k = 1000000)
  
  impl func convert(dec: Number?): Number? = {
    if (dec.unit == this) dec
    else {
      (dec.as[Qty[16]]*dec.unit!.as[WeightUnit]!.k/k).as[Qty[this]]
    }
  }
}
enum LengthUnit(impl field symbol: String, impl field scale: Int?, k: UDec[8], volume: VolumeUnit) extends Unit {
  impl func position: UnitPosition = SuffixWithSpace
  case Millimetre(symbol = "㎜", scale = 0, k = 0.001, volume = mm3)
  case Centimetre(symbol = "㎝", scale = 1, k = 0.01, volume = cm3)
  case Metre(symbol = "m", scale = 3, k = 1, volume = m3)
  
  impl func convert(dec: Number?): Number? = {
    if (dec.unit == this) dec
    else {
      (dec.as[Qty[16]]*dec.unit!.as[LengthUnit]!.k/k).as[Qty[this]]
    }
  }
}
enum VolumeUnit(impl field symbol: String, impl field scale: Int?, k: UDec[16]) extends Unit {
  impl func position: UnitPosition = SuffixWithSpace
  case mm3(symbol = "㎣", scale = 0, k = 0.000000001)
  case cm3(symbol = "㎤", scale = 1, k = 0.000001)
  case m3(symbol = "㎥", scale = 3, k = 1)

  impl func convert(dec: Number?): Number? = {
    if (dec.unit == this) dec
    else {
      (dec.as[Qty[16]]*dec.unit!.as[VolumeUnit]!.k/k).as[Qty[this]]
    }
  }
}

inline entity ProductAltUnit extends TWeightSize {
  ref field product: IAltUnits by altUnits
  compute baseUnit: ProductUnit = product.unit
  ref field unit: ProductUnit = Inner
  ref field baseK: UQty[baseUnit] 
  ref field unitK: UQty[unit] {
    canEditUnit
  }
  compute k: UDec[8] = unitK.as[UDec[8]]/baseK
}

trait IAltUnits extends RefEntity with TWeightSize {
  impl ref field unit: ProductUnit = Item
  impl ref field altUnits: [ProductAltUnit]? inline by product {
    label = "Alternative Units"
  }
  compute unitOne: UQty[unit] {
    label = "Unit"
    value = 1.as[UQty[unit]]
    canEditUnit
  }

  final view unitsView = grid (labels = Top) {
    grid (labels = Top, frame = true, label = "Base Unit") {
      row {unitOne space weight width height depth}
    }
    altUnits >> list {grid(labels = Top){
      row{x(label = "Unit", flow = false, width = 0.33332){unitK label("=") baseK >> field (placeholder = "")} 
          space(width = 0.00001)
          weight width height depth}
    }}
  }
}

extend trait IBaseProduct {
  func toBase(qty: UQty): UQty[unit] = {
    if (!qty.unit || qty.unit == unit) qty.as[UQty[unit]]
    else if (let k = altUnits.find(_.unit == qty.unit)?.k) {
      qty.as[UQty[unit]]/k
    } else {
      qty.as[UQty[unit]]
    }
  }
  func fromBase(to: ProductUnit, qty: UQty): UQty[to] = {
    if (!qty.unit || qty.unit == to) qty.as[UQty[to]]
    else if (let k = altUnits.find(_.unit == to)?.k) {
      qty.as[UQty[to]]*k
    } else {
      qty.as[UQty[to]]
    }
  }
  func convert(to: ProductUnit, qty: UQty): UQty[to] = {
    if (!qty.unit || qty.unit == to) qty.as[UQty[to]]
    else fromBase(to, toBase(qty))
  }
}