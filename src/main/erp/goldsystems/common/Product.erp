trait IMetalSuperProduct extends RefEntity {
  func isMetalProduct: Bool
  func metalType : MetalType 
  func totalWeight: UQty[ProductUnit.Gram, 5]
  func isPure: Bool
  func pureWeightOz: UDec[5]
  func metalCost: UMoney? = if (let c = metalType.currency) pureWeightOz.as[UMoney[c]]
  func metalProducts: [MetalSuperProduct: Qty]
}

trait MetalSuperProduct extends ISuperProduct with IMetalSuperProduct with IWeightSize {
  impl func isTangible: Bool = true
  impl ref field metalType : MetalType 
  impl func metalProducts: [MetalSuperProduct: UQty] = [this -> 1.as[UQty[ProductUnit.Item]]]
  impl func isMetalProduct = true
  impl final func unit: ProductUnit = Item
  func size: UQty[sizeUnit, 5]
  func sizeUnit: ProductUnit
  
  impl func weightUnit = Gram
  impl func weight = totalWeight
  impl field lengthUnit: LengthUnit = Millimetre
  impl field width: UQty[lengthUnit]? {canEditUnit}
  impl field height: UQty[lengthUnit]? {canEditUnit}
  impl field depth: UQty[lengthUnit]? {canEditUnit} 
  
  impl compute totalWeight : UQty[ProductUnit.Gram, 5] = size*sizeUnit.k
  compute totalWeightOz : UQty[ProductUnit.Ounce, 5] = if (sizeUnit == Ounce) size else totalWeight/ProductUnit.Ounce.k
  compute puritySelection: Purity? {
    value = Purity.all.find(value == purity)
    update = {purity =? new?.value}
  }
  ref field purity: UDec[5] {
    update = puteWeightUpdated()
  }
  impl compute isPure = purity >= metalType.purityThreshold
  compute pureWeight = totalWeight.as[UDec[5]]*purity  // enter or compute from weight and purity
  impl compute pureWeightOz = totalWeightOz.as[UDec[5]]*purity
  override func gstRate(vendor: LegalEntity?): UPercent[2]?? = if (isPure) null else 0.15
  func puteWeightUpdated(): Void = {}
} 