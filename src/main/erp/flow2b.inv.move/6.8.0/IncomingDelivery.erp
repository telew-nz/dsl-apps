trait IIncomingDelivery extends IDeliveryPath {
  background = "#2e8e67"
  singular = "Incoming Delivery"
  plural = "Incoming Deliveries"
  func pathDst: Location? = deliveryDst
  func deliverySrc: Store? = null
  report Report {
    field activeOnly = true
    field warehouseOperative: Person? {
      default = Person.current.filter(is(WarehouseOperative))
      from = Person.all.filter(is(WarehouseOperative))
    }
    view list = IIncomingDelivery.all.filter(isFor(warehouseOperative, WarehouseOperative) && (!activeOnly || deliveryStatus.active)) >> nav{list(canAdd = false){}}
  }
  func pathCanBeExecuted = true
  func dispatchDateLabel = if (this.hasInTransit) "Pickup Date" else deliveryDateLabel
}

inline trait IIncomingDeliveryItem extends IDeliveryItem {
  var product: ISubProduct 
  func unit: ProductUnit
  func qty: Qty[unit]
  func active: Bool
  

  register inStocks: [StockRegister]? {
    value = if (itemDelivery && itemDelivery!.is[IIncomingDelivery] && itemDelivery!.deliveryStatus != Canceled && active) product.tangibleProductQtys(qty).mapOpt(inStock(_.product, _.qty))
    availableFor = Inline
    available(Inline).for(Inline)
    autoRecalc = true
  }
  
  func inStock(product: IProduct, baseQty: Qty): StockRegister?
  compute baseQty: Qty[product.unit] = product.toBase(qty)
}