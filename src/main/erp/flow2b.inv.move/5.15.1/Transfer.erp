entity Transfer extends IOutgoingDelivery with RoutePath with Journal {
  background = "#2e8e67"
  func deliverySupplier: LegalEntity = legalEntity
  func deliveryReceiver: LegalEntity = legalEntity 
  //Fields
  object field gen: Int?
  const ref field n: Int? = increment(gen)
  field legalEntity: LegalEntity {
    default =? try? LegalEntity.ours.onlyOne!
    from = LegalEntity.ours
  }
  field toLegalEntity: LegalEntity? {
    label = "Transfer Ownership to Legal Entity"
    from = LegalEntity.ours
  }
  func deliverySource: Store? = source
  field source: Store {from = Store.ours}
  field destination: Store {from = Store.ours}  
  field items: [TransferItem]? inline by delivery 
  func journalDate = dispatchDate
  
  func pathSrc: Location? = source
  func pathDst: Location? = destination
  
  
  //Compute
  func number = "TR" + n
  func title = number + " " + dispatchDate.as[Date[day]]!
  
  //Views
  object view list = Transfer.all >> nav{list{grid(labels = Top){
    row{number >> field(width = 0.3) dispatchDate >> field(width = 0.3) source >> field(width = 0.4) }
    row{legalEntity >> field(width = 0.3) toLegalEntity >> field(width = 0.3, label = "Transfer Ownership to") destination >> field(width = 0.4) }
    statusesView
  }}}
  view ref = x{
    status dispatchState title
  }
   view form = nav{grid (width = 1.2){
    number
    statusesView
    row {legalEntity, toLegalEntity, dispatchDate}
    row {source, destination, deliveryDate}
    possibleDispatchPeriods >> list(frame = false){ 
      x {
        start
        label("—")
        if (end == Date.max) "∞" else end
        button("Set") {
          this.dispatchDate = start
          this.save()
        }
      }
    }
    
    items
    supplyOptionsView >> field(label = "Supply Options", visible = supplyOptions)
  }
    generalLedgerButton
  }
  
  view statusesView = x(label = "State"){status availability dispatchState overdueState}
}

inline entity TransferItem extends IOutgoingDeliveryItem {
  func itemDelivery = delivery
  field product: IProduct {
    available(Ref).with(unit, altUnits)
    from = IProduct.all.filter(isTangible)
    update = {
      this.unit = new.unit
      this.qty = this.qty.as[Qty[this.unit]]
    }
  }
  field unit: ProductUnit {from = product.units}
  field qty: Qty[unit] {
    default = 1
    label = "Quantity"
  }

  func outcomeStockReg: StockRegister? = outcomeStock
    
  field delivery: Transfer by items

  //Register
  register outcomeStock {
    value = if (delivery.status != Canceled) StockRegister(
      legalEntity = delivery.legalEntity, store = delivery.source, good = product,
      sort = if (delivery.status == Planned) 1 else 0, 
      date = delivery.dispatchDate, document = delivery,
      factualQty = if (delivery.status == Planned) 0 else -(baseQty), 
      reservedQty = if (delivery.status == Planned) baseQty else 0
    )
    availableFor = Inline
    available(Inline).for(Inline)
    autoRecalc = true
  }  
  
  register incomeStock = {
    if (delivery.status != Canceled) StockRegister(
      legalEntity = delivery.toLegalEntity.alt(delivery.legalEntity), store = delivery.destination, good = product,
      sort = if (delivery.status != Delivered) 1 else 0, 
      date = delivery.deliveryDate, document = delivery,
      factualQty = if (delivery.status == Delivered) baseQty else 0, 
      expectedQty = if (delivery.status == Delivered) 0 else baseQty
    )
  }  
  
  register ownershipTransfer = if (let to = delivery.toLegalEntity) {
    if (delivery.status != Planned && product.isTangible) {
      LInventory(journal = delivery, contraLegalEntity = to, product = product, qty = baseQty, isDebit = false, contraAccount = Inventory)
    }
  }
  
  view form = grid {
    read {
      grid(labels = None) {
        row{product >> field(width = 0.4), x(width = 0.6){qty, stockDesc}}
      }
    } edit {
      y {
        grid{row{product, qty >> field(canEditUnit = true)}}
        stockDesc
      }
    }
    availableView
  }
}


