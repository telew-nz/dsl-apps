entity InventoryWriteUp extends Entity with IProdQtyItem with FProductItemsInline with StockCorrection with IProdMoveIn with IProdMoveItemIn {
  singular = "Write Up"
  
  impl func prodMoveIn = this
  impl func moveInItems = [this]
  impl func moveInDate = date
  impl func moveInState = Complete
  impl func moveInLE = legalEntity
  impl func moveInStore = store
  impl func moveInStockType = stockType.stock
  impl func moveItemActive = true
  
  impl ref field product: IProductInv {
    from = IProductInv.all.filter(_.isTangible)
    available(Ref).with(unit, altUnits)
    update = {
      productUpdated()
    }
  }
  
  field stockType: StockInvType = Inventory
  compute price: UMoney[currency]? {
    value = amount/qty
    update = {
      amount = qty*new
    }
  }
  field amount: UMoney[currency]?
  override func currency = legalEntity.getCurrency
  
  impl compute number = "WU$n"
  impl func title: String = "$number $product"
  override func journalDate: Date = date
  
  
  register invLedgers = {
    ProductItem.distribute(product, baseQty, amount, productItems) {
      stockType.obj.new(
         journal = this, product = product, productItem = item, 
         qty = trQty, trAmount = trAmount,
         contraAccount = InventoryAdjustments
      )
    }
  }
  
  impl view form = nav{
    grid {
      date
      number
      refNum
      legalEntity
      store
      product
      stockType
      qty >> field(canEditUnit = true)
      price
      amount
      snView
    }
    generalLedgerButton
  }
  impl object view list = InventoryWriteUp.all >> nav{list{grid(labels = None){
    row{fullNum date legalEntity store}
    row{product qty price amount}
  }}}
}
  
