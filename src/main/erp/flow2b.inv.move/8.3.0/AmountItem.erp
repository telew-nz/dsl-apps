trait IAmountItem extends InlineEntity {
  func currency: Currency
  func pricesIncludingGst: Bool
  func considerGst: Bool
   
  field sAmount: Money[currency]?
  compute gstRateK  = 1.0000 + gstRate.alt(0).withoutUnit
  field storedWithGst: Bool {
    default = pricesIncludingGst
    update = {
      if (new) {
        sAmount = sAmount*gstRateK
        sDiscount = sDiscount*gstRateK
      } else {
        sAmount = sAmount/gstRateK
        sDiscount = sDiscount/gstRateK
      }
    }
  }
  compute amountNoGst: Money[currency]? {
    value = if (storedWithGst) sAmount/gstRateK else sAmount
    update = {
      storedWithGst = false
      sAmount = new
    }
  }
  compute amountWithGst: Money[currency]? {
    value = if (storedWithGst) sAmount else sAmount*gstRateK
    update = {
      storedWithGst = true
      sAmount = new
    }
  }
  compute amount = if (considerGst) amountNoGst else amountWithGst
  
  compute amountEditor: Money[currency]? {
    label = "Amount"
    value = if (pricesIncludingGst) amountWithGst else amountNoGst
    update = {
      if (pricesIncludingGst) this.amountWithGst = new 
      else this.amountNoGst = new
    }
  }
  compute gstAmount: Money[currency]? = {
    amountWithGst - amountNoGst - discountWithGst + discountNoGst
  }
  
  field sDiscount: Money[currency]?
  compute discountNoGst: Money[currency]? {
    value = if (storedWithGst) sDiscount/gstRateK else sDiscount
    update = {
      storedWithGst = false
      sDiscount = new
    }
  }
  compute discountWithGst: Money[currency]? {
    value = if (storedWithGst) sDiscount else sDiscount*gstRateK
    update = {
      storedWithGst = true
      sDiscount = new
    }
  }
  compute discountEditor: Money[currency]? {
    label = "Discount"
    value = if (pricesIncludingGst) discountWithGst else discount
    update = {
      if (pricesIncludingGst) this.discountWithGst = new 
      else this.discountNoGst = new
    }
  }
  compute discount = if (considerGst) discountNoGst else discountWithGst
  
  compute totalWithGst: Money[currency]? {
    value = amountWithGst - discountWithGst
  }
  compute totalNoGst: Money[currency]? {
    value = amountNoGst - discountNoGst
  }
  compute total: Money[currency]? {
    value = if (pricesIncludingGst) totalWithGst else totalNoGst
  }
  func total(withGst: Bool) = if (withGst) amountWithGst - discountWithGst else amountNoGst - discountNoGst
  
  
  field gstRate: UPercent[2]??
  compute gstValue: UPercent[2]? {
    label = "GST Rate"
    value = gstRate.alt(0).as[UPercent[2]]
    update = {
      updateGst(new)
    }
    visible = hasGst
  }
  compute hasGst: Bool {
    value = gstRate
    update = {
      updateGst(if (new) 0 else null)
    }
  }
  func updateGst(new: UPercent[2]??): Void = {
    if (storedWithGst) {
      sAmount = (amountNoGst * (1.0000 + new.alt(0).withoutUnit))
      sDiscount = (discountNoGst * (1.0000 + new.alt(0).withoutUnit))
    }
    gstRate = new
  }
  
  view gstEditor = x(label = if (pricesIncludingGst) "Including GST" else "Excluding GST", flow = false) {
    hasGst >> field(label = "", stretch = 1) gstValue >> field(label = "Rate", align = Right)
  }
}

trait IAmountQtyItem extends IAmountItem {
  func qty: Qty
  compute priceNoGst: Money[currency]? {
    value = amountNoGst/qty
    update = {amountNoGst = new*qty}
  }
  compute priceWithGst: Money[currency]? {
    value = amountWithGst/qty
    update = {amountWithGst = new*qty}
  }
  compute priceEditor: Money[currency]? {
    label = "Price"
    value = if (pricesIncludingGst) priceWithGst else priceNoGst
    update = {
      if (pricesIncludingGst) this.priceWithGst = new 
      else this.priceNoGst = new
    }
  }
}

trait IProdQtyItem extends InlineEntity {
  func product: IBaseProduct
  field unit: ProductUnit {
    default =? (try? product)?.unit
    from = product.units    
  }
  func pricesIncludingGst = true
  func considerGst = true
  func currency: Currency = default
  field qty: Qty[unit] {
    canEditUnit
    default = 1
    label = "Quantity"  
  }
  func productUpdated(): Void = {
    this.silentUpdate(unit, product.unit)
    this.qty = this.qty.as[Qty[this.unit]]!
  }
}

trait IProdAmountQtyItem extends IProdQtyItem with IAmountQtyItem {
  func productUpdated(): Void = {
    super.productUpdated()
    updateGstRate()
  }
  func updateGstRate(): Void 
}