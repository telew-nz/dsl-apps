trait IProdMovePath extends HasTracking {
  func pathStart: Date
  func pathSrc: ILocation?
  func pathDst: ILocation?
  func pathEnd: Date
  var pathState: PathState
  func pathCanDo: Bool = true
  func pathItems: [IProdMoveItem]?
  
  func isPathOur = !freightCompany && pathSrc && pathDst && pathSrc != pathDst
  func isPathToDo = pathCanDo && isPathOur
  
  field route: IRoute? by items
}

enum PathState(active: Bool, started: Bool, move0: ProdMoveState, move1: ProdMoveState) {
  case Draft(active = true, started = false, move0 = Draft, move1 = Draft) {background = "#ecd"}
  case Planned(active = true, started = false, move0 = Planned, move1 = Planned) {background = "#ed9"}
  case InTransit(active = true, started = true, move0 = Complete, move1 = Planned) {background = "#cce0ff"}
  case Complete(active = false, started = true, move0 = Complete, move1 = Complete) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false, started = false, move0 = Canceled, move1 = Canceled) {background = "#ddd"}
}


trait IRoute extends Entity {
  background = "#2e8e67"
  object field gen: Int?
  field items: [IProdMovePath]? by route {
    available(List)
    from = IProdMovePath.all.sortBy(!pathState.active, !isPathToDo, pathStart)
  }
}

trait FPathDates extends IProdMovePath {
  func defaultDate: Date = now
  
  impl func pathStart = dispatchDate
  impl func pathEnd = deliveryDate

  ref field dispatchDate: Date {
    default = defaultDate
    update = {
      if (new > deliveryDate) deliveryDate = new
      if (new > now && pathState == Complete) pathState = Planned
    }
  } 
  ref field deliveryDate: Date {
    default = defaultDate
    validate = if (deliveryDate < dispatchDate) "Delivery Date should be more or equal Dispatch Date"
    update = {
      if (new < dispatchDate && pathState == Planned) dispatchDate = new
    }
  }
  
  func pathStateUpdated(old: PathState): Void = if (pathState != old) {
    if (pathState == InTransit) {
      if (old != Complete) dispatchDate = now
    } else if (pathState == Complete) {
      if (old != InTransit) dispatchDate = now
      deliveryDate = now
    }
  }
}