report NegativeStock {
  view list = StockRegister.all
    .filter(i => 
          i.fact < 0 
       && i.sort == 0 
       && i.date >? Stocktake.all.filter(st => st.type == Initial && st.store == i.store && st.legalEntity == i.legalEntity).agg(date.min)
    )
    .sortBy(date) >> 
  nav(background = "#2e8e67"){table(mode = Static){
    document >> x (label = "Document" width = 0.3) {title}, date, good, legalEntity, store,
    factualChange >> field(label = "Change")
    fact
  }}
}

report InventoryIssue {
  field inventoryManager: Actor? {
    default = Person.current.filter(is(InventoryManager))
    from = Person.all.filter(is(InventoryManager))
  }
  view list = IDelivery.all.filter(hasInvIssues && isFor(inventoryManager, InventoryManager)).sortBy(dispatchDate) 
    >> nav(background = "#2e8e67"){list(canAdd = false){
    
    }}
}

