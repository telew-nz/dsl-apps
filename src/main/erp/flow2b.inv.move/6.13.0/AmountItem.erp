inline trait IAmountItem {
  func currency: Currency
  func pricesIncludingGst: Bool
   
  field sAmount: Money[currency]?
  compute gstRateK = 1 + gstRate.alt(0).withoutUnit
  field storedWithGst: Bool {
    default = pricesIncludingGst
    update = {
      if (new) {
        sAmount = sAmount*gstRateK
        sDiscount = sDiscount*gstRateK
      } else {
        sAmount = sAmount/gstRateK
        sDiscount = sDiscount/gstRateK
      }
    }
  }
  compute amount: Money[currency]? {
    value = if (storedWithGst) sAmount/gstRateK else sAmount
    update = {
      storedWithGst = false
      sAmount = new
    }
  }
  compute amountWithGst: Money[currency]? {
    value = if (storedWithGst) sAmount else sAmount*gstRateK
    update = {
      storedWithGst = true
      sAmount = new
    }
  }
  compute amountEditor: Money[currency]? {
    label = "Amount"
    value = if (pricesIncludingGst) amountWithGst else amount
    update = {
      if (pricesIncludingGst) this.amountWithGst = new 
      else this.amount = new
    }
  }
  compute gstAmount: Money[currency]? = {
    amountWithGst - amount - discountWithGst + discount
  }
  
  field sDiscount: Money[currency]?
  compute discount: Money[currency]? {
    value = if (storedWithGst) sDiscount/gstRateK else sDiscount
    update = {
      storedWithGst = false
      sDiscount = new
    }
  }
  compute discountWithGst: Money[currency]? {
    value = if (storedWithGst) sDiscount else sDiscount*gstRateK
    update = {
      storedWithGst = true
      sDiscount = new
    }
  }
  compute discountEditor: Money[currency]? {
    label = "Discount"
    value = if (pricesIncludingGst) discountWithGst else discount
    update = {
      if (pricesIncludingGst) this.discountWithGst = new 
      else this.discount = new
    }
  }
  
  field gstRate: Percent[2]??
  compute gstValue: Percent[2]? {
    label = "GST Rate"
    value = gstRate.alt(0).as[Percent[2]]
    update = {
      gstRate = new
    }
    visible = hasGst
  }
  compute hasGst: Bool {
    value = gstRate
    update = {
      gstRate = if (new) gstValue else null
    }
  }
  view gstEditor = x(label = if (pricesIncludingGst) "Including GST" else "Excluding GST", flow = false) {
    hasGst >> field(label = "", stretch = 1) gstValue >> field(label = "Rate", align = Right)
  }
}

inline trait IAmountQtyItem extends IAmountItem {
  func qty: Qty
  compute price: Money[currency]? {
    value = amount/qty
    update = {amount = new*qty}
  }
  compute priceWithGst: Money[currency]? {
    value = amountWithGst/qty
    update = {amountWithGst = new*qty}
  }
  compute priceEditor: Money[currency]? {
    label = "Price"
    value = if (pricesIncludingGst) priceWithGst else price
    update = {
      if (pricesIncludingGst) this.priceWithGst = new 
      else this.price = new
    }
  }
}