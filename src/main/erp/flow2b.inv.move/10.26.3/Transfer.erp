entity Transfer extends IProdMoveOut with IProdMoveIn with Journal with HasN with IProdMovePath with FPathDates {
  background = "#2e8e67"
  
  override func moveItems = items
  impl func moveOutItems = items
  impl func moveInItems = items
  impl func moveOutLE = legalEntity
  impl func moveOutStore = source
  impl func moveOutState = state.move0
  impl compute moveOutDate {
    value = dispatchDate
    update = {dispatchDate = new}
  }
  
  impl func pathSrc = source

  impl compute pathState {
    value = state
    update = {
      state = new
    }
  }
  impl func pathItems = items
  impl func pathCanDo: Bool = dispatchState == ToDispatch
  impl func pathDst = destination
  
  impl func moveInDate = deliveryDate
  impl func moveInState = state.move1
  impl func moveInStore = destination
  impl func moveInLE = toLegalEntity.alt(legalEntity)
  
  impl func journalDate = dispatchDate
  override func itemOrder = ("Date", dispatchDate)
  impl func title = "$fullNum $source >> $destination"
  override func entityNumbers = [number, refNum, trackingNumber]
  
  field sourceStockType: StockType = Inventory  
  field destinationStockType: StockType = Inventory  
  ref field state: PathState {
    default = Planned
    update = {
      pathStateUpdated(origin(state))
    }
  }
  
  object field gen: Int?
  impl func nextN = increment(gen)
  impl func numPrefix = "TR"
  field currency: Currency = Currency.our
  
  impl field legalEntity: OurLegalEntity {
    default =? onlyOne
  }
  field toLegalEntity: OurLegalEntity? {
    label = "Transfer Ownership to Legal Entity"
  }
  ref field source: IStore 
  ref field destination: IStore 
  field items: [TransferItem]? inline by delivery 
  
  compute gstAmount: Money[currency]? = items*.gstAmount.sum
  compute totalWithoutGst: Money[currency]? = items*.amount.sum
  ref stored compute total: Money[currency]? = totalWithoutGst + gstAmount

  //Views
  impl object view list = Transfer.all >> nav{list(canAdd = false){grid(labels = None){row{
    itemImage >> field(miniature = List, width = 0.15)
    dash >> field(width = 0.85)
  }}}}
  
  impl view ref = x{
    state >> field (editMode = AlwaysEdit) dispatchState title x{dispatchDate label("–") deliveryDate}
  }
  impl view dash = y(spacing = false) {
    x{dispatchDate >> field(fontStyle = Label) label("–") deliveryDate >> field(fontStyle = Label)}
    x{state >> field (editMode = AlwaysEdit) dispatchState title}
    refItems
  }
  impl view dashOut = y(spacing = false) {
    dispatchDate >> field(fontStyle = Label)
    x{state >> field (editMode = AlwaysEdit) dispatchState title}
    refItems
  }
  impl view dashIn = y(spacing = false) {
    deliveryDate >> field(fontStyle = Label)
    x{state >> field (editMode = AlwaysEdit) dispatchState title}
    refItems
  }
  impl view form = nav{
     grid (width = 1.2){
       issuesView
       row{number refNum total >> field(canEditUnit = true, visible = toLegalEntity)}
       stateView
       row {legalEntity, toLegalEntity, space}
       row {source, destination, space}
       row {sourceStockType >> field(compact), destinationStockType >> field(compact), space}
       row {dispatchDate deliveryDate space} 
       
       freightView
       possibleDispatchPeriods >> list(frame = false){ 
         x {
           start
           label("—")
           if (end == Date.max) "∞" else end
           button("Set") {
             this.dispatchDate = start
             this.save()
           }
         }
       }
       extension
       items >> list(mode = EditSelect) {
         form 
       }
    }
    ledgerBtn
  }
  
  view stateView = x(label = "State"){state >> field(editMode = AlwaysEdit) availability dispatchState}
}

inline entity TransferItem extends IProdAmountQtyItem with FProductItems with IProdMoveItemOut with IProdMoveItemIn {
  override func prodMove = delivery
  impl func prodMoveIn = delivery
  impl func prodMoveOut = delivery
  impl func moveOutStockType = delivery.sourceStockType
  impl func moveInStockType = delivery.destinationStockType
  
  override func needProductItems: Bool = delivery.moveInState == Complete
  impl func pricesIncludingGst = delivery.legalEntity.pricesIncludingGst
  override func currency: Currency = delivery.currency
  impl func moveItemActive: Bool = true
  impl func considerGst = delivery.legalEntity.hasGst
  
  impl field product: IProductInv {
    available(Ref).with(unit, altUnits, productCost)
    from = IProductInv.all.filter(_.isTangible)
    update = {
      productUpdated()
    }
  }
  impl func updateGstRate(): Void = {
    gstRate = product.gstRate(delivery.legalEntity.legalEntity)
  }
  
  field delivery: Transfer by items

  //Register 
  register invLedgers = if (let to = delivery.toLegalEntity) {
    if (delivery.state.started && product.isTangible) {
      ProductItem.map(product, baseQty, productItems) {
        delivery.sourceStockType.inv!.obj.new(
          journal = delivery, contraLegalEntity = to, product = product, productItem = item,
          qty = -trQty, contraAccount = CostOfGoodsSold, 
          contraAmount = -amount, gstRate = gstRate, gstAmount = gstAmount)
      }
    }
  } else if (delivery.sourceStockType != delivery.destinationStockType && delivery.state.started) {
    ProductItem.map(product, baseQty, productItems) {
      delivery.sourceStockType.inv!.obj.new(
        journal = delivery, contraAccount = delivery.destinationStockType.inv!.acc, 
        product = product, productItem = item, qty = -trQty)
    }
  }
  
  impl view form = grid(width = 1.2, margin = TopBottom) {
    row (labels = false){
      product >> field(width = 0.6) 
      qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right, visible = delivery.toLegalEntity) 
      amountEditor >> field(width = 0.2, align = Right, visible = delivery.toLegalEntity)
    }
    row {
      stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || isUnav) 
      space(width = 0.2) 
      gstEditor  >> field(visible = ui.isSelected && delivery.toLegalEntity && delivery.legalEntity.hasGst, width = 0.2) 
      space(width = 0.2) 
    }
    availableView >> field(visible = ui.isSelected && moveItemActive, label = "")
    productItems >> field(visible = ui.isSelected && product.trackItems)
  }
}


