trait IProdMove extends Entity with DashboardItem {
  background = "#2e8e67"
  func isProdMoveIn: Bool = false
  func isProdMoveOut: Bool = false
  func moveItems: [IProdMoveItem]?
  
  ref compute refItems {
    value = RefProductItems.create(moveItems.map(RefProductQty(product = product, qty = qty)))
  }
}

interface IProdMoveItem {
  func prodMove: IProdMove
  func product: ISubProduct
  func unit: ProductUnit
  func qty: UQty[unit]
  func moveItemActive: Bool
  func needProductItems: Bool
  func productItems: [ProductItem]? 
  
  func moveDocItem: AnyEntity? = this.as[IProdMoveItem with AnyEntity]
  compute baseQty: UQty[product.unit] = product.toBase(qty) 
  func isTangible = product.isTangible
  func itemsQty: UQty[unit]? = qty
}

enum ProdMoveState(active: Bool, sort: UDec[2]?) {
  case Draft(active = true, sort = 2) {background = "#ecd"}
  case Planned(active = true, sort = 1) {background = "#ed9"}
  case Complete(active = false, sort = 0) {
    color = "white"
    background = "#090"
  }
  case Canceled(active = false, sort = 0) {background = "#ddd"}
}

