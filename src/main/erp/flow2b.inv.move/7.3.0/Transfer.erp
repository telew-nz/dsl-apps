entity Transfer extends IOutgoingDelivery with IIncomingDelivery with Journal {
  background = "#2e8e67"
  func deliverySupplier = legalEntity.legalEntity
  func deliveryReceiver = toLegalEntity.alt(legalEntity).legalEntity

  //Fields
  object field gen: Int?
  field currency: Currency = Currency.our
  const ref field n: Int? = increment(gen)
  compute gstAmount: Money[currency]? = items*.gstAmount.sum
  compute totalWithoutGst: Money[currency]? = items*.amount.sum
  ref stored compute total: Money[currency]? = totalWithoutGst + gstAmount
  func pathCanBeExecuted: Bool = !freightCompany && dispatchState == ToDispatch
  func entityNumbers = [number, trackingNumber]
  field legalEntity: OurLegalEntity {
    default =? onlyOne
  }
  field toLegalEntity: OurLegalEntity? {
    label = "Transfer Ownership to Legal Entity"
  }
  func deliverySrc: IStore? = source
  func deliveryDst: IStore? = destination
  field source: IStore 
  field destination: IStore 
  field items: [TransferItem]? inline by delivery 
  func journalDate = dispatchDate
  
  func pathSrc = source
  func pathDst = destination
  func canBeDeliveredInstantly(store: IStore): Bool = (try? source) && store == source
  //Compute
  func number = "TR" + n
  func title = number + " " + dispatchDate.as[Date[day]]!
  
  //Views
  object view list = Transfer.all >> nav{list{grid(labels = Top){
    row{number >> field(width = 0.3) dispatchDate >> field(width = 0.3) source >> field(width = 0.4) }
    row{legalEntity >> field(width = 0.3) toLegalEntity >> field(width = 0.3, label = "Transfer Ownership to") destination >> field(width = 0.4) }
    statusesView
  }}}
  view ref = x{
    status >> field (editMode = AlwaysEdit) dispatchState title
  }
   view form = nav{
     grid (width = 1.2){
       row{number total >> field(canEditUnit = true, visible = toLegalEntity) space}
       statusesView
       row {legalEntity, toLegalEntity, dispatchDate}
       row {source, destination, deliveryDate}
       freightView
       possibleDispatchPeriods >> list(frame = false){ 
         x {
           start
           label("—")
           if (end == Date.max) "∞" else end
           button("Set") {
             this.dispatchDate = start
             this.save()
           }
         }
       }
       extension
       items >> list(mode = EditSelect) {
         form 
       }
       supplyOptionsView >> field(label = "Supply Options")
    }
    generalLedgerButton
  }
  
  view statusesView = x(label = "State"){status availability dispatchState overdueState}
}

inline entity TransferItem extends IAmountQtyItem with IOutgoingDeliveryItem with IIncomingDeliveryItem {
  func itemDelivery = delivery
  func pricesIncludingGst = delivery.legalEntity.pricesIncludingGst
  func currency: Currency = delivery.currency
  func active: Bool = true
  field product: IProduct {
    available(Ref).with(unit, altUnits)
    from = IProduct.all.filter(isTangible)
    update = {
      this.unit = new.unit
      this.qty = this.qty.as[Qty[this.unit]]!
      gstRate = product.gstRate(delivery.legalEntity)
    }
  }
  func stockItem = this
  field unit: ProductUnit {from = product.units}
  field qty: Qty[unit] {
    default = 1
    label = "Quantity"
  }
  
  field delivery: Transfer by items

  //Register 
  register ownershipTransfer = if (let to = delivery.toLegalEntity) {
    if (delivery.status != Planned && product.isTangible) {
      LInventory(journal = delivery, contraLegalEntity = to, product = product, 
                 qty = baseQty, isDebit = false, contraAccount = CostOfGoodsSold, 
                 contraAmount = -amount, gstRate = gstRate, gstAmount = gstAmount)
    }
  }
  
  view form = grid(width = 1.2, margin = None) {
    row (labels = false){
      product >> field(width = 0.6) 
      qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right, visible = delivery.toLegalEntity) 
      amountEditor >> field(width = 0.2, align = Right, visible = delivery.toLegalEntity)
    }
    row {
      stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || isUnavailable) 
      space(width = 0.2) 
      gstEditor  >> field(visible = ui.isSelected && delivery.toLegalEntity && delivery.legalEntity.hasGst, width = 0.2) 
      space(width = 0.2) 
    }
    availableView >> field(visible = ui.isSelected && active, label = "")
  }
}


