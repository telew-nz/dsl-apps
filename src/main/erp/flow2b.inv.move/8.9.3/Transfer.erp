entity Transfer extends IOutgoingDelivery with IIncomingDelivery with Journal with HasNumber {
  background = "#2e8e67"
  
  impl func stockTypeSrc = sourceStockType
  impl func stockTypeDst = destinationStockType
  field sourceStockType: StockType = Inventory  
  field destinationStockType: StockType = Inventory  
  impl func deliverySupplier = legalEntity.legalEntity
  impl func deliveryReceiver = toLegalEntity.alt(legalEntity).legalEntity

  //Fields
  override func itemOrder = ("Date", dispatchDate)
  object field gen: Int?
  field currency: Currency = Currency.our
  const ref field n: Int? = increment(gen)
  compute gstAmount: Money[currency]? = items*.gstAmount.sum
  compute totalWithoutGst: Money[currency]? = items*.amount.sum
  ref stored compute total: Money[currency]? = totalWithoutGst + gstAmount
  override func pathCanBeExecuted: Bool = !freightCompany && dispatchState == ToDispatch
  override func entityNumbers = [number, refNum, trackingNumber]
  impl field legalEntity: OurLegalEntity {
    default =? onlyOne
  }
  field toLegalEntity: OurLegalEntity? {
    label = "Transfer Ownership to Legal Entity"
  }
  impl func deliverySrc: IStore? = source
  impl func deliveryDst: IStore? = destination
  ref field source: IStore 
  ref field destination: IStore 
  impl field items: [TransferItem]? inline by delivery 
  impl func journalDate = dispatchDate
  override func activeRoles = if (!isBeforeInit) {
    if (deliveryStatus == Planned || deliveryStatus == InTransit) [StoreOperative]
  }
  override func pathSrc = source
  override func pathDst = destination
  impl func canBeDeliveredInstantly(store: IStore): Bool = (try? source) && store == source
  //Compute
  impl func number = "TR" + n
  impl func title = "$fullNum $source >> $destination"
  
  //Views
  impl object view list = Transfer.all >> nav{list{grid(labels = Top){
    row{fullNum >> field(width = 0.3) dispatchDate >> field(width = 0.3) source >> field(width = 0.4) }
    row{legalEntity >> field(width = 0.3) toLegalEntity >> field(width = 0.3, label = "Transfer Ownership to") destination >> field(width = 0.4) }
    statusesView
    refItems
  }}}
  impl view ref = x{
    status >> field (editMode = AlwaysEdit) dispatchState title x{dispatchDate label("–") deliveryDate}
  }
  impl view dash = y {
    x{dispatchDate label("–") deliveryDate}
    x{status >> field (editMode = AlwaysEdit) dispatchState title}
    refItems
  }
  impl view form = nav{
     grid (width = 1.2){
       issuesView
       row{number refNum total >> field(canEditUnit = true, visible = toLegalEntity)}
       statusesView
       row {legalEntity, toLegalEntity, dispatchDate}
       row {source, destination, deliveryDate}
       row {sourceStockType >> field(compact), destinationStockType >> field(compact), space}
       freightView
       possibleDispatchPeriods >> list(frame = false){ 
         x {
           start
           label("—")
           if (end == Date.max) "∞" else end
           button("Set") {
             this.dispatchDate = start
             this.save()
           }
         }
       }
       extension
       items >> list(mode = EditSelect) {
         form 
       }
    }
    generalLedgerButton
  }
  
  view statusesView = x(label = "State"){status availability dispatchState}
}

inline entity TransferItem extends IProdAmountQtyItem with HasProductItems with IOutgoingDeliveryItem with IIncomingDeliveryItem {
  impl func itemDelivery = delivery
  impl func needProductItems: Bool = delivery.status.started
  impl func pricesIncludingGst = delivery.legalEntity.pricesIncludingGst
  override func currency: Currency = delivery.currency
  impl func active: Bool = true
  impl func considerGst = delivery.legalEntity.hasGst
  impl field product: IProduct {
    available(Ref).with(unit, altUnits, productCost)
    from = IProduct.all.filter(_.isTangible)
    update = {
      productUpdated()
    }
  }
  impl func isReserved = true
  impl func updateGstRate(): Void = {
    gstRate = product.gstRate(delivery.legalEntity)
  }
  override func stockItem = this
  
  field delivery: Transfer by items

  //Register 
  register invLedgers = if (let to = delivery.toLegalEntity) {
    if (delivery.status.started && product.isTangible) {
      ProductItem.map(product, baseQty, productItems) {
        delivery.sourceStockType.obj.new(
          journal = delivery, contraLegalEntity = to, product = product, productItem = item,
          qty = -trQty, contraAccount = CostOfGoodsSold, 
          contraAmount = -amount, gstRate = gstRate, gstAmount = gstAmount)
      }
    }
  } else if (delivery.sourceStockType != delivery.destinationStockType && delivery.status.started) {
    ProductItem.map(product, baseQty, productItems) {
      delivery.sourceStockType.obj.new(
        journal = delivery, contraAccount = delivery.destinationStockType.acc, 
        product = product, productItem = item, qty = -trQty)
    }
  }
  
  impl view form = grid(width = 1.2, margin = TopBottom) {
    row (labels = false){
      product >> field(width = 0.6) 
      qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right, visible = delivery.toLegalEntity) 
      amountEditor >> field(width = 0.2, align = Right, visible = delivery.toLegalEntity)
    }
    row {
      stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || isUnavailable) 
      space(width = 0.2) 
      gstEditor  >> field(visible = ui.isSelected && delivery.toLegalEntity && delivery.legalEntity.hasGst, width = 0.2) 
      space(width = 0.2) 
    }
    availableView >> field(visible = ui.isSelected && active, label = "")
    productItems >> field(visible = ui.isSelected && product.trackItems)
  }
}


