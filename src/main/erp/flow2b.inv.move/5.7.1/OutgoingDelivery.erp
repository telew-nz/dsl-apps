trait IBaseOutgoingDelivery extends IDelivery {
  background = "#2e8e67"
  func outgoingItems: [IOutgoingDeliveryItem]? = items*.as[IOutgoingDeliveryItem]
  
  ref stored compute availability: GoodAvailability {
    value = {
      if (unavailableItems) Unavailable
      else if (deliveryStatus != Planned) Dispatched
      else if (items.all(isAvailableNow)) Available
      else if (items.exists(awaitingForDate && awaitingForDate! > dispatchDate)) AvailableLater
      else Waiting
    }
	visible = availability.isIssue
  }
  ref compute dispatchState: DispatchState {
    value = {
      if (deliveryStatus != Planned) Dispatched
      else if (canDispatch && dispatchDate <= now) ToDispatch
      else NotReady
    } 
    visible = dispatchState == ToDispatch
  }
  func canDispatch = deliveryStatus == Planned && availability == Available
  func hasInvIssues = (availability.isIssue || overdueState == Overdue) && isBeforeInit
    
  compute earliestDispatchDate: Date? {
    value = items*.awaitingForDate.max
    visible = deliveryStatus == Planned && earliestDispatchDate
  }
  compute possibleDispatchPeriods: [Period]? {
    value = if (unavailableItems) {
      items.filter(isUnavailable)
        .fold[[Period]?](
          [Period(start = Date.min, end = Date.max)], 
          (item, acc) => item.availablePeriods.flatMap(p1 => acc.mapOpt(p2 => p1.intersect(p2)))
        )
    }
    visible = deliveryStatus == Planned && possibleDispatchPeriods
  }
  compute unavailableItems = items.filter(isUnavailable)
  compute supplyOptions = if (status != Planned) null else {
    unavailableItems*.as[IOutgoingDeliveryItem]
       .flatMap(u => u.product.stocks.map(reg = _, u.unavailableQty))
       .groupBy(reg.legalEntity, reg.store)
       .agg(availableAllQty = map(reg.outlook.clamp(0, unavailableQty)).sum).toSeq
       .filter(availableAllQty > 0 && (store != deliverySource || legalEntity != deliverySupplier))
       .sortBy(availableAllQty.desc)
  }
  func supplyOptionGoods(legalEntity: LegalEntity, store: Store) = unavailableItems*.as[IOutgoingDeliveryItem]
    .map(good = product, unit = unit, qty = unavailableQty!, stockReg = product.stock(legalEntity, store))
  view supplyOptionsView = supplyOptions >> list(visible = deliveryStatus == Planned) {
    grid (labels = None) {
      row{store >> field(width = 0.4) legalEntity >> field(width = 0.6)}
      supplyOptionGoods(legalEntity, store) >> list(frame = false) {
        grid(labels = None, margin = None) {
          row{good >> field(width = 0.4), x(width = 0.6){qty, stockReg?.stock.alt(Stock()).availableView(out = false, good, qty)}}
        }
      }
      add("Transfer") {
        Transfer(source = store, destination = this.deliverySource!, legalEntity = this.deliverySupplier,
                 dispatchDate = dispatchDate, deliveryDate = dispatchDate,
                 items = supplyOptionGoods(legalEntity, store)
                   .filter(stockReg?.outlook > 0)
                   .map(TransferItem(product = good, unit = unit, qty = qty.min(stockReg?.outlook)))!
                ).form.open
      }
    }
  }
}

trait IOutgoingDelivery extends IBaseOutgoingDelivery {
  background = "#449977"
  singular = "Outgoing Delivery"
  plural = "Outgoing Deliveries"
  report Report {
    field canDispatchOnly: Bool = true
    field warehouseOperative: Actor? {
      default = Person.current.filter(is(WarehouseOperative))
      from = Person.all.filter(is(WarehouseOperative))
    }
    view list = IOutgoingDelivery.all.filter(isFor(warehouseOperative, WarehouseOperative) && (!canDispatchOnly || canDispatch)) >> nav{list(canAdd = false){}}
  }
}

inline trait IOutgoingDeliveryItem extends IDeliveryItem {
  var product: IProduct 
  func unit: ProductUnit
  func qty: Qty[unit]
  
  func outcomeStockReg: StockRegister?
  compute prevOutcomeStock: Stock? = outcomeStockReg?.prevStock
  compute baseQty: Qty[product.unit] = product.toBase(qty)
    
  //Compute
  compute isAvailableNow = !product.isTangible || prevOutcomeStock?.available >= qty
  compute isAwaiting = !isAvailableNow && prevOutcomeStock?.outlook >= qty
  compute awaitingForDate = if (product.isTangible) outcomeStockReg?.awaitingForDate else null
  compute isUnavailable = product.isTangible && prevOutcomeStock?.outlook < qty
  compute unavailableQty = if (product.isTangible) (qty - prevOutcomeStock?.outlook).max(0) else 0
  
  //Views
  func stockDesc = prevOutcomeStock.alt(Stock()).availableView(out = itemDelivery?.deliveryStatus != Planned, product, qty)
  
  view availableView = y {
    outcomeStockReg?.awaitingForDocs >> list(label = "Awaiting for", frame = false, editMode = AlwaysRead) {
      grid(labels = None, margin = NoneInner) {
        row{
          product.fromBase(to = unit, qty.as[Qty[product.unit]]!) >> field(width = 0.1) 
          item.date >> field(width = 0.3)
          item.document >> field(width = 0.6)
        }
      }
    }
    (if (this.isUnavailable && (itemDelivery?.status == Planned || !itemDelivery)) product.stocks
      .filter(i => !i.isEmpty && (i.legalEntity != itemDelivery?.deliverySupplier || i.store != (try? itemDelivery?.deliverySource!) ))
    else null)
    >> list(frame = false, mode = Static, label = "Available in") {
      x{legalEntity >> field(visible = legalEntity != this.itemDelivery?.deliverySupplier), store, stock.title}
    }
  }
}