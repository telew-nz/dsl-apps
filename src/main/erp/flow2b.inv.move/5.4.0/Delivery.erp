trait IDelivery {
  func deliverySupplier: LegalEntity
  func deliveryReceiver: LegalEntity
  func deliveryStatus: DeliveryStatus = status
  func deliverySource: Store?
  func items: [IDeliveryItem]?
    
  ref field dispatchDate: Date {
    default = now
    update = {
      if (new > deliveryDate) deliveryDate = new
    }
  }
  ref field deliveryDate: Date {
    default = now
    isValid = deliveryDate >= dispatchDate
  }
  ref field status: DeliveryStatus {
    default = Planned
    update = {
      if (new == InTransit) {
        dispatchDate = now
        if (dispatchDate > deliveryDate) deliveryDate = dispatchDate
      } else if (new == Delivered) deliveryDate = now
    }
  }
  ref compute overdueState: OverdueState {
    value = {
      if (status == Delivered) Delivered
      else if (status == Planned && Date.now > dispatchDate) Overdue
      else if (status == InTransit && Date.now > deliveryDate) Overdue
      else NoOverdue
    } 
    visible = overdueState == Overdue
  }
}

enum DeliveryStatus {
  case Planned {
    background = "#ed9"
  }
  case InTransit {
    background = "#dea"
  }
  case Delivered {
    color = "white"
    background = "#090"
  }
  case Canceled {
    background = "#ddd"
  }
}

inline trait IDeliveryItem {
  func itemDelivery: IDelivery?
  
  func isAvailableNow: Bool = true
  func isUnavailable = !isAvailableNow
  func awaitingForDate: Date? = null
  func availablePeriods: [Period]? = if (let d = awaitingForDate) [Period(start = d, end = Date.max)]
}

