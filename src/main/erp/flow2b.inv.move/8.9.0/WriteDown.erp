entity InventoryWriteDown extends IProdQtyItem with HasProductItems with StockCorrection with IBaseOutgoingDelivery with IOutgoingDeliveryItem {
  singular = "Write Down"
  func deliveryStatus: DeliveryStatus = Delivered
  ref field product: IProduct {
    from = IProduct.all.filter(_.isTangible)
    available(Ref).with(unit, altUnits)
    update = {
      productUpdated()
    }
  }
  func needProductItems: Bool = true
  field stockType: StockType = Inventory
  func stockTypeSrc = stockType
  func stockTypeDst = null
  func active = true
  func deliverySupplier = legalEntity.legalEntity
  func deliveryReceiver = legalEntity.legalEntity
  func dispatchDate = date
  func deliveryDate = date
  
  compute number = "WD$n"
  func title: String = "$number $product"
  func journalDate: Date = date
  func deliverySrc = store
  func items: [IDeliveryItem]? = [this]
  func itemDelivery: IDelivery? = this
  
  compute baseQty: UQty[product.unit] = product.toBase(qty)
  
  register invLedgers = {
    ProductItem.map(product, baseQty, productItems) {
      stockType.obj.new(
         journal = this, product = product, productItem = item, qty = -trQty,
         contraAccount = InventoryAdjustments
      )
    }
  }
  
  view form = nav{grid {
      date
      number
      refNum
      availability
      legalEntity
      store
      product
      stockType
      qty >> field(canEditUnit = true)
      stockDesc
      snView
    }
    generalLedgerButton
  }
  object view list = InventoryWriteDown.all >> nav{list{grid(labels = None){
    row{fullNum date legalEntity store}
    row{product qty space space}
  }}}
}
  
