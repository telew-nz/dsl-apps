entity InventoryWriteDown extends StockCorrection with IBaseOutgoingDelivery with IOutgoingDeliveryItem {
  singular = "Write Down"
  field date: Date = now
  const ref field n: Int? = increment(Stocktake.gen)
  field legalEntity: OurLegalEntity {
    default =? onlyOne
  }
  func deliveryStatus: DeliveryStatus = Delivered
  ref field store: IStore =? onlyOne
  ref field product: IProduct {
    from = IProduct.all.filter(isTangible)
    available(Ref).with(unit, altUnits)
    update = {
      this.unit = new.unit
      this.qty = this.qty.as[Qty[this.unit]]!
    }
  }
  func active = true
  field unit: ProductUnit {
    from = product.units
  }
  field qty: Qty[unit] {
    default = 1
    label = "Quantity"
  }
  func deliverySupplier = legalEntity.legalEntity
  func deliveryReceiver = legalEntity.legalEntity
  func dispatchDate = date
  func deliveryDate = date
  
  compute number = "WD$n"
  func title: String = "$number $product"
  func journalDate: Date = date
  func deliverySrc = store
  func items: [IDeliveryItem]? = [this]
  func itemDelivery: IDelivery? = this
  
  compute baseQty: Qty[product.unit]? = product.toBase(qty)
  
  register inventoryLedger = {
    LInventory(journal = this, product = product, qty = baseQty, isDebit = false,
               contraAccount = InventoryAdjustments)
  }
  
  view form = nav{grid {
      date
      number
      availability
      legalEntity
      store
      product
      qty >> field(canEditUnit = true)
      stockDesc
    }
    generalLedgerButton
  }
  object view list = InventoryWriteDown.all >> nav{list{grid(labels = None){
    row{number date legalEntity store}
    row{product qty space space}
  }}}
}
  
