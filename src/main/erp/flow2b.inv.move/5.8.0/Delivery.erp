trait IDelivery {
  background = "#2e8e67"
  func isForCurrent(role: Role): Bool = isFor(User.current, role)
    
  func legalEntity: LegalEntity
  func deliverySupplier: LegalEntity
  func deliveryReceiver: LegalEntity
  func deliveryStatus: DeliveryStatus = status
  func store: Store? = null
  func deliverySource: Store?
  func items: [IDeliveryItem]?
  func hasInTransit = true 
  field owner: Actor?
  ref field dispatchDate: Date {
    default = now
    dynamicLabel = if (this.hasInTransit) "Dispatch Date" else "Date"
    update = {
      if (new > deliveryDate || !hasInTransit) deliveryDate = new
    }
  }
  ref field deliveryDate: Date {
    default = now
    isValid = deliveryDate >= dispatchDate
    visible = hasInTransit
    update = {
      if (new < dispatchDate && status == Planned) dispatchDate = new
    }
  }
  ref field status: DeliveryStatus {
    default = Planned
    update = {
      if (new == InTransit) {
        dispatchDate = now
        if (dispatchDate > deliveryDate) deliveryDate = dispatchDate
      } else if (new == Delivered) {
        if (!hasInTransit || old == Planned) dispatchDate = now
        deliveryDate = now
      }
    }
    from = if (hasInTransit) DeliveryStatus.all.toSet else [DeliveryStatus.Planned, DeliveryStatus.Delivered, DeliveryStatus.Canceled].toSet
  }
  func dueDate: Date? = if (status == Planned) dispatchDate else if (status == InTransit) deliveryDate
  ref compute overdueState: OverdueState {
    value = {
      if (status == Delivered) Delivered
      else if (dueDate && Date.now > dueDate!) Overdue
      else NoOverdue
    } 
    visible = overdueState == Overdue
  }
  func hasInvIssues = overdueState == Overdue && !isBeforeInit
  func isBeforeInit = store && store!.initialDate(legalEntity) ?< deliveryDate
  func active = status == Planned || status == InTransit
}

enum DeliveryStatus {
  case Planned {
    background = "#ed9"
  }
  case InTransit {
    background = "#dea"
  }
  case Delivered {
    color = "white"
    background = "#090"
  }
  case Canceled {
    background = "#ddd"
  }
}

inline trait IDeliveryItem {
  func itemDelivery: IDelivery?
  
  func isAvailableNow: Bool = true
  func isUnavailable = !isAvailableNow
  func awaitingForDate: Date? = null
  func availablePeriods: [Period]? = if (let d = awaitingForDate) [Period(start = d, end = Date.max)]
}


