entity Transfer extends IOutgoingDelivery {
  func deliverySupplier: LegalEntity = legalEntity
  func deliveryReceiver: LegalEntity = legalEntity 
  func outgoingItems = items
  //Fields
  object field gen: Int?
  const ref field n: Int? = increment(gen)
  field legalEntity: LegalEntity =? (try? LegalEntity.ours.onlyOne!) {from = LegalEntity.ours}
  field source: Store {from = Store.ours}
  field destination: Store {from = Store.ours}  
  field items: [TransferItem] inline by delivery {
    isValid = items.isUnique(product)
  }
  
  //Compute
  func number = "TR" + n
  func title = number + " " + dispatchDate.as[Date[day]]!
  
  //Views
  object view list = Transfer.all >> nav{list{grid(labels = None){
    row{number dispatchDate.as[Date[day]]! legalEntity source destination}
    x{status availability dispatchState overdueState}
  }}}
  view ref = x{
    status dispatchState title
  }
   view form = nav{grid {
    row {number, space}
    row {x(label = "State"){status availability dispatchState overdueState}, earliestDispatchDate}
    row {dispatchDate, deliveryDate}
    row {legalEntity, space}
    row {source, destination}
    
    items
    supplyOptionsView >> field(label = "Supply Options", visible = supplyOptions)
  }}
}

inline entity TransferItem extends IOutgoingDeliveryItem {
  func itemDelivery = delivery
  field product: IProduct {
    available(Ref).with(unit, altUnits)
    from = IProduct.all.filter(isTangible)
    update = {
      this.unit = new.unit
      this.qty = this.qty.as[Qty[this.unit]]
    }
  }
  field unit: ProductUnit {from = product.units}
  field qty: Qty[unit] = 1 {label = "Quantity"}

  func outcomeStockReg: StockRegister? = outcomeStock
    
  field delivery: Transfer by items

  //Register
  register outcomeStock = {
    StockRegister(
      legalEntity = delivery.legalEntity, store = delivery.source, good = product,
      sort = if (delivery.status == Planned) 1 else 0, 
      date = delivery.dispatchDate, document = delivery,
      factualQty = if (delivery.status == Planned) 0 else -(baseQty), 
      reservedQty = if (delivery.status == Planned) baseQty else 0
    )
  } {autoRecalc = true}  
  
  register incomeStock = {
    StockRegister(
      legalEntity = delivery.legalEntity, store = delivery.destination, good = product,
      sort = if (delivery.status != Delivered) 1 else 0, 
      date = delivery.deliveryDate, document = delivery,
      factualQty = if (delivery.status == Delivered) baseQty else 0, 
      expectedQty = if (delivery.status == Delivered) 0 else baseQty
    )
  }  
  
  view form = grid {
    read {
      grid(labels = None) {
        row{product >> field(width = 0.4), x(width = 0.6){qty, stockDesc}}
      }
    } edit {
      y {
        grid{row{product, qty >> field(canEditUnit = true)}}
        stockDesc
      }
    }
    availableView
  }
}


