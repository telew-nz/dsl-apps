trait IOutgoingDelivery extends IDelivery {
  func deliverySource: Store? = source
  func source: Store
  func outgoingItems: [IOutgoingDeliveryItem]?
 
  ref stored compute availability: Availability = (
    if (unavailableItems) Unavailable
    else if (deliveryStatus != Planned) Dispatched
    else if (outgoingItems.all(isAvailableNow)) Available
    else if (outgoingItems.exists(awaitingForDate && awaitingForDate! > dispatchDate)) AvailableLater
    else Waiting
  ) {visible = deliveryStatus == Planned || availability == Unavailable}
  ref compute dispatchState: DispatchState = {
    if (deliveryStatus != Planned) Dispatched
    else if (availability == Available && dispatchDate <= now) ToDispatch
    else NotReady
  } {visible = dispatchState == ToDispatch}
  
  compute earliestDispatchDate: Date? = (outgoingItems*.awaitingForDate.max) {
    visible = deliveryStatus == Planned && earliestDispatchDate
  }
  compute unavailableItems = outgoingItems.filter(isUnavailable)
  compute supplyOptions = if (status != Planned) null else {
    unavailableItems
       .flatMap(u => u.product.stocks.map(reg = _, u.unavailableQty))
       .groupBy(reg.legalEntity, reg.store)
       .agg(availableAllQty = map(reg.outlook.clamp(0, unavailableQty)).sum).toSeq
       .filter(availableAllQty > 0 && (store != source || legalEntity != deliverySupplier))
       .sortBy(availableAllQty.desc)
  }
  func supplyOptionGoods(legalEntity: LegalEntity, store: Store) = unavailableItems
    .map(good = product, unit = unit, qty = unavailableQty!, stockReg = product.stock(legalEntity, store))
  view supplyOptionsView = supplyOptions >> list(visible = deliveryStatus == Planned) {
    grid (labels = None) {
      row{store >> field(width = 0.4) legalEntity >> field(width = 0.6)}
      supplyOptionGoods(legalEntity, store) >> list(frame = false) {
        grid(labels = None, margin = None) {
          row{good >> field(width = 0.4), x(width = 0.6){qty, stockReg?.stock.alt(Stock()).availableView(out = false, good, qty)}}
        }
      }
      add("Transfer") {
        Transfer(source = store, destination = this.source, legalEntity = this.deliverySupplier,
                 dispatchDate = dispatchDate, deliveryDate = dispatchDate,
                 items = supplyOptionGoods(legalEntity, store)
                   .filter(stockReg?.outlook > 0)
                   .map(TransferItem(product = good, unit = unit, qty = qty.min(stockReg?.outlook)))!
                ).form.open
      }
    }
  }
}

inline trait IOutgoingDeliveryItem extends IDeliveryItem {
  func outcomeStockReg: StockRegister?
  compute prevOutcomeStock: Stock? = outcomeStockReg?.prevStock
  
  //Compute
  compute isAvailableNow = !product.isTangible || prevOutcomeStock?.available >= qty
  compute isAwaiting = !isAvailableNow && prevOutcomeStock?.outlook >= qty
  compute awaitingForDate = if (product.isTangible) outcomeStockReg?.awaitingForDate else null
  compute isUnavailable = product.isTangible && prevOutcomeStock?.outlook < qty
  compute unavailableQty = if (product.isTangible) (qty - prevOutcomeStock?.outlook).max(0) else 0
  
  //Views
  func stockDesc = prevOutcomeStock.alt(Stock()).availableView(out = itemDelivery?.deliveryStatus != Planned, product, qty)
  
  view availableView = y {
    outcomeStockReg?.awaitingForDocs >> list(label = "Awaiting for", frame = false, editMode = AlwaysRead) {
      grid(labels = None, margin = NoneInner) {
        row{
          product.fromBase(to = unit, qty.as[Qty[product.unit]]!) >> field(width = 0.1) 
          item.date >> field(width = 0.3)
          item.document >> field(width = 0.6)
        }
      }
    }
    (if (this.isUnavailable && (itemDelivery?.status == Planned || !itemDelivery)) product.stocks
      .filter(i => !i.isEmpty && (i.legalEntity != itemDelivery?.deliverySupplier || i.store != (try? itemDelivery?.deliverySource!) ))
    else null)
    >> list(frame = false, mode = Static, label = "Available in") {
      x{legalEntity >> field(visible = legalEntity != this.itemDelivery?.deliverySupplier), store, stock.title}
    }
  }
}