trait IProdMoveOut extends IProdMove {
  plural = "Outgoing Deliveries"
  
  var moveOutDate: Date
  func moveOutPriorityDate: Date = moveOutDate
  func moveOutState: ProdMoveState
  func moveOutLE: OurLegalEntity
  func moveOutStore: IStore
  func moveOutItems: [IIProdMoveItemOut]?
  
  impl func isProdMoveOut: Bool = true
  impl func moveItems: [IProdMoveItem]? = moveOutItems
  
  func moveOutBeforeInit = {
    let d1 = moveOutStore.initialDate(moveOutLE)
    (d1 && d1! > moveOutDate) 
  }
  impl func activeRoles = if (!moveOutBeforeInit && moveOutState.active) [StoreOperative]
  
  ref stored compute availability: GoodAvailability {
	visible = availability.isIssue
  }  
  
  ref compute dispatchState: DispatchState {
    value = {
      if (moveOutState == Canceled) Canceled
      else if (moveOutState == Complete) Dispatched
      else if (!canDispatch) {if (availability != Available) NotReady else NoDispatch}
      else if (moveOutDate <= now) ToDispatch
      else NotReady
    }
    visible = dispatchState.display
  }
  func canDispatch = moveOutState.active && availability == Available
  
  compute unavItems = if (isProdMoveOut) moveOutItems.filter(isUnav)
  compute unavProdItems = if (isProdMoveOut) moveOutItems.filter(isUnavProdItems)
  compute possibleDispatchPeriods: [Period]? {
    value = if (unavItems) {
      moveOutItems.filter(isUnav)
        .fold[[Period]?](
          [Period(start = Date.min, end = Date.max)], 
          (item, acc) => item.avPeriods.flatMap(p1 => acc.mapOpt(p2 => p1.intersect(p2)))
        )
    }
    visible = moveOutState.active && possibleDispatchPeriods
  }
  compute earliestDispatchDate: Date? {
    value = moveOutItems*.awaitingForDate.max
    visible = moveOutState.active && earliestDispatchDate
  }
  
  impl event onSave = {
    if (!isProdMoveOut) {
      availability = Available
    } else if (moveOutItems*.outStocks.all(calced)) {
      availability = {
        if (moveOutState == Canceled) Canceled
        else if (unavItems) Unavailable
        else if (unavProdItems) UnavailableProdItems
        else if (moveOutState == Complete) Dispatched
        else if (moveOutItems.all(isAvNow)) Available
        else if (moveOutItems.exists(awaitingForDate && awaitingForDate! > moveOutDate)) AvailableLater
        else Waiting
      }
    } else if (!try? availability) {
      availability = {
        if (moveOutState == Canceled) Canceled 
        else if (moveOutState == Complete) Dispatched 
        else Available
      }
    }
  }
  
  report Report {
    field canDispatchOnly: Bool = true
    field storeOperative: User? {
      default = User.current.filter(is(StoreOperative))
      from = User.all.filter(is(StoreOperative))
    }
    impl view list = IProdMoveOut.all
      .filter(isFor(storeOperative, StoreOperative) && (!canDispatchOnly || canDispatch))
      .sortBy(moveOutDate)
      >> nav{list(canAdd = false){}}
  }
}

interface IIProdMoveItemOut extends IProdMoveItem {
  func prodMoveOut: IProdMoveOut
  func moveOutStockType: StockType
  func outStocks: [ProdReg]?
  func outStockItems: [ProdItemReg]?
  
  impl func prodMove: IProdMove = prodMoveOut
  impl func needProductItems: Bool = prodMoveOut.moveOutState == Complete
 
  func isAvNow = !isTangible || outStocks.all(available - quotedQty >= 0)
  compute isAwaiting = !isAvNow && outStocks.all(outlook - quotedQty >= 0)
  func awaitingForDate = if (isTangible) outStocks*.awaitingForDate.max 
  compute isUnav = isTangible && outStocks.exists(outlook - quotedQty < 0)
  compute isUnavProdItems: Bool = isTangible && outStockItems.exists(outlook < 0)
  compute availableStock: Stock? = {
    if (isTangible) product.kitStock(outStocks*.prevStockStore)
  }
  compute availableIn = if (isUnav && prodMoveOut.moveOutState != Complete) {
    let sts <- product.stocks
    sts.filter(i => !i.isEmpty && ((i.legalEntity != prodMoveOut.moveOutLE) || (i.store != (try? prodMoveOut.moveOutStore)) ))
  } 
  
  func avPeriods: [Period]? = if (let d = awaitingForDate) [Period(start = d, end = Date.max)]
  func stockDesc = availableStock.alt(Stock()).availableView(product, qty)
  
  func makeOutStocks: [ProdReg]? = {
    if (isMoveItemOut && prodMoveOut.moveOutState != Canceled && moveItemActive) {
      product.tangibleProductQtys(baseQty).mapOpt(outStock(_.product, _.qty))
    }
  }
  
  func makeOutStockItems: [ProdItemReg]? = {
    if (isMoveItemOut &&prodMoveOut.moveOutState != Canceled && moveItemActive) {
      productItems.map (
        ProdItemReg(
          item = _
          sort = prodMoveOut.moveOutState.sort
          date = prodMoveOut.moveOutDate
          priorityDate = prodMoveOut.moveOutPriorityDate
          newStockType = moveOutStockType
          doc = prodMoveOut, docItem = moveDocItem
          qty = -1 
        )
      )
    }
  }
  
  func outStock(product: IProduct, baseQty: UQty): ProdReg? = {
    ProdReg(
      legalEntity = prodMoveOut.moveOutLE
      store = prodMoveOut.moveOutStore
      stockType = moveOutStockType 
      product = product
      doc = prodMoveOut, docItem = moveDocItem
      date = prodMoveOut.moveOutDate
      priorityDate = prodMoveOut.moveOutPriorityDate
      sort = prodMoveOut.moveOutState.sort
      qty = -baseQty
    )
  }
  
  
  view availableView {
    canInline = false
    layout = grid(labels = Top, width = 1.2) {
      outStocks*.awaitingForDocs.distinct >> list(label = "Awaiting for", frame = false, editMode = AlwaysRead) {
        grid(labels = None, margin = NoneInner) {
          row{
            product.fromBase(to = unit, qty.as[UQty[product.unit]]!) >> field(width = 0.1) 
            item.date >> field(width = 0.3)
            item.doc >> field(width = 0.6)
          }
        }
      }
      availableIn >> list(frame = false, mode = Static, label = "Available in") {
        x{legalEntity >> field(visible = legalEntity != this.prodMoveOut.moveOutLE), store, stock.title}
      }
    }
  }
}

trait IProdMoveItemOut extends AnyEntity with IIProdMoveItemOut {  
  impl register outStocks: [ProdReg]? {
    value = makeOutStocks
    availableFor = Inline
    available(Inline).for(Inline)
    autoRecalc = true
  }
  impl register outStockItems: [ProdItemReg]? {
    value = makeOutStockItems
    availableFor = Inline
    available(Inline).for(Inline)
    autoRecalc = true
  }
}