entity InventoryWriteDown extends Entity with IProdQtyItem with StockCorrection with IProdMoveOut with IProdMoveItemOut with FProductItems {
  singular = "Write Down"
  
  impl func prodMoveOut = this
  impl func moveOutItems = [this]
  impl compute moveOutDate {
    value = date
    update = {this.date = new}
  }
  impl func moveOutState = Complete
  impl func moveOutLE = legalEntity
  impl func moveOutStore = store
  impl func moveOutStockType = stockType.stock
  impl func moveItemActive = true
  
  override func isAv = super[IProdMoveItemOut].isAv
  override func calcedAv = super[IProdMoveItemOut].calcedAv
  override func isAv(level: StockLevel) = super[IProdMoveItemOut].isAv(level)
  
  impl ref field product: IProductInv {
    from = IProductInv.all.filter(_.isTangible)
    available(Ref).with(unit, altUnits)
    update = {
      productUpdated()
    }
  }
  ref field stockType: StockInvType = Inventory
  
  impl compute number = "WD$n"
  impl func title: String = "$number $product"
  override func journalDate: Date = date
   
  register invLedgers = {
    ProductItem.map(product, baseQty, productItems) {
      stockType.obj.new(
         journal = this, product = product, productItem = item, qty = -trQty,
         contraAccount = InventoryAdjustments
      )
    }
  }
  
  impl view ref = x {title stockType}
  impl view form = nav{grid {
      issuesView
      date
      number
      refNum
      availability
      legalEntity
      store
      product
      stockType
      qty >> field(canEditUnit = true)
      stockDesc
      snView
    }
    ledgerBtn
  }
  impl object view list = InventoryWriteDown.all >> nav{list{grid(labels = None){
    row{fullNum date legalEntity store}
    row{product qty space stockType}
  }}}
}
  
