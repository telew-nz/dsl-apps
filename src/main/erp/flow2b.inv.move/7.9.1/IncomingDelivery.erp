trait IBaseIncomingDelivery extends IDelivery {
  func deliverySrc: IStore? = null
  func incomingLegalEntity = legalEntity
  func itemOrder = ("Date", deliveryDate)
}

trait IIncomingDelivery extends IDeliveryPath with IBaseIncomingDelivery {
  singular = "Incoming Delivery"
  plural = "Incoming Deliveries"
  func pathDst = deliveryDst
  report Report {
    field activeOnly = true
    field storeOperative: User? {
      default = User.current.filter(is(StoreOperative))
      from = User.all.filter(is(StoreOperative))
    }
    view list = IIncomingDelivery.all.filter(isFor(storeOperative, StoreOperative) && (!activeOnly || deliveryStatus.active)) >> nav{list(canAdd = false){}}
  }
  func dispatchDateLabel = if (this.hasInTransit) "Pickup Date" else deliveryDateLabel
  func pathCanBeExecuted = !freightCompany
  func activeRoles = if (!isBeforeInit) {
    if (deliveryStatus == Planned || deliveryStatus == InTransit) [StoreOperative]
  }
}

interface IIIncomingDeliveryItem extends IDeliveryPItem {
  func makeInStocks = if (itemDelivery && itemDelivery!.is[IBaseIncomingDelivery] && itemDelivery!.deliveryStatus != Canceled && active) {
    product.tangibleProductQtys(qty).mapOpt(inStock(_.product, _.qty))
  }
    
  func inStock(product: IProduct, baseQty: Qty): StockRegister? = {
    if (let d = itemDelivery) {
      StockRegister(
        legalEntity = d.deliveryReceiver!.our!, store = d.deliveryDst!, good = product, item = stockItem,
        sort = if (d.deliveryStatus != Delivered) 1 else 0, 
        date = d.deliveryDate, document = d,
        factualQty = if (d.deliveryStatus == Delivered) baseQty else 0, 
        expectedQty = if (d.deliveryStatus == Delivered) 0 else baseQty
      )
    }
  }  
  compute baseQty: Qty[product.unit] = product.toBase(qty)
}
trait IIncomingDeliveryItem extends InlineEntity with IIIncomingDeliveryItem {
  var product: ISubProduct 
  
  register inStocks: [StockRegister]? {
    value = makeInStocks
    availableFor = Inline
    available(Inline).for(Inline)
    autoRecalc = true
  }
  
}