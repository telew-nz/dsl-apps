class TransferwiseCsvData extends BankStatementItem {
  field transferwiseId: String?
  impl field date: Date {format = "dd-MM-yyyy"}
  field amount: Money[2]?
  impl func stmAmount: Money[2]? = if (amount < 0) amount + totalFees else amount - totalFees
  field currency: Currency
  field description: String?
  field paymentReference: String?
  field runningBalance: Money[2]?
  field exchangeFrom: Currency?
  field exchangeTo: Currency?
  field exchangeRate: UMoney[5]?
  field payerName: String?
  field payeeName: String?
  field payeeAccountNumber: String?
  field merchant: String?
  field totalFees: UMoney[2]?
  impl func data(account: FinAccount): BankData = {
    BankData(thierName = payeeName, memo = (description + " " + paymentReference).trim, thierAccount = payeeAccountNumber(")" .. ].trim, bankId = transferwiseId, balance = runningBalance)
  }
  
  impl func fee: UMoney? = totalFees
  impl func stmCurrency: Currency? = exchangeTo
  impl func amountInCurrency: Number? = (stmAmount*exchangeRate).as[Money[exchangeTo!]]
}

extend enum BankStatementType {
  case TransferwiseCsv(
    canProcess = file.is("csv") && data.toString.lines(CSV).first == '"TransferWise ID",Date,Amount,Currency,Description,"Payment Reference","Running Balance","Exchange From","Exchange To","Exchange Rate","Payer Name","Payee Name","Payee Account Number",Merchant,"Total fees"'
    process = ProcessResult(
       account = TransferwiseAccount.all.filter(currency.name == file.name("statement_" .. "_")).result.get.onlyOne
       items = data.toString.lines(CSV).drop(1).reverse.mapOpt(splitTo[TransferwiseCsvData](CSV)))
    knowOurAccount = true
  )
}