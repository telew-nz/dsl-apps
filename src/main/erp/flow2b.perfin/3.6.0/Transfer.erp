entity Transfer extends Transaction {
  func title: String = number + " " + date.as[Date[day]]!.toString
  
  func transCategory: Category? = null
  func transFrom: Account? = from
  func transTo: Account? = to
  func transOutcome: Money[from.currency]? = outcome
  func transIncome: Money[to.currency]? = income
  func transStdCategory: StdCategory = Transfer
  list compute conversionLoss: Money? = financeOut.conversionLoss
  list compute transOutcomeBalance: Money[from.currency]? {
    value = financeOut.balance
    label = "Balance"
    update = {
      outcome =? this.financeOut.balance - this.financeOut.accAmount - new 
    }
  }
  list compute transIncomeBalance: Money[to.currency]? = (financeIn.balance)
    
  compute number = "T" + n
     
  field from: Account {
    from = Account.all.sortBy(lastTransactionDate.alt(Date.min).desc)
  }
  field outcome: Money[from.currency]
  field to: Account {
    from = Account.all.sortBy(lastTransactionDate.alt(Date.min).desc)
    update = {
      let a <- outcome.to[Money[new.currency]](date)
      this.income = a
    }
  }
  field income: Money[to.currency]
    
  view form = nav{grid{
    row{number exceptional}
    date
    row{from to} 
    row{outcome income}
    row{transOutcomeBalance space}
    financeOut.conversionLoss
  }}
  register financeOut {
    value = FinanceRegister(transaction = this, account = from, date = date, 
                            stdCategory = Transfer, exceptional = exceptional, 
                            accAmount = try? -outcome, opCurrency = (try? to.currency).alt(Currency.our), 
                            opAmount = try? -income)
    autoRecalc = true
    availableFor = Inline
    available(Inline).for(Inline)
  }
  register financeIn = FinanceRegister(transaction = this, account = to, date = date, 
                                       stdCategory = Transfer, exceptional = exceptional, 
                                       accAmount = income, opCurrency = to.currency, opAmount = income)
}