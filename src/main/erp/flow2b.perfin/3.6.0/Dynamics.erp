report Dynamics {
  plural = "Dynamics"
  field type: [StdCategory]?
  field category: ICategory?

  view list = AccReg.all
    .filter(a => 
       a.stdCategory != Init && 
       (!type || type.contains(a.stdCategory)) &&
       a.category ==? category
    )
    .flatMap {i =>
      let dp = DynPeriod(start = i.start.timezone("Pacific/Auckland").start(of = month), amount = i.baseAmount)
      if (i.start == i.end) {
        [dp]
      } else {
        dp.periods(i)
      }
    }
    .filter(start < now) 
    .groupBy(start = start)
    .agg(amount.sum)
    .sortBy(start)
    .map(month = start.format("MMM yy"), start = start, end = start + 1_month - 1_minute, amount)
    .total(amount.sum, median = filter(_.end < now)*.amount.median)
    .map(i =>
      (amount = i.#0, median = i.#1, 
       items = i.items.map(month = month, start = start, end = end, amount, median = amount - i.#1))
    )
    >> 
  nav{
    total {
      row{space amount >> field(showPlus = true) median >> field(showPlus = true)}
      table(action = Transaction.Report(type = type, category = category, from = start, to = end).list.open) {
        month >> field(width = 0.13, align = Right) 
        amount >> field(width = 0.25 showPlus = true)
        median >> field(width = 0.25 showPlus = true, label = "Median Î”")
      }
    }
  }
}
class DynPeriod {
  field start: Date
  compute end: Date = start + 1_month - 1_minute
  compute period = Period(start = start, end = end)
  field amount: Money?
  
  func periods(i: AccReg): [DynPeriod] = {
    amount = i.baseAmount(period)
    let s1 = start + 1_month
    this + if (s1 < i.end) {
      DynPeriod(start = s1).periods(i)
    }
  }
}