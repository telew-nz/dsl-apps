trait IncomeOutcome extends Transaction {
  func isIncome: Bool
  func number: String
    
  func transCategory: Category? = category
  field account: Account {
    from = Account.all.sortBy(lastTransactionDate.alt(Date.min).desc)
    update = {
      this.currency = new.currency
    }
  }
  field currency: Currency = (try? account.currency).alt(Currency.our)
  field amount: Money[currency] 
  field amountInAccountCurrency: Money[account.currency]? {
    visible = currency != account.currency
    validate = if (!amountInAccountCurrency && currency != account.currency) "Amount in account currency cannot be empty"
  }
  compute accAmount: Money? = if (currency == account.currency) try? amount else amountInAccountCurrency
    
  ref field category: Category {
    from = Category.all.filter(income && isIncome || outcome && !isIncome).sortBy(_.title)
  }
  field sStart: Date?
  compute start: Date {
    value = sStart.or(sEnd).alt(date)
    update = {
      sStart = if (new != sEnd.alt(date)) new
    }
  }
  field sEnd: Date?
  compute end: Date {
    value = sEnd.or(sStart).alt(date)
    update = {
      sEnd = if (new != sEnd.alt(date)) new
    }
  }
  view periodView = x(label = "Actual Period" visible = ui.edit || sStart || sEnd){
    start label("—") end
  }

  func title: String = number + " " + category + " " + date.as[Date[day]]!.toString
  func transStart: Date = start
  func transEnd: Date = end
  
  list compute conversionLoss: Money? = finance.conversionLoss
  register finance {
    value = FinanceRegister(
      transaction = this, date = date, 
      account = account, stdCategory = transStdCategory, category = category, 
      accAmount = if (isIncome) accAmount else -accAmount, 
      opCurrency = currency, opAmount = try? if (isIncome) amount else -amount
    )
    availableFor = Inline
    available(Inline).for(Inline)
    autoRecalc = true
  }
}

entity Income extends IncomeOutcome {
  func isIncome: Bool = true
  compute number = "I" + n
  func amountColumn: String  = "+" + amount

  func transStdCategory: StdCategory = Income
  func transTo: Account? = account
  func transIncome: Money[currency]? = amount
  list compute transIncomeBalance: Money[account.currency]? {
    value = finance.balance
    label = "Balance"
    update = {
      if (currency == account.currency) amount =? this.finance.accAmount + new - this.finance.balance
      else amountInAccountCurrency = this.finance.accAmount + new - this.finance.balance
    }
  }
    
  view form = nav{grid{
    number
    date
    periodView
    account
    category
    amount >> field(canEditUnit = true)
    amountInAccountCurrency
    transIncomeBalance
    finance.conversionLoss
  }}
}

entity Outcome extends IncomeOutcome {
  func isIncome: Bool = false
  compute number = "O" + n
  func amountColumn: String  = "−" + amount
  
  func transFrom: Account? = account 
  func transOutcome: Money[currency]? = amount
  func transStdCategory: StdCategory = Outcome
  list compute transOutcomeBalance: Money[account.currency]? {
    value = finance.balance
    label = "Balance"
    update = {
      if (currency == account.currency) amount =? this.finance.balance - this.finance.accAmount - new 
      else amountInAccountCurrency = this.finance.balance - this.finance.accAmount - new
    }
  }
  
  field returns: [Return]? read by outcome
  view form = nav{grid{
    number
    date
    periodView
    account
    category
    amount >> field(canEditUnit = true)
    amountInAccountCurrency
    transOutcomeBalance
    finance.conversionLoss
    returns  
  }
    button("To Transfer") {
      let acc = account
      let am = amount
      let amc = amountInAccountCurrency.alt(amount)
      let r = convertTo(Transfer)
      r.from = acc
      r.outcome = amc
      r.income = am
    }
  }
}