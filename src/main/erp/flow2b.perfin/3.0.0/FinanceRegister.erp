register FinanceRegister {
  key field account: Account
  order field date: Date
  field start: Date?
  field end: Date?
  
  field transaction: Transaction?
  field stdCategory: StdCategory
  field category: ICategory?
  func correction: Bool = stdCategory.correction
  
  
  field accAmount: Money[account.currency]?
  stored compute baseAccAmount: Money[Currency.our]? <- (if (stdCategory == Init) 0 else accAmount)
    .as[Money[account.currency]].to[Money[Currency.our]](date)
  field opCurrency: Currency
  field opAmount: Money[opCurrency]?
  field returnedDate: Date?
  field opReturn: Money[opCurrency]?
  stored compute correctionChange: Money[account.currency]? = {
    if (correction) accAmount - prev?.balance else 0
  }
  stored compute baseCorrectionChange: Money[Currency.our]? <- {
    (if (correction) accAmount - prev?.balance else 0).to[Money[Currency.our]](date)
  }
    
  stored compute baseOpAmount: Money[Currency.our]? <- (if (stdCategory == Init) 0 else opAmount)
    .as[Money[opCurrency]].to[Money[Currency.our]](date)
  compute conversionLoss: Money[Currency.our]? = baseOpAmount.abs - baseAccAmount.abs
    
  stored compute balance: Money[account.currency]? = {
    if (correction) accAmount else prev?.balance + accAmount
  }
  /*register acc = AccReg(
  	stdCategory = stdCategory
    category = category
    start = start.alt(date)
    end = end.alt(date)
    date = date
    current = opCurrency
    amount = opAmount
    baseAmount = baseOpAmount
  )
  register conAcc = if (let l = conversionLoss) AccReg(
    stdCategory = Conversion
    start = start.alt(date)
    end = end.alt(date)
    date = date
    current = our
    amount = l
    baseAmount = l
  )*/
  
  func reportStdCategory(from: Date, to: Date): StdCategory = {
    if (stdCategory == Return) if (from <= returnedDate! && returnedDate! <= to) Outcome else Return
    else stdCategory
  }
  
}