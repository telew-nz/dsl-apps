entity Return extends Transaction {
  func amountColumn: String  = "+" + amount
  func transTo: Account? = account
  func transIncome: Money? = amount
  func transCategory: Category? = category
  func transStdCategory: StdCategory = Return
    
  field outcome: Outcome by returns {available(All).for(All)}
  compute number: String = "R" + n
    
  field account: Account {
    default =? try? outcome.account
    from = Account.all.sortBy(lastTransactionDate.alt(Date.min).desc)
  }
  field amount: Money[outcome.currency] =? try? outcome.amount
  field amountInAccountCurrency: Money[account.currency]? {
    visible = outcome.currency != account.currency
    validate = if (!amountInAccountCurrency && outcome.currency != account.currency) "Amount in account currency cannot be empty"
  }
  compute accAmount: Money = if (outcome.currency == account.currency) amount else amountInAccountCurrency!
  list compute transIncomeBalance: Money[account.currency]? = finance.balance

  ref compute category: Category = outcome.category
  
  func title: String = number + " " + date.as[Date[day]]!.toString
  list compute conversionLoss: Money? = finance.conversionLoss
  register finance = FinanceRegister(
    transaction = this, date = date, returnedDate = outcome.date,
    account = account, stdCategory = Return, category = category, 
    opCurrency = outcome.currency, opAmount = amount, opReturn = amount, accAmount = accAmount)
    
  view form = nav{grid{
    outcome
    number
    date
    account
    amount >> field(canEditUnit = true)
    amountInAccountCurrency
    finance.conversionLoss
  }}  
}