report IncomeExpense {
  plural = "Income and Expenses"
  field type: [StdCategory]?
  field from: Date = (Date.now[Date[day]] - 1_month).start(month)
  field to: Date = (Date.now[Date[day]].start(month) - 1_minute).end(month)
  view list = FinanceRegister.between(from, to)*.items
    .filter(stdCategory != Init)
    .groupBy(stdCategory = reportStdCategory(from, to), category)
    .agg(amount = map(i => if (i.stdCategory.correction) i.baseCorrectionChange else i.baseOpAmount).sum, conversionLoss = conversionLoss.sum)
    .map(stdCategory, category, amount, conversionLoss, fullAmount = amount + conversionLoss)
    .filter(
      (!type || type.contains(stdCategory))
    )
    .sortBy(stdCategory.ord, amount.abs.desc)
    .groupBy(stdCategory).subtotal(amount.sum, conversionLoss.sum, fullAmount.sum)
    .total(amount.sum, conversionLoss.sum, fullAmount.sum)
    >> 
  nav{
    total {
      row{space amount >> field(showPlus = true) conversionLoss >> field(showPlus = true) fullAmount >> field(showPlus = true)}
      subtotal {
        row{stdCategory amount >> field(showPlus = true) conversionLoss >> field(showPlus = true) fullAmount >> field(showPlus = true)}
        table(action = Transaction.Report(from = from, to = to, type = [stdCategory], category = category).list.open) {
          category >> field(width = 0.4) 
          amount >> field(width = 0.25 showPlus = true) 
          conversionLoss  >> field(width = 0.2 showPlus = true) 
          fullAmount >> field(width = 0.25 showPlus = true) 
        }
      }
    }
  }
}