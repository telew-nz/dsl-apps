trait Account {
  field title: String
  ref field currency: Currency
  ref compute balance: Money[currency]? = finance?.balance
  field closed: Bool
  field initialBalance: Money[currency]?
  field term: AccountTerm = Cash
  system compute lastTransactionDate = finance?.date
  system compute finance: FinanceRegister? = FinanceRegister.current.find(account == this)
  func stdCorrectionCategory: StdCategory = Correction
    
  register initialFinance = {
    if (let bal = initialBalance) FinanceRegister(date = Date.min, account = this, stdCategory = Init, accAmount = bal, opCurrency = currency, opAmount = bal)
    else null
  }
    
  object view refList = Account.all.sortBy(title) >> list{  
    y{title balance}
  }
  report Report {
    field includeClosed: Bool
    view list = Account.all.filter(includeClosed || !closed).map{
      let baseBalance <- balance.to[Money[Currency.our]](Date.now)
      (account = _, balance, baseBalance)
    }.sortBy(account.term, account.title)
     .groupBy(account.term).subtotal(baseBalance.sum)
     .total(baseBalance.sum) >> 
    nav{
      total {
        row{space baseBalance}
        subtotal {
          row{term baseBalance}
          table (action = account.form.open){
            account.title >> field(label = "Title" width = 0.65) balance >> field(width = 0.45)
          }
        }
      }
    }
  }
}

enum AccountTerm {
  case Cash {background = "#d8ffd7"}
  case CashEquivalent {background = "#efd"}
  case ShortTerm {background = "#fdffdd"}
  case MediumTerm {background = "#ed9"}
  case LongTerm {background = "#eec499"}
}

entity CashAccount extends Account 
entity BankAccount extends Account 
  