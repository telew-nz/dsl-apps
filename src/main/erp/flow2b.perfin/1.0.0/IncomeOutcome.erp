trait IncomeOutcome extends Transaction {
  func isIncome: Bool
  func number: String
    
  func transCategory: Category? = category
  field account: Account {
    from = Account.all.sortBy(lastTransactionDate.alt(DateTime.min).desc)
  }
  field amount: Money[account.currency] 
  ref field category: Category {
    from = Category.all.filter(income && isIncome || outcome && !isIncome).sortBy(title)
  }
  
  func title: String = number + " " + category + " " + date.as[Date[day]]!.toString
  
  register finance = FinanceRegister(
    transaction = this, date = date, 
    account = account, category = category, 
    amount = if (isIncome) amount else -amount)
}

entity Income extends IncomeOutcome {
  func isIncome: Bool = true
  compute number = "I" + n
  func amountColumn: String  = "+" + amount

  func transTo: Account? = account
  func transIncome: Money? = amount
    
  view form = nav{grid{
    number
    date
    account
    category
    amount
  }}
}

entity Outcome extends IncomeOutcome {
  func isIncome: Bool = false
  compute number = "O" + n
  func amountColumn: String  = "âˆ’" + amount
  
  func transFrom: Account? = account 
  func transOutcome: Money? = amount
  
  field returns: [Return]? read by outcome
  view form = nav{grid{
    number
    date
    account
    category
    amount
    returns
  }}
}