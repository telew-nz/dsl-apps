entity Correction extends Transaction {
  func title: String = number + " " + date.as[Date[day]]!.toString
  
  func transCategory: Category? = null
  func transStdCategory: StdCategory = account.stdCorrectionCategory
  func transFrom: Account? = if (ch < 0) account else null
  func transTo: Account? = if (ch > 0) account else null
  func transOutcome: Money? = if (ch < 0) -ch else 0
  func transIncome: Money? = if (ch > 0) ch else 0
  list compute transOutcomeBalance: Money[account.currency]? = if (ch < 0) finance.balance else 0
  list compute transIncomeBalance: Money[account.currency]? = if (ch > 0) finance.balance else 0
    
  compute number = "C" + n
     
  field account: Account {
    from = Account.all.sortBy(lastTransactionDate.alt(DateTime.min).desc)
  }
  field value: Money[account.currency]?
  list compute ch = finance.correctionChange
  compute change = if (ch < 0) ch.toString else "+" + ch
    
  view form = nav{grid{
    number
    date
    account
    value
    change
  }}
  register finance {
    value = FinanceRegister(
      transaction = this, date = date, stdCategory = account.stdCorrectionCategory,
      account = account, 
      accAmount = value, opCurrency = account.currency, opAmount = value)
    autoRecalc = true
    availableFor = Inline
    available(Inline).for(Inline)
  }
}