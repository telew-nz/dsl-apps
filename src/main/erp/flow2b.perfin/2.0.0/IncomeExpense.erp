report IncomeExpense {
  plural = "Income and Expenses"
  field type: [StdCategory]?
  field from: Date = Date.now[Date[day]].start(month) - 1_month
  field to: Date = Date.now[Date[day]].start(month) - 1_minute
  view list = FinanceRegister.between(from, to)*.items
    .filter(stdCategory != Transfer && stdCategory != Init)
    .groupBy(stdCategory = reportStdCategory(from, to), category)
    .agg(amount = map(if (stdCategory.correction) baseCorrectionChange else baseOpAmount).sum)
    .map(stdCategory, category, amount)
    .union([
      FinanceRegister.between(this.from, this.to)*.items
        .agg(conversionLoss.sum)
        .map(stdCategory = StdCategory.Conversion, category = null[Category], amount = _)
      ])
    .filter(
      (!type || type.contains(stdCategory))
    )
    .map(stdCategory, category, amount)
    .sortBy(stdCategory.ord, amount.abs.desc)
    .groupBy(stdCategory).subtotal(amount.sum)
    .total(amount.sum)
    >> 
  nav{
    total {
      row{space amount}
      subtotal {
        row{stdCategory amount}
        table(action = Transaction.Report(from = from, to = to, type = [stdCategory], category = category).list.open) {
          category >> field(width = 0.5) amount >> field(width = 0.5)
        }
      }
    }
  }
}