trait Transaction {
  object field gen: Int?
  const ref field n: Int? = increment(Transaction.gen)
  ref field date: Date = now
  
  func transStdCategory: StdCategory
  func transCategory: ICategory?
  func transFrom: Account? = null
  func transTo: Account? = null
  func transOutcome: Money? = 0
  func transIncome: Money? = 0
  func transOutcomeBalance: Money? = 0
  func transIncomeBalance: Money? = 0
  func conversionLoss: Money? = 0
  /*object view list = Transaction.all.sortBy(date.desc) >> nav{list {grid(labels = None, width = 1.2){
    row{
      date.date >> field(width = 0.15)
      categoryColumn >> field(width = 0.2)
      accountColumn >> field(width = 0.45)
      amountColumn >> field(width = 0.4)
    }
  }}}*/
  report Report {
    field account: Account?
    field type: [StdCategory]?
    field category: ICategory?
    field from: Date[day]?
    field to: Date[day]?
      
    view list = Transaction.all.filter(
      (transFrom ==? account || transTo ==? account) && 
      (!type || type.contains(transStdCategory) || (type.contains(Conversion) && conversionLoss)) &&
      transCategory ==? category &&
      (!from || from! <= date) && (!to || date <= to!)
    ).sortBy(date.desc) >> nav{list{grid(labels = None, width = 1.3){
      row {
        space(width = 0.15)
        transCategory >> field(width = 0.3)
        transFrom >> field(width = 0.3, align = Right)
        transTo >> field(width = 0.3, align = Right)
        h3("Conversion Loss" width = 0.25, visible = conversionLoss, align = Right)
      }
      row {
        date.as[Date[day]] >> field(width = 0.15)
        transStdCategory >> field(width = 0.3)
        -transOutcome >> field(width = 0.3, align = Right)
        transIncome >> field(width = 0.3, align = Right)
        conversionLoss >> field(width = 0.25, align = Right)
      }
      row {
        space(width = 0.45)
        "= " + transOutcomeBalance >> field(visible = transOutcomeBalance, width = 0.3, align = Right)
        "= " + transIncomeBalance >> field(visible = transIncomeBalance, width = 0.3, align = Right)
        space(0.25)
      }
    }}}
  }
}



enum StdCategory(ord: Int, correction: Bool) {
  case Income(ord = 110, correction = false) {background = "#dea"}
  case Return(ord = 120, correction = false) {background = "#dea"}
  
  case Outcome(ord = 200, correction = false) {background = "#fcc"}
  case Conversion(ord = 210, correction = false) {background = "#fcc"}

  case Init(ord = 300, correction = false) {background = "#ed9"}
  case Correction(ord = 310, correction = true) {background = "#ed9"}
  case Transfer(ord = 320, correction = false) {background = "#ed9"}
}