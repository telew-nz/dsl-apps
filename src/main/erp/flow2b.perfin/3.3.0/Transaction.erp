trait Transaction extends Entity {
  object field gen: Int?
  const ref field n: Int? = increment(Transaction.gen)
  ref field date: Date = now
  field exceptional: Bool
  
  func transStdCategory: StdCategory
  func stdCategory: StdCategory = if (exceptional) Exceptional else transStdCategory
  func transCategory: ICategory?
  func transFrom: Account? = null
  func transTo: Account? = null
  func transOutcome: Money? = 0
  func transIncome: Money? = 0
  func transOutcomeBalance: Money? = 0
  func transIncomeBalance: Money? = 0
  func conversionLoss: Money? = 0
  func transStart: Date = date
  func transEnd: Date = date
  /*object view list = Transaction.all.sortBy(date.desc) >> nav{list {grid(labels = None, width = 1.2){
    row{
      date.date >> field(width = 0.15)
      categoryColumn >> field(width = 0.2)
      accountColumn >> field(width = 0.45)
      amountColumn >> field(width = 0.4)
    }
  }}}*/
  
  report Report {
    field account: Account?
    field amountCurrency: Currency {
      default = our
      views = []
    }
    field amount: Money[amountCurrency]? {
      canEditUnit
    }
    field type: [StdCategory]?
    field category: ICategory?
    field from: Date?
    field to: Date?
      
    view list = Transaction.all.filter(
      (transFrom ==? account || transTo ==? account) && 
      (!type || type.contains(stdCategory) || (type.contains(Conversion) && conversionLoss)) &&
      transCategory ==? category &&
      (!from || from! <= transEnd.max(date)) && (!to || transStart.min(date) <= to!) &&
      (!this.amount || (transOutcome.unit == this.amountCurrency && transOutcome == this.amount) || (transIncome.unit == this.amountCurrency && transIncome == this.amount))
    ).sortBy(date.desc) >> nav{list{grid(labels = None, width = 1.3){
      row {
        space(width = 0.15)
        transCategory >> field(width = 0.3)
        transFrom >> field(width = 0.3, align = Right)
        transTo >> field(width = 0.3, align = Right)
        h3("Conversion Loss" width = 0.25, visible = conversionLoss, align = Right)
      }
      row {
        date.as[Date[day]] >> field(width = 0.15)
        stdCategory >> field(width = 0.3)
        -transOutcome >> field(width = 0.3, align = Right)
        transIncome >> field(width = 0.3, align = Right)
        conversionLoss >> field(width = 0.25, align = Right)
      }
      row {
        space(width = 0.45)
        "= " + transOutcomeBalance >> field(visible = transOutcomeBalance, width = 0.3, align = Right)
        "= " + transIncomeBalance >> field(visible = transIncomeBalance, width = 0.3, align = Right)
        space(0.25)
      }
    }}}
  }
}



