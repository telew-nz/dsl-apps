extend trait HasExtId {
  field slug: String?
}
  
extend trait IProductTaxonomy extends HasExtId {
  field _seoName: String?
  compute seoName: String {
    value = _seoName.alt(name)
    update = {
      _seoName = if (new != name) new
    }
  }
  
  field seoDesc: PlainText? {label = "Seo Description"}
  
  impl event onSaveOrDelete = {
    if (touched) {
      ECommerceIntegration.all.map {service =>
        if (service.userEnabled) {
          if (let pc = this.as[IProductCategory]) {
            if (!service.exclCategories*.tree.contains(pc) && (!service.inclCategories || service.inclCategories*.tree.contains(pc))) {
              service.uploadCategoryJobs(BatchChange.create(service, [pc]))*.enqueue
            }
          }
          //if (let pc = this.as[IBrand] where service.hasBrands) {
          //  service.uploadBrandJobs(BatchChange.create(service, [pc]))*.enqueue
          //}
          if (let pc = this.as[IProductTag]) {
            service.uploadTagJobs(BatchChange.create(service, [pc]))*.enqueue
          }
          if (let pc = this.as[ShippingClass]) {
            service.uploadShippingClassJobs(BatchChange.create(service, [pc]))*.enqueue
          }
        }
      }.result
    }
  }
}

extend entity ProductCategory {
  extend view form = seoName
  extend view form = slug
  extend view form = seoDesc
}

extend trait ECommerceIntegration {
  back func uploadAllTaxonomies(): Void = { 
    BatchChange.hierarchy(
        this, 
        (if (let c = this.inclCategories) c else IProductCategory.all.result.get)
          .filter(!this.exclCategories.intersect(_.tree)), 
        _.superCategory
      )
      .filter(!_.isEmpty)
      .flatMap(uploadCategoryJobs(_))
      *.enqueue()
    
    if (service.hasBrands) {
      BatchChange.hierarchy(
          this, 
          if (let c = this.brands) c else IBrand.all.result.get, 
          _.superCategory
        )
        .filter(!_.isEmpty)
        .flatMap(uploadBrandJobs(_))
        *.enqueue()
    }
    
    let tags = BatchChange.create(this, IProductTag.all.result.get)
    if (!tags.isEmpty) service.uploadTagJobs(tags)*.enqueue
    
    let shippingClasses = BatchChange.create(this, ShippingClass.all.result.get)
    if (!shippingClasses.isEmpty) service.uploadShippingClassJobs(shippingClasses)*.enqueue
  }
}