entity IRDService extends SystemService {
  impl func title = "IRDServiceTst"
  
  func endpoint: Url = "mock-gst.ird.digitalpartner.services"
  func authEndpoint: Url = "oauth-gst.ird.digitalpartner.services"
  
  func https(path: Url?): HttpRequest = {
  	HttpRequest(url = "$endpoint$path", ssl = true)//.param("client_id", "flow2b")
  }
  
  func authHttps(path: Url?): HttpRequest = {
    HttpRequest(url = "$authEndpoint$path", ssl = true)
  }
  
  
  
  field mockDocsHtml: Data?
  field mockDocsRequestXml: Data?
  field mockDocsResponseXml: Data?
  field mockDocsImages: [DocImage]?
  
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
    
    //mockDocsHtml
    
    button("LoadMockDocs"){
      LoadMockDocsJob(service = this).enqueue()
    }
    button("DownloadDocs"){     
      UI.download(Query(this).map{i => 
        Zip("mock_docs.zip",
         [
           FileGeneric(name = "index.html", content = i.mockDocsHtml!),
           FileGeneric(name = "body-gws-returnfile-request.xml", content = i.mockDocsRequestXml!)
           FileGeneric(name = "body-gws-returnfile-response.xml", content = i.mockDocsResponseXml!)
         ] + (mockDocsImages.map(FileGeneric(name = _.name, content = _.data))))
      }.query)
    }

    button("TestTest"){
      TestRequestJob(service = this).enqueue()
    }
    
  }}
}

class DocImage {
    field data: Data
    field name: String
  }