extend trait IOpportunity {
  field lastContact: Date?
  field country: Country?
  field city: City? {
    from = country?.cities
    visible = country
    init = {new.country =? country}
  }
  field suburb: Suburb? {
    from = city?.suburbs
    visible = city
    init = {new.city =? city}
  }
  ref field readyToStart: ReadyToStart? 
  field startingDate: Date[day]? {
    visible = readyToStart == At
    validate = if (readyToStart == At && !startingDate) "Starting date should be set for Ready to Start At"
  }
  func service = AlertService
}  
 
entity Country {
  impl field title: String
  field cities: [City]? read by country
}
entity City {
  field country: Country by cities
  impl field title: String
  field suburbs: [Suburb]? read by city
}
entity Suburb {
  field city: City by suburbs
  impl field title: String
} 

entity SalesOpportunity extends IOpportunity[SalesOpportunityStage] {
  impl func prefix = "S"
  impl ref field stage: SalesOpportunityStage
  field userQuantity: UInt?
  field estimatedProjectPrice: UMoney[currency]?
  impl func estimatedAmount: UMoney[currency]? = 1200 + estimatedProjectPrice
  impl field probability: UPercent?
  field tools: [SalesOpportunityTool]? inline by opportunity
  field ecommerceLevel : EcommerceLevel?
  field locationsType : LocationsType?
  impl func isBlocked: Bool = blockStatus
  stored ref compute blockStatus = projects.first?.blockStatus
  
  impl view stateView = x{awaitingFollowUp state stage}
  impl view form = nav{grid(labels = Top, width = 1) {
    headerView
    row{readyToStart startingDate}
    row{country city suburb space}
    row{lastContact, space}
    row{owner, source}
    row{userQuantity estimatedProjectPrice, estimatedAmount, probability}
    row{ecommerceLevel, locationsType}
    row{orderedAmount, paidAmount}
    footerView
  }}

  override view ref = x {awaitingFollowUp state stage readyToStart title }
  
  view richRef = x{_, state, stage, readyToStart estimatedAmount}
  impl event onSave = {
    actor?.touch
    if (updated(blockStatus) && !blockStatus) {
      nextFollowUpDate = null
    }
  }
}


enum SalesOpportunityStage {
  case StatusQuo {background = "#999" icon = "box"}
  case ExploringSolutions {background = "#ed9" icon = "search"}
  case SelectingSolutions {background = "#cce0ff" icon = "balance-scale"}
  case Validation {background = "#8bf"  icon = "microscope"}
  case FinalApproval {background = "#dea" icon = "flag-checkered"}
  case Deployment {
    icon = "biohazard"
    color = "white"
    background = "#090"
  }
}

enum ReadyToStart(rank: UDec[2]) {
  case Asap(rank = 25.00) {background = "#dea", label = "ASAP" icon = "business-time"}
  case At(rank = 10.00) {background = "#ed9" icon = "calendar"}
  case Mature(rank = 1.00) {background = "#f99", label = "When Mature" icon = "tree"}
  case Unsure(rank = 1.00) {background = "#f99" icon = "hourglass"}
}
