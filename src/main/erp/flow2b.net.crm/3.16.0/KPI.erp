/*report KPI {
  impl view list = back{KPIStats.build} >> nav {grid {
    customers >> field(frame = true, border = Around)
  }} 
}*/

object KPIService extends SystemService {
  impl func title: String = "KPI Service"
  impl func roles: [Role]? = [Admin]
  impl view form = nav{grid(labels = Top){
    issuesView
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
}

extend entity Workspace {
  compute lastKpi: KPIStats? {
    value = KPI._last
    availableFor = Inline
  }
}


object KPI extends Entity with NewEngine with ScheduledJob {
  impl func title = "KPIs"
  impl func service = KPIService
  impl view form = nav {y{
    back{KPIStats.build} >> grid (margin = Around) {
      businesses >> field(frame = true, border = Around)
      partners >> field(frame = true, border = Around)
      revenue >> field(frame = true, border = Around)
    }
  }}
  
  system field _last: KPIStats?
  func last = Workspace.current.lastKpi
  impl func schedule = "1 30 0 * * ?" // Every day
  impl func do = {
    let kpi <- KPIStats.build
    _last = kpi
    save
    FundReqArr.all*.opportunity*.touch
  }
}

extend role BusAdmin {
  extend view menu = extend("Sales") {
    KPI
  }
}

class KPIStats(businesses: CustomerStats, partners: CustomerStats, revenue: RevenueStats) {
  back object func build: Future[KPIStats] = {
    let revenue <- RevenueStats.build
    KPIStats(
      businesses = CustomerStats.build(Business)
      partners = CustomerStats.build(Partner)
      revenue = revenue
    )
  }
}
class CustomerStats(type: CustomerType, all: Int?, active: Int?, inDeployment: Int?, paying: Int?) {
  back object func build(type: CustomerType): CustomerStats = Customer.all
    .filter(types.contains(type))
    .agg(custs => CustomerStats(
      type = type
      all = custs.filter(state.current).count, 
      active = custs.filter(state == Active).count, 
      inDeployment = custs.filter(state == Deployment).count, 
      paying = custs.filter(payingState == Paying).count
    )).result.get
  impl view form = grid{
    row{all active inDeployment paying >> field(visible = type == Business)}
  }
}

extend trait ISubProduct {
  func excludeFromArr = false
}
extend entity Service {
  impl field excludeFromArr = false
}

class RevenueStats {
  back object func build: Future[RevenueStats] = SalesRentItem.all
    .filter(active && order.state != Quote && delivery.dlvState == InProgress && !product.excludeFromArr)
    .map{i =>
      let total <- i.total.to[UMoney[NZD]](now)
      (i.delivery, total*365/(i.delivery.dlvEnd - i.delivery.start).to[Duration[day]]!)
    }.agg(RevenueStats(arr = total*.positive.sum)).result
  
  field arr: UMoney[NZD]? {label = "ARR"}
  compute mrr: UMoney[NZD]? {value = arr/12 label = "MRR"}
  impl view form = grid {
    row{arr mrr space space}
  }
}