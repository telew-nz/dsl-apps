extend trait IOpportunity {
  field projects: [PersonalProject]? read by opportunity 
  func rank: UDec[2]? = {
    if (status == Open) (readyToStart?.rank.alt(1.00)*probability.withoutUnit*probability.withoutUnit)?.as[UDec[2]]
    else if (status == Won) ReadyToStart.Asap.rank
  }
}

extend entity PersonalProject {
  field opportunity: IOpportunity?
  
  extend event onSave = {
    opportunity?.touch
  }
}

extend trait Actor {
  override compute rank: UDec[2] = {
    if (isOur) ReadyToStart.Asap.rank
    else if (legalEntities*.salesOrders.find(paymentState != Unpaid)) ReadyToStart.Asap.rank
    else 0.10 + opportunities.map(rank).max
  }
}
