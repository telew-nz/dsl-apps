extend trait IOpportunity {
  field lastContact: Date?
  field country: Country?
  field city: City? {
    from = country?.cities
    visible = country
    init = {new.country =? country}
  }
  field suburb: Suburb? {
    from = city?.suburbs
    visible = city
    init = {new.city =? city}
  }
  ref field readyToStart: ReadyToStart? 
  field startingDate: Date[day]? {
    visible = readyToStart == At
    validate = if (readyToStart == At && !startingDate) "Starting date should be set for Ready to Start At"
  }
  func service = AlertService
  impl func multiupdate = actor.toSeq
}  
 
entity Country {
  impl field title: String
  field cities: [City]? read by country
}
entity City {
  field country: Country by cities
  impl field title: String
  field suburbs: [Suburb]? read by city
}
entity Suburb {
  field city: City by suburbs
  impl field title: String
} 

entity SalesOpportunity extends IOpportunity[SalesOpportunityStage] {
  impl func prefix = "S"
  field owner: Person? = Person.current
  impl ref field stage: SalesOpportunityStage
  field userQuantity: Dec[2]?
  field estimatedProjectPrice: Dec[2]?
  impl func estimatedAmount: Dec[2]? = userQuantity*50*12 + estimatedProjectPrice
  impl field probability: UPercent?
  field tools: [SalesOpportunityTool]? inline by opportunity
  field ecommerceLevel : EcommerceLevel?
  field locationsType : LocationsType?
  stored ref compute blockStatus = projects.first?.blockStatus
  
  impl view form = nav{grid(labels = Top, width = 1) {
    row{number,  x{blockStatus status}}
    row{stage >> field(compact = true) readyToStart}
    row{space startingDate}
    followUpView
    row{country city suburb space}
    row{lastContact, space}
    row{owner, source}
    row{userQuantity estimatedProjectPrice, estimatedAmount, probability}
    row{ecommerceLevel, locationsType}
    row{orderedAmount, paidAmount}
    tickets
    actorView
    roles
    tools
    projects
    salesOrders 
  }}

  impl object view list = SalesOpportunity.all >> nav {list {
    grid (fontStyle = rowStyle) {
      x{("#" + number) awaitingFollowUp blockStatus status stage readyToStart startingDate owner}
      actor >> field(label = "")
      row{estimatedAmount, probability, orderedAmount, paidAmount}
    }
  }}
  impl view ref = x {blockStatus status stage readyToStart title }
  
  view richRef = x{_, blockStatus, status, stage, readyToStart estimatedAmount}
  impl event onSave = {
    actor?.touch
    if (updated(blockStatus) && !blockStatus) {
      nextFollowUpDate = null
    }
  }
}


enum SalesOpportunityStage {
  case StatusQuo {background = "#999"}
  case ExploringSolutions {background = "#ed9"}
  case SelectingSolutions {background = "#ccf"}
  case Validation {background = "#8bf"}
  case FinalApproval {background = "#ed9"}
  case Deployment {
    color = "white"
    background = "#090"
  }
}

enum ReadyToStart(rank: UDec[2]) {
  case Asap(rank = 25.00) {background = "#dea", label = "ASAP"}
  case At(rank = 10.00) {background = "#ed9"}
  case Mature(rank = 1.00) {background = "#f99", label = "When Mature"}
  case Unsure(rank = 1.00) {background = "#f99"}
}
