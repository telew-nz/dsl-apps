class ProductsImportJob extends ImportJob {
  field task: ProductsImport 
  func import = {
    let c <- task.file.content
    var cat1 = task.rootCategory
    var cat2 = task.rootCategory
    c.toString.lines(rules = CSV)
      .foreach{l =>
        if (l.startsWith("+")) {
          let catName = l.splitTo[[String?]](",", rules = CSV).drop(1).first!
          if (l.startsWith("++")) {
            cat2 = ProductCategory(superCategory = cat1, name = catName!)
          } else {
            cat1 = ProductCategory(superCategory = task.rootCategory, name = catName!)
          }
        } else {
          let pl = (try? l.splitTo[ProductLine](",", rules = CSV).as[IProductLine]!).alt(l.splitTo[ProductShortLine](",", rules = CSV))
          //pl.title.trace
          let good = {
            if (task.services) Service(title = pl.title, categories = [cat2], unit = ProductUnit.Hour) 
            else Good(title = pl.title, categories = [cat2]).save
          }
          if (let rpm = task.priceModel.as[TRentPriceModel]) {
            let rentService = AssetRentService(serviceDescription = pl.description, product = good, manualSku = pl.number, categories = [cat2]).save
            let pricesMap: [RentDurationUnit -> String?] = [
              Day -> pl.day,
              HalfDay -> pl.halfDay,
              Minimum -> pl.minCharge,
              Event -> pl.eventCharge
              ]
            var prices = pricesMap
              .mapValues(m(_)).toSeq
              .filter(#1)
              .map(DurationPrice(unit = #0, price = #1!, currency = task.priceModel.currency))
            if (let w = pl.weekly.trim) {
              if (w.endsWith("%")) {
                if (let wp = w.dropSuffix("%").toNumber, let day = prices.find(unit == Day)) {
                  prices = prices + DurationPrice(
                    unit = Week, currency = task.priceModel.currency, 
                    price = (day.price*7*(1.0000 - (wp.as[Dec[4]]/100.0000)))!
                  )
                }
              } else if (let wn = w.dropPrefix("\$").toNumber) {
                prices = prices + DurationPrice(
                  unit = Week, currency = task.priceModel.currency, 
                  price = wn
                )
              }            
            }
            rpm.createProduct(product = rentService, prices = prices, bond = 0).save
          } else {
            let l = task.priceModel.as[PriceList]!
            ProductPrice(priceList = l, product = good, regular = m(pl.minCharge), current = m(pl.minCharge)).save
          }
        }
      }
  }
  func m(s: String?): Money? = (try? s.trim.dropPrefix("\$").trim.toNumber).alt(0)
}
interface IProductLine {
  func title: String
  func description: Text?
  func number: String?
  func day: String? = ""
  func minCharge: String? = ""
  func halfDay: String? = ""
  func eventCharge: String? = ""
  func weekly: String? = ""
}
class ProductLine extends IProductLine {
  field f1: String?
  field description: Text?
  field number: String?
  field title: String
  field f5: String?
  field f6: String?
  field minCharge: String?
  field f8: String?
  field f9: String?
  field halfDay: String?
  field f11: String?
  field f12: String?
  field day: String?
  field weekly: String? 
}

class ProductShortLine extends IProductLine {
  field f1: String?
  field description: Text?
  field number: String?
  field title: String
  field f11: String?
  field f12: String?
  field eventCharge: String?
}

