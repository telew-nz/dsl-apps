trait ISchedule extends RefEntity {
  field assignees: [ScheduleAssignee]? by schedule
  
  func isWorkingDate(date: Date): Bool
  func isWorkingPeriod(period: Period): Bool
  func nextWorkingDate(date: Date): Date?
  func prevWorkingDate(date: Date): Date?
  func addWorkingTime(date: Date, duration: UDuration?): Date?
  func workingTime(period: Period): UDuration?

  func correctForward(period: Period): Period?
  func workingPeriod(date: Date): Period?
  
  func workingOrNextPeriod(date: Date): Period? = workingPeriod(date).or(nextPeriod(date))
  func workingOrPrevPeriod(date: Date): Period? = workingPeriod(date).or(prevPeriod(date))
  
  func prevPeriod(date: Date): Period?
  func nextPeriod(date: Date): Period?
}

object Schedule24 extends Entity with ISchedule {
  impl func title = "24 Hours"
  impl func isWorkingDate(date: Date): Bool = true
  impl func isWorkingPeriod(period: Period): Bool = true
  impl func nextWorkingDate(date: Date): Date? = date
  impl func prevWorkingDate(date: Date): Date? = date
  impl func addWorkingTime(date: Date, duration: UDuration?): Date? = date + duration
  impl func workingTime(period: Period): UDuration? = period.duration.positive
  impl func correctForward(period: Period): Period? = period
  impl func workingPeriod(date: Date): Period? = Period.timeline
  impl func prevPeriod(date: Date): Period? = null
  impl func nextPeriod(date: Date): Period? = null
}
entity Schedule extends Entity with ISchedule {
  impl field title: String
  field workingHoursPerDay: UDuration[hour]
  compute cycle: UDuration[day] = period.duration!.to[UDuration[day, 0]]
  field period: Period {
    label = "Sample Period"
    default = Period(start = Date.now.start(of = week), end = Date.now.start(of = week) + 1_week) 
  }
  field workingPeriods: [Period] {
    label = "Working Time inside the Sample Period"
    validate = if (!workingPeriods.all(period.includes(_))) "Working periods should be inside the Sample Period $period"
    update = {
      if (!try? new.last.start) {
        new.last.start =? try? old.last!.start + 1_day
        new.last.end =? try? old.last!.end + 1_day
      }
    }
  }
  field exceptions: [Exception]? 
    
  class Exception {
    field period: Period
    field workingPeriods: [Period]?
  }
  
  impl func correctForward(period: Period): Period? = {
    if (let p = workingPeriod(period.start).filter(end <= period.end)) p
    else if (workingPeriods.exists(duration >= period.duration)) _correctNext(period)
    else null
  }
  private func _correctNext(period: Period): Period? = {
    if (let p = nextPeriod(period.start)) {
	  if (p.end <= period.end) p
      else _correctNext(period.move(p.end))
    }
  }
  impl func workingPeriod(date: Date): Period? = {
    if (let e = exceptions.find(period.contains(date))) {
      e.workingPeriods.find(contains(date))
    } else {
      let delta: UDuration[day]? = delta(date)
      workingPeriods.map(add(delta)).find(contains(date))
    }
  }
  
  
  func delta(date: Date): UDuration[day]? = {
    ((date.sub(period.start).days/cycle).round(floor, 0)*cycle).positive
  }
  
  impl func prevPeriod(date: Date): Period? = {
    let prevException = exceptions.sortBy(period.start.desc).filter(period.start < date)*.workingPeriods.find(end < date)
    let delta: Duration[day]? = delta(date)
    let d1 = date - delta
    let d2 = date - delta + cycle
    let pers = workingPeriods.sortBy(start.desc)
    if (let prevPer = pers.find(end < d1).map(add(delta))
      .or(pers.find(end < d2).map(add(delta - cycle)))
    ) {
      if (let e = prevException) e.later(prevPer) else prevPer
    }
  }
  
  impl func nextPeriod(date: Date): Period? = {
    let nextException = exceptions.sortBy(period.start).filter(period.end > date)*.workingPeriods.find(start > date)
    let delta: Duration[day]? = delta(date)
    let d1 = date - delta
    let d2 = date - delta - cycle
    let pers = workingPeriods.sortBy(start)
    if (let nextPer = pers.find(start > d1).map(add(delta))
      .or(pers.find(start > d2).map(add(delta + cycle)))
    ) { 
      if (let e = nextException) e.earlier(nextPer) else nextPer
    }
  }
  
  impl event onSave = {
    workingPeriods = workingPeriods.sortBy(start)
    exceptions = exceptions
      .map(e => Exception(period = e.period, workingPeriods = e.workingPeriods.sortBy(start)))
      .sortBy(period.start)
  }
  impl func isWorkingPeriod(period: Period): Bool = {
    if (let p = workingPeriod(period.start)) p.includes(period) else false
  }
  impl func isWorkingDate(date: Date): Bool = workingPeriod(date)
  impl func nextWorkingDate(date: Date): Date? = {
    if (isWorkingDate(date)) date
    else nextPeriod(date)?.start
  }
  impl func prevWorkingDate(date: Date): Date? = {
    if (isWorkingDate(date)) date
    else prevPeriod(date)?.end
  }
  impl func addWorkingTime(date: Date, duration: UDuration?): Date? = {
    if (duration <= 0) date
    else {
      let dur: UDuration? = {
        if (duration.unit!.as[DateUnit]!.isDate) {
          (workingHoursPerDay*duration.days).positive
        } else duration
      }
      if (let per = workingPeriod(date)) {
      	calcWorkingTime(date, per, dur.seconds.positive)
	  } else if (let n = nextPeriod(date)) {
        calcWorkingTime(n.start, n, dur.seconds.positive)
      }
    }
  }
  impl func workingTime(period: Period): UDuration? = if (!period.isEmpty) {
    if (let wp = workingOrNextPeriod(period.start)) {
      wp.intersect(period)?.duration.positive + workingTime(Period(start = wp.end, end = period.end.max(wp.end)))
    }
  }
                          
  private func calcWorkingTime(date: Date, period: Period, duration: UDuration[second]?): Date? = {
    let p = (period.end - date).seconds
    if (p >= duration) date + duration
    else if (let n = nextPeriod(period.end)) {
      calcWorkingTime(n.start, n, (duration - p).positive)
    }
  }
  
  impl view form = nav {grid(labels = Top){
    title
    workingHoursPerDay
    period
    cycle
    workingPeriods
    exceptions >> list {
      grid {
        period
        workingPeriods
      }
    }
  }}
}




