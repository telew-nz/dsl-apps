entity Schedule {
  field title: String
  compute cycle: Duration[day] = period.duration.to[Duration[day, 0]]
  field period: Period = Period(start = Date.now.start(of = week), end = Date.now.start(of = week) + 1_week) {label = "Sample Period"}
  field workingPeriods: [Period] {
    label = "Working Time inside the Sample Period"
    isValid = workingPeriods.all(period.includes(_))
    update = {
      if (!try? new.last.start) new.last.start =? try? old.last!.start + 1_day
      if (!try? new.last.end) new.last.end =? try? old.last!.end + 1_day
    }
  }
  field exceptions: [Exception]? 
  field assignees: [ScheduleAssignee]? by schedule
    
  class Exception {
    field period: Period
    field workingPeriods: [Period]?
  }
  
  func correctForward(period: Period): Period? = {
    if (let p = workingPeriod(period.start).filter(end <= period.end)) p
    else if (workingPeriods.exists(duration >= period.duration)) _correctNext(period)
    else null
  }
  func _correctNext(period: Period): Period = {
    let p = nextPeriod(period.start)
    if (p.end <= period.end) p
    else _correctNext(period.move(p.end))
  }
  func workingPeriod(date: Date): Period? = {
    if (let e = exceptions.find(period.contains(date))) {
      e.workingPeriods.find(contains(date))
    } else {
      let delta: Duration[day]? = ((date.start(of = day).sub(period.start.start(of = day)).to[Duration[day, 0]]/cycle)*cycle)
      workingPeriods.map(add(delta)).find(contains(date))
    }
  }
  
  func nextPeriod(date: Date): Period = {
    let nextException = exceptions.find(period.start > date)?.workingPeriods.first
    let delta: Duration[day]? = (date.sub(period.start).to[Duration[day, 0]]/cycle)*cycle
    let nextPer = workingPeriods.find(add(delta).start > date)
      .alt(workingPeriods.find(add(delta + cycle).start > date)!)
    if (let e = nextException) e.earlier(nextPer) else nextPer
  }
  
  func onSave = {
    workingPeriods = workingPeriods.sortBy(start)
    exceptions = exceptions
      .map(e => Exception(period = e.period, workingPeriods = e.workingPeriods.sortBy(start)))
      .sortBy(period.start)
  }
  func isWorking(period: Period): Bool = {
    if (let p = workingPeriod(period.start)) p.includes(period) else false
  }
  
  view form = nav {grid(labels = Top){
    title
    period
    cycle
    workingPeriods
    exceptions >> list {
      grid {
        period
        workingPeriods
      }
    }
  }}
}




