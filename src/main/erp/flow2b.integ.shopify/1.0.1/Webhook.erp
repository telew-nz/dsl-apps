object ShopifyWebhookRouter extends WorkspaceRouter[Data] {
  impl func parse(request: IncomingHttpRequest): Data = {
    request.body.as[Data]!
  }
  impl func keys(request: IncomingHttpRequest, data: Data): [String]? = {
    request.header("X-Shopify-Shop-Domain").toSeq*.lower
  }
}

inline entity ShopifyWebhookEndpoint extends WorkspaceEndpoint[Data] {
  impl field service: ShopifyIntegration by webhookEndpoint
  impl func keys = ["${service.shopName.lower}.myshopify.com"]
  impl func router = ShopifyWebhookRouter
  
  impl func process(request: IncomingHttpRequest, data: Data): Future[Any] = {
    let secret = service.sharedSecret
    let headerSignature = request.header("X-Shopify-Hmac-Sha256")
    let encodedSignature = request.body.as[Data]!.hmac(secret).sha256.base64
    if(headerSignature != encodedSignature) {
      throw "Unsigned: $headerSignature != $encodedSignature"
    }
    let topic = request.header("X-Shopify-Topic")
    if(topic in ["orders/create","orders/updated","orders/paid"]) {
      let _ <- data.parseJson[ShopifyOrder].make(service)
    }
    
  }
}


class ShopifySetupWebhookJob extends SystemJob {
  impl field service: ShopifyIntegration
  field topic: String
  
  impl func do = {
  	let url = "https://ws.flow2b.com/api/v1/flow2b.integ.shopify.ShopifyWebhookRouter" //ShopifyWebhookRouter.apiUrl("")
    let r <- service.https("webhooks.json").get()
    let whs = r.body!.parseJson[ShopifyWebhooks].webhooks
    if(!whs.find(_.topic == this.topic && address == url)){
      let webhook = ShopifyOneWebhook( webhook = ShopifyWebhookConfig(topic = this.topic, address = url, format = "json") )
      let res <- service.https("webhooks.json").post(webhook.json)
      res.code
    }
  }
}

class ShopifyWebhookConfig {
  extFieldNaming = Underscore
  
  field id: Int?
  
  field topic: String
  field address: String
  field format: String = "json"
}

class ShopifyOneWebhook {
  extFieldNaming = Underscore
  
  field webhook: ShopifyWebhookConfig
}

class ShopifyWebhooks {
  extFieldNaming = Underscore
  
  field webhooks: [ShopifyWebhookConfig]?
}

class RemoveAllWebhooksJob extends SystemJob{
  impl field service: ShopifyIntegration
  
  impl func do = {
  	let r <- service.https("webhooks.json").get()
    let whs = r.body!.parseJson[ShopifyWebhooks].webhooks
    whs.map {w =>
      if(let wid = w.id) service.https("webhooks/${wid}.json").delete()
    }.allCompleted()
  }
}