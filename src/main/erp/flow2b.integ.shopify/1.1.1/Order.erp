back class ShopifyOrder extends ESalesOrder[Int]{
  extFieldNaming = Underscore
 
  field id: Int?
  field name: String?
  field currency: String?
  field shippingAddress: ShopifyAddress?
  field note: String?
  field lineItems: [ShopifyOrderLineItem]?
  field shippingLines: [ShopifyOrderShippingLine]?
  field createdAt: Date? {jsonMap = ShopifyDateOpt} //{format = "yyyy-MM-dd'T'hh:mm:ssXXX"}
  field fulfillmentStatus: ShopifyFulfillmentStatus? {
    //jsonMap[String?](apply = _?.id, unapply = v => if(let v) ShopifyFulfillmentStatus.all.find(id == v))
    default = ShopifyFulfillmentStatus.null
  }
  field shopifyCustomer: ShopifyCustomer? {extName="customer"}
  
  // Transactions should be set manual (in Shopify API it is other endpoint)
  field shopifyOrderTransactions: [ShopifyOrderTransaction]?
  
  override func customer: ECustomer[Int] = shopifyCustomer.alt(ECustomerEmpty[Int]())
  impl field billingAddress: ShopifyAddress?

  impl func extId = id!
  impl func number = name
  impl func customerExtId = shopifyCustomer?.id
  impl func currencyCode = currency
  impl func deliveryAddress = shippingAddress
  impl func customerNote = "" //note - is not customer note
  impl func items = lineItems + shippingLines
  impl func payments = shopifyOrderTransactions 
  impl func orderDate = createdAt!
  
  override func make(pr: ISalesOrderImportProvider[Int]): Future[SalesOrder] = {
    // TODO: Uncomment when payment method "manual" is added.
    let _ <- if(let svc = pr.service.as[ShopifyIntegration]) {
      let res <- svc.https("orders/${extId}/transactions.json").get
      shopifyOrderTransactions = res.body!.parseJson[ShopifyOrderTransactions].transactions.filter(status == "success")
    }

    let o <- super.make(pr)
    o
  }
}


back class ShopifyOrders {
  extFieldNaming = Underscore
 
  field orders: [ShopifyOrder]?
}

back class ShopifyOneOrder {
  extFieldNaming = Underscore
 
  field order: ShopifyOrder?
}

back class ShopifyOrderLineItem extends ESalesOrderProductItem[Int] {
  extFieldNaming = Underscore
  
  field id: Int
  field liProductId: Int? {extName = "product_id"}
  field variantId: Int?
  field quantity: UQty
  field price: UMoney?
 
  impl func extId = id
  impl func productId = liProductId!
  impl func variationId = variantId
  impl func amount = price * quantity
  impl func qty = quantity
  
  // I use extCode to save basic variationId
  override func product(pr: ISalesOrderImportProvider[Int]): IBaseProduct = {
  	let prod = pr.service.findExtId(productId, _.as[IBaseProduct])
    if(!variationId || variationId == prod?.extCode(pr.service).alt("0").toNum) {
      prod.alt(throw "Product $productId not found")
    } else {
      pr.service.findExtId(variationId!, _.as[IBaseProduct]).alt(throw "Product $variationId not found")
    }
  }
}


back class ShopifyOrderShippingLine extends ESalesOrderDeliveryItem[Int] {
  extFieldNaming = Underscore
  
  field id: Int
  field code: String?
//  field source: String?
//  field title: String?
  field price: UMoney?
 
  impl func extId = id
  impl func deliveryMethod = code!
  impl func amount = price
}


back class ShopifyOrderTransaction extends EIncomingPayment[Int] {
  extFieldNaming = Underscore

  field id: Int?
  field createdAt: Date? {jsonMap = ShopifyDateOpt} //{format = "yyyy-MM-dd'T'hh:mm:ssXXX"}
  field status: String?
  field gateway: String?

  impl field amount: UMoney
  
  impl func extId = id!
  impl func paymentDate = createdAt!
  impl func paymentMethod = gateway!
}


back class ShopifyOrderTransactions {
  extFieldNaming = Underscore
  
  field transactions: [ShopifyOrderTransaction]?
}


back class DownloadOrdersJob extends SystemJob {
  impl field service: ShopifyIntegration
  field from: Date?
  
  compute processedAtMin = from?.format("yyyy-MM-dd'T'hh:mm:ssXXX")

  impl func do: Future[Any] = {
    service.ordersDownloaded(now)
    procPage(1)
  }

  func procPage(page: UInt): Future[Void] = {
    var req = service.https("orders.json")
    			.param("page", page)
    
    if(let processedAtMin) req = req.param("processed_at_min", processedAtMin)
    
    let res <- req.get    
    
    let orders = res.body!.parseJson[ShopifyOrders].orders
    
    let _ <- orders.oneByOne(_.make(service))
    
    if(orders.count > 0) {
    	procPage(page + 1)
    }
  }
}

back class UploadOrderStateJob extends SystemJob {
  impl field service: ShopifyIntegration
  field order: SalesOrder

  impl func do = {
    guard(let extId = order.extId(service)) else return {}

    let rFF <- service.https("orders/${extId}/fulfillments.json").get()

    let ff = rFF.body!.parseJson[ShopifyFulfillments].fulfillments

    let successFF = ff.filter(status=="success")

    let _ <- if(order.dlvIs(Complete)){
      if(successFF.count == 0) {
        let locId <- service.getLocationId()
        let ff = ShopifyOneFulfillment(
          fulfillment = ShopifyFulfillment(locationId = locId)
        )

        let res <- service.https("orders/${extId}/fulfillments.json").post(ff.json)
        res.code
      }
    } else successFF.oneByOne { f =>
      let rCancel <- service.https("orders/${extId}/fulfillments/${f.id}/cancel.json").post()
      rCancel.code
    }
  }
}

back class ShopifyFulfillment {
  extFieldNaming = Underscore
  
  field id: Int?
  field status: String?
  field locationId: Int?
}

back class ShopifyOneFulfillment {
  field fulfillment: ShopifyFulfillment
}

back class ShopifyFulfillments {
  field fulfillments: [ShopifyFulfillment]?
}

class TstA {
  extFieldNaming = Underscore
  
  field b: String?
  field c: String? = "CCC"
  field fulfillmentStatus: ShopifyFulfillmentStatus? {
    //default = ShopifyFulfillmentStatus.null
  }
}


