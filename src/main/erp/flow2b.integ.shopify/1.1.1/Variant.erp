back class UpdateProductVariantJob extends SystemJob {
  impl field service: ShopifyIntegration
  field productUpdate: ProductUpdate[ISubVariation]
  impl func do: Future[Any] = {
    let product = productUpdate.product
    let superProduct = product.superProduct
    
    //productUpdate.price?.current.log("v.price.current")
    //productUpdate.price?.regular.log("v.price.regular")
    
    let spv = ShopifyProductVariant.create(product, product.attrTerms*.title, productUpdate.price?.current)

    let req = ShopifyOneProductVariant(variant = spv)
    
    let invId <- if(let id = product.extId(service)) {
      let r <- service.https("variants/$id.json").put(req.json)
      r.body!.parseJson[ShopifyOneProductVariant].variant.inventoryItemId!
    } else {
      if(let spId = superProduct.extId(service)){
        let r <- service.https("products/${spId}/variants.json").post(req.json)
        let variant = r.body!.parseJson[ShopifyOneProductVariant].variant
        product.updateExtId(service, variant.id!)
        variant.inventoryItemId!
      }else throw "Upload variant error: SuperProduct hasn't extId: $superProduct"
    }
    
    UpdateInventoryJob(
      service = this.service,
      inventoryItemId = invId,
      qty = productUpdate.stock.max(0)
    ).enqueueFirst()
    /*let locId <- {
      let r <- service.https("inventory_levels.json?inventory_item_ids=$invId").get
      r.body!.parseJson[ShopifyInventoryLevels].inventoryLevels.first!.locationId
    }
    
    let invLev = ShopifyInventoryLevel(
      inventoryItemId = invId
      locationId = locId
      available = productUpdate.stock.max(0)
    )
    
    invLev.json.log("invLev")
    
    let r <- service.https("inventory_levels/set.json").post(invLev.json)
    r.code.log("inv lev")*/
    
    service.variationsUploaded(BatchChange.create(service, [productUpdate]))
  }
}


class RemoveProductVariantJob extends SystemJob{
  impl field service: ShopifyIntegration
  field productUpdate: ProductUpdate[ISubVariation]

  impl func do = {
    let _ <- if(let id = productUpdate.product.extId(service)) {
      if(let spId = productUpdate.product.superProduct.extId(service)){
        let r <- service.https("products/$spId/variants/$id.json").delete
        r.code
      } else throw "RemoveProductVariant Error: superProduct without extId: ${productUpdate.product.superProduct}"
    } else throw "RemoveProductVariant Error: product without extId: ${productUpdate.product}"
    
    service.variationsUploaded(BatchChange.create(service, [productUpdate]))
  }
}


back class ShopifyProductVariant {
  extFieldNaming = Underscore
  
  field id: Int?
  field productId: Int?

  field option1: String?
  field option2: String?
  field option3: String?

  field sku: String?
  field price: Money?
  field barcode: String?
  field inventoryItemId: Int?
  field inventoryQuantity: Int?
  field inventoryPolicy: ShopifyInventoryPolicy? {
    //jsonMap[String?](apply = _?.id, unapply = v => if (let v) ShopifyInventoryPolicy.all.find(id == v))
    default = deny
  }
  field inventoryManagement: ShopifyInventoryManagement? {
    //jsonMap[String?](apply = _?.id, unapply = v => if (let v) ShopifyInventoryManagement.all.find(id == v))
    default = shopify
    //extRequired
  }
  field requiresShipping: Bool
  
  field weightUnit: String?
  field weight: Qty?
  
  field imageId: Int?
  
  object func create(product: IBaseProduct, options: [String]?, price: Money?): ShopifyProductVariant = {
    let weightUnitOK = (product.weightSize?.weightUnit == WeightUnit.Kilogram) || (product.weightSize?.weightUnit == WeightUnit.Gram)
    
    ShopifyProductVariant (  
      // I use drop(..).first instead of apply(index) because options may contain less than 3 items
      option1 = options.first
      option2 = options.drop(1).first
      option3 = options.drop(2).first

      sku = product.sku
      price = price

      requiresShipping = product.isTangible
      barcode = product.refNum

      weightUnit = if(weightUnitOK) product.weightSize?.weightUnit?.symbol else "g"
      weight = if(weightUnitOK) {
        product.weightSize?.weight
      } else {
        WeightUnit.Gram.convert(product.weightSize?.weight)
      }
      
      inventoryPolicy     = if (product.alwaysAvailable) continue else deny
      inventoryManagement = if (product.alwaysAvailable) null     else shopify
    )
  }
}


back class ShopifyOneProductVariant {
  field variant: ShopifyProductVariant
}