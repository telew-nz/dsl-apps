// aka Category
class UpdateCollectionJob extends SystemJob {
  impl field service: ShopifyIntegration
  field category: IProductCategory
  
  impl func do = {

    let extId = category.extId(service)
    let productsExtIds = category.taxonomyProducts*.extId(service)
    
    let cat = ShopifyCollection(
      name = category.title
      bodyHtml = category.description
      image = category.collectPhotos.first.map(ShopifyImage(src = _.url))
      collects = productsExtIds.map(ShopifyCollect(productId = _))
    )
    
    let req = ShopifyOneCollection(customCollection = cat)
    
    let _ <- if(let id = extId) {
      let r <- service.https("custom_collections/$id.json").put(req.json)
      r.code
    } else {
      let r <- service.https("custom_collections.json").post(req.json)
      category.updateExtId(service, r.body!.parseJson[ShopifyOneCollection].customCollection.id!)
    }
    
    //remove old collects
    if(let id = extId){
      let r <- service.https("collects.json?collection_id=$id").get
      let collects = r.body!.parseJson[ShopifyCollects].collects
      
      collects
        .filter(!productsExtIds.contains(_.productId!))
        .map(RemoveCollectJob(service = this.service, collectId = _.id!).enqueue())      
    }
  }
}

class RemoveCollectionJob extends SystemJob {
  impl field service: ShopifyIntegration
  field category: IProductCategory
  
  impl func do = {
	if(let id = category.extId(service)) {
      let r <- service.https("custom_collections/$id.json").delete
      r.code
    }
  }
}

class RemoveCollectJob extends SystemJob {
  impl field service: ShopifyIntegration
  field collectId: Int
  
  impl func do = {
	let r <- service.https("collects/${collectId}.json").delete
    r.code
  }
}

back class DownloadCollectionsJob extends SystemJob {
  impl field service: ShopifyIntegration
  impl func dependsOnRegisters = false
  impl func do: Future[Any] = {
    let response <- service.https("custom_collections.json").get
    let cats = response.body!.parseJson[ShopifyCollections].customCollections
    cats*.make(service)
  }
}


back class ShopifyCollection extends EProductCategory[Int] {
  extFieldNaming = Underscore
  
  field id: Int?
  
  impl field name: String {extName = "title"}
  field bodyHtml: Html?
  field image: ShopifyImage?
  
  field collects: [ShopifyCollect]? {extRequired}
  
  impl func description = bodyHtml
  impl func extId = id!
}

back class ShopifyOneCollection {
  extFieldNaming = Underscore
  
  field customCollection: ShopifyCollection
}

class ShopifyCollect {
  extFieldNaming = Underscore
  
  field id: Int?
  field collectionId: Int?
  field productId: Int?
}

class ShopifyCollects {
  field collects: [ShopifyCollect]?
}

back class ShopifyCollections {
  extFieldNaming = Underscore
  
  field customCollections: [ShopifyCollection]?
}