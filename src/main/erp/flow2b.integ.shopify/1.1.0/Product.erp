class UpdateProductJob extends SystemJob{
  impl field service: ShopifyIntegration
  field productUpdate: ProductUpdate[ISuperProduct]
  
  impl func do = {
    let product = productUpdate.product
    let req = ShopifyOneProduct(product = ShopifyProduct.create(service,productUpdate))

    //req.json.log("product json")
    let resProd <- if(let id = product.extId(service)) {
      let r <- service.https("products/$id.json").put(req.json)
      r.body!.parseJson[ShopifyOneProduct].product
    } else {
      let r <- service.https("products.json").post(req.json)
      r.body!.parseJson[ShopifyOneProduct].product
    }
    
    resProd.updateExtIds(service, product)

    if(!product.alwaysAvailable
       let invId = resProd.basicInventoryItemId){
      UpdateInventoryJob(
        service = this.service,
        inventoryItemId = invId,
        qty = productUpdate.stock.max(0)
      ).enqueueFirst()
    }
    
    service.productsUploaded(BatchChange.create(service, [productUpdate]))
  }
}

class RemoveProductJob extends SystemJob{
  impl field service: ShopifyIntegration
  field productUpdate: ProductUpdate[ISuperProduct]

  impl func do = {
  	let _ <- if(let id = productUpdate.product.extId(service)) {
      let r <- service.https("products/$id.json").delete
      r.code
    }
    
    service.productsUploaded(BatchChange.create(service, [productUpdate]))
  }
}

back class DownloadProductsJob extends SystemJob {
  impl field service: ShopifyIntegration
  impl func do: Future[Any] = {
    "products initial download".log()
    let response <- service.https("/products.json").get
    response.body.log("products body")
    let prods = response.body!.parseJson[ShopifyProducts].products
    
    if (let store = service.initialDownload!.stocktakeStore) {
      let stocktake = Stocktake(store = store, stockType = Inventory, legalEntity = service.legalEntity).save
      prods*.make(service, stocktake)
    } else {
      prods*.make(service)
    }
    
  }
}
 

back class ShopifyProduct extends ESuperProduct[Int]{ 
  extFieldNaming = Underscore
  
  field id: Int?
  field name: String? {extName = "title"}
  field bodyHtml: Text?
  
  field variants: [ShopifyProductVariant]?
  field images: [ShopifyImage]?
  
  field options: [ShopifyProductOption]?
 
  field createdAt: Date? {jsonMap = ShopifyDateOpt} //{format = "yyyy-MM-dd'T'hh:mm:ssXXX"}
  field updatedAt: Date? {jsonMap = ShopifyDateOpt} //{format = "yyyy-MM-dd'T'hh:mm:ssXXX"}
  field publishedAt: Date? {jsonMap = ShopifyDateOpt} //{format = "yyyy-MM-dd'T'hh:mm:ssXXX"}
  
  impl func extId = id!
  impl func title = name!
  impl func description = bodyHtml
  impl func isTangible = variants.first?.requiresShipping
  
  object func create(service: ShopifyIntegration, productUpdate: ProductUpdate[ISuperProduct]): ShopifyProduct = {
    let product = productUpdate.product
    
    ShopifyProduct(
      id = product.extId(service)
      name = product.title
      bodyHtml = product.description
      
      options = if(!product.subProducts.isEmpty) {
        product.as[IVariableSuperProduct]?.attrOptions.mapOpt{ o =>
          if(let vals = o.options*.title){
            ShopifyProductOption(
              name = o.attr.attrName,
              values = vals
            )}
        }
      }
      
      variants = if(product.subProducts.isEmpty) { // ???: This if-branch maybe removed if there is at least one subProduct anyway.
        let v = ShopifyProductVariant.create(product, [], productUpdate.price?.current)
        v.id = product.extCode(service).toNum // I use extCode to save basic variationId
        [v]
      } else {
        product.subProducts.map { v =>
          var sv = ShopifyProductVariant.create(v, v.as[ISubVariation]?.attrTerms*.title, 0)
          if(v.as[IBaseProduct] != product.as[IBaseProduct]) sv.id = v.extId(service) else {
            sv.id = product.extCode(service).toNum // I use extCode to save basic variationId
            sv.price = productUpdate.price?.current
          }
          sv
        }
      }

      images = if(productUpdate.photosUpdated) product.collectPhotos.map(ShopifyImage(src = _.url))
    )
  }
  
  func updateExtIds(service: ShopifyIntegration, product: ISuperProduct) = {
    // product.extId(service).log("old product id")
    // this.id.log("new product id")
    product.updateExtId(service, this.id!)
    this.variants.map { v =>
      let pv = product.subProducts*.as[ISubVariation].find(
        v.option1 == attrTerms.first?.title &&
        v.option2 == attrTerms.drop(1).first?.title &&
        v.option3 == attrTerms.drop(2).first?.title
      )
      
      /*pv.log("variant for id update")
      if (let pv) {
        pv?.extId(service).log("old variant id")
      } else {
      	product.extCode(service).log("old base variant id")
      }
      v.id.log("new variant id")*/
      if (let pv) pv.updateExtId(service, v.id!) else product.updateExtCode(service, v.id.unformattedString) // I use extCode to save basic variationId
    }
  }
  
  func basicInventoryItemId: Int? = {
  	if (this.variants.count == 1) this.variants.first?.inventoryItemId
  }
}

class ShopifyProductOption {
  extFieldNaming = Underscore
  field name: String
  field values: [String]? {extRequired}
}


back class ShopifyOneProduct {
  field product: ShopifyProduct
}

back class ShopifyProducts {
  field products: [ShopifyProduct]?
}