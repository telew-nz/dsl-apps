extend entity ShopifyIntegration extends ECommerceIntegration[Int] {
  field locationId: Int?
  
  back func getLocationId(): Future[Int] = {
  	if(let locationId) Future(locationId) else {
      let r <- this.https("locations.json").get
      locationId = r.body!.parseJson[ShopifyLocations].locations.first!.id
      locationId!
    }
  }
}


class UpdateInventoryJob extends SystemJob {
  impl field service: ShopifyIntegration
  field inventoryItemId: Int
  field qty: Qty?
  
  impl func do = {
    let locId <- service.getLocationId()

    let invLev = ShopifyInventoryLevel(
      inventoryItemId = inventoryItemId
      locationId = locId
      available = qty
    )

    let r <- service.https("inventory_levels/set.json").post(invLev.json)
    r.code
  }
}

class ShopifyLocation {
  field id: Int?
}

class ShopifyLocations {
  field locations: [ShopifyLocation]?
}

enum ShopifyInventoryManagement (id: String) {
  case shopify(id = "shopify")
  case fulfillmentService(id = "fulfillment_service")
}

enum ShopifyInventoryPolicy (id: String) {
  case deny(id = "deny")
  case continue(id = "continue")
}

back class ShopifyInventoryLevel {
  extFieldNaming = Underscore
  
  field inventoryItemId: Int?
  field locationId: Int?
  field available: Int? {extRequired}
}

back class ShopifyInventoryLevels {
  extFieldNaming = Underscore
  field inventoryLevels: [ShopifyInventoryLevel]?
}