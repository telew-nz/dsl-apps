entity ShopifyIntegration extends ECommerceIntegration[Int] {
  impl func title = "Shopify: $shopName"
  
  impl field initialDownload: ShopifyInitialDownload? inline by service
  
  field shopName: String
  
  field consumerKey: String
  field consumerSecret: Password
  field sharedSecret: Password
  
  func endpoint: Url = "$shopName.myshopify.com/admin/api/2019-04/"
  
  func https(path: Url): HttpRequest = {
  	HttpRequest(url = "$endpoint$path", ssl = true).basicAuth(consumerKey, consumerSecret)
  }
  

  system field webhookEndpoint: ShopifyWebhookEndpoint inline by service
  
  impl view mainView = grid(labels = Top){
    shopName
    consumerKey
    consumerSecret
    sharedSecret
    initialDownload
  }
  
  impl func uploadProductJobs(change: BatchChange[ProductUpdate[ISuperProduct]]): [SystemJob]? = {
  	change.created.map(UpdateProductJob(service = this, productUpdate = _)) +
    change.updated.map(UpdateProductJob(service = this, productUpdate = _)) +
    change.deleted.map(RemoveProductJob(service = this, productUpdate = _))
  }
  
  impl func uploadVariationJobs(change: BatchChange[ProductUpdate[ISubVariation]]): [SystemJob]? = {
    change.created.map(UpdateProductVariantJob(service = this, productUpdate = _)) +
    change.updated.map(UpdateProductVariantJob(service = this, productUpdate = _)) +
    change.deleted.map(RemoveProductVariantJob(service = this, productUpdate = _))
  }
  
  impl func uploadCategoryJobs(change: BatchChange[IProductCategory]): [SystemJob]? = {
    change.created.map(UpdateCollectionJob(service = this, category = _)) +
    change.updated.map(UpdateCollectionJob(service = this, category = _)) +
    change.deleted.map(RemoveCollectionJob(service = this, category = _))
  }
  
  impl func downloadCustomersJobs : [SystemJob]? = [DownloadCustomersJob(service = this)]
  
  impl func downloadOrdersJobs(from: Date?) : [SystemJob]? = [DownloadOrdersJob(service = this, from = from)]
  
  impl func uploadOrderStateJobs(orders: [SalesOrder]) : [SystemJob]? = orders.map{o => UploadOrderStateJob(service = this, order = o)}
  
  impl func createWebhookJobs : [SystemJob]? = {
  	["orders/create","orders/updated","orders/paid"].map{ t => ShopifySetupWebhookJob(topic = t, service = this)}
  }
}
