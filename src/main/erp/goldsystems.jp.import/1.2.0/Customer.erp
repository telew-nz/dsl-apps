/*extend entity Person {
  field podioId: Int?
  field source: String?
  field segment: String?
  field photoId: String?
  field idMethod: String?
  field idNumber: String?
}

class CustomersImportJob extends SystemJob {
  field service: JpImport
  func do = {
    service.customers.map{file =>
      let c <- file.content
      c.toString.lines(rules = CSV).drop(1)
        .map(splitTo[JpCustomer](",", rules = CSV))
        .filter(name)
        .foreach{i =>
          let pp: Person? = Person.all.find(name == i.name)
          if (let p = pp) {
            p.podioId = i.podioId
            p.source = i.source
            p.segment = i.segment
            p.photoId = i.photoId
            p.idMethod = i.idMethod
            p.idNumber = i.idNumber
            p.save
          } else {
            Person(i, name = i.name!, podioId = i.podioId, currency = NZD, 
                   locations = if (let a = i.address) [GeneralLocation(address = a)],
                   accounts = if (let a = i.bankAccount) [BankAccount(name = a, number = a, currency = NZD)]
                  ).save
          }
        }
    }.allCompleted
  }
}

class JpCustomer {
  field f1: String?
  field f2: String?
  field fName: String?
  compute name: String? = fName.trim.replace("  ", " ")
  field email: Email?
  
  field phoneMobile: Phone?
  field phoneWork: Phone?
  field phoneHome: Phone?
  field f3: Phone?
  field f4: Phone?
  field f5: Phone?
  field f6: Phone?
  
  field streetAddress: String?
  field postalCode: String?
  field city: String?
  field state: String?
  field country: String?
  compute address: String? = [streetAddress, state, city, postalCode, country].filter(s => s).join("

")
  
  field ff: String?
  field source: String?
  field photoId: String?
  field idMethod: String?
  field idNumber: String?
  field bankAccount: String?
  field birthdate: UtcDate[day]? {format = "yyyy-MM-dd"}
  field i1: String?
  field i2: String?
  field i3: String?
  field i4: String?
  field i5: String?
  field i6: String?
  field segment: String?
  
  field f11: String?
  field f12: String?
  field f13: String?
  field f14: String?
  field f15: String?
  field f16: String?
  field f17: String?
  field f18: String?
  field f19: String?
  field f20: String?
  field f21: String?
  field f22: String?
  field f23: String?
  field f24: String?
  field f25: String?
  field f26: String?
  field f27: String?
  
  field podioId: Int
  
  field f31: String?
  field f32: String?
  field f33: String?
  field f34: String?
  field f35: String?
  field f36: String?
  field f37: String?
  field f38: String?
  
  field phoneNumbersString: String?
  compute phones = phoneNumbersString.split(",")
  compute contacts: Contacts = Contacts(phones = phones, emails = email.toSeq)
  
  field f40: String?
}
*/
