/*class PurchaseImport extends SystemJob {
  field service: JpImport 
  func do = {
    let buyings <- (service.buyings.map{file =>
      let c <- file.content
      c.toString.lines(rules = CSV).drop(1)
        .map(splitTo[JpBuying](",", rules = CSV))
    }.allCompleted)
    let buyingItems <- service.buyingItems.map{file =>
      let c <- file.content
      c.toString.lines(rules = CSV).drop(1)
        .map(splitTo[JpBuyingItem](",", rules = CSV))
    }.allCompleted
    let itemsMap = buyingItems.flatMap(_).map(_.podioId, _).toMap
    let buyings1: [JpBuying1]? = buyings
      .flatMap(_)
      .filter(itemIds)
      .map(i => JpBuying1(
        buying = i, 
        items = i.itemIds!.map(itemsMap.apply(_)!)
      ))
      .filter(!buying.status.contains("Quote") && buying.status != "Practice")
    buyings1
      .filter(b => !PurchaseOrder.all.exists(podioId == b.buying.podioId))
      .map{b =>
        let person: Person? = Person.all.find(name == b.buying.customer)
        let vendor = person.alt(throw "Cannot find customer $(b.buying.customer)") //(Person(name = b.buying.customer))
        let po = PurchaseOrder(
          number = "POTGX $(b.buying.podioId)"
          podioId = b.buying.podioId
          date = b.buying.date
          currency = NZD
          customer = service.legalEntity 
          vendor = vendor
          incomplete = b.items.exists(productType != "One off" || !_.podioId || !_.weight || !_.metal || _.inconsitent)
          items = b.items.filter(productType == "One off" && _.podioId && _.weight && _.metal).map{i => 
            let target: Target = if (i.target.contains("resale")) Resale else Liquidation
            let metal: MetalType? = MetalType.all.find(_.name == i.metal)
            OneoffPurchaseItem(            
              deliveryItem = OneoffDeliveryItem(
                product = OneoffJewelleryProduct(
                  sku = "TGX $(i.podioId)"
                  inconsitent = i.inconsitent == 1
                  podioId = i.podioId
                  metalType = metal.alt(throw "Cannot find metal $(i.metal)")
                  productForm = JewelleryForm.all.find(_.name == i.productForm).alt(if (i.productForm == "Earings") Earring else if (i.productForm == "Bangle") Bracelet else Unknown)
                  condition = if (target == Liquidation) Bad else Ok, resaleMultiplier = 3.0, target = target
                  size = i.weight!, purity = i.purity.toNumber!, podioId = i.podioId!
                )
              ) 
              amountEditor = i.price.as[Money[NZD]]
            )
          }
        ).save
        if (!po.total && !po.incomplete) throw "Empty sum for complete po with id $(b.buying.podioId)"
        let pd = po.deliveries.first!.as[PurchaseDelivery]!
        pd.destination = service.store
        pd.status = Delivered
        let pi = po.invoices.first!.as[PurchaseInvoice]!
        if (b.buying.status == "Purchased - Rob TGX Cash" && po.total) {
          OutgoingPayment(
            date = b.buying.date
            payer = service.legalEntity
            payee = vendor
            account = service.cashAccount
            amount = po.total, currency = NZD,
            credits = [Setoff(credit = pi, amount = po.total)]
          ).save
        }
        po
      }
  }
}

extend entity PurchaseOrder {
  system field podioId: Int?
  field incomplete: Bool {views = []}
  compute completeStatus: JpCompleteStatus {
    value = if (incomplete) Incomplete else Complete
    visible = incomplete
    views = []
    update = {
      this.incomplete = new == Incomplete
    }
  }
  extend view statusesView = completeStatus
  compute podioUrl: Url? = if (let i = podioId) "https://podio.com/tauranga-gold-exchange-hdsqmrs7z5/customer-service-and-sales/apps/buying/items/$(i.toString( .. ])"
}

enum JpCompleteStatus {
  case Complete
  case Incomplete {
    background = "#f99"
  }
}

extend entity OneoffJewelleryProduct {
  system field podioId: Int?
  field inconsitent: Bool
  compute podioUrl: Url? = if (let i = podioId) "https://podio.com/tauranga-gold-exchange-hdsqmrs7z5/data/apps/buying-items/items/$i"
}

class JpBuying1 {
  field buying: JpBuying
  field items: [JpBuyingItem]
}

class JpBuying {
  field podioId: Int //Unique ID
  field f2: String? //Created on
  field f3: String? //Created by
  field f4: String? //Title Data
  field customer: String //Customer
  field f6: String? //Interactions
  field f7: String? //How heard about us/ Repeat trigger
  field f8: String? //Product list
  field f9: String? //Qty/ Weight
  field f10: String? //Id number (for update)
  field f11: String? //Checks complete
  field f12: String? //Automation
  field f13: String? //Buying item
  field status: String? //Purchase Status
  field f15: String? //Manual Overide Fields break
  field f16: String? //Manual Total Price
  field f17: String? //Split payment (enter cash amount)
  field f18: String? //Customer bank account number
  field f19: String? //Box Number
  field f20: String? //RESALE price multiplier (set for all items)
  field f21: String? //Margin Adjustment (BTC Purchased)
  field f22: String? //Related Link
  field f23: String? //Information Break Field
  field f24: String? //Total Final Price
  field f25: String? //EGP
  field f26: String? //Liquidation EGP
  field f27: String? //ELP
  field f28: String? //ESP
  field f29: String? //Pure Grams
  field f30: String? //Total Adjusted Weight
  field f31: String? //Data Fields
  field f32: String? //Total Price of related items
  field f33: String? //Total Price as per Adjustment
  field f34: String? //Buying ID
  field f35: String? //Transaction photo
  field f36: String? //Liquidation EGP
  field f37: String? //Fields to be deleted
  field f38: String? //Link
  field f39: String? //Transaction photo added?
  field f40: String? //To Be deleted
  field f41: String? //type =Missing product or inconsistancy 1 else 2
  field f42: String? //Payment items amount remaining
  field f43: String? //Error payment amount unmatch = 2
  field date: Date {format = "yyyy-MM-dd hh:mm"} //Date
  field f45: String? //daily tracking
  field f46: String? //Broad market
  field f47: String? //Niche market
  field f48: String? //Customer Segment
  field f49: String? //Invoice total match = 0
  field f50: String? //Error invoice total unmatched 2 else 1
  field buyingItems: String? //Buying Item Ids
  compute itemIds: [Int]? = buyingItems.splitTo[[Int]](",", rules = None)
  field f52: String? //"Match Purchase Status =1 else 0"
  field f53: String? //Purchase Status Fix
  field f54: String? //Can mark check complete (yes = 1)
  field f55: String? //Daily Tracker count
  field f56: String? //Invoice Count
  field f57: String? //Payment Count
  field f58: String? //Final Price unmatch to manual price (Yes = 0)
  field f59: String? //Difference in manual price and final item price
  field f60: String? //Tags
}

class JpBuyingItem {
  field f1: String? //Unique ID
  field f2: String? //Created on
  field f3: String? //Created by
  field f4: String? //Visual Title
  field f5: String? //Buying transaction
  field f6: String? //Qty if stocked & > 1
  field f7: String? //Box Number
  field f8: String? //User Bonus
  field f9: String? //Notes/Details
  field productType: String? //PL Product Type
  field f11: String? //Manual Metal Percentage
  field f12: String? //Subtractions (g)
  field f13: String? //Product list
  field f14: String? //Resale Multiplier (if Not fine)
  field f15: String? //Information Fields
  field f16: String? //ESP Item
  field f17: String? //ELP Item
  field f18: String? //EGP Item
  field f19: String? //EGP Comparison
  field f20: String? //Gold / Silver Value
  field price: Dec[2]? //Final Item Price
  field productForm: String? //Item Type 
  field f23: String? //Calculated bonus
  field f24: String? //Margin Adjustment
  field f25: String? //Spot Price of Gold
  field f26: String? //Spot Price of Silver
  field f27: String? //Item Photo
  field f28: String? //Link
  field f29: String? //Valuation by JVC Total
  field f30: String? //Data Fields
  field metal: String? //Metal Type
  field target: String? //Liquidation Type
  field f33: String? //Purchased Status
  field purity: String? //Metal Percentage
  field f35: String? //Category
  field weight: Dec[5]? //Weight in Grams
  field f37: String? //Adjusted Weight(g)
  field f38: String? //Pure Grams
  field f39: String? //GST type
  field f40: String? //Spot Price Calc
  field f41: String? //Item Price
  field f42: String? //Spot Price Gold Current
  field f43: String? //Spot Price of Gold Current
  field f44: String? //Spot Price of Silver Current
  field podioId: Int? //Buying Item ID
  field f46: String? //Purchase Status
  field f47: String? //Buying ID
  field f48: String? //Liquidated
  field f49: String? //Buying ID - Text
  field f50: String? //Created on
  field f51: String? //Purchase Date - start
  field f52: String? //Purchase Date - end
  field f53: String? //Liq Type
  field f54: String? //Liquidation EGP
  field inconsitent: Int? //Inconsistancies
  field f56: String? //Where is the inconsistency
  field f57: String? //Fields to be deleted
  field f58: String? //Inconsistancies
  field f59: String? //Product Name
  field f60: String? //To Be Deleted
  field f61: String? //If sale complete 1 else 2
  field f62: String? //ESP(Resale)
  field f63: String? //If in a liquidation 1 else 2
  field f64: String? //If buying transaction 1 else 2
  field f65: String? //"Liquidation type: NF =1 F =2 else 3"
  field f66: String? //IF sales item created 2 else 1
  field f67: String? //static Final item price
  field f68: String? //static Liquidation egp
  field f69: String? //"Draft liquidations GF =1 SF = 3 GNF = 2 SNF = 4"
  field f70: String? //Liquidate = send
  field f71: String? //static esp item
  field f72: String? //Category
  field f73: String? //"Match Purchase Status = 1 else 0"
  field f74: String? //Purchase Status Fix
  field f75: String? //Product Id
  field f76: String? //Buying Id (Calculated)
  field f77: String? //Final Item Price (Temp)
  field f78: String? //Tags
}*/