/*class SalesImport extends SystemJob {
  field service: JpImport 
  func do = {
    let sales <- (service.sales.map{file =>
      let c <- file.content
      c.toString.lines(rules = CSV).drop(1)
        .map(splitTo[JpSale](",", rules = CSV))
    }.allCompleted)
    let salesItems <- service.salesItems.map{file =>
      let c <- file.content
      c.toString.lines(rules = CSV).drop(1)
        .map(splitTo[JpSalesItem](",", rules = CSV))
    }.allCompleted
    let itemsMap = salesItems.flatMap(_).map(_.podioId, _).toMap
    let sales1: [JpSale1]? = sales
      .flatMap(_)
      .filter(itemIds)
      .map(i => JpSale1(
        sale = i, 
        items = i.itemIds!.map(itemsMap.apply(_)!)
      ))
      .filter(!sale.status.contains("Quote") && sale.status != "Practice")
    sales1
      .filter(b => !SalesOrder.all.exists(podioId == b.sale.podioId))
      .map{b =>
        let person: Person? = Person.all.find(name == b.sale.customer)
        let customer = person.alt(Person(name = b.sale.customer!))
        let so = SalesOrder(
          number = "SOTGX $(b.sale.podioId)"
          podioId = b.sale.podioId
          date = b.sale.date
          currency = NZD
          vendor = service.legalEntity 
          customer = customer
          incomplete = b.items.exists(productType != "One off" || !buyingId || !product)
          items = b.items.filter((productType == "One off" && buyingId && product)).map{i => 
            SalesItem(            
              deliveryItem = DeliveryItem(
                product = i.product!,
                unit = Item,
                qty = 1
              ) 
              amountEditor = i.price.as[Money[NZD]]
            )
          }
        ).save
        let sd = so.deliveries.first!.as[SalesDelivery]!
        sd.source = service.store
        sd.status = Delivered
        let si = so.invoices.first!.as[SalesInvoice]!
        if ((b.sale.status == "Sale Complete Cash" || b.sale.status == "Sale Complete Credit card" || b.sale.status == "Sale Complete Eftpos")  && so.total) {
          IncomingPayment(
            date = b.sale.date
            payee = service.legalEntity
            payer = customer
            account = {
              if (b.sale.status == "Sale Complete Cash") service.cashAccount
              else if (b.sale.status == "Sale Complete Credit card") service.creditCardAccount
              else service.eftposAccount
            }
            amount = so.total, currency = NZD,
            debits = [Setoff(debit = si, amount = so.total)]
          ).save
        }
        so
      }
  }
}

extend entity SalesOrder {
  system field podioId: Int?
  field incomplete: Bool {views = []}
  compute completeStatus: JpCompleteStatus {
    value = if (incomplete) Incomplete else Complete
    visible = incomplete
    views = []
    update = {
      this.incomplete = new == Incomplete
    }
  }
  extend view statusesView = completeStatus
  compute podioUrl: Url? = if (let i = podioId) "https://podio.com/tauranga-gold-exchange-hdsqmrs7z5/customer-service-and-sales/apps/sales/items/$(i.toString( .. ])"
}

class JpSale1 {
  field sale: JpSale
  field items: [JpSalesItem]
}

class JpSale {
  field podioId: Int //Unique ID
  field date: Date {format = "yyyy-MM-dd hh:mm"} //Created on
  field f3: String? //Created by
  field f4: String? //Title
  field customer: String? //Customer
  field f6: String? //How heard about us/ repeat 
  field f7: String? //Interactions
  field f8: String? //Sales item id
  field f9: String? //Product/ Sales item
  field f10: String? //Qty (if stocked product)
  field f11: String? //Manual price
  field f12: String? //Receipt Amount
  field f13: String? //Checks complete
  field f14: String? //Automation
  field f15: String? //Sales items
  field f16: String? //Sales items
  field status: String? //Sale Status
  field f18: String? //Layby Fields Break
  field f19: String? //Layby Terms
  field f20: String? //Deposit Amount
  field f21: String? //Serve By
  field f22: String? //Total Amount Receive
  field f23: String? //Total Sale Price
  field f24: String? //Outstanding Amount
  field f25: String? //Manual Overide Fields break
  field f26: String? //Manual Total Price
  field f27: String? //Split payment (enter cash amount)
  field f28: String? //Printed Reciept
  field f29: String? //Information Break Field
  field f30: String? //Total Final Price
  field f31: String? //GP - EGP difference
  field f32: String? //Current Liquidation difference
  field f33: String? //Marketing planner related
  field f34: String? //Calculation DATA FIELDS
  field f35: String? //Sale Time
  field f36: String? //Sale id
  field f37: String? //Inconsistency? yes = 1 no = 2
  field f38: String? //Invoice created 1 yes 2 no
  field f39: String? //Daily tracker
  field f40: String? //Broad markets
  field f41: String? //Niche Markets
  field f42: String? //Customer segment
  field salesItems: String? //Sales Item Ids
  compute itemIds: [Int]? = salesItems.splitTo[[Int]](",", rules = None)
  field f44: String? //Sale Data Migration ?
  field f45: String? //Report View Category
  field f46: String? //Tags
}

class JpSalesItem {
  field podioId: Int //Unique ID
  field f2: String? //Created on
  field f3: String? //Created by
  field f4: String? //Sales item Title
  field f5: String? //Item from Buying/ stocked product
  field f6: String? //Sale transaction
  field f7: String? //Related sales item for service
  field f8: String? //Qty (if stocked)
  field f9: String? //System Price per item
  field f10: String? //Price Multiplier
  field f11: String? //Discount %
  field f12: String? //Manual Price
  field f13: String? //customer offer
  field price: Dec[2]? //Final Sale price
  field f15: String? //Final Item price
  field f16: String? //GP
  field f17: String? //Average buy price (stocked)
  field f18: String? // Sale Transaction Status
  field f19: String? //discount from category (automation)
  field f20: String? //Product
  field f21: String? //Item type/ status
  field productType: String? //Product type
  field f23: String? // Transaction Number
  field f24: String? //Recommended retail price
  field f25: String? //Metal Type
  field f26: String? //Calculation
  field f27: String? //Liquidation EGP 
  field f28: String? //GP - EGP difference (one off)
  field f29: String? //Difference to Current Liquidation
  field f30: String? //GP Difference to buy liquidation GP
  field f31: String? //Liquidation type matches = 1 else 2
  field f32: String? //Product type matches 1 else 2
  field f33: String? //sales item unique id
  field f34: String? //Sales item Title for description
  field buyingId: Int? //Buying id
  field f36: String? //Liquidation EGP
  field f37: String? //resale EGP
  field f38: String? //Final item buy price
  field f39: String? //Product/Service Name
  field f40: String? //Sales Item Display Name
  field f41: String? //Sale time
  field f42: String? //Calculation
  field f43: String? //Report View Category
  field f44: String? //Sale Date - start
  field f45: String? //Sale Date - end
  field f46: String? //Tags
  
  compute product: OneoffJewelleryProduct? = OneoffJewelleryProduct.all.find(_.podioId == this.buyingId!)
}*/