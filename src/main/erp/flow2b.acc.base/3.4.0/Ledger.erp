inline trait Ledger extends Register {
  func aview: Layout[Ledger]
  func currency: Currency = legalEntity.getCurrency
    
  key field legalEntity: LegalEntity = journal.legalEntity
  func account: LedgerAccount
    
  order field date: Date = journal.journalDate
  order field isClosing: Bool
    
  field journal: Journal
  field contraAccount: LedgerAccount?
  field trAmount: Money[currency]?
  
  field isCorrection: Bool
    
  stored compute amount: Money[currency]? = {
    if (isCorrection) trAmount - prev?.balance 
    else if (isClosing) -prev?.balance 
    else trAmount
  }
  stored compute baseAmount: Money[legalEntity.getCurrency]? <- amount.to[Money[legalEntity.getCurrency]](date)
  stored compute balance: Money[currency]? = if (isCorrection) trAmount else prev?.balance + amount
  
  register ledger: GeneralLedger
  register incomeSummary: LIncomeSummary? = {
    if (isClosing && createIncomeSummary && account != IncomeSummary && account != CurrencyTrading) {
      LIncomeSummary(journal = journal, trAmount = prev?.balance, contraAccount = account)
    } else null
  }
  func createIncomeSummary = true
  
  func onSave = {
    calcLedger
  }
  func calcLedger: Void = {
    ledger = GeneralLedger(
      legalEntity = legalEntity, journal = journal,
      account = account, currency = currency,
      date = date, amount = amount, baseAmount = baseAmount)
  }
  
  compute debit: Money[currency]? = (if (amount > 0) amount else 0)
  compute credit: Money[currency]? = (if (amount < 0) -amount else 0)  
  compute debitBalance: Money[currency]? = (if (balance > 0) balance else 0) {label = "Debit"}
  compute creditBalance: Money[currency]? = (if (balance < 0) -balance else 0) {label = "Credit"}
  
  func mlBalance(journal: MJournal): MLedger
}

