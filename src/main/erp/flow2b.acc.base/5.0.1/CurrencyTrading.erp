acctemplate Basic
acctemplate CurrencyTrading(type = singleAccount) {
  key field currency: Currency
}
acctemplate Currency {
  key field currency: Currency
}
  
account CurrencyExchange(template = "Basic", 
   credit = acc(Revenue, 20,"CurrencyExchangeGain")
   debit  = acc(Expense, 20, "CurrencyExchangeLoss")
) 
 
account CurrencyTrading(template = "CurrencyTrading", debit = acc(Trading, 0)) 
 
object CurrencyTrading {
  object func trade(journal: Journal, debit: Money, credit: Money): Future[[Ledger]?] = {
    if (debit.unit == credit.unit && debit == credit) []
    else trade(journal, [debit, -credit])
  }
  object func trade(journal: Journal, amounts: [Money]?): Future[[Ledger]?] =  tradeAt(journal, journal.journalDate, amounts)
  object func tradeAt(journal: Journal, date: Date, amounts: [Money]?): Future[[Ledger]?] = {
    if (let ams = amounts.groupBy(unit).agg(_.sum).values.mapOpt(i => i)) {
      if (ams.count > 1) {
        let currency = journal.legalEntity.getCurrency

        let baseAmounts <- ams.map{amount => 
          let baseAmount <- amount.to[Money[currency]](date)
          (amount, baseAmount)
        }.allCompleted
        let loss: [Ledger]? = if (let l = baseAmounts*.baseAmount.sum) [
          LBasic(account = CurrencyExchange, journal = journal, date = date, trAmount = -l)
        ] else []

        loss + baseAmounts.filter(amount.unit != currency).map(i =>
          LCurrencyTrading(journal = journal, date = date, currency = i.amount.unit!, trAmount = -i.amount, baseTrAmount = -i.baseAmount)
        )
      } else {
        [LBasic(account = CurrencyExchange, journal = journal, date = date, trAmount = -ams.first)]
      }
    } else []
  }
  
  object func spotTrade(journal: Journal, amount: Money, baseAmount: Money): Ledger = {
    LCurrencyTrading(journal = journal, currency = amount.unit!, trAmount = amount, baseTrAmount = baseAmount)
  }
  
  object func close(journal: Journal, amount: Money?): Future[LCurrencyTrading?] = {
    if (!amount || amount.unit == journal.baseCurrency) null
    else {
      let baseAmount <- amount.to[Money[journal.baseCurrency]](journal.journalDate)
      LCurrencyTrading(journal = journal, currency = amount.unit!, trAmount = -amount, baseTrAmount = -baseAmount)
    }
  }
  object func with(ledgers: [Ledger]?): Future[[Ledger]?] = {
    if (!ledgers) Future.apply([])
    else {
      let trades <- trade(ledgers.first!.journal, ledgers*.trAmount)
      ledgers + trades
    }
  }
}
