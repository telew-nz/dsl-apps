trait MJournal extends Journal {
  object field gen: Int?
  system const ref field n: Int? = increment(MJournal.gen)
  func number: String
  ref field date: Date = now
  func journalDate = date
  func debitEntry: MLedger? = null
  func creditEntry: MLedger? = null
  func shouldBeBalanced = true
  field entries: [MLedger] inline by journal {
    default =? defaultEntries
    canAdd = false
    validate = {
      if (shouldBeBalanced && entries.groupBy(currency).toSeq.count == 1 && entries*.amount.sum != 0) "Journal is unbalanced"
    }
  }
  func defaultEntries: [MLedger]? = []
  
  ref field legalEntity: OurLegalEntity {
    default =? onlyOne
    update = {
      entries*.as[MLedgerCurrency].filter(!try? currency).foreach(_.currency = new.getCurrency)
    }
  }
  func cor: Int? = 0
  report Report {
    generateFilters = false
    field legalEntity: OurLegalEntity? 
    field account: LedgerAccount? {search = true}
    field from: Date?
    field to: Date?  
    view list = MJournal.all.filter(i =>
          i.legalEntity ==? this.legalEntity
       && (!this.account || i.entries.exists(_.account == this.account))
       && from ?<= i.date && i.date <=? to
    ) >> nav{table{
      number, date
    }}
  }
}