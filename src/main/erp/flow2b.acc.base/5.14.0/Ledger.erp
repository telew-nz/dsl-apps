class SubAccountAmount(account: LedgerSubAccount, currency: Currency, amount: Money[currency]?) {
  compute debit: Money[currency]? = (if (amount > 0) amount else 0)
  compute credit: Money[currency]? = (if (amount < 0) -amount else 0)  
}

interface HasDate {
  func date: Date
}

inline trait Ledger extends Register with HasDate {
  func aview: Layout[Ledger]
  func currency: Currency { 
    default value = legalEntity.getCurrency
  }
    
  key field legalEntity: OurLegalEntity = journal.legalEntity
  func account: LedgerAccount
    
  impl order field date: Date = journal.journalDate
  order field cor: Int?
  func isCorrection = cor == 1
  func isClosing = cor == 2
  field journal: Journal
  field contraAccount: LedgerAccount?
  field trAmount: Money[currency]?
  
  func makeContra: Void = {
    trAmount = -trAmount
  }
  stored compute amount: Money[currency]? = {
    if (isCorrection) trAmount - prev?.balance 
    else if (isClosing) -prev?.balance 
    else trAmount
  }
  func taxableAmount: Money[currency]? {
    default value = amount*account.taxable
  }
  stored compute baseAmount: Money[legalEntity.getCurrency]? <- amount.to[Money[legalEntity.getCurrency]](date)
  stored compute balance: Money[currency]? = prev?.balance + amount
  
  func subBalances: [SubAccountAmount]? = if (let balance) {
    [SubAccountAmount(account = subAccount, currency = currency, amount = balance)]
  }
  compute subAccount: LedgerSubAccount {
    availableFor = List
    value = {
    	if (balance > 0) {
          account.debit.alt(account.credit!)
        } else {
          account.credit.alt(account.debit!)
        }
    }
  }
  
  register incomeSummary: [Ledger]? = {
    if (cor && createIncomeSummary && amount && baseAmount) {
      if (currency == legalEntity.getCurrency) {
        [LIncomeSummary(journal = journal, trAmount = -amount, contraAccount = account)]
      } else {
        [LIncomeSummary(journal = journal, trAmount = -baseAmount, contraAccount = account),
         CurrencyTrading.spotTrade(journal, -amount!, -baseAmount!)
        ]
      }
    } 
  }
  func createIncomeSummary = true
  
  compute debit: Money[currency]? = (if (amount > 0) amount else 0)
  compute credit: Money[currency]? = (if (amount < 0) -amount else 0)  
  compute debitBalance: Money[currency]? {
    value = if (balance > 0) balance else 0
    label = "Debit"
  }
  compute creditBalance: Money[currency]? {
    value = if (balance < 0) -balance else 0
    label = "Credit"
  }
  
  func mlBalance(journal: MJournal): MLedger
  
  back object func turnover(accounts: [LedgerAccount]?, le: OurLegalEntity, period: Period): Money? = {
    Ledger.between(period.start, period.end)
        .filter(accounts.contains(start.account) && start.legalEntity == le)
       *.items*.baseAmount.agg(sum)
        .result.get
  }
  
  impl event onPreSave = {
    if (!RegisterService.recalculating && !User.isSu let st = legalEntity.archiveDate where date < st || origin(date) < st) {
      throw "Cannot change data in closed period for $journal"
    }
  }
  
  report Report {
    field legalEntity: OurLegalEntity? 
    field account: LedgerSubAccount? {search = true}
    field from: Date?
    field to: Date?  
    field currency: Currency?
    field journal: Journal?
    
    field contraAccount: [LedgerAccount]?{visible = false}
    field subAccount: [LedgerAccount]?{visible = false}

    impl view list = Ledger.all.filter(l =>
          l.legalEntity ==? this.legalEntity
       && (!this.account || l.account.contains(this.account!))
       && from ?<= l.date && l.date <=? to
       && l.journal ==? this.journal
       && l.currency ==? this.currency
    ).sortBy(l => (l.date.desc, l.account.number, l.sortNum)) >> nav{table(action = journal.form.open){
       journal.title >> field(label = "Journal", width = 0.2), date,
       subAccount >> field(label = "Account", width = 0.4) legalEntity 
       aview >> field(label = "Analytics", width = 0.4) 
       debit credit balance
    }}
  }
}
