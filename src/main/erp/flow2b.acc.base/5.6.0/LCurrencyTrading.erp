extend register LCurrencyTrading {
  field baseTrAmount: Money[baseCurrency]?
   
  stored compute baseClosingAmount: Money[baseCurrency]? <- if (isClosing) prev?.balance.abs.as[UMoney[currency]?].to[UMoney[baseCurrency]](date) else Future.apply(0)
  stored compute tradeQueue: QtyAmountQueue[Money[currency], Money[baseCurrency]]?
  register baseTradingReduce: LCurrencyTrading?
  register baseTradingIncrease: LCurrencyTrading?
  register tradingLoss: LBasic?
  compute ledgers: [Ledger]? = baseTradingReduce.toSeq*.as[Ledger] + baseTradingIncrease + tradingLoss
  impl func createIncomeSummary = false
    
  impl event onSave = {  
    if (!isBase) {
      if (isClosing) {
        amount = 0
        baseAmount = 0
        balance = prev?.balance
        baseTrAmount = 0
        tradeQueue = null
        if (let b = balance) {
          tradeQueue = tradeQueue.enqueue(FIFO, b.abs, baseClosingAmount.abs)
        }
        if (let diff = baseClosingAmount - prev?.tradeQueue.amount.as[Money[baseCurrency]]) {  
          let d = if (balance < 0) diff else -diff
          baseTradingReduce = LCurrencyTrading(journal = journal, date = date, currency = baseCurrency, trAmount = d, baseTrAmount = d, cor = 2)
          incomeSummary = [LIncomeSummary(journal = journal, date = date, trAmount = -d)]
        } else {
          baseTradingReduce = null
          incomeSummary = []
        }
      } else {
        let bal = prev?.balance
        let rest = if ((trAmount < 0 && bal > 0) || (trAmount > 0 && bal < 0)) {
          let a = trAmount.abs.min(bal.abs)
          let r = prev?.tradeQueue.dequeue(a)
          tradeQueue = r.queue
          let v: Money[baseCurrency]? = (if (trAmount < 0) -r.value else r.value).as[Money[baseCurrency]]
          baseTradingReduce = LCurrencyTrading(journal = journal, date = date, currency = baseCurrency, trAmount = -v, baseTrAmount = -v)
          let b = baseTrAmount*(a/trAmount.abs!)
          tradingLoss = (if (let loss = v - b) LBasic(account = CurrencyExchange, date = date, journal = journal, trAmount = loss) else null)
          (trAmount = (if (trAmount < 0) trAmount + a else trAmount - a), baseTrAmount = baseTrAmount - b)
        } else {
          tradeQueue = prev?.tradeQueue
          baseTradingReduce = (null)
          (trAmount, baseTrAmount)
        }
        if (rest.trAmount) {
          tradeQueue = tradeQueue.enqueue(FIFO, rest.trAmount.abs!, rest.baseTrAmount.abs)
          baseTradingIncrease = LCurrencyTrading(journal = journal, date = date, currency = baseCurrency, trAmount = -rest.baseTrAmount, baseTrAmount = -rest.baseTrAmount)
        } else {
          baseTradingIncrease = null
        }
      }
    } else {
      tradeQueue = null
      baseTradingReduce = null
      baseTradingIncrease = null
      tradingLoss = null
      if (isClosing) {
        balance = prev?.balance + trAmount
        amount = trAmount
        baseAmount = trAmount
      }
    }
  }

  compute baseCurrency = legalEntity.getCurrency
  compute isBase = currency == legalEntity.getCurrency
}
