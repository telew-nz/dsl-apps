extend register LCurrencyTrading {
  field baseTrAmount: Money[baseCurrency]?
   
  stored compute baseClosingAmount: Money[baseCurrency]? <- if (isClosing) prev?.tradeQueue.qty.as[Money[currency]].to[Money[baseCurrency]](date) else Future.apply(0)
  stored compute tradeQueue: QtyAmountQueue[Money[currency], Money[baseCurrency]]?
  register baseTradingReduce: LCurrencyTrading?
  register baseTradingIncrease: LCurrencyTrading?
  register tradingLoss: LBasic?
  compute ledgers: [Ledger]? = baseTradingReduce.toSeq*.as[Ledger] + baseTradingIncrease + tradingLoss
  
  func onSave: Void = {  
    if (!isBase) {
      if (isClosing) {
        amount = 0
        baseAmount = 0
      }
      if (isClosing) {
        if (let diff = baseClosingAmount - prev?.tradeQueue.amount.as[Money[baseCurrency]]) {          
          tradeQueue = null
          tradeQueue = tradeQueue.enqueue(FIFO, prev?.tradeQueue.qty!, baseClosingAmount)
          baseTradingReduce = LCurrencyTrading(journal = journal, currency = baseCurrency, trAmount = diff, baseTrAmount = diff, isClosing = true)
          incomeSummary = LBasic(account = IncomeSummary, journal = journal, trAmount = -diff)
        } else {
          tradeQueue = prev?.tradeQueue
          baseTradingReduce = null
          incomeSummary = null
        }
      } else {
        let bal = prev?.balance
        let rest = if ((trAmount < 0 && bal > 0) || (trAmount > 0 && bal < 0)) {
          let a = trAmount.abs.min(bal.abs)
          let r = prev?.tradeQueue.dequeue(a)
          tradeQueue = r.queue
          let sign = if (trAmount < 0) -1 else 1
          let v: Money[baseCurrency]? = r.value.as[Money[baseCurrency]]*sign
          baseTradingReduce = LCurrencyTrading(journal = journal, currency = baseCurrency, trAmount = -v, baseTrAmount = -v)
          let b = baseTrAmount*(a/trAmount.abs)
          tradingLoss = (if (let loss = v - b) LBasic(account = ExchangeGainOrLoss, journal = journal, trAmount = loss) else null)
          (trAmount = trAmount - sign*a, baseTrAmount = baseTrAmount - b)
        } else {
          tradeQueue = prev?.tradeQueue
          baseTradingReduce = (null)
          (trAmount, baseTrAmount)
        }
        if (rest.trAmount < 0) {
          tradeQueue = prev?.tradeQueue.enqueue(FIFO, -rest.trAmount!, -rest.baseTrAmount)
          baseTradingIncrease = LCurrencyTrading(journal = journal, currency = baseCurrency, trAmount = -rest.baseTrAmount, baseTrAmount = -rest.baseTrAmount)
        } else {
          baseTradingIncrease = null
        }
      }
    } 
    calcLedger
  }
    
  compute baseCurrency = legalEntity.getCurrency
  compute isBase = currency == legalEntity.getCurrency
}
