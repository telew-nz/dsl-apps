account ExchangeGainOrLoss(number = 620, type = RevenueOrExpense) 

account CurrencyTrading(number = 700, type = Trading) {
  key field currency: Currency
}

object CurrencyTrading {
  object func trade(journal: Journal, debit: Money, credit: Money): Future[[Ledger]?] = {
    if (debit.unit == credit.unit) []
    else trade(journal, [debit, -credit])
  }
  
  object func trade(journal: Journal, amounts: [Money]?): Future[[Ledger]?] = {
    if (amounts.count < 2 || amounts.groupBy(unit).toSeq.count < 2) []
    else {
      let currency = journal.legalEntity.getCurrency
      let date = journal.journalDate
        
      let baseAmounts <- amounts.map{amount => 
        let baseAmount <- amount.to[Money[currency]](date)
        (amount, baseAmount)
      }.allCompleted
      let loss: [Ledger]? = if (let l = baseAmounts*.baseAmount.sum) [
        LExchangeGainOrLoss(journal = journal, trAmount = -l)
      ] else []
      
      loss + baseAmounts.filter(amount.unit != currency).map(i =>
        LCurrencyTrading(journal = journal, currency = i.amount.unit!, trAmount = -i.amount, baseTrAmount = -i.baseAmount)
      )
    }
  }
  
  object func close(journal: Journal, amount: Money): Future[LCurrencyTrading?] = {
    if (amount?.unit == journal.baseCurrency) null
    else {
      let baseAmount <- amount.to[Money[journal.baseCurrency]](journal.journalDate)
      LCurrencyTrading(journal = journal, currency = amount.unit!, trAmount = -amount, baseTrAmount = -baseAmount)
    }
  }
}
