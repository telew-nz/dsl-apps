entity Vehicle{
  field nickname : String
    ref field registrationNumber : String
  field registraionEntity : Actor
  field purchaseDate : Date?
  field sellDate : Date?
  field usage : Usage
  //compute ServiceDue =
  field service : Service?
  field wofDueDate : Date
  field registrationStatus : RegoStatus 
  field regoHoldExpiry : Date {visible = registrationStatus == OnHold}
  compute recordedSpeedomoter = "todo" //huboReading*
  field speedomoterReading : [SpeedomoterReading] inline by vehicle 
  field rucsRequired : Bool
  field huboInstalled : Bool
  field rucsDistancePaid : [rucsDistancePaid]  inline by vehicle {visible = rucsRequired == true}//make it required if rucs required
  compute recordedRucsDistance = "todo" //huboReading* {visible = rucsRequired == true}  //if hubo = false then speedoreading 
  field huboReading : [HuboReading]  inline by vehicle {visible = huboInstalled == true} //make it required if huboInstalled
  field insurance : VehicleInsurance?
    func title = String
}
    enum RegoStatus{
    case OnHold
    case Active
    case Due
    case Overdue
  }
  
enum Usage{
  case None
  case Seasonal
  case Low
  case Full 
}

  entity SpeedomoterReading{
    field date : Date
    field reading : Int
    field vehicle : Vehicle
      func title = vehicle + " " + date
  }
      
 entity HuboReading{
    field date : Date {visible = vehicle.huboInstalled == true}
    field reading : Int {visible = vehicle.huboInstalled == true}
    field vehicle : Vehicle 
      func title = vehicle + " " + date
  }
inline  entity rucsDistancePaid{
    field date : Date
    field distanceFrom : Int
    field distanceTo : Int
    field vehicle : Vehicle
  }