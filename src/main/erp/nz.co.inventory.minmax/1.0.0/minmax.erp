object Product {


  func stdDev(mean:Float?, l:Float?):Float? = {
  /*
  Estimation of the standard deviation of customer demand in l successive periods.

  "mean" is the mean single period demand. "a", "b" and "c" are the parameters of the model.
  */

    let a:Float? = 1.6
    let b:Float? = 0.8
    let c:Float? = 0.6
    a.as[Float?] * mean.pow(b) * l.pow(c)
  }
/* Product.stdDev(3, 4) */


  func rmsForecastError(stdDev:Float?):Float? = {
  /* The square root of the mean square error in forecasts of lead time demand */
    stdDev * 1.2
  }
  
  
  func pNegBin(mean:Float?, stdDev:Float?):Float? = {
  /*
  The "p" parameter of a negative binomial distribution for which the mean and standard
  deviation are mean and stdDev respectively.
  */
    if (let stdDev) {
      1.as[Float?] - mean / stdDev.pow(2)
    }
  }

  
  func rNegBin(mean:Float?, p:Float?): Float? = {
  /*
  The "r" parameter of a negative binomial distribution for which the mean and the "p" value are
  mean and p respectively.
  */
    if (let p) {
      (1.as[Float] - p) * mean / p
    }
  }


  func minIP(nOld:Int?, probabilityOld:Float?, availabilityOld:Float?, p:Float?, r:Float?, target:Float?):Float? = {
  /*
  Reordering takes place when the inventory position is less than minIP which is usually called
  the "minimum" or "min" for short.
  "probability" is the probability that the demand during the extended lead tume is equal to "n".
  "availability" is the probability of no stockout before replenishment stock arrives.
  */
    let n:Int? = nOld + 1
    var probability:Float? = probabilityOld
    var availability:Float? = availabilityOld
    if (n == 0)
      probability = (1.as[Float?] - p).pow(r)
    else if (n == 1)
      probability *= r.as[Float?] * p
    else if (let n)
      probability *= p.as[Float?] * (n - 1 + r) / n
      availability += probability
    if (availability < target) minIP(n, probability, availability, p, r, target)
    else n
  }


  func eoq(product: IProduct, annualDemand:Float, annualHoldingCostFraction:Float, orderingCost:Float) = {
  /* 
  Economic order quantity.
  "annualDemand" is the mean annual demand for the product.
  "annualHoldingCostFraction" is the annual holding cost of a product as a fraction of the unit cost.
  "orderingCost" is the cost of ordering an product.
  */
    if (let cost = product.productCost?.cost) {
      (2.as[Float] * annualDemand * orderingCost / (cost * annualHoldingCostFraction)).pow(0.5)
    }
    else 1
  }


  func inventoryPosition(product:IProduct): Int? = {
  /*
  quantity on hand + on order + suggested orders - customer back orders
  */
    product.stock.get.fact.as[Int?] + product.stock.get.expectation - product.stock.get.reserve
    /*
    *** The suggested order quantity needs to be added to this.
    */
  }
}