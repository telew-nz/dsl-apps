object ITUnreconPayment extends IssueType[Payment] {
  impl func title = "Unreconciled Payment"
  impl func hasIssue(item: Payment) = item.moneyCalced && item.sReconState.isIssue
  impl func fixes(item: Payment) = if (let da = -item.debtAmount) { 
    let paymentDate = item.date
    let isCard = item.account.is[CardAccount]
    let possibleSources <- if (isCard) {
      LMoneyDebt.all.filter{o => 
        (o.amountDue == da || o.balanceDue == da)
        && o.origin.reconDates.exists(d => d.between(paymentDate - 2_day, paymentDate + 2_day))
      }
      .sortBy(o => ((o.amountDue + da).abs, (o.dueDate.alt(o.date) - paymentDate).abs))
      *.journal
      .result
    } else {
      LMoneyDebt.all.filter{o => 
        (o.amountDue.between(da - 1, da + 1) || o.balanceDue.between(da - 1, da + 1))
        && o.origin.reconDates.exists(d => d.between(paymentDate - 90_day, paymentDate + 2_day))
      }
      .sortBy(o => ((o.amountDue + da).abs, (o.dueDate.alt(o.date) - paymentDate).abs))
      *.journal
      .result
    }
    let isUploaded = item.bankData.uploadState == Uploaded
    let payments: [Payment]? <- Payment.all
    .filter{p => 
      p.date.between(paymentDate - 30_day, paymentDate + 30_day) 
      && item.movedAmount - 1.00 < p.movedAmount && p.movedAmount < item.movedAmount + 1.00
      && p != item
      && (!isUploaded || p.bankData.uploadState != Uploaded)
    }
    .sortBy(o => (o.date - paymentDate).abs)
    .result
    [
      Fix(text = "Select the same $(item.cpName) as in another document", acts = possibleSources.map {s => Act(ref = s)}),
      Fix(text = "Merge duplicate payments", acts = payments.map {s => 
        Act(ref = s, label = "Merge", do = {
          let n <- back {
            item.merge(s)
          }
          n.form.open
        })
      }),
      Fix(text = "Add a reason for the payment into the Origin field to match $(item.amount)")
    ]
  }
}