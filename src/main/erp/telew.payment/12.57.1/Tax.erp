trait ITaxPayment extends IReason {
  field tax: Tax
  compute taxTrTypes = tax.trTypes.filter(_ !in[Accrual, Adjustment]).toSet
  field trType: TaxTrType {
    label = "Transaction Type"
    default = Payment
    from = taxTrTypes
    visible = taxTrTypes.count > 1
  }
  impl field amount: UMoney[payment.currency] =? payment.unreconAmount.abs
  
  impl view form = grid(labels = None) {
    row{tax >> field(compact) trType  >> field(compact) amount >> field(align = Right) }
  }
}

inline entity TaxPayment extends ITaxPayment with OPReason {
  icon = "university"
  
  impl func cashFlows = [CashFlowAmount(cashFlow = Taxes, amount = -amount)] 
  impl func ledgers: Future[[Ledger]?] = {
    [LTax(tax = tax, currency = payment.currency, 
          journal = journal, trAmount = amount, trType = trType)]
  }
} 

inline entity TaxReturn extends ITaxPayment with IPReason {
  icon = "university"

  impl func cashFlows = [CashFlowAmount(cashFlow = Taxes, amount = amount)] 
  impl func ledgers: Future[[Ledger]?] = {
    [LTax(tax = tax, currency = payment.currency, 
          journal = journal, trAmount = -amount, trType = trType)]
  }
} 