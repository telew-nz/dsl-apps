enum AccTemplate {
}

generator acctemplate {
  field singleAccount: Bool
  
  compute fields = declarations*.as[Field].filter(name != "currency")
  compute keyFields = fields.filter(isKey)
  
  func accountField: Dsl = {
    if (singleAccount) 'func account: LedgerAccount = LedgerAccount.$name'
    else 'key field account: LedgerAccount'
  }
  func editorField(f: Field): String = {
    let upt = 'update = syncAnalit("$(f.name)", new)'
    let dsl = f.dsl.trim
    if (dsl.contains("}")) '$(dsl.dropSuffix("}")) $upt }'
    else '$dsl {$upt}'
  }
    
  func generate: Dsl = '
extend enum AccTemplate {
  case $name
}
  
register L$name extends Ledger {
  $accountField
  $declarations
  $(keyFields.map("func a$(name.capitalize) = $name").join(" "))
  view aview = grid(labels = Top, width = 0.5){ $(fields*.name.join(" "))}
} 

inline entity ML$name extends MLedger$(if (declarations.exists(name == "currency" && _.is[Field])) "Currency" else "NoCurrency") {
  singular = "$(name.fromCamelCase)"
  register ledger: L$name? = if (needLedger) L$(name)(this, trAmount = amount) else null
  $(fields.map(f => editorField(f)).join(" "))
  $(declarations.filter(!_.is[Field]))
  view aview = grid(labels = Top, width = 0.5, visible = needLedger){ $(fields*.name.join(" "))}
}

report TB$name extends AnalitTrialBalance[L$name] {
  plural = "$(name.fromCamelCase) Trial Balance"
  func template: AccTemplate = AccTemplate.$name
    
  view list = query >> nav {
    table(action = openLedger(GeneralLedger.Report(account = account $(if (keyFields) ", " + keyFields.map("$name = $name") else "")))) {
        $(fields*.name) debitBalance creditBalance
    }
  }
  func ledger = L$name
}
$incomeStatement
  
'
  
 func incomeStatement = if (!keyFields) '' else
'report IS$name extends AnalitIncomeStatement[L$name] {
  plural = "$(name.fromCamelCase) Income Statement"
  func template: AccTemplate = AccTemplate.$name
  view list = query.groupBy($(keyFields*.name)).agg(amount = baseAmount.sum.abs) >> nav {
    table(action = openLedger(GeneralLedger.Report(account = account $(if (keyFields) ", " + keyFields.map("$name = $name") else "")))) {
       $(keyFields*.name) amount
    }
  }
  func ledger = L$name
}'
  
}

