enum AccTemplate(analytic: Bool, hasCurrency: Bool) {
}

enum AccTemplateType {
  case singleAccount
  case basic
  case accountRouter
}

generator acctemplate {
  field type: AccTemplateType = basic
  field defaultAccount: String?
  
  compute fields = decls*.as[Field].filter(name != "currency")
  compute keyFields = fields.filter(isKey)
  compute hasCurrency = decls.exists(name == "currency" && _.is[Field])
  
  func accountField: Dsl = {
    if (type == singleAccount) 'impl func account: LedgerAccount = LedgerAccount.$name'
    else if (type == accountRouter) 'impl field account: LedgerAccount'
    else if (let da = defaultAccount) {
      'impl key field account: LedgerAccount = $da'
    } else {
      'impl key field account: LedgerAccount'
    }
  }
  func editorField(f: Field): String = {
    let upt = 'update = syncAnalit("$(f.name)", new)'
    let dsl = f.dsl.trim
    if (dsl.contains("}")) '$(dsl.dropSuffix("}")) $upt }'
    else '$dsl {$upt}'
  }
    
  impl func generate: Dsl = '
extend enum AccTemplate {
  case $name(analytic = $(keyFields.nonEmpty), hasCurrency = $hasCurrency)
}
  
register L$name extends Ledger {
  $accountField
  $decls
  $(fields.map("implif func a0$(name.capitalize) = $name").join(" "))
  impl view aview = grid(labels = Top, width = 0.5){ $(fields*.name.join(" "))}
  
  impl func mlBalance(journal: MJournal) = this.copy(ML$name, journal = journal, isDebit = balance > 0, amount = balance
                                              $(if(hasCurrency) ", currency = currency" else "") )
} 

inline entity ML$name extends MLedger$(if (hasCurrency) "Currency" else "NoCurrency") {
  singular = "$(name.fromCamelCase)"
  register ledger: L$name? = if (needLedger) this.copy(L$(name), trAmount = amount) else null
  $(fields.map(f => editorField(f)).join(" "))
  $(decls.filter(!_.is[Field]))
  impl view aview = grid(labels = Top, width = 0.5, visible = needLedger){ $(fields*.name.join(" "))}
}

$trialBalance

$incomeStatement
  
'
 func trialBalance = if (!keyFields) '' else
'report TB$name extends AnalitTrialBalance[L$name] {
  plural = "$(name.fromCamelCase) Trial Balance"
  impl func template: AccTemplate = AccTemplate.$name
    
  impl view list = query >> nav {
    table(action = openLedger(Ledger.Report(account = subAccount $(if (keyFields) ", " + keyFields.map("a${name.capitalize} = $name") else "")))) {
        $(keyFields*.name) debitBalance creditBalance
    }
  }
  impl func ledger = L$name
}'
  
 func incomeStatement = if (!keyFields) '' else
'report IS$name extends AnalitIncomeStatement[L$name] {
  plural = "$(name.fromCamelCase) Income Statement"
  impl func template: AccTemplate = AccTemplate.$name
  impl view list = query.groupBy($(keyFields*.name)).agg(amount = baseAmount.sum.abs) >> nav {
    table(action = openLedger(Ledger.Report(account = account $(if (keyFields) ", " + keyFields.map("a${name.capitalize} = $name") else "")))) {
       $(keyFields*.name) amount
    }
  }
  impl func ledger = L$name
}'
  
}

