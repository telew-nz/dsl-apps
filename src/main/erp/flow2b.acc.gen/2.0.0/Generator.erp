generator account {
  field number: Int
  field type: LedgeAccountType
  field closeWithPeriod: Bool
  field structureSpecific: Bool
     
  compute fields = declarations*.as[Field].filter(name != "currency")
  compute keyFields = fields.filter(isKey)
  
  func editorField(f: Field): String = {
    let upt = 'update = syncAnalit("$(f.name)", new)'
    let dsl = f.dsl.trim
    if (dsl.contains("}")) '$(dsl.dropSuffix("}")) $upt }'
    else '$dsl {$upt}'
  }
    
  func generate: Dsl = '
extend enum LedgerAccount {
  case $name(number = $number, type = $type, structureSpecific = $structureSpecific, closeWithPeriod = $closeWithPeriod) {
    label = "$number $(name.fromCamelCase)" background = "$(type.props.background)"  color = "$(type.props.color)"
  }
}

register L$name extends Ledger {
  func account: LedgerAccount = $name
  $declarations
  $(keyFields.map("func a$(name.capitalize) = $name").join(" "))
  view aview = grid(labels = Top, width = 0.5){ $(fields*.name.join(" "))}
} 

inline entity ML$name extends MLedger$(if (declarations.exists(name == "currency" && _.is[Field])) "Currency" else "NoCurrency") {
  singular = "$(name.fromCamelCase)"
  func account: LedgerAccount = $name
  register ledger: L$name? = if (needLedger) L$(name)(this, trAmount = amount) else null
  $(fields.map(f => editorField(f)).join(" "))
  $(declarations.filter(!_.is[Field]))
  view aview = grid(labels = Top, width = 0.5, visible = needLedger){ $(fields*.name.join(" "))}
}

report TB$name extends AnalitTrialBalance[L$name] {
  plural = "$(name.fromCamelCase) Trial Balance"
  view list = query >> nav {
    table(action = openLedger(GeneralLedger.Report(account = $name$(if (keyFields) ", " + keyFields.map("$name = $name") else "")))) {
        $(fields*.name) debitBalance creditBalance
    }
  }
  func ledger = L$name
}
$incomeStatement
  
'
  
 func incomeStatement = if (!keyFields) '' else
'report IS$name extends AnalitIncomeStatement[L$name] {
  plural = "$(name.fromCamelCase) Income Statement"
  view list = query.groupBy($(keyFields*.name)).agg(amount = baseAmount.sum.abs) >> nav {
    table(action = openLedger(GeneralLedger.Report(account = $name$(if (keyFields) ", " + keyFields.map("$name = $name") else "")))) {
       $(keyFields*.name) amount
    }
  }
  func ledger = L$name
}'
  
}

generator analytic {
  field dataType: String
    
  func generate: Dsl = '
extend trait Ledger {
  func a$name: $dataType? = null
}

extend register GeneralLedger {
  compute $(name.decapitalize): $dataType? = (ledger.a$name) 
}
extend report GeneralLedger.Report {
  field $(name.decapitalize): $dataType? {auto = true}
}
'
}