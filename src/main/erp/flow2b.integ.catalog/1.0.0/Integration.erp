trait ICatalogIntegration[ID] extends SystemService with ExtIdSource[ID] {
  field integs: [ECommerceIntegration] {label = "E-Commerce Integrations"}
  
  back func updateProductJobs(integ: ECommerceIntegration, change: BatchChange[ProductUpdate[ICustomerProduct]]): [SystemJob]?
  
  back func updateProducts(integ: ECommerceIntegration, change: [ProductUpdate[ICustomerProduct]]): Void = {
    let ch = BatchChange.create(this, change.map{c => 
      if (!c.enabled && !c.deleted) ProductUpdate(c, deleted = true) else c
    })
    if (!ch.isEmpty) {
      updateProductJobs(integ, ch)*.run
    }
  }
  
  back func updateAllProducts(): Future[Void] = {
    integs.map {integ =>
      let updates <- ExtId.all.filter(source == integ && item.is[ICustomerProduct]).map{
        integ.productUpdate(item.as[ICustomerProduct]!, shouldDelete = true, photosUpdated = true)
      }.result
      if (let u = updates) updateProducts(integ, u)
    }.allCompleted
  }
}