register RBook {
  key field bookable: IBookable
  key field legalEntity: LegalEntity
  key field location: ILocation
  
  order field isFuture: Bool
  order field date: Date
  
  field document: Entity
  field priorityDate: Date?
    
  field qty: Qty {label = "Quantity"}
  compute factualQty: Qty? = if (isFuture) 0 else qty
  compute expectedQty: Qty? = if (isFuture) qty else 0
  stored compute fact: Qty? = prev?.fact + factualQty
  stored compute expectation: Qty? = prev?.expectation + expectedQty
  compute available: Qty? = fact + expectation
  
  func availableQtyPeriods(start: Date): [QtyPeriod] = {
    if (let n = next) {
      if (n.available != available && start < n.date) {
	    QtyPeriod(period = Period(start = start, end = n.date), qty = available)
          + n.availableQtyPeriods(n.date)
      } else {
        n.availableQtyPeriods(start)
      }
    } else [QtyPeriod(period = Period(start = start, end = Date.max), qty = available)]
  }
  
  func availablePeriods(qty: Qty, start: Date, priorityDate: Date?, excludeItems: [Id?]?): [Period]? = {
    let av = (qty <= available)
    let dates = (if (av) start) + next?.availabilitySwitchDates(qty, av, priorityDate, 0, 0, excludeItems) + Date.max
    dates.sliding(2, 2).filter(count == 2).map(Period(start = first, end = last))
  }
  
  func availabilitySwitchDates(qty: Qty, wasAvailable: Bool, priorityDate: Date?, exclDelta: Qty?, priorDelta: Qty?, excludeItems: [Id?]?): [Date]? = {
    var exclDelta1 = exclDelta
    var priorDelta1 = priorDelta
    if (excludeItems.contains(id)) exclDelta1 = exclDelta - expectedQty
    else if (let pd1 = this.priorityDate, let pd2 = priorityDate) {
      if (pd2 < pd1) {
        priorDelta1 = (priorDelta - expectedQty).max(0)
      }
    }
   
    let av = (qty <= fact + expectation + exclDelta1 + priorDelta1)
    (if (av != wasAvailable) date) + next?.availabilitySwitchDates(qty, av, priorityDate, exclDelta1, priorDelta1, excludeItems)
  }
  
  event onSave = {
    document.forceTouch
  }
}
  
class QtyPeriod {
  field period: Period
  field qty: Qty?
  func toString = "$period: $qty"
}
