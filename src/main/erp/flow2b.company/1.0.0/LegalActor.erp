trait LegalActor {
  func actor: Actor
  func contacts: Contacts
}

extend trait Actor {
  func legalActor: LegalActor?
  func forceLegalActor: LegalActor =  legalActor.alt(throw "Please enter a legal company for " + title)
}
  
entity LegalCompany extends LegalActor {
  ref field company: Company by legalCompanies
  func actor: Actor = company
  object func forceOur: LegalCompany = Workspace.current.actor?.as[Company]?.legalCompanies.first
    .alt(throw "Please enter a legal company for the current workspace company")
  object func ours: [LegalCompany]? = Workspace.current.actor?.as[Company]?.legalCompanies

  ref field name: String {label = "Legal Name"}
  ref field address: Address? {label = "Billing Address"}
  ref field contacts: Contacts
    
  func title = name
  view form = nav{grid {
    name
    company
    address
    contacts
  }}
}

extend entity Company {
  ref field legalCompanies: [LegalCompany]? inline by company 
  func legalActor: LegalActor? = legalCompanies.first
  extend view shortForm = legalCompanies >> list(frame = false){name}
}

extend entity Person extends LegalActor {
  func actor: Actor = this
  func legalActor: LegalActor? = this
  func isOur: Bool = actor == Workspace.current.actor
}

extend entity CompanyGroup {
  func legalActor: LegalActor? = null
}

  