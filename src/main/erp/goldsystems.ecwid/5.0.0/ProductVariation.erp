class EcwidOptionValue {
  field name: String
  field value: String
}


inline entity EcwidCombinationId {
  field combinationId: Int?
  field service: IEcwidIntegration =? IEcwidIntegration.all.first
  field productVariation: IEcwidProductVariation by ecwidCombinationIds
}


trait IEcwidProductVariation extends IEcwidProductBase { 
  field ecwidCombinationIds: [EcwidCombinationId]? inline
  
  func ecwidProduct = superProduct.as[IEcwidProduct]
  func ecwidOptionsValues: [EcwidOptionValue]?
  
  func getEcwidCombinationIdForService(service: IEcwidIntegration) = {
    if (!deleted() &&
        (!superProduct.obsolete || ecwidCombinationIds.find(service == service)) &&
        (!service.categories ||
         superProduct.categories.exists(c => service.categories.contains(c)))) {
      var id = ecwidCombinationIds.find(c => c.service == service)
      if (!id) { // add if needed
        id = EcwidCombinationId(service = service)
        ecwidCombinationIds = ecwidCombinationIds + id
      }
      id
    } else {
      null
    }
  }
  
  
  func makeRemoveServiceJob(serviceToRemove: IEcwidIntegration): Option[SystemJob] = {
    let ecwidCombinationIdToRemove = ecwidCombinationIds.find(service == serviceToRemove)
    if(ecwidCombinationIdToRemove != null) {
      let combinationId = ecwidCombinationIdToRemove?.combinationId
      ecwidCombinationIdToRemove?.delete
      
      if(let ecwidSuperProductId = ecwidProduct?.ecwidIds.find(service == serviceToRemove)) {
        if(combinationId && ecwidSuperProductId.ecwidId) {
          RemoveProductVariationFromEcwid(
            service = serviceToRemove,
            ecwidProductId = ecwidSuperProductId.ecwidId,
            ecwidCombinationId = combinationId
          )
        }
      }
       // 'save' restores it (strange, in Product it works correctly). 
      // TODO: is it needed? retest it in Product.  
    }
  }
  
  event onSave() = {
  	if ( deleted() ) {
      ecwidCombinationIds.map {cId =>
      	let job <- makeRemoveServiceJob(cId.service)
        job.run()
      }
    } else {
      ecwidProduct?.updateEcwid()
    }
  }
  
  view ecwidCombinationIdsView = ecwidCombinationIds >> list {grid{row{
    combinationId
    service
  }}}
}