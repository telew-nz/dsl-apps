class UpdateProductToEcwid extends SystemJob {
  field service: IEcwidIntegration
  field product: IEcwidProduct
 
  
  func getPrice(product: IEcwidProductBase): Future[Money?] = {
    if (let superProductPrice = service.legalEntity.superProductPrice(product.superProduct)) {
      superProductPrice*.salesPrice(service.currency, true)
    } else {
      null //Future(null) ???
    }
  }
  
  // Product jobs:
  func doUpdateProduct(ecwidId: Int, productRequest: EcwidProductRequest): Future[Any] = {
    let responseUpdate <- service.https("products/$ecwidId").put(productRequest.json)
    if (responseUpdate.code != 200) {
      throw "Ecwid: UpdateProduct failed! code: ${responseUpdate.code}, body: ${responseUpdate.body!}, request: ${productRequest.json}"
    }

    responseUpdate.code
    responseUpdate.body!
  }

  class AddResponse {
    field id: Int
  }
  func doAddProduct(ecwidIdToUpdate: EcwidId, productRequest: EcwidProductRequest): Future[Any] = {
    let responseAdd <- service.https("products").post(productRequest.json)
    if (responseAdd.code != 200) {
      throw "Ecwid: AddProduct failed! code: ${responseAdd.code}, body: ${responseAdd.body!}, request: ${productRequest.json}"
    }
    ecwidIdToUpdate.ecwidId = responseAdd.body!.parseJson[AddResponse].id
    ecwidIdToUpdate.save()
    responseAdd.code
    responseAdd.body!
  }

  //Variations jobs:
  func doUpdateProductVariation(productId:Int, combinationId: Int, productRequest: EcwidProductVariationRequest): Future[Any] = {
    let responseVarUpdate <- service.https("products/$productId/combinations/$combinationId").put(productRequest.json)
    if (responseVarUpdate.code != 200) {
      throw "Ecwid: UpdateProduct failed! code: ${responseVarUpdate.code}, body: ${responseVarUpdate.body!}, request: ${productRequest.json}"
    }
    responseVarUpdate.code
    responseVarUpdate.body!
  }
  
  func doAddProductVariation(productId:Int, ecwidCombinationIdToUpdate: EcwidCombinationId, productRequest: EcwidProductVariationRequest): Future[Any] = {
    let responseVarAdd <- service.https("products/$productId/combinations").post(productRequest.json)
    if (responseVarAdd.code != 200) {
      throw "Ecwid: UpdateProduct failed! code: ${responseVarAdd.code}, body: ${responseVarAdd.body!}, request: ${productRequest.json}"
    }
    ecwidCombinationIdToUpdate.combinationId = responseVarAdd.body!.parseJson[AddResponse].id
    ecwidCombinationIdToUpdate.save()
    responseVarAdd.code
    responseVarAdd.body!
  }

  /*class VariationResponse {
    field id: Int
  }
  func doGetProductVariations(productId:Int): Future[Seq[VariationResponse]] = {
    let responseVarUpdate <- service.https("products/$productId/combinations").get()
    responseVarUpdate.code
    responseVarUpdate.body!.parseJson[Seq[VariationResponse]]
  }*/
  

  func fillBaseProductRequest(productRequest: IEcwidProductBaseRequest, product: IEcwidProductBase) = {
    productRequest.sku = product.sku
    productRequest.weight = product.weightInGrams
    //price
    let actualPrice <- getPrice(product)
    productRequest.price = actualPrice
    //quantity or unlimited
    if (!product.superProduct.obsolete) {
      if (product.superProduct.alwaysAvailable) {
        productRequest.unlimited = true
      } else {
        productRequest.quantity = 
          StockRegister.current
                       .filter(product.subProducts.contains(good) && legalEntity == service.legalEntity && (!service.stores || service.stores.contains(store)))
                       .agg(available.sum)
      } 
    }
  }
  
  
  func do = {
    if (let ecwidIdToUpdate = product.ecwidIds.find(service == service)) {    
      
      let productRequest =
      EcwidProductRequest(
        name = product.ecwidName,
        description = product.description,
        options = product.ecwidOptions
      )
      let _ <- fillBaseProductRequest(productRequest, product)
      //enabled
      productRequest.enabled = !product.superProduct.obsolete && 
      	(productRequest.price != 0) && 
      	(productRequest.unlimited || (productRequest.quantity > 0))

      //productRequest.json.trace
      // do add or update
      let _ <- if (ecwidIdToUpdate.ecwidId) { 
        doUpdateProduct(ecwidIdToUpdate.ecwidId, productRequest)
      } else { 
        doAddProduct(ecwidIdToUpdate, productRequest)
      }
      // when product is updated update variations
      product.ecwidVariations.map { v =>
        if (let ecwidCombinationIdToUpdate = v.getEcwidCombinationIdForService(service)) {    
          let productVariationRequest =
          EcwidProductVariationRequest(
            options = v.ecwidOptionsValues
          )
          let _ <- fillBaseProductRequest(productVariationRequest, v)
          let _ <- if (ecwidCombinationIdToUpdate.combinationId) {
            doUpdateProductVariation(ecwidIdToUpdate.ecwidId, ecwidCombinationIdToUpdate.combinationId, productVariationRequest)
          } else { 
            doAddProductVariation(ecwidIdToUpdate.ecwidId, ecwidCombinationIdToUpdate, productVariationRequest)
          }
        } else {
          Future(1)
        }
      }.allCompleted
    } else {
      Future(1)
    }
  }
}


interface IEcwidProductBaseRequest {
  field sku: String?
  field weight: Number?
  field price = 0
  field quantity: Number? = 0
  field unlimited = false

}

class EcwidProductRequest extends IEcwidProductBaseRequest {
  field name: String
  field description: Html?
  field options: [EcwidOption]?
  field enabled = true
}

class EcwidProductVariationRequest extends IEcwidProductBaseRequest {
  field options: [EcwidOptionValue]?
}
