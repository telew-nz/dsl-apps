/*
IEcwidProduct

Extend your product type (trait) with this trait to add ecwid integration.
IBasicProduct is extended by default

*/

inline entity EcwidId {
  field ecwidId: Int?
  field service: IEcwidIntegration =? IEcwidIntegration.all.first
  field product: IEcwidProduct by ecwidIds
}

enum EcwidOptionType(id: String?) {
  case Select   (id = "SELECT")
  case Radio    (id = "RADIO")
  case CheckBox (id = "CHECKBOX")
  case TextField(id = "TEXTFIELD")
  case TextArea (id = "TEXTAREA")
  case DateField(id = "DATE")
  case Files    (id = "FILES")
}
enum EcwidPriceModifierType(id: String) {
  case Absolute(id = "ABSOLUTE")
  case Percent(id = "PERCENT")
}
class EcwidOptionChoice {
  field text: String
  field priceModifier: Int = 0
  field priceModifierType: EcwidPriceModifierType {
    jsonMap[String](apply = _.id, unapply = v => EcwidPriceModifierType.all.find(id == v)!),
    default = Absolute
  }
}
class EcwidOption {
  field name: String
  field type: EcwidOptionType? {
    jsonMap[String?](apply = _?.id, unapply = v => EcwidOptionType.all.find(id == v)!)
  }
  field choices: [EcwidOptionChoice]?
  field defaultChoice: Int?
  field required: Bool = true
}
  

trait IEcwidProduct extends IEcwidProductBase{
  
  field ecwidIds: [EcwidId]? inline
  
  func description: Text?
  
  func ecwidName: String = title
  
  func ecwidOptions: [EcwidOption]? = []
  
  func ecwidVariations = subProducts*.as[IEcwidProductVariation]
  
  
  event onSave() = {
    updateEcwid()
  }
  
  
  func makeRemoveEcwidServiceJob(serviceToRemove: IEcwidIntegration): Option[SystemJob] = {
    
    
    let ecwidIdToRemove = ecwidIds.find(eId => eId.service == serviceToRemove)
    if(ecwidIdToRemove != null) {
      ecwidIds = ecwidIds.filter(service != serviceToRemove)
      this.save()
      RemoveProductFromEcwid(
        ecwidId = ecwidIdToRemove!.ecwidId,
        service = serviceToRemove,
        variations = ecwidVariations)
    } else {
      null
    }
  }
  
  func makeUpdateEcwidServiceJob(serviceToUpdate: IEcwidIntegration): Option[SystemJob] = {
    if (!deleted() &&
        (!superProduct.obsolete || ecwidIds.find(eId => eId.service == serviceToUpdate)) &&
        (!serviceToUpdate.categories ||
         superProduct.categories.exists(c => serviceToUpdate.categories.contains(c)))) {
      if (!ecwidIds.find(service == serviceToUpdate)) { // add if needed
        ecwidIds = ecwidIds + EcwidId(service = serviceToUpdate)
        this.save()
      }
      UpdateProductToEcwid(product = this, service = serviceToUpdate)
  	} else {
      let job: SystemJob <- makeRemoveEcwidServiceJob(serviceToUpdate)
      job
    }
  }
  
  
  func updateEcwid(): Void = {
    IEcwidIntegration.all.map{ s => 
      let job <- makeUpdateEcwidServiceJob(s)
      job.run()
    }
  }
  
  view ecwidIdsView = ecwidIds >> list {grid{row{
    ecwidId
    service
  }}}
}


extend trait IBasicSubProduct extends IEcwidProduct

extend entity Kit {
  extend view form = ecwidIdsView
}
extend entity Good {
  extend view form = ecwidIdsView
}
extend entity Service {
  extend view form = ecwidIdsView
}