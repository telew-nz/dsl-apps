inline entity EcwidCategoryId {
  field categoryId: Int?
  field service: IEcwidIntegration =? IEcwidIntegration.all.first
  field category: IEcwidCategory by ecwidCategoryIds
}

trait IEcwidCategory {
  field ecwidCategoryIds: [EcwidCategoryId]? inline
  
  func ecwidCategoryName: String = title
  func description: String?
  
  func products: [ISuperProduct]?
  func ecwidProducts = products*.as[IEcwidProduct]
  
  func getEcwidCategoryIdForService(service: IEcwidIntegration) = {
    if (!deleted()) {
      var id = ecwidCategoryIds.find(c => c.service == service)
      if (!id) { // add if needed
        id = EcwidCategoryId(service = service)
        ecwidCategoryIds = ecwidCategoryIds + id
      }
      id
    } else {
      null
    }
  }
  
  
  func makeRemoveEcwidServiceJob(serviceToRemove: IEcwidIntegration): SystemJob? = {
    let categoryIdToRemove = ecwidCategoryIds.find(service == serviceToRemove)
    if(categoryIdToRemove != null) {
      let categoryId = categoryIdToRemove?.categoryId
      ecwidCategoryIds = ecwidCategoryIds.filter(service != serviceToRemove)
      if (!deleted) this.save()
      
      if(categoryId != null) {
        RemoveCategoryFromEcwid(categoryId = categoryId, service = serviceToRemove)
      }
    }
  }
  

  func makeUpdateEcwidServiceJob(serviceToUpdate: IEcwidIntegration): SystemJob? = {
    if(!deleted() &&
       (!serviceToUpdate.categories ||
        serviceToUpdate.categories*.as[IEcwidCategory].contains(this))) {
      UpdateCategoryToEcwid(category = this, service = serviceToUpdate)
    } else {
      let job: SystemJob <- makeRemoveEcwidServiceJob(serviceToUpdate)
      job
    }
  }
  
  
  func updateEcwid(): Void = {
    IEcwidIntegration.all.map{ s => 
      let job <- makeUpdateEcwidServiceJob(s)
      job.run()
    }
  }
  
  
  event onSave = {
  	updateEcwid()
  }
  
}

extend entity ProductCategory extends IEcwidCategory
