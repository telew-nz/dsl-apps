class EcwidOptionValue {
  field name: String
  field value: String
}


inline entity EcwidCombinationId {
  field combinationId: Int?
  field service: IEcwidIntegration =? IEcwidIntegration.all.first
  field productVariation: IEcwidProductVariation by ecwidCombinationIds
  
  func makeRemoveFromEcwidJob(): SystemJob = {
  	RemoveProductVariationFromEcwid(
      service   = this.service,
      variation = this.productVariation
    )
  }
}


trait IEcwidProductVariation extends IEcwidProductBase { 
  system field ecwidCombinationIds: [EcwidCombinationId]? inline
  
  func ecwidProduct = superProduct.as[IEcwidProduct]
  func ecwidOptionsValues: [EcwidOptionValue]?
  
  func stockAvailable(service: IEcwidIntegration): Bool = {
  	(superProduct.alwaysAvailable) ||
    (service.stockLevel.get(calcStock(service.legalEntity, service.stores)) > 0)
  }
  
  func getEcwidCombinationIdForService(service: IEcwidIntegration) = {
    if (!deleted &&
        (!superProduct.obsolete || ecwidCombinationIds.find(service == service)) &&
        (!service.categories ||
         superProduct.categories.exists(c => service.categories.contains(c)))) {
      var id = ecwidCombinationIds.find(c => c.service == service)
      if (!id) { // add if needed
        id = EcwidCombinationId(service = service)
        ecwidCombinationIds = ecwidCombinationIds + id
      }
      id
    } else {
      null
    }
  }
  
  
  func makeRemoveServiceJob(serviceToRemove: IEcwidIntegration): SystemJob = {
    RemoveProductVariationFromEcwid(
      service = serviceToRemove,
      variation = this
    )
  }
  
  event onSave() = {
    if (!User.current?.is[IEcwidIntegration].alt(false)) {
      if ( deleted ) {
        ecwidCombinationIds*.makeRemoveFromEcwidJob*.run
      } else {
        ecwidProduct?.updateEcwid(updated(photos))
      }
    }
  }
  
  view ecwidCombinationIdsView = ecwidCombinationIds >> list {grid{row{
    combinationId
    service
  }}}
}