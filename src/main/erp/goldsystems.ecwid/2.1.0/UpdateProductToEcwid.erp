class UpdateProductToEcwid extends SystemJob {
  field service: IEcwidIntegration {jsonIgnore}
  field product: IEcwidProduct {jsonIgnore}
  
  field name: String = product.ecwidName
  field sku: String? = product.sku
  field description: Html? = product.description
  field weightInGrams: Number? {jsonName = "weight"}
  field price = 0
  field quantity: Number? = 0
  field unlimited = false
  field enabled = true
  
  func getPrice(): Future[Money?] = {
    if (let superProductPrice = service.legalEntity.superProductPrice(product.superProduct)) {
      superProductPrice*.salesPrice(service.currency, true)
    } else {
      null //Future(null) ???
    }
  }
  
  class AddResponse {
    field id: Int
  }

  func doUpdate(ecwidId: Int): Future[Any] = {
      let responseUpdate <- service.https("products/$ecwidId").put(this.json)
      responseUpdate.code
      responseUpdate.body!
  }
  
  func doAdd(ecwidIdToUpdate: EcwidId): Future[Any] = {
      service.https("products").url
      let responseAdd <- service.https("products").post(this.json)
      ecwidIdToUpdate.ecwidId = responseAdd.body!.parseJson[AddResponse].id
      ecwidIdToUpdate.save()
      responseAdd.code
      responseAdd.body!
  }
  
  func do = {
    if (let ecwidIdToUpdate = product.ecwidIds.find(service == service)) {    
      weightInGrams = product.weightInGrams
          
      //price
      let actualPrice <- getPrice()
      price = actualPrice
      //quantity or unlimited
      if (!product.superProduct.obsolete) {
        if (product.superProduct.alwaysAvailable) {
          unlimited = true
        } else {
          quantity = StockRegister.current
                       .filter(product.subProducts.contains(good) && (!service.stores || service.stores.contains(store)))
                       .agg(available.sum)
        } 
      }
      //enabled
      enabled = product.superProduct.obsolete && (price != 0) && (unlimited || (quantity > 0))
      
      // do add or update
      if (ecwidIdToUpdate.ecwidId) { 
        doUpdate(ecwidIdToUpdate.ecwidId)
      } else { 
        doAdd(ecwidIdToUpdate)
      }
    } else {
      Future(1)
    }
  }
}
