trait IEcwidIntegration extends SystemService with OAuth2 {
  field title: String
  
  field ecwidStoreId: String
  //teststore: "12169019"
  field currency: Currency = Currency.our
 
  field productIds: [EcwidId]? inline by service
  compute products = productIds*.product

  field stores: [Store]?
  field categories: [ProductCategory]?
  
  ref field legalEntity: LegalEntity {
    available(Ref).with(priceModels)
    default =? LegalEntity.ours.onlyOne
    from = LegalEntity.ours
  }

  field updateAllProductsEvery: Duration[hour, 0]?
  system field autoUpdateAllProductsJob: AutoUpdateAllProductsJob inline by service
  
  func roles: [Role]? = [Admin]
  func apiBaseUrl: Url
  func apiUrl: Url = "$apiBaseUrl$ecwidStoreId/"
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url
  func authClientId: String
  func authClientSecret: String
  func authScope: String
  func http(path: String): HttpRequest = HttpRequest(url = "$apiUrl$path")

  // ecwid uses `token` url param instead of standart oath2 way
  func https(path: String): HttpRequest = HttpRequest(url = "$apiUrl$path", ssl = true).param("token", accessToken!)  
  
  view form = nav{grid{
    title
    legalEntity
    ecwidStoreId
    currency
    updateAllProductsEvery
    serviceState
    authorizeView
    button("Sync Products") {
      UpdateAllProductsToEcwidService(service = this).run()
      UI.info("Product synchronisation will be executed shortly.")
    }
    button("Remove All Products") {
      RemoveAllProductsFromEcwidService(service = this).run()
      UI.info("Products will be removed shortly from the store.")
    }
    stores
    categories
    products
  }}
  
  event onSave() = {
    UpdateAllProductsToEcwidService(service = this).run()
  }
}

entity EcwidIntegration extends IEcwidIntegration {

  func authAuthorizeUrl: Url = "https://my.ecwid.com/api/oauth/authorize"
  func authTokenExchangeUrl: Url = "https://my.ecwid.com/api/oauth/token"
  func authClientId = "flow2b-bullion-deals"
  func authClientSecret = "WoNzVqVAVvKarTjfsTVR7QMkzGfJEHWZ"
  func authScope = "read_store_profile update_orders read_orders create_catalog update_catalog read_catalog update_discount_coupons create_discount_coupons read_discount_coupons read_customers"
  func apiBaseUrl = "app.ecwid.com/api/v3/"
}


class UpdateAllProductsToEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    IEcwidProduct.all*.updateEcwidService(service)
  }
}


class RemoveAllProductsFromEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    let productsToRemove <- IEcwidProduct.all.result
    productsToRemove*.removeService(service)
  }
}


inline entity AutoUpdateAllProductsJob extends ScheduledJob {
  field service: IEcwidIntegration by autoUpdateAllProductsJob
  func schedule = if (let p = service.updateAllProductsEvery) "0 3 */${p.unformattedString} * * ?" else null
  
  func do = {
    UpdateAllProductsToEcwidService(service = service).run()
  }
}