/*
IEcwidProduct

Extend your product type (trait) with this trait to add ecwid integration.
IBasicProduct is extended by default

*/

inline entity EcwidId {
  field ecwidId: Int?
  field service: IEcwidIntegration =? IEcwidIntegration.all.first
  field product: IEcwidProduct by ecwidIds
}
  

trait IEcwidProduct {
  
  field ecwidIds: [EcwidId]? inline
  
  func ecwidName: String = title
  func sku: String
  func description: Text?
  func obsolete: Bool
  func superProduct: ISuperProduct
  func subProducts: [IProduct]?
  func weightInGrams: Number?
  
  
  func removeService(serviceToRemove: IEcwidIntegration): Void = {
    let ecwidIdToRemove = ecwidIds.find(service == serviceToRemove)
    if(ecwidIdToRemove != null) {
      ecwidIds = ecwidIds.filter(service != serviceToRemove)
      this.save()
      RemoveProductFromEcwid(ecwidId = ecwidIdToRemove!.ecwidId, service = serviceToRemove).run()
    }
  }
  

  event onSave() = {
    updateEcwid()
  }
  
  func updateEcwidService(serviceToUpdate: IEcwidIntegration): Void = {
    if (!deleted() &&
        (!superProduct.obsolete || ecwidIds.find(service == serviceToUpdate)) &&
        (!serviceToUpdate.categories ||
         superProduct.categories.exists(c => serviceToUpdate.categories.contains(c)))) {
      if (!ecwidIds.find(service == serviceToUpdate)) { // add if needed
        ecwidIds = ecwidIds + EcwidId(service = serviceToUpdate)
        this.save()
      }
      UpdateProductToEcwid(product = this, service = serviceToUpdate).run()
  	} else {
      removeService(serviceToUpdate)
    }
  }
  
  func updateEcwid(): Void = {
    IEcwidIntegration.all.map{ s => updateEcwidService(s) }
  }
  
  view ecwidIdsView = ecwidIds >> list {grid{row{
    ecwidId
    service
  }}}
}


extend trait IBasicProduct extends IEcwidProduct 

// TODO: sync with ecwid job (in both directions)
