/*
IEcwidProduct

Extend your product type (trait) with this trait to add ecwid integration.

*/

inline entity EcwidId {
    field ecwidId: Int?
    field service: IEcwidIntegration 
    field product: IEcwidProduct by ecwidIds
}
  

trait IEcwidProduct {
  
  field ecwidIds: [EcwidId]? inline
  
  func ecwidName: String = title
  func sku: String
  func description: Text?
  
  func superProduct: ISuperProduct
  func subProducts: [IProduct]?
  
  func addService(serviceToAdd: IEcwidIntegration): Void = {
    if(ecwidIds.filter(service == serviceToAdd) == []) {
      let newEcwidId = EcwidId(service = serviceToAdd)
      ecwidIds = ecwidIds + newEcwidId 
      this.save()
      UpdateProductToEcwid(product = this, service = serviceToAdd).run()
    }
  }
  
  func removeService(serviceToRemove: IEcwidIntegration): Void = {
    let ecwidIdToRemove = ecwidIds.find(service == serviceToRemove)
    if(ecwidIdToRemove != null) {
      ecwidIds = ecwidIds.filter(service != serviceToRemove)
      this.save()
      RemoveProductFromEcwid(ecwidId = ecwidIdToRemove!.ecwidId, service = serviceToRemove).run()
    }
  }
  

  //FIXME: StandardBullionProduct:1:8: Ambiguous inheritance for goldsystems.bp.StandardBullionProduct.onSave
  //FIXME: extend doesn't work
  extend func onSave() = {
    updateEcwid()
  }
  
  func updateEcwidService(serviceToUpdate: IEcwidIntegration): Void = {
    UpdateProductToEcwid(product = this, service = serviceToUpdate).run()
  }
  
  func updateEcwid(): Void = {
    ecwidIds.map { eid =>
      UpdateProductToEcwid(
      	product = this, service = eid.service
      ).run()
    }
  }
}


class UpdateProductToEcwid extends SystemJob {
  field service: IEcwidIntegration {jsonIgnore}
  field product: IEcwidProduct {jsonIgnore}
  
  field name: String = product.ecwidName
  field sku: String? = product.sku
  field description: Text? = product.description
  field price = 0
  field quantity: Number? = 0
  field unlimited = false
  field enabled = true
  
  func getPrice(): Future[Money?] = {
    if (let superProductPrice = service.legalEntity.superProductPrice(product.superProduct)) {
      let salesPrice <- superProductPrice*.salesPrice(service.currency, true)
      salesPrice // just superProductPrice*.salesPrice(service.currency, true) ???
    } else {
      null //Future(null) ???
    }
  }
  
  class AddResponse {
    field id: Int
  }

  func doUpdate(ecwidId: Int): Future[Any] = {
      let responseUpdate <- service.https("products/$ecwidId").put(this.json.trace)
      responseUpdate.code.trace
      responseUpdate.body!.trace
  }
  
  func doAdd(ecwidIdToUpdate: EcwidId): Future[Any] = {
      service.https("products").url.trace
      let responseAdd <- service.https("products").post(this.json.trace)
      ecwidIdToUpdate.ecwidId = responseAdd.body!.parseJson[AddResponse].id
      ecwidIdToUpdate.save()
      responseAdd.code.trace
      responseAdd.body!.trace
  }
  
  func do = {
    if (let ecwidIdToUpdate = product.ecwidIds.find(service == service)) {
    
      //price
      let actualPrice <- getPrice()
      if(actualPrice != null) {
        price = actualPrice
      }
      //quantity or unlimited
      if (product.superProduct.isTangible) {
        quantity = StockRegister.current
                     .filter(product.subProducts.contains(good) && (!service.stores || service.stores.contains(store)))
                     .agg(available.sum)
      } else {
        unlimited = true
      }
      //enabled
      enabled = (price != 0) && (unlimited || (quantity > 0))
      
      // do add or update
      if (ecwidIdToUpdate.ecwidId != null) { 
        doUpdate(ecwidIdToUpdate.ecwidId)
      } else { 
        doAdd(ecwidIdToUpdate)
      }
    } else {
      Future(0)
    }
  }
}


class RemoveProductFromEcwid extends SystemJob {
  field service: IEcwidIntegration
  field ecwidId: Int
  
  func do = {
    let response <- service.https("products/$ecwidId").delete()
    service.https("products").url.trace
    service.https("products").headers.trace
    response.code.trace
    response.trace
    response.body!.trace
  }
}


extend trait IBasicProduct extends IEcwidProduct 

// TODO: scheduled job for automatically products updating
// TODO: sync with ecwid job (in both directions)

// FIXME: do something with next LEGACY code
class EcwidProductResponse {
  field total: Int?
  field items: [EcwidProduct]?
}

class cEcwidProducts {
  field items: [EcwidProduct]?
}
class cEcwidProduct {
  field id: Int
  field sku: String?

}


entity EcwidProduct {
  key field ecwidId: Int {jsonName = "id"}
  field sku: String?
  ref field name: String
  field url: String?
  func title = url.alt(name)
}


class EcwidRetrieveProducts extends SystemJob {
  field service: IEcwidIntegration

  func do = {
    let response <- service.https("products").get
    service.https("products").url.trace
    service.https("products").headers.trace
    response.code.trace
    response.trace
    response.body.trace
    response.body!.parseJson[EcwidProductResponse].trace
    response.body!.parseJson[cEcwidProducts].trace
  }
}
