trait IEcwidIntegration extends SystemService with OAuth2 {
  field title: String
  
  field ecwidStoreId: String
  //teststore: "12169019"
  field currency: Currency = Currency.our
 
  field productIds: [EcwidId]? inline by service
  compute products = productIds*.product

  field stores: [Store]?
  
  ref field legalEntity: LegalEntity {
    available(Ref).with(priceModels)
    default =? LegalEntity.ours.onlyOne
    from = LegalEntity.ours
  }
   
  func roles: [Role]? = [Admin]
  func apiBaseUrl: Url
  func apiUrl: Url = "$apiBaseUrl$ecwidStoreId/"
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url
  func authClientId: String
  func authClientSecret: String
  func authScope: String
  func http(path: String): HttpRequest = HttpRequest(url = "$apiUrl$path")

  // ecwid uses `token` url param instead of standart oath2 way
  func https(path: String): HttpRequest = HttpRequest(url = "$apiUrl$path", ssl = true).param("token", accessToken!)  
  
  view form = nav{grid{
    title
    legalEntity
    ecwidStoreId
    currency
    serviceState
    authorizeView
    button("Retrieve Categories from Ecwid") {
      EcwidRetrieveCategories(service = this).run()
      UI.info("Categories Job is posted")
    }
    button("Retrieve Products from Ecwid") {
      EcwidRetrieveProducts(service = this).run()
      UI.info("Products Job is posted")
    }
    button("Add All Products") {
      AddAllProductsToEcwidService(service = this).run()
      UI.info("AddAllProducts Job is posted")
    }
    button("Update All Products") {
      UpdateAllProductsToEcwidService(service = this).run()
      UI.info("UpdateAllProducts Job is posted")
    }
    button("Remove All Products") {
      RemoveAllProductsFromEcwidService(service = this).run()
      UI.info("RemoveAllProducts Job is posted")
    }
    stores
    products
  }}
}

entity EcwidIntegration extends IEcwidIntegration {

  func authAuthorizeUrl: Url = "https://my.ecwid.com/api/oauth/authorize"
  func authTokenExchangeUrl: Url = "https://my.ecwid.com/api/oauth/token"
  func authClientId = "flow2b-bullion-deals"
  func authClientSecret = "WoNzVqVAVvKarTjfsTVR7QMkzGfJEHWZ"
  func authScope = "read_store_profile update_orders read_orders create_catalog update_catalog read_catalog update_discount_coupons create_discount_coupons read_discount_coupons read_customers"
  func apiBaseUrl = "app.ecwid.com/api/v3/"
}


class AddAllProductsToEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    let productsToAdd <- IEcwidProduct.all.result 
    productsToAdd*.addService(service)
  }
}


class UpdateAllProductsToEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    service.products*.updateEcwidService(service)
  }
}


class RemoveAllProductsFromEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    let productsToRemove <- IEcwidProduct.all.result
    productsToRemove*.removeService(service)
  }
}