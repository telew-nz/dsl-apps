trait IEcwidIntegration extends SystemService with OAuth2 {
  field title: String
  
  field ecwidStoreId: String
  //teststore: "12169019"
  field currency: Currency = Currency.our
  field stores: [Store]?
  field categories: [ProductCategory]?
  field productsWithPhotosOnly: Bool {label = "Syncronize Only Products with Photos"}
  
  const system field productIds: [EcwidId]? inline by service {availableFor = Overall}
  const system field productVariationIds: [EcwidCombinationId]? inline by service {availableFor = Overall}
  const system field productCategoriesIds: [EcwidCategoryId]? inline by service {availableFor = Overall}
  
  
  ref field legalEntity: LegalEntity {
    available(Ref).with(priceModels)
    default =? LegalEntity.ours.onlyOne
    from = LegalEntity.ours
  }

  field updateProductsPricesEvery: Duration[hour, 0]?
  system field autoUpdateProductsPricesJob: AutoUpdateProductsPricesJob inline by service
  field stockLevel: SyncStockLevel {
    default = Available
  }
  func roles: [Role]? = [Admin]
  func apiBaseUrl: Url
  func apiUrl: Url = "$apiBaseUrl$ecwidStoreId/"
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url
  func authClientId: String
  func authClientSecret: String
  func authScope: String
  func http(path: String): HttpRequest = HttpRequest(url = "$apiUrl$path")

  // ecwid uses `token` url param instead of standart oath2 way
  func https(path: String): HttpRequest = HttpRequest(url = "$apiUrl$path", ssl = true).param("token", accessToken!)  
  
  view form = nav{tabs{
    grid(label = "Settings"){
      title
      legalEntity
      ecwidStoreId
      currency
      stockLevel >> field(compact = true)
      productsWithPhotosOnly
      updateProductsPricesEvery
      stores
      categories
      serviceState
      authorizeView
  	}
    grid(label = "Testing", labels = None){
      button("Sync with Ecwid") {
        SyncAllToEcwidService(service = this).run()
        UI.info("Products and Categories synchronisation will be executed shortly.")
      }
      button("Remove All from Ecwid") {
        RemoveAllFromEcwidService(service = this).run()
        UI.info("Products and Categories will be removed from the Ecwid store shortly.")
      }
      button("Sync Products with Ecwid") {
        SyncProductsToEcwidService(service = this).run()
        UI.info("Products synchronisation will be executed shortly.")
      }
      button("Sync Categories with Ecwid") {
        SyncCategoriesToEcwidService(service = this).run()
        UI.info("Categories synchronisation will be executed shortly.")
      }
      button("Remove Products from Ecwid") {
        RemoveAllProductsFromEcwidService(service = this).run()
        UI.info("Products will be removed from the Ecwid store shortly.")
      }
      button("Remove all Categories from Ecwid") {
        RemoveAllCategoriesFromEcwidService(service = this).run()
        UI.info("Categories will be removed from the Ecwid store shortly.")
      }
  	}
  }}
  
  event onSave() = {
    if (serviceState == Active && (created || updated(stockLevel) || updated(serviceState) || updated(productsWithPhotosOnly) || updated(stores) || updated(currency) || updated(categories) || updated(legalEntity) ) ) {
      SyncAllToEcwidService(service = this, needToUpdatePhotos = true).run()
    }
  }
}

entity EcwidIntegration extends IEcwidIntegration {
  
  func authAuthorizeUrl: Url = "https://my.ecwid.com/api/oauth/authorize"
  func authTokenExchangeUrl: Url = "https://my.ecwid.com/api/oauth/token"
  func authClientId = "flow2b-bullion-deals"
  func authClientSecret = "WoNzVqVAVvKarTjfsTVR7QMkzGfJEHWZ"
  func authScope = "read_store_profile update_orders read_orders create_catalog update_catalog read_catalog update_discount_coupons create_discount_coupons read_discount_coupons read_customers"
  func apiBaseUrl = "app.ecwid.com/api/v3/"
  object view list = EcwidIntegration.all >> nav{list{grid(labels = None){
    x {title serviceState}
  }}}
}

enum SyncStockLevel(get: Stock? => Qty?) {
  case Available(get = (s: Stock?) => s?.available) = "Available = Fact - Reserve"
  case Outlook(get = (s: Stock?) => s?.outlook) = "Outlook = Fact - Reserve + Expectation"
}

class SyncProductsToEcwidService extends SystemJob {
  field service: IEcwidIntegration
  field needToUpdatePhotos: Bool = false
  
  func do = {
    let products <- IEcwidProduct.all.filter(ecwidEnabled(service)).result
    products*.makeUpdateEcwidServiceJob(service, needToUpdatePhotos)*.run()
  }
}


class SyncCategoriesToEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    let categories <- IEcwidCategory.all.result
    categories*.makeUpdateEcwidServiceJob(service)*.run()
  }
}


class SyncAllToEcwidService extends SystemJob {
  field service: IEcwidIntegration
  field needToUpdatePhotos: Bool = false
  
  func do = {
    let _ <- SyncProductsToEcwidService(service = service, needToUpdatePhotos = this.needToUpdatePhotos).do()
    SyncCategoriesToEcwidService(service = service).do()
  }
}


class RemoveAllProductsFromEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    let productsToRemove <- IEcwidProduct.all.result
    productsToRemove*.makeRemoveEcwidServiceJob(service)*.run()
    
  }
}

class RemoveAllCategoriesFromEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    let categoriesToRemove <- IEcwidCategory.all.result
    categoriesToRemove*.makeRemoveEcwidServiceJob(service)*.run()
  }
}

class RemoveAllFromEcwidService extends SystemJob {
  field service: IEcwidIntegration
  
  func do = {
    let _ <- RemoveAllProductsFromEcwidService(service = service).do()
    RemoveAllCategoriesFromEcwidService(service = service).do()
  }
}

inline entity AutoUpdateProductsPricesJob extends ScheduledJob {
  field service: IEcwidIntegration by autoUpdateProductsPricesJob
  func schedule = if (let p = service.updateProductsPricesEvery) "0 3 */${p.unformattedString} * * ?" else null
  
  func do = {
    let products <- IEcwidProduct.all
                      .filter(ecwidEnabled(service) && 
                              ecwidIds.find(pId => pId.service == service)?.ecwidId)
                      .result
    products*.makeUpdateEcwidServiceJob(service, false)*.run()
  }
}