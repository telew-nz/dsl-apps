trait IActiveItem extends Entity with DeferredJob {
  var activeState: ActiveState
  override func issueTypes = super.issueTypes + [ITUnprocessedActiveItem, ITFollowUpActiveItem]

  impl func service = NotifyService
  impl func do = {
    activeState = FollowUp
    save
  }
  impl func dependsOnRegisters = false
  impl func jobDate = if (activeState == AwaitingReply) followUpDate

  field followUpDate: Date? {
    visible = activeState == AwaitingReply
    validate = if (activeState == AwaitingReply) {
      if (!followUpDate) "Follow up date cannot be empty"
      else if (followUpDate < Date.now) "Follow up date should be in future"
    }
  }
  event onActiveStateUpdated: Void = {
    if (activeState == AwaitingReply) {
      followUpDate = Date.now + 7_day
    }
  }
  func followUpOn(date: Date): this = {
    activeState = AwaitingReply
    followUpDate = date
    save
  }

  func processFixes: [IFix]? = [Fix(text = "Process and close the $(dslType.singular)", acts = [
     Act(label = "Close", icon = "check-circle", color = "#090", do = {
        activeState = Closed
        UI.save(this)
      })
  ])]
  func waitForReplyFixes(text: String): [IFix]? =  [FollowUpFix(text = text, item = this)]
  func cancelFixes: [IFix]? = [Fix(text = "Cancel the $(dslType.singular)", acts = [
     Act(label = "Cancel", icon = "times-circle", color = "#c00", do = {
       activeState = Canceled
       UI.save(this)
     })
  ])]

  impl event onActivity = {
    if (Activity.current?.comment && Activity.current!.mainEntity == this && activeState !in [Entered, InProgress]) {
      activeState = InProgress
      save
    }
  }
}
class FollowUpFix extends IFix {
  field text: String
  field item: IActiveItem
  field date: Date = Date.now + 1_week
  impl view form = y (spacing = false) {
    "â€¢ " + text
    x {
      x (spacing = false) {
        button("Follow up on", icon = "hourglass", color = "#c35d00") {
          UI.save(item.followUpOn(date))
        }
        date >> field(editMode = AlwaysEdit, fontSize = 0.8, noTab)
      }
      button(label = "In a Day", color = "#c35d00") {
        UI.save(item.followUpOn(Date.now + 1_day))
      }
      button(label = "Week", color = "#c35d00") {
        UI.save(item.followUpOn(Date.now + 1_week))
      }
      button(label = "Month", color = "#c35d00") {
        UI.save(item.followUpOn(Date.now + 1_month))
      }
    }
  }
}

enum ActiveState(active: Bool) {
  case Entered(active = true) {
    background = "#ed9"
    icon = "play"
  }
  case InProgress(active = true) {
    background = "#8bf"
    icon = "spinner"
  }
  case Closed(active = false) {
    color = "white"
    background = "#090"
    icon = "check-circle"
  }
  case Canceled(active = false) {
    background = "#999"
    icon = "times-circle"
  }

  case AwaitingReply(active = false) {
    background = "#ffca99"
    icon = "hourglass"
  }
  case FollowUp(active = true) {
    background = "#8bf"
    icon = "bell"
  }
}

entity Ticket extends Entity with HasN with NewEngine with IActiveItem {
  icon = "ticket-alt"

  object field gen: Int?
  impl func numPrefix = "TK"
  impl func nextN = increment(Ticket.gen)

  compute contraObs: String? {
    availableFor = Ref
    value = {
      {
        if (let pubs = observers*.observer.filter(isPublic)) pubs
        else observers*.observer.filter(_ != User.current && !_.is[Dashboard] && active)
      }.map(addresseeName.alt(_.title)).distinct.join(", ")
    }
  }

  system const field channel: CommChannel?
  list field items: [Entity]? by tickets {label = "Related Items"}
  ref field state: ActiveState {
    default = Entered
    update = {
      onActiveStateUpdated
    }
  }
  compute status {
    value = state
    deprecated(use = "state")
  }
  impl compute activeState = state

  ref field subject: String
  field description: Text?
  ref field roles: [Role]? = {
    if (let roles = items*.itemRoles) roles.toSet
    else if (front) if (let c = Dashboard.current) [c.role]
  }
  system field isSupport: Bool

  impl func itemRoles = roles
  impl compute title = subject
  func active = state.active
  impl event onLoad = {
    if (isSupport && created) {
      Activity.current!.makeSupport("")
    }
  }

  impl view form = nav(fullScreenComments = !description) {
    grid(labels = Top) {
      grid(spacing = false, labels = None) {
        row{number >> field(fontStyle = Label width = 0.09)  contraObs >> field(fontStyle = Label)}
        row{state >> field(editMode = AlwaysEdit, width = 0.09, compact) title}
      }
      followUpDate
      roles
      items
      tickets >> field(singular = "Sub-Ticket")
      description
    }
    extension("nav")
  }
  impl view ref = grid(spacing = false, labels = None) {
    row{number >> field(fontStyle = Label width = 0.09)  contraObs >> field(fontStyle = Label)}
    row{state >> field(editMode = AlwaysEdit, width = 0.09, compact) title}
  }
  impl view quick = grid (labels = None) {
    x(flow = false){state subject >> field(stretch = 1, fontStyle = H1) number >> field(fontStyle = Label)}
    roles >> field(compact)
    description
  }
  impl func splitPerUser(role: String): Bool = true
}


object ITUnprocessedActiveItem extends IssueType[IActiveItem] {
  impl func title = "Unprocessed Item"
  impl func label(item: IActiveItem) = "Unprocessed $(item.dslType.singular)"
  impl func defaultLevel = ToDo
  impl func hasIssue(item: IActiveItem): Bool = {
    item.activeState.active && item.activeState != FollowUp
  }
  impl func fixes(item: IActiveItem) = {
    item.processFixes
    +
    item.waitForReplyFixes("Wait for a reply and follow up in")
    +
    item.cancelFixes
  }
}

object ITFollowUpActiveItem extends IssueType[IActiveItem] {
  impl func title = "Follow up Active Item"
  impl func label(item: IActiveItem) = "Follow up $(item.dslType.singular)"
  impl func defaultLevel = ToDo
  impl func hasIssue(item: IActiveItem): Bool = {
    item.activeState == FollowUp
  }
  impl func fixes(item: IActiveItem) = {
    item.waitForReplyFixes("Follow up, wait for a reply and follow up again in")
    +
    item.cancelFixes
  }
}