enum DateUnit(scale: Int?, isTime: Bool) extends Unit {
  func position: UnitPosition = SuffixWithSpace
  func symbol = name

  case millisecond(scale = 0, isTime = true)
  case second(scale = 3, isTime = true)
  case minute(scale = 2, isTime = true)
  case hour(scale = 2, isTime = true)
  case day(scale = 2, isTime = false)
  case week(scale = 2, isTime = false)
  case month(scale = 2, isTime = false)
  case quarter(scale = 2, isTime = false)
  case year(scale = 2, isTime = false)

  func isDate = !isTime
  native convert(dec: Number?): Number?
}

class Duration extends Number {
  native to[R extends Duration]: R
  native years: Duration[year]?
  native quarters: Duration[quarter]?
  native months: Duration[month]?
  native weeks: Duration[week]?
  native days: Duration[day]?
  native hours: Duration[hour]?
  native minutes: Duration[minute]?
  native seconds: Duration[second]?
  native milliseconds: Duration[millisecond]?
}
class Duration? extends Number {
  native to[R extends Duration]: R?
  native years: Duration[year]?
  native quarters: Duration[quarter]?
  native months: Duration[month]?
  native weeks: Duration[week]?
  native day: Duration[DateUnit.day]? {
    deprecated(use = "days")
  }
  native days: Duration[DateUnit.day]?
  native hours: Duration[DateUnit.hour]?
  native hour: Duration[DateUnit.hour]? {
    deprecated(use = "hours")
  }
  native minutes: Duration[minute]?
  native seconds: Duration[second]?
  native milliseconds: Duration[millisecond]?
}

class DateSymbol {
  field name: String
  field shortName: String
  func toString: String? = name
}

interface Date extends NativeOrd {
  object native now: Date
  object native min: Date
  object native max: Date

  native add(duration: Duration?): this
  native addDate(date: Date): this
  native sub(date: Date): Duration[DateUnit.second]?
  native sub(date: Date, unit: DateUnit): Duration?
  native start(of: DateUnit): this
  native end(of: DateUnit): this

  native weekdayName: String
  native weekdayShortName: String
  native monthName: String
  native monthShortName: String

  native year: Duration[DateUnit.year]?
  native quarter: Duration[DateUnit.quarter]?
  native month: Duration[DateUnit.month]
  native week: Duration[DateUnit.week]
  native week(of: DateUnit): Duration[DateUnit.week]
  native day: Duration[DateUnit.day]
  native day(of: DateUnit): Duration[DateUnit.day]
  native hour: Duration[DateUnit.hour]?
  native minute: Duration[DateUnit.minute]?
  native second: Duration[DateUnit.second]?
  native millisecond: Duration[DateUnit.millisecond]?
  native isoString: String
  native epoch: Duration[DateUnit.millisecond]?
  native period(start: Date, duration: Duration): Period

  native date: Date[day]
  native dateIncl: Date[day]
  native time: Time
  native mainTz: this
  native timezone(name: String): this
  native format(pattern: String): String

  object native utc(year: Int, month: Int, day: Int): UtcDate[day]
  object native apply(year: Int, month: Int, day: Int): Date[day]
  object native utc(s: String): Date
  object native apply(s: String): Date
  object native fromEpoch(epoch: Duration?): Date
}


class Time extends Date {
  object native apply(hour: Int, minute: Int, second: Int): Time
}

class Period {
  object func timeline = Period(start = Date.min, end = Date.max)
  field start: Date {
    update = {
      if (try? end) end = start + (end - old!)
      else end = start
    }
  }
  field end: Date {validate = if (end < start) "End date $end is earlier than stating date $start of the period" }

  func addDate(date: Date): Period =  Period(start = start.addDate(date), end = end.addDate(date))
  func duration: Duration[second]? = end - start
  func contains(date: Date): Bool = start <= date && date < end
  func includes(period: Period): Bool = start <= period.start && period.end <= end
  func intersects(period: Period): Bool = period.start < end && period.end > start
  func add(duration: Duration?): Period = Period(start = start + duration, end = end + duration)
  func earlier(other: Period): Period = if (other.start < start) other else this
  func later(other: Period): Period = if (other.start > start) other else this
  func move(start: Date): Period = Period(start = start, end = start + duration)
  func intersect(other: Period): Period? = {
    let s = start.max(other.start)
    let e = end.min(other.end)
    if (s < e) Period(start = s, end = e) else null
  }

  view form = x {
    read {
      start >> field(visible = start != Date.min)
      label("—")
      if (end == Date.max) "∞" else end
    }
    edit {
      start
      label("—")
      end
    }
  }
  func isEmpty: Bool = start == end

  func toString = "$start - $end"
}

class TimePeriod {
  field start: UtcDate[millisecond, hour]
  field end: UtcDate[millisecond, hour]
  func period: Period = {
    Period(start = start, end = if (end < start) end + 1_day else end)
  }
  func period(date: Date): Period? = {
    let t = date.time
    if (contains(t)) {
      let d = date.date
      if (end < start) {
        if (t > end) Period(start = d.addDate(start), end = d.addDate(end) + 1_day)
        else Period(start = d.addDate(start) - 1_day, end = d.addDate(end))
      } else {
        Period(start = d.addDate(start), end = d.addDate(end))
      }
    }
  }
  func duration: Duration[second]? = end - start
  func addDate(date: Date): Period = {
    if (end < start) {
      Period(start = date.addDate(start), end = date.addDate(end) + 1_day)
    } else {
      Period(start = date.addDate(start), end = date.addDate(end))
    }
  }
  view form = x{start label("—") end}
  func contains(date: Date): Bool = {
    (start <= date && date <= end) || (end < start && (start <= date || date <= end))
  }
  func toString = "$start - $end"
  func isEmpty: Bool = start == end
}