enum Role(isPublic: Bool)

interface IRole {
  func dash = Workspace.current.dashboards.find(role == this)!
}

role Admin {
  singular = "System Admin"
  view menu = y{
    menu("Admin") {
      User >> item(fastAdd, fastSearch)
      SystemService >> item("Services", fastAdd, fastSearch)
      OurActor >> item("Our Legal Actors")
      IContactGroup
      button("Workspace") {Workspace.current.form.open}
      File
      ImportTask >> item(fastAdd)
    }
    menu("Advanced") {
      AdminMenu
      AdminConsole  >> item("Console")
    }
  }
  view dashboard = row{
    App.all >> nav(label = "Applications", background = "#222", width = 1.5) {
      x(margin = None, flow = false) {
        yscroll {
          list(mode = Select) {
            package >> field(margin = Around)
          }
        }
        selected(stretch = 1) {
          form.unnav
        }
      }
    }
  }
}

role UserRole {
  public
  singular = "User"
  entity SubjectObserver = readWrite
  entity Activity {
    read = true
    write = user?.isCurrent
  }
  entity Person {
    read = user
  }
  entity User {
    read = true
  }
  entity File {
    read = true
  }
  entity Dashboard {
    read = true
  }
  entity Ticket {
    read = isFor(User.current)
    write = isFor(User.current)
  }
  view dashboard = row{}

  view menu = menu {
    x {
      MailBox
      add("Ticket", icon = "ticket-alt") {Ticket().form.open}
    }
    extension("Empty")
  }
}
object AdminMenu {
  icon = "ellipsis-v"
}
object AdminConsole {
  icon = "terminal"
}
role Public {
  public
}

trait IUser extends RefEntity {
  background = "#222"
  object native current: IUser
  func isCurrent: Bool = this == current
  func debug: Bool = true
  func active: Bool = userEnabled
  func isError: Bool = false
  func userEnabled: Bool = true
  func roles: [Role]?
  func secondaryRolesSelection: SecondaryRolesSelection? = AllExclAdmin
  func secondaryRoles: [Role]? = null
  func isPublic: Bool = allRoles.all(isPublic)
  func allRoles: [Role]? = {
    if (secondaryRolesSelection == AllExclAdmin) (Role.all - Role.Admin).toSet
    else if (secondaryRolesSelection == AllInclAdmin) Role.all.toSet
    else if (!secondaryRolesSelection) roles
    else (roles + secondaryRoles).toSet
  }
  func is(role: Role): Bool = userEnabled && roles.contains(role)
  func isOneOf(roles: [Role]?): Bool = userEnabled && this.roles.intersect(roles.toSeq)

  system const field authId: String?
  func login: String? = ""
  func password: Password? = ""
  func name = title
  func ourContacts: [IContact]? = []
  func postError(text: Text): Void = {
    PostErrorJob(service = this, text = text).run
  }
  back func error(error: Any): JobError = {
    if (let e = error.as[JobError]) e
    else ReportError(error = error)
  }
}

entity User extends PseudoEntity with IUser with Contact {
  singular = "Flow2b User"
  icon = "user-cog"
  func canSend: Bool = userEnabled
  func send: Void = {
    join(Activity.current!.entities.first).notify
  }
  object func current: User? = IUser.current.as[User]
  func mainEntity: Person = person
  ref field person: Person inline by user
  ref field login: String =? person.contacts*.as[EmailContact].first?.email
  ref field userEnabled: Bool {
    default = true
  }
  field roles: [Role]? {
    availableFor = List
    label = "Primary Roles"
    width = 1.0
    from = (Role.all - Role.Public - Role.UserRole).toSet
  }
  ref compute isPublic: Bool = roles == [Public]
  field secondaryRolesSelection: SecondaryRolesSelection? = AllExclAdmin
  field secondaryRoles: [Role]? {
    from = (Role.all - Role.Public - Role.UserRole).toSet
    visible = secondaryRolesSelection == Selected
  }
  func name = person.name
  report Report {
    field enabledUsersOnly = true
    view list = User.all.filter((!enabledUsersOnly || userEnabled) )  >> nav{list{grid(labels = None){
      title
      roles
    }}}
  }
  func users: [User]? = [this]

  back system compute unreadCount = (unread = subjects*.unreadCount.sum, pinned = subjects.filter(pinned).count)
  system compute unreadSubjects: [SubjectObserver]? {
    available(All)
    value = subjects.filter(unreadCount > 0 || pinned)
  }
  back object func all(role: Role): [User]? = User.all.filter(is(role)).result.get

  view form = nav{grid(labels = Top){
    person >> field(title = title)
    login
    userEnabled
    roles
    secondaryRolesSelection >> field(compact = false)
    secondaryRoles >> field(label = "")
    extension
  }}

  event onSave = {
    if (created || updated(roles)) {
      subjects*.subject*.as[DashboardItem]*.touch
    }
  }
  func ourContacts: [IContact]? = person?.companies.filter(company.our)*.contacts
}


enum SecondaryRolesSelection {
  case AllExclAdmin = "All excluding Admin"
  case AllInclAdmin = "All including Admin"
  case Selected
}