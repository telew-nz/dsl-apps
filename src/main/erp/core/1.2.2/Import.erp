trait ImportTask extends Entity with DashboardItem {
  object field gen: Int?
  background = "#222"
  const ref field n: Int? = increment(gen)
  func number = "IMPORT$n"

  func issues = {
    if (state == Error) {
      [ImportError]
    }
  }
  func fixes(issue: DashboardIssue) = {
    if (issue == ImportError) {
      [
        Fix(text = "Make sure that import schema and the file correlates to each other"),
        Fix(text = "If the file seems to be correct, please contact support"),
        Fix(text = "If it was uploaded by mistake, delete the upload")
      ]
    }
  }
  ref field date: Date = now
  func title = "$number $date"

  func service: IUser
  const field state: ImportTaskState = Entered
  const field enterDate: Date = now

  const field error: Text? {visible = state == Error}

  view stateView = group {
    state
    error
    button("Process Again", visible = state != Entered || (Date.now - enterDate) > 3_minute) {
      Query(this).foreach{i =>
        i.state = Entered
        i.error = ""
        i.enterDate = now
        i.save
        createJob.run()
      }.result
    }
  }
  back func createJob: ImportJob
  event onSave = {
    if (!deleted && (created || (updated && !updated(state) && !updated(error) && state == Error))) {
      createJob.run()
    }
  }
}

interface ImportJob extends SystemJob {
  func service: IUser = task.service
  func task: ImportTask
  final func do: Future[Any] = {
    Activity.current!.entities = [task, service]*.as[Entity]!
    import.map{_ =>
      task.state = Complete
      task.error = ""
      task.save
    }
  }
  final func error(error: Any): JobError = {
    task.state = Error
    task.error = error
    task.save
    IgnoreError
  }
  back func import: Future[Any]
}

enum ImportTaskState {
  case Entered {background = "#ed9"}
  case Error {background = "#f99"}
  case Complete {color = "white" background = "#090"}
}

extend enum DashboardIssue {
  case ImportError(role = null, priority = major)
}

entity Import extends ImportTask  {
  const field user: User = User.current!
  func service = user
  field roles: [Role]? =?  if (front) if (let c = Dashboard.current) [c.role]
  func itemRoles = if (let r = roles) r else user.roles

  field schema: ImportSchema[Any]?
  field files: [File]

  view form = nav{grid{
    issuesView
    number
    date
    schema
    files
    stateView
  }}
  back func createJob = ImportProcessJob(task = this)
  view traitItem = x{number date state}
}

trait ImportSchema[D] extends RefEntity {
  back func checkFile(file: File): Bool
  back func parse(file: File, data: Data?): D
  back func checkData(file: File, data: D): Bool
  back func process(file: File, data: D): Future[Void]
}

trait SheetImportSchema extends ImportSchema[[String?]?] {
  back func header: String? = ""
  back func checkFile(file: File): Bool = header && file.is("csv")
  back func parse(file: File, data: Data?) = {
    data.toString.lines(CSV)
  }
  back func checkData(file: File, data: [String?]?): Bool = header && data.first == header
}

back class ImportProcessJob extends ImportJob {
  field task: Import
  func import = {
    task.files.map{file =>
      let data <- file.content
      let processor: (schema: ImportSchema[Any], data: Any) = {
        if (let sh = task.schema) {
          let d = sh.parse(file, data)
          (schema = sh, data = d)
        } else {
         ImportSchema.all.result.get
            .mapOpt(sh =>
              if (let schema = sh.as[ImportSchema[Any]]) {
                if (schema.checkFile(file)) {
                  if (let d = try? schema.parse(file, data)) {
                    if (schema.checkData(file, d)) {
                      (schema, data = d)
                    }
                  }
                }
              }
            )
            .first
            .alt(throw "Cannot determine import type for $file")
        }
      }
      task.schema = processor.schema

      processor.schema.process(file, processor.data)
    }.allCompleted
  }
}