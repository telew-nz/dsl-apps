entity App {
  singular = "Application"
  plural = "Applications"
  background = "#222"
  ref field package: String
  field name: String?
  list field description: Text?
  list field versions: [AppVersion]? read by app {
    available(All)
  }
  func title = package
  field readOnly: Bool = false
  func hasErrors: Bool = versions.exists(errors.nonEmpty)
  report Report {
    view list = App.all >> x(margin = None, flow = false) {
      yscroll {
        list(mode = Select) {
          package >> field (margin = Around)
        }
      }
      selected(stretch = 1) {
        form
      }
    }
  }

  view form = nav {
    yscroll {
      grid(labels = Top) {
        package
        name
        versions >> list {
          x {
            status
            title
            touchedOn
          }
        }
        description
      }
    }
  }
  back object func releaseAll(old: AppVersionStatus, new: AppVersionStatus): Future[[AppVersion]?] = {
    App.all*.versions.filter(status == old).map(_.release(new)).result
  }
  back object func cancelOld: Future[[AppVersion]?] = {
    App.all.flatMap{app =>
      app.versions.filter(status == Prod)
        .sortBy[[ Number?]](version.split(".").map(_.toNumber).desc)
        .drop(1)
    }.map(release(Canceled)).result
  }
}

enum AppChannel {
  case Dev {background = "#8bf"}
  case Pretest {background = "#f3d795"}
  case Test {background = "#f3d795"}
  case Alpha {background = "#dea"}
  case Beta {background = "#dea"}
  case Prod {color = "white" background = "#090"}
}

enum AppVersionStatus {
  case Dev {background = "#8bf"}
  case Pretest {background = "#f3d795"}
  case Test {background = "#f3d795"}
  case Alpha {background = "#dea"}
  case Beta {background = "#dea"}
  case Prod {color = "white" background = "#090"}
  case Canceled {background = "#999"}
}

entity AppVersion {
  background = "#222"
  ref field app: App by versions
  ref field version: String = "1.0.0"
  ref field status: AppVersionStatus = Dev
  field releaseNotes: Text?
  field files: [AppFile]?
  field dependencies: [Dependency]?
  field readOnly: Bool = false
  field errors: [Error]?
  back native release(status: AppVersionStatus): Future[AppVersion]

  func title: String = app + ":" + version

  class AppFile {
    field title: String
    field content: Code
  }
  class Error {
    field message: String
  }
  class Dependency {
    field package: String
    field version: String?
    field channel: AppChannel = Prod
  }

  view form {
    printable = false
    layout = nav {
      tabs {
        column  (label = "Sources") {
          files >> x (margin = None, flow = false) {
            yscroll {
              list(mode = Select, frame = false) {
                title >> field (margin = Around)
              }
            }
            selected {
              column {
                title
                scroll {
                  content
                }
              }
            }
          }
          errors >> yscroll(editMode = AlwaysRead, maxHeight = 12) {
            list {
              message >> field(color = "red")
            }
          }
        }

        grid (label = "Settings") {
          app.package >> field(editMode = AlwaysRead, fontStyle = H1)
          version >> field(fontStyle = H1)
          status
          button("Issues") {openIssues}
          dependencies >> table {
            read {
              App(id = package, package = package) >> field(label = "Package", width = 0.5)
            }
            edit {
              package >> field(width = 0.5)
            }
            version >> field(width = 0.3)
            channel >> field(width = 0.2)
          }
          releaseNotes
          errors >> list(editMode = AlwaysRead) {
            message >> field(color = "red")
          }
        }
      }
      button("Download", visible = id) {
        AppVersion.download(id!)
      }
    }
  }

  front func openIssues: Void = {
    AppIssue.Report(package = app.package, version = version).list.open
  }

  front object func download(id: Id): Void = {
    UI.download(AppVersion.load(id).map{
      let allVers <- allDependencyVersions
      Zip("dsl.zip", allVers*.unload)
    })
  }

  back func dependencyVersions: Future[[AppVersion]?] = {
    dependencies.map{
      let vers <- App.load(package)*.versions.filter(status != Canceled).sortBy(_.version.desc).result
      AppVersion.load(vers!.first.id!).result
    }.allCompleted
  }
  back func allDependencyVersions: Future[[AppVersion]] = {
    let vers: [AppVersion]? <- dependencyVersions
    let allVers <- (vers.map(allDependencyVersions).allCompleted)
    (this + allVers.flatMap(i => i)).distinct
  }
  func unload: [File]? = files.map(FileGeneric(name = app.package.replace(".", "/") + "/" + title + ".flow2b", content = content.toData))
}


entity AppIssue {
  background = "#222"
  object field gen: Int?
  const ref field n: Int? {
    default = increment(AppIssue.gen)
    views = []
  }
  compute number = "AE" + n.format(3, 0)

  ref field package: String
  ref field version: String
  field error: PlainText?
  field log: PlainText?
  event onSave = {
    joinAll(Admin)
  }
  func title = "$number $package $version"
  report Report {
    field package: String? {auto}
    field version: String? {auto}
    view list = AppIssue.all >> nav{table{
      number package version
    }}
  }
}