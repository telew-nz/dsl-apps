alias Number = INum {
  deprecated (use = "INum, Num, Num?, UNum or UNum?") 
}

interface INum extends NativeOrd {
  native unit: Unit?
  native noUnit: this
  native format(width: Int?, scale: Int? = 0): String?
  native unformattedString: String
  native mod(divider: Int): UInt?
  object native random: Num?
  native range(to: this): [this]

  native min(b: Num?): Num?
  native toData(bytes: UInt?): Data
}

interface Num extends INum {
  native abs: UNum
  native round(mode: RoundMode, scale: Int?): Num?
  native roundInc(mode: RoundMode, inc: UNum): Num?
  native positive: UNum?
  native negative: UNum?

  native max(b: UNum): UNum
  native max(b: UNum?): UNum?
  native max(b: Num): Num
  native max(b: Num?): Num?

  native min(b: UNum): Num
  native min(b: UNum?): Num?
  native min(b: Num): Num

  native pow(n: Num?): Num
}

interface Num? extends INum {
  native abs: UNum?
  native round(mode: RoundMode, scale: Int?): Num?
  native roundInc(mode: RoundMode, inc: UNum): Num?
  native positive: UNum?
  native negative: UNum?

  native max(b: UNum): UNum
  native max(b: UNum?): UNum?
  native max(b: Num): Num?
  native max(b: Num?): Num?

  native min(b: INum): Num?

  native pow(n: Num?): Num?
}

interface UNum extends INum {
  native round(mode: RoundMode, scale: Int?): UNum?
  native roundInc(mode: RoundMode, inc: UNum): UNum?

  native max(b: INum): UNum

  native min(b: UNum): UNum
  native min(b: UNum?): UNum?
  native min(b: Num): Num

  native abs: UNum? {deprecated(use = "no need")}
  native positive: UNum? {deprecated(use = "no need")}
  native negative: UNum? {deprecated(use = "no need")}

  native pow(n: Num?): UNum
}

interface UNum? extends INum {
  native round(mode: RoundMode, scale: Int?): UNum?
  native roundInc(mode: RoundMode, inc: UNum): UNum?

  native max(b: UNum): UNum
  native max(b: UNum?): UNum?
  native max(b: Num): UNum?
  native max(b: Num?): UNum?

  native min(b: UNum): UNum?
  native min(b: UNum?): UNum?
  native min(b: Num): Num

  native abs: UNum? {deprecated(use = "no need")}
  native positive: UNum? {deprecated(use = "no need")}
  native negative: UNum? {deprecated(use = "no need")}

  native pow(n: Num?): UNum?
}

enum RoundMode {
  case round
  case floor
  case ceil
  case down
  case up
  case halfUp
  case halfDown
  case halfEven
}
class Int extends Num
class Dec extends Num
class Qty extends Num
class Money extends Num {
  native unit: Currency?
  native to[R extends Money](date: Date): Future[R]
}
class Percent extends Num
class UInt extends UNum
class UDec extends UNum
class UQty extends UNum
class UMoney extends UNum {
  native unit: Currency?
  native to[R extends Money](date: Date): Future[R]
}
class UPercent extends UNum
class Uuid extends UNum? {
  object native generate: Uuid
}
class Int? extends Num?
class Dec? extends Num?
class Money? extends Num? {
  native unit: Currency?
  native to[R extends Money](date: Date): Future[R?]
}
class Percent? extends Num?
class Qty? extends Num?
class UInt? extends UNum?
class UDec? extends UNum?
class UMoney? extends UNum? {
  native unit: Currency?
  native to[R extends Money](date: Date): Future[R?]
}
class UPercent? extends UNum?
class UQty? extends UNum?
class Uuid? extends UNum?

enum UnitPosition {
  case Prefix
  case PrefixWithSpace
  case Suffix
  case SuffixWithSpace
  case NoSymbol
}

interface Unit {
  func position: UnitPosition
  func symbol: String
  func pluralSymbol: String = symbol
  func scale: Int?
  func formatLg: Int? = 0
  func convert(dec: Num?): Num? {
    default value = throw "Cannot convert $dec to $symbol"
  }
}
object UuidUnit extends Unit {
  impl func position: UnitPosition = NoSymbol
  impl func symbol: String = "uuid"
  impl func scale: Int? = 0
}

enum Currency(impl field symbol: String, impl field scale: Int?, title: String, impl field position: UnitPosition) extends Unit {
  object func default: Currency = USD
  object func our: Currency = OurActor.ours.first?.actor?.getCurrency.alt(default)

  case USD(symbol = "US\$", scale = 2, title = "US Dollar", position = Prefix) = "US\$"
  case EUR(symbol = "€", scale = 2, title = "Euro", position = Prefix) = "€"
  case NZD(symbol = "NZ\$", scale = 2, title = "New Zealand Dollar", position = Prefix) = "NZ\$"
  case AUD(symbol = "AU\$", scale = 2, title = "Australian Dollar", position = Prefix) = "AU\$"

  case PHP(symbol = "PHP", scale = 2, title = "Philippine Peso", position = Prefix) = "PHP"
  case SGD(symbol = "SG\$", scale = 2, title = "Singapore Dollar", position = Prefix) = "SG\$"
  case RUB(symbol = "₽", scale = 2, title = "Russian Ruble", position = Prefix) = "₽"

  impl func toString: String? = title
}

object PercentUnit extends Unit {
  singular = "%"
  impl func position: UnitPosition = Suffix
  impl func symbol: String = "%"
  impl func scale: Int? = 2
  impl func formatLg: Int? = 2
}