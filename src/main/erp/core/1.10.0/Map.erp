class Map[K, V] {
  native apply[O where V = O?](key: K): V
  native apply(key: K): V?
  native agg[I, V1 where V = [I]](f: ([I], key: K) => V1): [K : V1]
  native subtotal[I, V1 where V = [I]](f: ([I], key: K) => V1): [(K, V1, items: V)]
  native keys: Set[K]
  native values: [V]
  native toSeq: [(K, V)]
  native add(other: [K : V]?): [K : V]
  native sub(key: K): [K : V]?

  native updated(key: K, value: V? => V?): [K : V]?

  native mapValues[V1](f: (key: K, V) => V1): [K : V1]
  native toMap: [K -> V] {deprecated(use = "No need")}

  native join[W, R](with: [K : W]?, value: (key: K, left: V, right: W) => R?): [K : R]?
  native leftJoin[W, R](with: [K : W]?, value: (key: K, left: V, right: W?) => R?): [K : R]?
  native rightJoin[W, R](with: [K : W]?, value: (key: K, left: V?, right: W) => R?): [K : R]?
  native fullJoin[W, R](with: [K : W]?, value: (key: K, left: V?, right: W?) => R?): [K : R]?
}

class Map?[K, V] {
  native apply[O where V = O?](key: K): V
  native apply(key: K): V?
  native agg[I, V1 where V = [I]](f: ([I], key: K) => V1): [K : V1]?
  native subtotal[I, V1 where V = [I]](f: ([I], key: K) => V1): [(K, V1, items: V)]?

  native updated(key: K, value: V? => V?): [K : V]?
  native join[W, R](with: [K : W]?, value: (key: K, left: V, right: W) => R?): [K : R]?
  native leftJoin[W, R](with: [K : W]?, value: (key: K, left: V, right: W?) => R?): [K : R]?
  native rightJoin[W, R](with: [K : W]?, value: (key: K, left: V?, right: W) => R?): [K : R]?
  native fullJoin[W, R](with: [K : W]?, value: (key: K, left: V?, right: W?) => R?): [K : R]?
  native toSeq: [(K, V)]?
  native toMap: [K -> V]? {deprecated(use = "No need")}
  native keys: Set[K]?
  native values: [V]?
  native add(other: [K : V]?): [K : V]?
  native sub(key: K): [K : V]?

  native mapValues[V1](f: (key: K, V) => V1): [K : V1]?
}