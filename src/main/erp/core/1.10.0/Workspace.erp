entity Workspace {
  background = "#222"
  object native current: Workspace
  object native crossId: UInt?
  object native currentId: UInt

  impl field title: String
  const field frozen: Bool {label = "Workspace Frozen"}
  field countryCode: String {
    default = "NZ"
  }
  field timeZone: String {
    default = "Pacific/Auckland"
  }

  system const field authId: String
  system field dashboards: [Dashboard]? inline by workspace
  back func dashboard(role: Role): Dashboard = dashboards.find(d => d.role == role)!
  func actor: Actor? {
    value = OurActor.our?.actor
    deprecated(use = "OurActor.our")
  }
  back func apiRoot: Url = "$(System.apiUrl)/$authId"
  system field apps: [String -> String]?
  back func updateAppVersion(app: String, version: String): Void = {
    apps = apps + [app -> version]
    save()
  }
  back func cleanAppVersion(app: String, version: String): Void = {
    apps = apps - app
    save()
  }
  func appVersion(package: String): String? = apps(package)
  //back native appChannel(package: String): AppChannel?

  func hasNfc: Bool = false
  impl view form = nav{
    tabs {
      grid (label = "Main") {
        title >> field(label = "Workspace Title")
        countryCode
        timeZone
        extension("main")
      }
      grid(label = "Role Contacts") {
        dashboards >> list (label = "Role Contacts", canAdd = false, canDelete = false) {grid(labels = None) {
          role.toString
          contacts >> list(frame = false, margin = None) {form}
        }}
      }
      grid(label = "Other") {
        extension
      }
    }
    add("Workspace") {
      let w <- UI.save(Workspace.incomplete(title = "New Workspace"))
      UI.info("Workspace is created. Please refresh the page.")
    }
  }
}

entity Dashboard extends PseudoEntity with ContactAddressee {
  searchWeight = 1.2
  impl func isPublic: Bool = false
  singular = "Role"
  plural = "Roles"
  front object native current: Dashboard?

  back object func for(role: Role): Dashboard = {
    Dashboard.all.find(d => d.role == role).result.get!
  }

  impl func isOur = true
  field workspace: Workspace by dashboards
  impl func mainEntity = workspace
  field role: Role
  back func _role: String = Conv.field[String](this, "role")

  impl func canSend: Bool = true
  impl object func send(activity: Activity, contacts: [this]): Void = {
    contacts*.send(activity)
  }
  back func send(activity: Activity): Void = {
    activity.mainEntity.joinAll(role)
  }

  compute curUnreadItems: [SubjectObserver]? = if (let u = User.current) if (u.roles.contains(this.role) || !u.roles) {
    u.unreadSubjects
      .filter(unreadCount && (!subject.itemRoles.intersect(u.roles) || subject.itemRoles.contains(this.role)))
  }
  compute curUnreadItems1: [SubjectObserver]? {
    value = curUnreadItems.first(50)
  }
  compute curIssueItems0 {
    value = if (let u = User.current) {
      subjects
        .filter((try? subject.as[DashboardItem]!) && fullUnreadCount && subject.isForUser(u, this.role))
        .sortBy(issues*.priority*.number.max.desc, subject.itemPriority.number.desc, subject.itemOrder)
    }
  }
  compute curIssueItems1 {
    availableFor = All
    value = curIssueItems0.first(50)
  }
  compute curIssueItems {
    value = {
      let subs = curUnreadItems*.subject.toSet
      curIssueItems1.filter(i => !subs.contains(i.subject))
    }
  }

  compute curPins0: [SubjectObserver]? {
    value = if (let u = User.current) {
      u.unreadSubjects
        .filter(!unreadCount && (!subject.itemRoles.intersect(u.roles) || subject.itemRoles.contains(this.role)))
        .sortBy(subject.itemPriority.number.desc, subject.itemActiveOrder)
    }
  }
  compute curPins {
    availableFor = All
    value = {
      let subs = (curUnreadItems + curIssueItems1)*.subject.toSet
      curPins0.filter(i => !subs.contains(i.subject)).first(50)
    }
  }

  compute curActiveItems0 {
    value = if (let u = User.current) {
      subjects
        .filter((try? subject.as[DashboardItem]!) && !unreadCount && pinned && subject.isForUser(u, this.role))
        .sortBy(subject.itemPriority.number.desc, subject.itemActiveOrder)
    }
  }
  compute curActiveItems {
    availableFor = All
    value = {
      let subs = (curUnreadItems + curIssueItems1 + curPins0)*.subject.toSet
      curActiveItems0.filter(i => !subs.contains(i.subject)).first(50)
    }
  }
  impl view form = y(flow = true) {
    h2("Messages", visible = curUnreadItems, margin = Around, color = "#983fa0")
    curUnreadItems >> list(margin = None, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row{
        unreadCount >> field(fontStyle = Badge, background = "#983fa0", width = 0.05)
        y(width = 0.25, align = Right) {
          subjectType >> field(fontStyle = Label)
          subject.itemImage >> field(miniature = List)
        }
        subject.dash >> field(width = 1.0, margin = NoneInner)
      }
    }}
    h2("Issues", visible = curIssueItems, margin = Around, color = "#b00")
    curIssueItems >> list(margin = None, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row{
        fullUnreadCount >> field(fontStyle = Badge, background = "#b00", width = 0.05)
        y(width = 0.25, align = Right) {
          subjectType >> field(fontStyle = Label)
          subject.itemImage >> field(miniature = List)
        }
        subject.dash >> field(width = 1.0, margin = NoneInner)
      }
      row{space(width = 0.3) issuesText >> field(color = "red", width = 0.7)}
    }}
    h2("Pins", visible = curPins, margin = Around, color = "#369")
    curPins >> list(margin = None, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row {
        badge("P", background = "#369", width = 0.05)
        y(width = 0.25, align = Right) {
          subjectType >> field(fontStyle = Label)
          subject.itemImage >> field(miniature = List)
        }
        subject.dash >> field(width = 1.0, margin = NoneInner)
      }
    }}
    h2("Active Items", visible = curActiveItems, margin = Around, color = "#369")
    curActiveItems >> list(margin = None, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row{
        badge("A", background = "#369", width = 0.05)
        y(width = 0.25, align = Right) {
          subjectType >> field(fontStyle = Label)
          subject.itemImage >> field(miniature = List)
        }
        subject.dash >> field(width = 1.0, margin = NoneInner)
      }
    }}
  }
  impl func title = role.toString!

  compute curCount {
    value = (curUnreadItems.count, curIssueCount, curActiveCount, curPinsCount)
  }
  compute curPinsCount {
    availableFor = List
    value = curPins0.count
  }
  compute curActiveCount {
    availableFor = List
    value = curActiveItems0.count
  }
  compute curIssueCount {
    availableFor = List
    value = curIssueItems0.count
  }

}

class DummyClass {
}

trait DashboardItem extends Entity {
  back func issues: [DashboardIssue]? = []
  func fixes(issue: DashboardIssue): Future[[Fix]?] = []
  func activeRoles: [Role]? = []

  compute savedIssues: Seq[DashboardIssue]? {
    availableFor = Inline
    value = observers*.issues.toSeq
    views = []
  }

  view issuesView = savedIssues >> list(label = "", frame = true) {
    y(background = "#fff3f3") {
      _.toString >> field (color = "red")
      fixes(_) >> list(frame = false) {
        x {
          "â€¢ " + text
          acts >> list(flow = true, frame = false) {
            x (margin = None, flow = false) {
              ref
              button(visible = label, label = label, margin = LeftRight) {
                _.do()
              }
            }
          }
        }
      }
    }
  }

  back native updateDashboard: Void

  class Fix(text: String, acts: [Act]?)
  class Act(ref: RefEntity?, label: String?, front field do: () => Future[Void] = {})
}

enum DashboardIssue(role: Role?, priority: Priority)

enum Priority(number: Dec[4]?) {
  case critical(number = calc.higher(major).number)
  case major(number = calc.higher(default).number)
  case default(number = 0)
  case minor(number = calc.lower(default).number)

  object func calc = PriorityCalc()
}

class PriorityCalc {
  field bottom: Dec[4]? = -10000
  field top: Dec[4]? =  10000

  func higher(p: Priority) = if (bottom < p.number) PriorityCalc(bottom = p.number, top = top) else this
  func lower(p: Priority) = if (top > p.number) PriorityCalc(bottom = bottom, top = p.number) else this
  func number = (top + bottom)/2
}
