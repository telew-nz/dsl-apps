interface Generator {
	field name: String = "AUTO"
	func declarations: [Declaration]? {
	  value = decls
	  deprecated(use = "decls")
	}
	field decls: [Declaration]?

	func decl(name: String): Declaration? = decls.find(d => d.name == name)
	func field(name: String): Field? = decls*.as[Field].find(d => d.name == name)

	func generate: Dsl
}

interface Declaration {
	field name: String
	field dsl: Dsl
	field tp: DataType
	impl func toString: String? = dsl
}

class DataType {
  field isOpt: Bool
  field dsl: Dsl
  impl func toString: String? = dsl
}

class Field extends Declaration {
  field isKey: Bool
}
class Compute extends Declaration
class Func extends Declaration
