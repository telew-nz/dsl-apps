entity App {
  singular = "Application"
  plural = "Applications"
  background = "#222"
  ref field package: String
  field owner: String {
    default = Workspace.current.authId
    label = "Development Workspace"
  }
  field mng: String {
    default = Workspace.current.authId
    label = "Management Workspace"
  }
  field name: String? {
    label = "Title"
  }
  list field description: Text?
  list field versions: [AppVersion]? read by app {
    available(List)
  }
  impl func title = package
  field readOnly: Bool = false
  func hasErrors: Bool = versions.exists(errors.nonEmpty)
  func isOwned = owner == Workspace.current.authId
  report Report {
    impl view list = App.all.filter(isOwned) >> x(margin = None, flow = false) {
      yscroll {
        list(mode = Select) {
          package >> field (margin = Around)
        }
      }
      selected(stretch = 1) {
        form
      }
    }
  }

  impl view form = nav {
    yscroll {
      grid(labels = Top) {
        package
        name
        row {
          owner mng
        }
        versions >> list(action = _.form.open) {
          x {
            status
            title
            touchedOn
          }
        }
        description
      }
    }
  }
  back object func releaseAll(old: AppVersionStatus, new: AppVersionStatus): Future[[AppVersion]?] = {
    let apps <- App.all.filter(isOwned)*.versions.filter(status == old).result
    apps.oneByOne(_.release(new))
  }
  back object func cancelOld: Future[[AppVersion]?] = {
    App.all.filter(isOwned).flatMap{app =>
      app.versions.filter(status == Prod)
        .sortBy[[ Num?]](version.split(".").map(_.toNum).desc)
        .drop(1)
    }.map(release(Canceled)).result
  }

  back object func install(package: String, channel: AppChannel): Void = {
    let wap: App = App.all.find(_.package == "w" + Workspace.current.authId).result.get!
    wap.versions.last!.addDependency(package, channel)
  }
}

enum AppChannel {
  case Dev {background = "#8bf"}
  case Pretest {background = "#f3d795"}
  case Test {background = "#f3d795"}
  case Alpha {background = "#dea"}
  case Beta {background = "#dea"}
  case Prod {color = "white" background = "#090"}
}

enum AppVersionStatus {
  case Dev {background = "#8bf"}
  case Pretest {background = "#f3d795"}
  case Test {background = "#f3d795"}
  case Alpha {background = "#dea"}
  case Beta {background = "#dea"}
  case Prod {color = "white" background = "#090"}
  case Canceled {background = "#999"}
}

entity AppVersion extends NewEngine {
  background = "#222"
  ref field app: App by versions
  ref field version: String = "1.0.0"
  ref field status: AppVersionStatus = Dev
  field releaseNotes: Text?
  field files: [AppFile]?
  field dependencies: [Dependency]?
  field readOnly: Bool = false
  field errors: [Error]?
  back native release(status: AppVersionStatus): Future[AppVersion]

  impl func title: String = app + ":" + version
  impl view ref = x {status title}

  class AppFile {
    field title: String
    field content: Dsl

    func idStr = "$id/$title"
  }
  class Error {
    field message: Dsl
  }
  class Dependency {
    field package: String
    field version: String?
    field channel: AppChannel = Prod
  }
  func addDependency(package: String, channel: AppChannel): Void = {
    if (!dependencies.exists(d => d.package == package)) {
      dependencies += Dependency(package = package, channel = channel)
      save
    }
  }

  impl view form {
    printable = false
    layout = nav(editMode = AlwaysEdit) {
      tabs {
        y(label = "Sources", spacing = false) {
          files >> x (margin = None, flow = false, stretch = 1, spacing = false) {
            yscroll (stretch = 0, border = Right) {
              list(mode = Select, frame = false) {
                title >> field (margin = Around)
              }
            }
            selected (stretch = 1) {
              y (spacing = false) {
                title >> field(border = Bottom, noTab)
                content >> field(stretch = 1)
              }
            }
          }
          errors >> scroll(editMode = AlwaysRead, maxHeight = 12, stretch = 0) {
            list {
              message >> field(color = "red")
            }
          }
        }

        y (label = "Settings") {
          grid (margin = Around) {
            app.package >> field(editMode = AlwaysRead, fontStyle = H1)
            version >> field(fontStyle = H1)
            status
            dependencies >> table {
              x (label = "Package", width = 0.5, spacing = false) {
                package >> field(stretch = 1)
                button(icon = "expand-arrows-alt") {
                  App(id = package, package = package).form.open
                }
              }
              version >> field(width = 0.3)
              channel >> field(width = 0.2)
            }
            releaseNotes
          }
          errors >> xscroll(editMode = AlwaysRead) {
            list {
              message >> field(color = "red")
            }
          }
        }
      }
      button("Download", visible = id) {
        AppVersion.download(id!)
      }
    }
  }

  front func openIssues: Void = {
    AppIssue.Report(package = app.package, version = version).list.open
  }

  front object func download(id: Id): Void = {
    UI.download(AppVersion.load(id).map{
      let allVers <- allDependencyVersions
      Zip("dsl.zip", allVers*.unload)
    })
  }

  back func dependencyVersions: Future[[AppVersion]?] = {
    dependencies.map{
      let vers <- App.load(package)*.versions.filter(status != Canceled).sortBy(_.version.desc).result
      AppVersion.load(vers!.first.id!).result
    }.allCompleted
  }
  back func allDependencyVersions: Future[[AppVersion]] = {
    let vers: [AppVersion]? <- dependencyVersions
    let allVers <- (vers.map(allDependencyVersions).allCompleted)
    (this + allVers.flatMap(i => i)).distinct
  }
  func unload: [File]? = files.map(FileGeneric(name = app.package.replace(".", "/") + "/" + title + ".flow2b", content = content.toData))
}


entity AppIssue {
  background = "#222"
  object field gen: Int?
  const ref field n: Int? {
    default = increment(AppIssue.gen)
    views = []
  }
  compute number = "AE" + n.format(3, 0)
  impl func itemRoles = [Admin]
  impl func activeRoles = [Admin]

  ref field package: String
  ref field version: String
  field error: PlainText?
  field log: PlainText?

  impl func title = "$number $package $version"
  report Report {
    field package: String? {auto}
    field version: String? {auto}
    impl view list = AppIssue.all >> nav{table{
      number package version
    }}
  }
}