inline entity Activity {
  system list field entities: [Entity] by activities
  field dateTime: Date = now
  field user: IUser = IUser.current
  compute isPublic: Bool {
    value = thread > 0
    update = {thread = if (new) 1}
  }
  compute isSupport: Bool = thread < 0
  field thread: Int?
  field from: Contact?
  compute author: Contact = from.alt(user)
  system field data: Any = {}
  system field messageId: String?
  field channel: CommChannel?
  field comment: Text?
  compute files: [File]? {
    value = (try? entities)*.as[File]
    update = {
      this.entities = ((try? this.entities).filter(!_.is[File]) + new)!
    }
  }
  field deliveries: [ActivityDelivery]?
  system field patches: [Entity: Patch]?
  field template: NotifyTemplate[Entity]?
  field templateEntity: Entity?
  func getTemplateEntity: Entity = templateEntity.alt(mainEntity)
  object native current: Activity?

  func comment(text: Text?): Void = if (text) {
    this.comment = this.comment + text
  }
  back object func comment(text: Text?): Void = {
    Activity.current!.comment(text)
  }
  func mainEntity: Entity = entities.first
  func setMainEntity(e: Entity): Void = {
    this.entities = e + (try? this.entities).filter(_ != e)
  }
  back object func setMainEntity(e: Entity): Void = {
    Activity.current!.setMainEntity(e)
  }

  func makePublic(comment: Text?): Void = {
    thread = 1
    comment("<p>$(entities.first.observers*.observer.filter(_.isAutoPublic)*.atMention.join(" ").as[Html])</p>$comment<p></p>")
  }

  func makeSupport(comment: Text?): Void = {
    thread = -1
    comment("<p>$(Flow2bSupport.atMention.as[Html])</p>$comment<p></p>")
  }
  back object func findByMessageId(messageId: String?): Activity? = if (messageId) Activity.all.find(a => a.messageId == messageId).result.get

  compute subject: Entity = entities.first
  back func shortComment: Text? = {
    let c = comment.parseHtml.plainText.trim
    if (c.length > 160) c[0 .. 160] else c
  }
  compute recipients: [Contact]? = (deliveries*.contact*.as[Contact] + entities*.observers*.observer*.as[User]).distinct
  func recipientsString(user: User?): String? = {
    recipients.filter(_ != user).join(", ")
  }
  func hasRecipient(contact: Contact): Bool = {
    deliveries.exists(d => d.contact == contact) ||
      entities.exists(e => e.observers.exists(o => o.observer == contact))
  }

  func forward(activity: Activity): Void = {
    comment += "<p></p><p>Forwarded Message:</p><p><b>From: </b>$(activity.author)<br><b>Date: </b>$(activity.dateTime)</p>"
    comment += activity.comment
    files = (files + activity.files).distinct
  }
  back func resend: Void = {
    touch.save
    deliveries.filter(status == Failed).foreach(_.status = Resent)
    template!.send(getTemplateEntity)
    mainEntity.touch
  }
  back func ignore: Void = {
    touch.save
    deliveries.filter(status == Failed).foreach(_.status = Ignored)
    (try? mainEntity)?.touch
  }
  back func releaseHold(comment: Text?): Void = {
    this.comment = comment
    touch.save
    deliveries.filter(status == OnHold).foreach(_.status = Pending)
    mainEntity.touch
    send
  }
  back func cancelHold: Void = {
    touch.save
    deliveries.filter(status == OnHold).foreach(_.status = Canceled)
    mainEntity.touch
  }
  back func send: Void = {
    deliveries
      .filter(status == Pending)
     *.contact*.as[Contact]
     *.sender.distinct
      .filter(canSend)
     *.send(this)
  }

  func reply(activity: Activity): Void = {
    if (activity.author == Flow2bSupport) {
      makeSupport("")
    } else {
      thread = 1
      comment("<p>$(activity.author.atMention.as[Html])</p><p></p>")
    }
  }
}

class ActivityPatch {
  field activity: Activity inline
  field patch: Patch?

  view mentionForm = grid(labels = None, spacing = false) {
    x (fontSize = 0.7, margin = None) {activity.channel activity.author >> field(stretch = 1) activity.dateTime}
    activity.mainEntity >> field(fontSize = 0.7, title = title)
    patch
    activity.comment >> field(fontSize = 0.7, margin = None)
  }
  func onHold = activity.deliveries.exists(status == OnHold)
  view mainForm = grid(labels = None, spacing = false) {
    x (fontSize = 0.7, margin = Bottom) {
      activity.channel
      activity.author >> field(stretch = 1)
      x (fontSize = 1.34) {
        button(icon = "times-circle", "Cancel", color = "#c00", visible = onHold) {
          back{activity.cancelHold}
        }
        button(icon = "paper-plane", "Send", visible = onHold) {
          let comment = activity.comment
          back{
            activity.releaseHold(comment)
          }
        }
        button(icon = "bell-slash", "Ignore", color = "#c00", visible = activity.deliveries.exists(status == Failed)) {
          back{activity.ignore}
        }
        button(icon = "reply", "Reply", visible = activity.channel) {
          Activity.current!.reply(activity)
        }
        button(icon = "forward", "Forward", visible = activity.files || activity.channel == EMail) {
          Activity.current!.forward(activity)
        }
        button(icon = "retweet", "Resend", visible = activity.template && !onHold) {
          back{activity.resend}
        }
        extension("buttons")
      }
      activity.dateTime
    }
    activity.deliveries >> list (fontSize = 0.8, margin = TopBottom, frame = false, visible = !IUser.current.isPublic){
      y (background = "transparent", margin = None, spacing = false) {
        x (margin = None, flow = false) {channel contact status}
        date >> field (visible = status == Read)
        details
        events >> list (background = "white") {
          x {
            type url date
            ipAddress
            userAgent
          }
        }
      }
    }
    patch

    activity.comment >> field(visible = !onHold)
    activity.comment >> field(visible = onHold, editMode = AlwaysEdit, background = "white")
    activity.template >> field(color = "#945c03", title = title(activity.getTemplateEntity), margin = Top)
    activity.templateEntity >> field(margin = None)
    activity.files
  }
}

class ActivityDelivery {
  field date: Date?
  field channel: CommChannel
  field contact: RefEntity
  field status: ActivityDeliveryStatus = Pending
  field details: String?
  field events: [ActivityDeliveryEvent]?
}

class ActivityDeliveryEvent {
  field type: ActivityDeliveryEventType
  field date: Date = now
  field url: Url?
  field ipAddress: String?
  field userAgent: String?
}

enum ActivityDeliveryEventType {
  case Read {background = "#ed9" icon = "glasses" label = "Viewed"}
  case Click {background = "#8bf" icon = "external-link-alt" label = "Clicked"}
}

enum ActivityDeliveryStatus {
  case OnHold {background = "#ed9" icon = "pause-circle"}
  case Pending {background = "#ed9" icon = "spinner"}
  case Sending {background = "#8bf" icon = "spinner"}
  case Delayed {background = "#8bf" icon = "hourglass"}
  case Sent {background = "#dea" icon = "check-circle"}
  case Delivered {color = "white" background = "#090" icon = "check-circle"}
  case Failed {color = "white" background = "#c00" icon = "exclamation-circle"}
  case Resent {background = "#999" icon = "retweet"}
  case Ignored {background = "#999" icon = "bell-slash"}
  case Canceled {background = "#999" icon = "times-circle"}
  case Read {color = "white" background = "#090" icon = "glasses" label = "Viewed"}
}


back class ExtMsgContact(channel: CommChannel, name: String?, address: String?, company: String?, type: String?) {
  impl func toString = {
    if (let name, let address) "$name <$address>"
    else if (let address) address
    else name
  }
  back func contact: Contact? = {
    channel.findContacts(address).onlyOne
  }
}

