trait SystemService extends Entity with IUser with DashboardItem {
  background = "#222"

  impl func itemRoles = [Admin]
  impl func isError: Bool = serviceState == Error || serviceState == Disabled
  impl func active = userEnabled
  impl func issues = if (serviceState == Error) [ServiceError] else if (serviceState == Disabled) [ServiceDisabled]
  impl func fixes(issue: DashboardIssue) = if (issue == ServiceError || issue == ServiceDisabled) [Fix(text = "Please contact support"),
    Fix(text = "If the problem has been resolved, activate the service", acts = [
      Act(label = "Activate", do = UI.save{
        serviceState = Active
        save
      })
    ])]

  func authorized: Bool = true
  field serviceState: SystemServiceState {
    default = Active
    update = {
      if (new == Active) errorsCount = 0
    }
  }
  impl func roles: [Role]? {
    default value = [Admin]
  }
  field errorsCount: Int?
  impl compute userEnabled {
    value = authorized && serviceState != Inactive
    update = {
      serviceState = if (new) Active else Inactive
    }
  }
  impl const system field debug: Bool = defaultDebug
  func defaultDebug = false

  impl view traitItem = grid(labels = None) {row{
    _.object.toString >> field(fontStyle = Label, width = 0.4, align = Right)
    serviceState >> field(width = 0.6)
  }}
}

object System {
  back func apiUrl: Url = "https://$(apiDomain)/api/v1"
  back func publicUrl: Url = url + "pub/"
  back native apiDomain: Url
  native url: Url
}

extend enum DashboardIssue {
  case ServiceError(role = Admin, priority = major)
  case ServiceDisabled(role = Admin, priority = critical) = "Service has been disabled due to many errors"
}

enum SystemServiceState {
  case Active {background = "#dea"}
  case Error {background = "#f99"}
  case Disabled {color = "white" background = "#c00"}
  case Inactive {background = "#ddd"}
}

interface SystemJob {
  background = "#222"
  field repeatCount: Int?
  func service: IUser
  native run(): Void {
    deprecated(use = "enqueue or enqueueFirst")
  }
  native enqueue(): Void
  native enqueueFirst(): Void
  back func do: Future[Any]
  back func error(error: Any): JobError {
    default value = service.error(error)
  }

  back func dependsOnRegisters = true
  back func jobActive = service.as[SystemService]?.serviceState != Disabled && (!dependsOnRegisters || RegisterService.serviceState == Active)
}

interface JobError
object IgnoreError extends JobError
class ReportError(error: Any) extends JobError
class RepeatJob(on: Date, times: Int, reason: Any?) extends JobError {
  impl func toString = "RepeatJob($times times $on: $reason)"
}

class PostErrorJob(impl field service: IUser, text: Text) extends SystemJob {
  impl func do = {
    throw text
  }
}

trait ScheduledJob extends AnyEntity with SystemJob {
  func schedule: String?
}

trait DeferredJob extends AnyEntity with SystemJob {
  func jobDate: Date?
}

object PublicService extends SystemService {
  impl func title = "Public Service"
  func serviceAccess: [Role]? = [Public]
  override func isPublic: Bool = true
  impl view form = nav{grid(labels = Top){
   issuesView
   serviceState
   errorsCount >> field(editMode = AlwaysRead)
  }}
  impl func defaultDebug = true
}

trait IApiService extends SystemService {
  impl const field login: String? {
    default = String.randomKey(32)
    label = "Key"
  }
  impl const field password: String? {
    transient
    default = String.randomKey(8)
    label = "Secret"
  }
  impl back func error(error: Any): JobError {default value = IgnoreError}
}

entity ApiService extends IApiService {
  impl field roles: [Role]?
  func serviceAccess = roles

  impl field title: String
  field reportErrors: Bool
  impl object view list = ApiService.all >> nav{list{x{title serviceState}}}
  impl view form = nav{grid(labels = Top){
    issuesView
    title
    roles
    login >> field(visible = id)
    password >> field(visible = id)
    reportErrors
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
  impl back func error(error: Any): JobError = if (reportErrors) ReportError(error = error) else IgnoreError
}

interface WorkspaceRouter[D] {
  back func parse(request: IncomingHttpRequest): D
  back func keys(request: IncomingHttpRequest, data: D): [String]?
}
trait IEndpoint extends AnyEntity {
  func service: SystemService

  back func dependsOnRegisters = true
  back func endpointActive = service.as[SystemService]?.serviceState != Disabled && (!dependsOnRegisters || RegisterService.serviceState == Active)
  back func error(error: Any): JobError {
    default value = service.error(error)
  }
}

trait WorkspaceEndpoint[D] extends IEndpoint {
  back func keys: [String]?
  back func router: WorkspaceRouter[D]
  back func process(request: IncomingHttpRequest, data: D): Future[Any]
}

trait Endpoint extends IEndpoint {
  back func process(request: IncomingHttpRequest): Future[Any]
}

