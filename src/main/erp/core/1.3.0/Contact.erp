trait IContact extends RefEntity {
  func isPublic: Bool = true
  func join(entity: Entity): SubjectObserver = {
    if (let o = entity.observers.find(observer == this)) o else SubjectObserver(subject = entity, observer = this).save
  }
  system field subjects: [SubjectObserver]? inline by observer {availableFor = Overall}
  func roles: [Role]? = []
  func canSend: Bool = false
  func atMention: Html = '<a href="javascript:;" data-href="#@$(Workspace.current.authId)/$(dslType.fullName)/$id">@$title</a>'
}

trait Contact extends IContact {
  func addresseeName: String? {default value = title}
  back func realContacts: [Contact]? {
    default
    value = [this]
  }

  impl func canSend: Bool = false
  back object func send(activity: Activity, contacts: [this]): Void = {}
}

trait RawContact extends Entity with Contact {
  impl ref field addresseeName: String?
  var address: String
  impl compute title {
    value = "$addresseeName <$address>".trim!
    update = {
      if (let a = new("<" .. ">")) {
        address = a
        addresseeName = (new[ .. "<")).trim
      } else {
        address =? new.trim
        addresseeName = ""
      }
    }
  }

  compute addressee: Addressee? {
    value = null
    addingType = LegalEntity
    init = {
      if (let p = new?.as[Person]) {
        p.name =? addresseeName
      } else if (let c = new?.as[Company]) {
        c.title =? addresseeName
      } else if (let cp = new?.as[CompanyPerson]) {
        cp.person.name =? addresseeName
      }
    }
    update = {
      if (let a = new) {
        forge(a)
      }
    }
    init = forge(new)
  }
  func actorContactType: ActorContact.object
  func forge(addressee: Addressee): ActorContact = {
    convertToPseudo(actorContactType, addressee).save
  }
}

trait ActorContact extends PseudoEntity with Contact {
  ref field addressee: Addressee by contacts
  impl func addresseeName {
    default value = addressee.title
  }
  impl compute mainEntity {
    value = addressee
    update = {addressee = new}
  }

  func person: Person? = addressee?.addresseePerson
  func company: Actor? = addressee?.addresseeCompany
  func address: String
  impl func title = "$addressee <$address>"
}

trait Addressee extends RefEntity {
  object field gen: Int?

  func addresseePerson: Person? = null
  func addresseeCompany: Actor? = null
  func systemContact: Contact? = null
  field contacts: [ActorContact]? inline by addressee
  func collectContacts: [ActorContact]? {
    default value = contacts
  }
}

trait IEmailContact extends Contact {
  ref field email: Email {
    validate = if (!EmailContact.isAddressValid(email)) "Email format is invalid for $email"
  }
  impl compute address: String {
    value = email
    update = {email = new}
  }
  impl event onSave = {
    email = email.lower.trim!
  }
}
entity EmailContact extends ActorContact with IEmailContact {
  icon = "at"
  singular = "Email"
  plural = "Emails"

  object func isAddressValid(address: Email?): Bool = {
    address.matches(Regex("^[a-zA-Z0-9.!#\$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*\$"))
  }
  object func filterAddress(address: Email?): Email? = if (EmailContact.isAddressValid(address)) address
  impl view form = grid(labels = None) {
    addressee
    email
  }
  back object func add(addressee: Addressee, email: Email?): IEmailContact? {
    deprecated(use = "addressee.addEmail(email)")
    value = addressee.addEmail(email)
  }
}

trait IPhoneContact extends Contact {
  ref field phone: Phone
  field type: PhoneType = Phone
  impl func address: String = phone
}

entity PhoneContact extends ActorContact with IPhoneContact {
  icon = "phone"
  singular = "Phone"
  plural = "Phones"

  impl view form = grid(labels = None){
    addressee
    x{type phone >> field(stretch = 1)}
  }
  back object func add(addressee: Addressee, type: PhoneType, phone: Phone?): PhoneContact? {
    deprecated(use = "addressee.addPhone(email)")
    value = addressee.addPhone(type, phone)
  }
}

extend entity Addressee {
  back func addEmail(email: Email?): IEmailContact? = if (let email = email.trim) {
    if (EmailContact.isAddressValid(email)) {
      contacts*.as[ActorContact with IEmailContact].find(a => a.email == email)
        .or(IEmailContact.all.find(a => a.email == email && a.is[IEmailContact with RawContact]).map(_.as[IEmailContact with RawContact]!.forge(this).as[ActorContact with IEmailContact]!))
        .alt(EmailContact(addressee = this, email = email).save)
    }
  }

  back func addPhone(type: PhoneType, phone: Phone?): PhoneContact? = if (let phone = phone.trim) {
    contacts*.as[PhoneContact].find(a => a.phone == phone && a.type == type)
      .alt(PhoneContact(addressee = this, type = type, phone = phone).save)
  }

  back func addWebsite(url: Url?): WebsiteContact? = if (let url = url.trim) {
     contacts*.as[WebsiteContact].find(a => a.url == url)
       .alt(WebsiteContact(addressee = this, url = url).save)
  }
}

enum PhoneType {
  case Phone
  case Mobile
  case Fax
}

entity WebsiteContact extends ActorContact {
  icon = "globe"
  singular = "Website"
  plural = "Websites"
  ref field url: Url
  impl func address: String = url
  impl view form = grid(labels = None){
    addressee
    url
  }
}

trait ContactAddressee extends Contact with Addressee {
  impl object func send(activity: Activity, contacts: [this]): Void {
    default value = {
      contacts*.join(activity.entities.first)*.notify
    }
  }
  impl func systemContact: Contact? = this
}
trait IContactGroup extends Entity with ContactAddressee
entity RoleContactGroup extends IContactGroup {
  icon = "users"
  impl func isPublic: Bool = false
  ref field role: Role
  impl func canSend: Bool = true
  impl back func realContacts: [Contact]? = User.all(role)
  impl func title: String = "All $role"
  impl view form = nav(fullScreenComments){grid(labels = Top){
    role
    contacts >> field(frame = false, margin = None)
  }}
}


class Address {
  field person: String?
  field company: String?
  field number: String?
  field street: PlainText? {
    availableFor = List
    validate = if (isEmpty) "Address should not be empty"
  }
  field suburb: String?
  field city: String?
  field region: String?
  field country: String?
  field postcode: String?

  compute isEmpty = !person && !company && !number && !street && !region && !suburb && !city && !region && !postcode && !country
  compute title: PlainText = ["$person $company".trim, "$(number.trim) $(street.trim)".trim, [suburb, city, region, postcode].filter(nonEmpty).join(" "), country].filter(nonEmpty).join("\n")!
  impl func toString = title

  impl view form = y{
    edit {
      panel(frame = true) {
        grid {
          row {person company}
          row {number >> field(width = 0.2) street >> field(width = 0.8)}
          row {suburb city region}
          row {postcode >> field(width = 0.2) country >> field(width = 0.8)}
        }
      }
    }
    read {
      title
    }
  }
}
