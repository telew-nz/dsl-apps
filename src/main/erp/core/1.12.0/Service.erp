trait SystemService extends Entity with IUser with NewEngine {
  background = "#222"

  impl func itemRoles = [Admin]
  impl func isError: Bool = serviceState == Error || serviceState == Disabled
  impl func active = userEnabled
  override func issues = super.issues + {
    if (serviceState == Error) [ServiceError] else if (serviceState == Disabled) [ServiceDisabled]
  }
  override func fixes(issue: DashboardIssue) = if (issue == ServiceError || issue == ServiceDisabled) {
    [Fix(text = "Please contact support"),
      Fix(text = "If the problem has been resolved, activate the service", acts = [
        Act(label = "Activate", do = UI.save{
          serviceState = Active
          save
        })
      ])]
  } else {
    super.fixes(issue)
  }

  func authorized: Bool = true
  field serviceState: SystemServiceState {
    default = Active
    update = {
      if (new == Active) errorsCount = 0
    }
  }
  impl func roles: [Role]? {
    default value = [Admin]
  }
  field errorsCount: Int?
  impl compute userEnabled {
    value = authorized && serviceState != Inactive
    update = {
      serviceState = if (new) Active else Inactive
    }
  }
  impl const system field debug: Bool = defaultDebug
  func defaultDebug = false

  impl view traitItem = grid(labels = None) {row{
    _.object.toString >> field(fontStyle = Label, width = 0.4, align = Right)
    serviceState >> field(width = 0.6)
  }}
}

object System {
  back func apiUrl: Url = "https://$(apiDomain)/api/v1"
  back func publicUrl: Url = url + "pub/"
  back native apiDomain: Url
  native url: Url
}

extend enum DashboardIssue {
  case ServiceError(role = Admin, priority = major)
  case ServiceDisabled(role = Admin, priority = critical) = "Service has been disabled due to many errors"
}

enum SystemServiceState {
  case Active {background = "#dea" icon = "robot"}
  case Preparation {background = "#8bf" icon = "spinner"}
  case Processing {background = "#8bf" icon = "microchip"}
  case Error {background = "#f99" icon = "bug"}
  case Disabled {color = "white" background = "#c00"  icon = "exclamation-triangle"}
  case Inactive {background = "#ddd" icon = "stop-circle"}
}

interface ISystemJob {
  func repeatCount: Int? = 0
  func service: IUser
  func critical {
    value = false
    deprecated("impl func errorAction = DisableService")
  }
  func errorAction: ErrorAction {
    ignoreWarnings
    default value = if (critical) DisableService else IncrementCounter
  }
  back func jobError(error: Any): JobError = error(error) //No Conflict with SystemService.error in ex
  back func error(error: Any): JobError = service.error(this, error)
  back func dependsOnRegisters = true
  back func jobActive = service.as[SystemService]?.serviceState != Disabled && (!dependsOnRegisters || RegisterService.serviceState == Active)
}

interface SystemJob extends ISystemJob {
  background = "#222"
  impl field repeatCount: Int?

  native run(): Void {
    deprecated(use = "enqueue or enqueueFirst")
  }
  native enqueue(): Void
  native enqueue(in: UDuration?): Void
  native enqueueFirst(): Void
  back func do: Future[Any]
}

interface JobError
object IgnoreError extends JobError
class ReportError(error: Any, action: ErrorAction = IncrementCounter) extends JobError
class RepeatJob(on: Date, times: Int, reason: Any?) extends JobError {
  impl func toString = "RepeatJob($times times $on: $reason)"
}
enum ErrorAction {
  case Log
  case IncrementCounter
  case DisableService
}

class PostErrorJob(impl field service: IUser, text: Text) extends SystemJob {
  impl func do = {
    throw text
  }
}

trait ScheduledJob extends AnyEntity with SystemJob {
  back func schedule: String?
}

trait DeferredJob extends AnyEntity with SystemJob {
  back func jobDate: Date?
}

object PublicService extends SystemService {
  impl func title = "Public Service"
  func serviceAccess: [Role]? = [Public]
  override func isPublic: Bool = true
  impl view form = nav{grid(labels = Top){
   issuesView
   serviceState
   errorsCount >> field(editMode = AlwaysRead)
  }}
  impl func defaultDebug = true
}

trait IApiService extends SystemService {
  impl const field login: String? {
    default = String.randomKey(32)
    label = "Key"
  }
  impl const field password: String? {
    transient
    default = String.randomKey(8)
    label = "Secret"
  }
  impl back func error(job: ISystemJob, error: Any): JobError {default value = IgnoreError}
}

entity ApiService extends IApiService {
  impl field roles: [Role]?
  func serviceAccess = roles

  impl field title: String
  field reportErrors: Bool
  impl object view list = ApiService.all >> nav{list{x{title serviceState}}}
  impl view form = nav{grid(labels = Top){
    issuesView
    title
    roles
    login >> field(visible = id)
    password >> field(visible = id)
    reportErrors
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
  impl back func error(job: ISystemJob, error: Any): JobError = {
    if (reportErrors) ReportError(error = error)
    else IgnoreError
  }
}
object ApiSystemJob extends ISystemJob {
  impl func service = IUser.current
}

interface WorkspaceRouter[D] {
  back func parse(request: IncomingHttpRequest): D
  back func keys(request: IncomingHttpRequest, data: D): [String]?
}
trait IEndpoint extends AnyEntity with ISystemJob {
  impl func service: SystemService
  impl func repeatCount: Int? = 0
  impl func errorAction: ErrorAction {
    default value = Log
  }
}

trait WorkspaceEndpoint[D] extends IEndpoint {
  back func keys: [String]?
  back func router: WorkspaceRouter[D]
  back func process(request: IncomingHttpRequest, data: D): Future[Any]
  impl func errorAction: ErrorAction {
    default value = IncrementCounter
  }
}

trait Endpoint extends IEndpoint {
  back func process(request: IncomingHttpRequest): Future[Any]
}

