entity Workspace {
  background = "#222"
  object native current: Workspace
  object native crossId: UInt?
  object native currentId: UInt

  system field supportUnits: Int?
  impl func canRead = true
  impl func canWrite = {
    Workspace.crossId == 1
  }
  impl field title: String
  const field frozen: Bool {label = "Workspace Frozen"}
  field countryCode: String {
    default = "NZ"
  }
  field timeZone: String {
    default = "Pacific/Auckland"
  }

  system const field authId: String
  system field dashboards: [Dashboard]? inline by workspace
  back func dashboard(role: Role): Dashboard = dashboards.find(d => d.role == role)!
  func actor: Actor? {
    value = OurActor.our?.actor
    deprecated(use = "OurActor.our")
  }
  back func apiRoot: Url = "$(System.apiUrl)/$authId"
  system field apps: [String -> String]?
  back func updateAppVersion(app: String, version: String): Void = {
    apps = apps + [app -> version]
    save()
  }
  back func cleanAppVersion(app: String, version: String): Void = {
    apps = apps - app
    save()
  }
  func appVersion(package: String): String? = apps(package)
  //back native appChannel(package: String): AppChannel?

  func hasNfc: Bool = false
  impl view form = nav{
    tabs {
      grid (label = "Main") {
        title >> field(label = "Workspace Title")
        countryCode
        timeZone
        extension("main")
      }
      grid(label = "Role Contacts") {
        dashboards >> list (label = "Role Contacts", canAdd = false, canDelete = false) {grid(labels = None) {
          role.toString
          contacts >> list(frame = false, margin = None) {form}
        }}
      }
      grid(label = "Other") {
        extension
      }
    }
    add("Workspace") {
      let w <- UI.save(Workspace.incomplete(title = "New Workspace"))
      UI.info("Workspace is created. Please refresh the page.")
    }
  }
}

entity Dashboard extends PseudoEntity with ContactAddressee {
  searchWeight = 1.2
  impl func isPublic: Bool = false
  singular = "Role"
  plural = "Roles"
  front object native current: Dashboard?

  back object func for(role: Role): Dashboard = {
    Dashboard.all.find(d => d.role == role).result.get!
  }

  impl func isOur = true
  field workspace: Workspace by dashboards
  impl func mainEntity = workspace
  field role: Role
  back func _role: String = Conv.field[String](this, "role")

  impl func sender = ContactSenderDashboard

  compute curUnreadItems: [Entity]? {
    value = {
      if (let u = User.current) if (u.roles.contains(this.role) || !u.roles) {
        u.unreadSubjects
           .filter(unreadCount && (!subject.itemRoles.intersect(u.roles) || subject.itemRoles.contains(this.role)))
          *.subject
      }
    }
  }

  back compute curIssueItems0: [DashboardIssueItems]? {
    value = if (let u = User.current) {
      subjects
        .filter((try? subject) && fullUnreadCount && subject.isForUser(u, this.role))
        .flatMap(so => so.issues.map(i => (issue = i, label = i.label(so.subject), subject = so.subject)))
        .filter(issue.isForUser(subject, u))
        .sortBy(issue.priority(subject).desc, subject.itemPriority.desc, subject.itemOrder)
        .groupBy(issue, label).toSeq
        .sortBy(issue.priority.desc)
        .map(i => DashboardIssueItems(level = i.issue.level, label = i.label, items = i.#2*.subject))
    }
  }
  compute curIssueItems: [DashboardIssueItems]? {
    availableFor = All
    value = back {
      curIssueItems0*.cut
    }
  }
  compute curItems: [DashboardIssueItems]? {
    value = {
      (if (let curUnreadItems) DashboardIssueItems(level = Message, label = "Unread Messages", items = curUnreadItems)).toSeq
      +
      (if (let curPins) DashboardIssueItems(level = Pin, label = "Pins", items = curPins)).toSeq
      +
      curIssueItems
    }
  }

  back compute curPins0: [Entity]? {
    value = if (let u = User.current) {
      u.unreadSubjects
        .filter(pinned && (!subject.itemRoles.intersect(u.roles) || subject.itemRoles.contains(this.role)))
        .sortBy(subject.itemPriority.desc, subject.itemActiveOrder)
        *.subject
    }
  }
  compute curPins {
    availableFor = All
    available(List)
    value = back {
      curPins0.first(50)
    }
  }

  impl view form = y(spacing = false) {
    curItems.map(label, level, count, items) >> subtotal {
      x (background = level.background, color = level.color) {
        count >> field(fontStyle = Badge, background = "rgba(0, 0, 0, 0.2)")
        label(label = label, fontStyle = Bold, icon = level.icon, color = "white")
      }
      list(action = form.open) {
        fullDash
      }
    }

    role.obj.dashboard
  }
  impl func title = role.toString!

  compute curCount {
    value = (curUnreadItems.count, curIssueCount, curPinsCount)
  }
  compute curPinsCount: UInt? {
    availableFor = List
    value = back{curPins0.count}
  }
  compute curIssueCount: UInt? {
    availableFor = List
    value = back{curIssueItems0*.count.sum}
  }
}
class DashboardIssueItems {
  field label: String
  field items: [Entity] {
    available(List)
  }
  field count: UInt = items.count
  func cut = if (items.count <= 50) this else this.copy(items = items.first(50))
  field level: IssueTypeLevel
}

object ContactSenderDashboard extends ContactSender {
  impl back func presend(activity: Activity, contact: IContact): Void = {
    activity.mainEntity.joinAll(contact.as[Dashboard]!.role)
  }
  impl back func send(activity: Activity): Void = {}
}

class DummyClass {
}

