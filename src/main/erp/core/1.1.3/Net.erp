interface IHttpRequest {
  field ssl: Bool
  field url: Url
  field params: [String -> String?]?
  field headers: [String -> String?]?
  field method: String?
  func body: Any
}

class IncomingHttpRequest extends IHttpRequest {
  field body: Data?
  func header(name: String): String? = headers.apply(name)
  func param(name: String): String? = params.apply(name)
}

class HttpRequest extends IHttpRequest {
  system field auth: IAuth?

  field body: Any = ""

  func header(name: String, value: String): HttpRequest = {
    this.headers = this.headers + [name -> value]
    this
  }
  func headers(headers: [String -> String?]?): HttpRequest = {
    this.headers = this.headers + headers
    this
  }
  func param(name: String, value: String?): HttpRequest = {
    this.params = this.params + [name -> value]
    this
  }
  func params(params: Any): HttpRequest = {
    if (let fs = params.as[[String -> String?]?]) {
      this.params = this.params +  fs
    } else {
      this.params = this.params + params.as[AnyRef]!.toMap.mapValues(_.toString)
    }
    this
  }
  func form(fields: Any): HttpRequest = {
     header("content-type", "application/x-www-form-urlencoded")
       .params(fields)
   }
  func basicAuth(userName: String, password: String?): HttpRequest = {
    header("Authorization", "Basic " + "$userName:$password".toData.base64)
  }
  func auth(service: IAuth): HttpRequest = {
    this.auth = service
    this
  }
  func oauth(service: IOAuth1): HttpRequest = {
    this.auth = service
    this
  }
  func oauth2(service: OAuth2): HttpRequest = {
    this.auth = service
    this
  }
  func body(data: Any): HttpRequest = {
    this.body = body
    this
  }
  back func get: Future[HttpResponse] = {
    this.method = "GET"
    perform
  }
  back func post: Future[HttpResponse] = {
    this.method = "POST"
    perform
  }
  back native post(data: Any): Future[HttpResponse]
  back native put(data: Any): Future[HttpResponse]
  back native patch(data: Any): Future[HttpResponse]

  back func delete: Future[HttpResponse] = {
    this.method = "DELETE"
    perform
  }
  back func options: Future[HttpResponse] = {
    this.method = "OPTIONS"
    perform
  }
  back native perform: Future[HttpResponse]

  func toString =
"Request: $method $(if(ssl) "https://" else "http://")$url $params
$headersString

$body
"
 func headersString = headers.toSeq.map("$(_.#0): $(_.#1)").join("
")
}

object http {
  func apply(url: Url): HttpRequest = HttpRequest(url = url.dropPrefixes(["http://", "https://"])!)
}
object https {
  func apply(url: Url): HttpRequest = HttpRequest(ssl = true, url = url.dropPrefixes(["http://", "https://"])!)
}

class HttpResponse {
  field request: HttpRequest
  field code: Int?
  field headers: [String -> String]?
  field body: Data?
  func toString =
"$(request)

Response: $status
$headersString

$body"
  func status: String? = headers.apply("Status")
  func headersString = headers.toSeq.map("$(_.#0): $(_.#1)").join("
")
}

trait IAuth extends AnyEntity {
  back func authRequest(request: HttpRequest): Future[HttpRequest]
}

trait IOAuth1 extends IAuth {
  func authConsumerKey: String?
  func authParams: [String -> String]? = null
  func authRequest(request: HttpRequest): Future[HttpRequest] = request
}

trait OAuth1Hmac extends IOAuth1 {
  func authTmpTokenUrl: Url
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url

  func authConsumerSecret: String?

  const system field accessToken: Password? {availableFor = Overall}
  const system field accessTokenSecret: Password? {availableFor = Overall}

  ref compute authorized: Bool = accessToken

  front native authorize: Void
  view authorizeView = y {
    button("Authorize Again", visible = authorized) {authorize}
    button("Authorize", visible = !authorized) {authorize}
  }
}

trait OAuth1Rsa extends IOAuth1 {
  const field certificate: PlainText?
  final func authorized: Bool = authConsumerKey
  func pemFile(name: String): File = File(name = name, content = certificate.toData)
  front func downloadPemFile(name: String): Void = {
    UI.download(Query(this).map(i => i.pemFile(name)).query)
  }
}

trait OAuth2 extends IAuth  {
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url
  func authTokenRefreshUrl: Url = authTokenExchangeUrl

  func authClientId: String
  func authClientSecret: String
  func authScope: String?
  func authParams: [String -> String]? = null

  const system field accessToken: Password? {availableFor = Overall}
  const system field refreshToken: Password? {availableFor = Overall}
  const system field tokenExpiryDate: Date?
  ref compute authorized: Bool = accessToken

  back func storeToken(params: [String -> Any]): Void = {
    accessToken = params.apply("access_token")!.as[String]!
    if (let r = params.apply("refresh_token")?.as[String]) {
      refreshToken = r
    }
    if (let e = params.apply("expires_in")?.as[Duration[second]]) {
      tokenExpiryDate = Date.now + e - 1_minute
    }
  }

  front native authorize: Void
  view authorizeView = y {
    button("Authorize Again", visible = authorized) {authorize}
    button("Authorize", visible = !authorized) {authorize}
  }

  back func authRequest(request: HttpRequest): Future[HttpRequest] = {
    if (let t = accessToken) {
      if (tokenExpiryDate ?> Date.now) {
        request.header("Authorization", "Bearer $t")
      } else {
        let _ <- doRefreshToken
        request.header("Authorization", "Bearer $accessToken")
      }
    } else {
      throw "No access token"
    }
  }

  back func doRefreshToken: Future[Void] = {
    if (let t = refreshToken) {
      let r <- https(authTokenRefreshUrl).form([
        "refresh_token" -> t,
        "client_id" -> authClientId,
        "client_secret" -> authClientSecret,
        "grant_type" -> "refresh_token"
      ]).post
      storeToken(r.body!.parseJson[[String -> Any]])
    } else {
      throw "Token expired"
    }
  }
}

interface Hashable {
  back native hmac(secret: String): Hmac
  back native md5: Data
  back native sha1: Data
  back native sha256: Data
  back native sha512: Data
}

class Data extends Hashable {
  native parseJson[R]: R
  native base64: String
  native mimeBase64: String
  native hex: String
}

class Data? extends Hashable {
  native parseJson[R]: R?
  native base64: String?
  native mimeBase64: String?
  native hex: String?
}

class Hmac {
  back native md5: Data
  back native sha1: Data
  back native sha256: Data
  back native sha512: Data
}

entity File {
  icon = "file"
  ref field name: String {label = "File Name"}
  ref field sTitle: String? {label = "Title"}
  field description: Text?
  compute content: Future[Data?] {
    value = getContent
    update = {
      setContent(new)
    }
  }
  native getContent: Future[Data?]
  native setContent(data: Future[Data?]): Void

  compute url: Url? {
    availableFor = Ref
    value = getUrl
    update = {
      _sourceUrl = new
      if (!try? name) {
        if (let li = new.lastIndexOf("/")) {
          name =? new(li .. ]
        }
      }
    }
  }
  compute uploadUrl: Url? {
    availableFor = All
    value = getUploadUrl
  }
  field contentType: String?
  private compute _contentUpdated: Bool = false
  field _sourceUrl: Url?
  native getUrl: Url?
  native getUploadUrl: Url?

  compute title: String {
    value = sTitle.alt(name)
    update = {
      sTitle = new
    }
  }
  view form = nav{grid{
    self >> field(label = "")
    name
    title
    description
  }}

  compute self: File {
    value = this.as[File]!
    update = {
    }
  }

  object view list = File.all >> nav{list{
    name
  }}

  func extension: String? = if (let i = name.lastIndexOf(".")) name(i .. ]
  func is(ext: String): Bool = name.lower.endsWith(ext.lower)

  native type: FileType
}

interface FileType {
  field file: File
}
class FileTypeGeneric extends FileType
class FileTypeImage extends FileType
class FileTypeHtml extends FileType
class Image

object Zip {
  back native apply(name: Url, files: [File]?): File
}

back class HtmlElement {
  native plainText: PlainText?
  native setPlainText(text: PlainText?): Void
  native innerHtml: Html?
  native setInnerHtml(html: Html?): Void
  native append(html: Html?): HtmlElement
  native prepend(html: Html?): HtmlElement
  native delete: Void
  native select(selector: String?): [HtmlElement]?
  native attr(name: String): String?
  native attr(name: String, value: String?): HtmlElement
  native attrs: [String -> String]?
}