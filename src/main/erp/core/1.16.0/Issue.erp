trait IssueType[T extends Entity] extends Entity with NewEngine {
  const system field issueObservers: [SubjectObserver]? by issues
  compute count {
    value = issueObservers.count
    availableFor = List
  }
  compute level: IssueTypeLevel = defaultLevel

  func enabled = level != Disabled
  back func hasIssue(item: T): Bool
  back func isForUser(item: T, user: User): Bool = true
  func defaultLevel: IssueTypeLevel = Error
  func roles(item: T) {
    default value = item.getItemRoles
  }
  func label(item: T): String {
    default value = title
  }
  func priority: Dec[8]? = level.priority
  func priority(item: T): Dec[8]? = priority
  func fixes(item: T): Future[[IFix]?] = []

  impl view traitItem = x{count >> field (fontStyle = Badge) level title}

  view issueView(item: T) = y {
     this.label(item) >> field(color = level.panelColor, icon = level.icon)
     fixes(item) >> list(frame = false) {
       form
     }
   }
}

interface IFix {
  view form
}
class Fix(text: String, acts: [Act]?) extends IFix {
  impl view form = x {
     "â€¢ " + text
     acts >> list(flow = true, frame = false) {
       x (margin = None, flow = false) {
         ref
         button(visible = label, label = label, margin = LeftRight, icon = icon, color = color) {
           _.do()
         }
       }
     }
   }
}
class Act(ref: RefEntity?, label: String?, icon: String?, color: String?, front field do: () => Future[Void] = {})

enum IssueTypeLevel(priority: Dec[8]?, color: String, background: String, panelColor: String, panelBackground: String, icon: String) {
  case Message(priority = 100.0, panelColor = "red", panelBackground = "#fff3f3", icon = "envelope" background = "#983fa0" color = "white") {
    icon = "exclamation-circle" background = "#c00" color = "white"
  }
  case Pin(priority = 10.0, panelColor = "red", panelBackground = "#fff3f3", icon = "thumbtack" background = "#369" color = "white") {
    icon = "exclamation-circle" background = "#c00" color = "white"
  }
  case Error(priority = 0.6, panelColor = "red", panelBackground = "#fff3f3", icon = "exclamation-circle" background = "#b74747" color = "white") {
    icon = "exclamation-circle" background = "#c00" color = "white"
  }
  case Warning(priority = 0.3, panelColor = "#cc7502", panelBackground = "#fffaee", icon = "exclamation-triangle" background = "#d48400" color = "white") {
    icon = "exclamation-triangle" background = "#d48400" color = "white"
  }
  case ToDo(priority = 0, panelColor = "#001a6d", panelBackground = "#fffbef", icon = "info-circle"  background = "#336699" color = "white") {
    icon = "info-circle" background = "#336699" color = "white"
  }
  case Disabled(panelColor = "#333", panelBackground = "#fff", icon = "times-circle" background = "#999" icon = "times-circle") {
    background = "#999" icon = "times-circle"
  }
}

object ITMessageDelivery extends IssueType[Entity] {
  impl func title = "Failed Message Delivery"
  impl func hasIssue(item: Entity): Bool = {
    item.activities.last(30).exists(a => a.deliveries.exists(status == Failed) && a.mainEntity == item)
  }
  impl func fixes(item: Entity) = [
    Fix(text = "Correct the recipient address and resend")
    Fix(text = "Ignore the issues", acts = [
      Act(label = "Ignore", icon = "bell-slash", color = "#c00", do = Query(item).map {item =>
        item.activities.filter(deliveries.exists(status == Failed) && mainEntity == item)*.ignore
      })
    ])
  ]
}

object ITNotifyOnHold extends IssueType[Entity] {
  impl func title = "Notification is on hold"
  impl func defaultLevel = Warning
  impl func hasIssue(item: Entity): Bool = {
    item.activities.last(30).exists(deliveries.exists(status == OnHold) && mainEntity == item)
  }

  impl func fixes(item: Entity) = [
    Fix(text = "Release hold and send the notifications", acts = [
      Act(label = "Send", icon = "paper-plane", do = Query(item).map {item =>
        item.activities.filter(deliveries.exists(status == OnHold) && mainEntity == item).foreach(a => a.releaseHold(a.comment))
      })
    ]),
    Fix(text = "Cancel the notifications", acts = [
      Act(label = "Cancel", icon = "times-circle", color = "#c00", do = Query(item).map {item =>
          item.activities.filter(deliveries.exists(status == OnHold) && mainEntity == item)*.cancelHold
      })
    ])
  ]
}

