inline entity SubjectObserver {
  field subject: Entity by observers {
    available(List).for(List)
  }
  field observer: IContact by subjects {
    available(Ref).with(roles)
  }
  field issues: [IssueType[Entity]]? by issueObservers
  field unreadCount: Int?
  field pinned: Bool = false
  field active: Bool
  func is(role: Role): Bool = observer.as[IContact with IUser]?.roles.contains(role)
  back func _is(role: String): Bool = observer.as[IContact with IUser]?._roles.contains(role)
  func subjectType = subject.dslType.singular

  compute fullUnreadCount {
    availableFor = Inline
    value = if (let u = User.current) badgeUnreadCount(u)
  }
  compute panelUnreadCount {
    availableFor = Inline
    value = {
      if (let d = observer.as[Dashboard]) {
        (if (unreadCount && !subject.hasObserverInRole(d.role)) unreadCount) + issues.count
      }
      else unreadCount
    }
  }

  func badgeUnreadCount(user: User): Int? = {
    if (let d = observer.as[Dashboard]) {
        if (subject.isForUser(user, d.role)) {
          (if (unreadCount && !subject.hasObserverInRole(d.role)) unreadCount) + issues.count
        }
    } else unreadCount
  }

  back func _badgeUnreadCount(user: User): Int? = {
    if (let d = observer.as[Dashboard]) {
        if (subject._isForUser(user, d._role)) {
          (if (unreadCount && !subject.hasObserverInRole(d.role)) unreadCount) + issues.count
        }
    } else unreadCount
  }

  func pin(): SubjectObserver = {
    pinned = true
    save()
  }
  func notify(): SubjectObserver = if (observer != User.current) {
    unreadCount = unreadCount + 1
    save()
  } else this

  impl func toString = "$subject by $observer: $unreadCount $pinned"
}