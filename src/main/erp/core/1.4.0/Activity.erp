inline entity Activity {
  system list field entities: [Entity] by activities
  field dateTime: Date = now
  field user: IUser = IUser.current
  field isPublic: Bool
  field from: Contact?
  compute author: RefEntity = from?.as[RefEntity].alt(user)
  system field data: Any = {}
  system field messageId: String?
  field channel: CommChannel?
  field comment: Text?
  compute files: [File]? {
    value = (try? entities)*.as[File]
    update = {
      this.entities = ((try? this.entities).filter(!_.is[File]) + new)!
    }
  }
  field deliveries: [ActivityDelivery]?
  system field patches: [Entity: Patch]?

  object native current: Activity?

  func comment(text: Text?): Void = if (text) {
    this.comment = this.comment + text
  }
  back object func comment(text: Text?): Void = {
    Activity.current!.comment(text)
  }
  func mainEntity: Entity = entities.first
  func setMainEntity(e: Entity): Void = {
    this.entities = e + (try? this.entities).filter(_ != e)
  }
  back object func setMainEntity(e: Entity): Void = {
    Activity.current!.setMainEntity(e)
  }
  func makePublic(comment: Text?): Void = {
    isPublic = true
    comment("<p>$(entities.first.observers*.observer.filter(_.isPublic && _ != Flow2bSupport)*.atMention.join(" ").as[Html])</p>$comment<p>$(entities.first.mention)</p>")
  }
  back object func findByMessageId(messageId: String?): Activity? = if (messageId) Activity.all.find(a => a.messageId == messageId).result.get

  compute subject: Entity = entities.first
  back func shortComment: Text? = {
    let c = comment.parseHtml.plainText.trim
    if (c.length > 160) c[0 .. 160] else c
  }
  compute recipients: [Contact]? = (deliveries*.contact + entities*.observers*.observer*.as[User]).distinct
  func recipientsString(user: User?): String? = {
    recipients.filter(_ != user).join(", ")
  }
  func hasRecipient(contact: Contact): Bool = {
    deliveries.exists(d => d.contact == contact) ||
      entities.exists(e => e.observers.exists(o => o.observer == contact))
  }
}

class ActivityPatch {
  field activity: Activity inline
  field patch: Patch?

  view mentionForm = grid(labels = None, spacing = false) {
    x (fontSize = 0.7, margin = None) {activity.channel activity.author >> field(stretch = 1) activity.dateTime}
    activity.mainEntity >> field(fontSize = 0.7, title = title)
    patch
    activity.comment >> field(fontSize = 0.7, margin = None)
  }
  view mainForm = grid(labels = None, spacing = false) {
    x (fontSize = 0.7) {activity.channel activity.author >> field(stretch = 1) activity.dateTime}
    activity.deliveries >> list (fontSize = 0.8, margin = TopBottom, frame = false){
      y (background = "transparent", margin = None) {
        x (margin = None, flow = false) {channel contact status}
        details
      }
    }
    patch
    activity.comment
    activity.files
  }
}

class ActivityDelivery {
  field channel: CommChannel
  field contact: Contact
  field status: ActivityDeliveryStatus = Pending
  field details: String?

}
enum ActivityDeliveryStatus {
  case Pending {background = "#ed9" icon = "spinner"}
  case Sending {background = "#8bf" icon = "spinner"}
  case Delayed {background = "#f99" icon = "hourglass"}
  case Sent {background = "#dea" icon = "check-circle"}
  case Failed {color = "white" background = "#c00" icon = "exclamation-circle"}
  case Read {color = "white" background = "#090" icon = "glasses"}
  case LinkClicked{color = "white" background = "#090" icon = "external-link-alt"}
}

enum CommChannel(back findContacts: (address: String?) => [Contact]?, back makeContact: ExtMsgContact => Contact, back defaultRecipients: => [Contact]?) {

}

back class ExtMsgContact(name: String?, address: String?, company: String?, type: String?) {
  impl func toString = {
    if (let name, let address) "$name <$address>"
    else if (let address) address
    else name
  }
}

inline entity SubjectObserver {
  field subject: Entity by observers {
    available(List).for(List)
  }
  field observer: IContact by subjects {
    available(Ref).with(roles)
  }
  field issues: [DashboardIssue]?
  field unreadCount: Int?
  field pinned: Bool = false
  field active: Bool
  func is(role: Role): Bool = observer.as[IContact with IUser]?.roles.contains(role)
  back func _is(role: String): Bool = observer.as[IContact with IUser]?._roles.contains(role)
  func subjectType = subject.dslType.singular

  compute fullUnreadCount {
    availableFor = Inline
    value = if (let u = User.current) badgeUnreadCount(u)
  }
  compute panelUnreadCount {
    availableFor = Inline
    value = {
      if (let d = observer.as[Dashboard]) (if (!subject.hasObserverInRole(d.role)) unreadCount + issues.count + (if (active) 1) )
      else unreadCount
    }
  }

  func badgeUnreadCount(user: User): Int? = {
    if (let d = observer.as[Dashboard]) {
        if (subject.isForUser(User.current, d.role)) unreadCount + issues.count + (if (active) 1)
    } else unreadCount
  }

  back func _badgeUnreadCount(user: User): Int? = {
    if (let d = observer.as[Dashboard]) {
        if (subject._isForUser(User.current, d._role)) unreadCount + issues.count + (if (active) 1)
    } else unreadCount
  }

  compute issuesText = issues.join(", ")

  func pin(): SubjectObserver = {
    pinned = true
    save()
  }
  func notify(): SubjectObserver = {
    unreadCount = unreadCount + 1
    save()
  }

  impl func toString = "$subject by $observer: $unreadCount $pinned"
}


report MailBox {
  icon = "envelope"
  plural = "Mail Box"
  impl view list = nav(label = "Messages") {
    tabs {
      Inbox().list >> field(label = "Inbox")
      Sent().list >> field(label = "Sent")
    }
    add("Ticket", icon = "ticket-alt") {Ticket().form.open}
  }
  report Inbox {
    field user: User? = current
    field from: Contact?
    field channel: [CommChannel]?
    field messagesOnly: Bool = true
    field deletedItems: Bool = false
    impl view list = Activity.all.filter(a =>
         (!messagesOnly || a.comment)
      && (!channel || a.channel.in(channel))
      && (deletedItems || !a.subject.deleted)
      && (a.user != this.user)
      && a.subject.hasObserver(user)
      && from ?== a.author
    ).map(unreadCount = subject.unreadCount(this.user), author, dateTime, subject, shortComment)
    >> nav(showHeader = false){
      list(action = subject.form.open, canAdd = false) {
        grid(labels = None, spacing = false){
          row{x(width = 0.7) {
            unreadCount >> field(fontStyle = Badge, background = "#983fa0", width = 0.05)
            author?.title >> field(fontStyle = Bold, margin = None)
          } dateTime >> field(width = 0.3, align = Right)}
          subject
          shortComment >> field(color = "#666")
        }
      }
    }
  }
  report Sent {
    field user: User? = current
    field to: Contact?
    field channel: [CommChannel]?
    field messagesOnly: Bool = true
    field deletedItems: Bool = false

    impl view list = Activity.all.filter(a =>
         (!messagesOnly || a.comment)
      && (a.user ==? user)
      && (!channel || a.deliveries.exists(d => this.channel.contains(d.channel)))
      && (deletedItems || !a.subject.deleted)
      && (!to || a.hasRecipient(to!))
      && (a.recipients.exists(_ != user))
    ).map(recipients = recipientsString(this.user), dateTime, subject, shortComment)
    >> nav(showHeader = false){
      list(action = subject.form.open, canAdd = false) {
        grid(labels = None, spacing = false){
          row{recipients >> field(width = 0.7, fontStyle = Bold) dateTime >> field(width = 0.3, align = Right)}
          subject
          shortComment >> field(color = "#666")
        }
      }
    }
  }
}