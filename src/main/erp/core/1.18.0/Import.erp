trait ImportTask extends Entity {
  object field gen: Int?
  background = "#222"
  const ref field n: Int? = increment(gen)
  func number = "IMPORT$n"

  override func issueTypes = super.issueTypes + ITImportError
  ref field date: Date = now
  impl func title = "$number $date"

  func service: IUser
  const field state: ImportTaskState = Entered
  const field enterDate: Date = now

  const field error: Text? {visible = state == Error}

  view stateView = group {
    state
    error
    button("Reprocess", visible = state == Error || (state == Entered && (Date.now - enterDate) > 5_minute)) {
      back {reprocess()}
    }
  }
  view test = nav {
    form.unnav
    button("Reprocess") {
      back {reprocess()}
    }
  }

  back func reprocess(): Void = {
    state = Entered
    error = ""
    enterDate = now
    save
    createJob.enqueue()
  }
  back func createJob: ImportJob
  impl event onSave = {
    if (!deleted && (created || (updated && !updated(state) && !updated(error) && state == Error))) {
      createJob.enqueue()
    }
  }
}

object ITImportError extends IssueType[ImportTask] {
  impl func title = "Import Error"
  impl func hasIssue(item: ImportTask): Bool = {
    item.state == Error
  }
  impl func fixes(item: ImportTask) = [
    Fix(text = "Make sure that import schema and the file correlates to each other"),
    Fix(text = "If the file seems to be correct, please contact support"),
    Fix(text = "If it was uploaded by mistake, delete the upload")
  ]
}

interface ImportJob extends SystemJob {
  impl func service: IUser = task.service
  func task: ImportTask
  impl final func do: Future[Any] = {
    Activity.current!.entities = [task, service]*.as[Entity]!
    import.map{_ =>
      task.state = Complete
      task.error = ""
      task.save
    }
  }
  override func error(error: Any): JobError = {
    task.state = Error
    task.error = error
    task.save
    IgnoreError
  }
  back func import: Future[Any]
}

enum ImportTaskState {
  case Entered {background = "#ed9"}
  case Error {background = "#f99"}
  case Complete {color = "white" background = "#090"}
}

entity Import extends ImportTask  {
  icon = "file-import"
  const field user: User = User.current!
  impl func service = user
  field roles: [Role]? =?  if (front) if (let c = Dashboard.current) [c.role]
  impl func itemRoles = if (let r = roles) r else user.roles

  field schema: ImportSchema[Any]?
  field files: [File]

  impl view form = nav{grid{
    issuesView
    number
    date
    schema
    files
    stateView
  }}
  impl back func createJob = ImportProcessJob(task = this)
  impl view traitItem = x{number date state}
}

trait ImportSchema[D] extends RefEntity {
  back func checkFile(file: File): Bool
  back func parse(file: File, data: Data?): D
  back func checkData(file: File, data: D): Bool
  back func process(file: File, data: D): Future[Void]
}

trait SheetImportSchema extends ImportSchema[[String?]?] {
  back func header: String? = ""
  back func headerRow: UInt = 1
  impl back func checkFile(file: File): Bool = header && file.is("csv")
  impl back func parse(file: File, data: Data?) = {
    data.toString.lines(CSV)
  }
  impl back func checkData(file: File, data: [String?]?): Bool = header && data.count >= headerRow && data(headerRow) == header
}

back class ImportProcessJob extends ImportJob {
  impl field task: Import
  impl func import = {
    task.files.map{file =>
      let data <- file.content
      let processor: (schema: ImportSchema[Any], data: Any) = {
        if (let sh = task.schema) {
          let d = sh.parse(file, data)
          (schema = sh, data = d)
        } else {
         ImportSchema.all.result.get
            .mapOpt(schema =>
              if (schema.checkFile(file)) {
                if (let d = try? schema.parse(file, data)) {
                  if (schema.checkData(file, d)) {
                    (schema, data = d)
                  }
                }
              }
            )
            .first
            .alt(throw "Cannot determine import type for $file")
        }
      }
      task.schema = processor.schema

      processor.schema.process(file, processor.data)
    }.allCompleted
  }
}