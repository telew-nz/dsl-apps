trait IContact extends RefEntity {
  func isPublic: Bool = true
  func isAutoPublic: Bool = isPublic
  func join(entity: Entity): SubjectObserver = {
    if (let o = entity.observers.find(observer == this)) o else SubjectObserver(subject = entity, observer = this).save
  }
  func notify(entity: Entity): SubjectObserver = {
    join(entity).notify()
  }
  system field subjects: [SubjectObserver]? inline by observer {availableFor = Overall}
  func roles: [Role]? = []

  final func canSend: Bool = sender?.canSend
  func sender: ContactSender? = object.contactSender
  object func contactSender: ContactSender? = null
  back func presend(activity: Activity): Void = sender?.presend(activity, this)
  func channel: CommChannel? = null
  func atMention: Html {
    deprecated(use = "Activity.to")
    value = '<a href="javascript:;" data-href="#@${hashSuffix.as[Html]}">@$title</a>'
  }

  object native pubCurrent: IContact?
  func isPubCurrent: Bool = pubCurrent == this

  func addresseeName: String? {default value = title}
  func contactLegalEntity: LegalEntity? = null
  func contactEnabled: Bool = true
  func contactAddressee: Addressee? = null
  func isOur = false
  func active: Bool = true
  view obsRefView {
    default layout = y{
       title >> field(visible = !ui.hover)
       _ >> field(visible = ui.hover, title = title, quickView = null)
    }
  }
  view obsDetailsView {
    default layout = y{
    }
  }
}

trait Contact extends IContact {
  func contactAddress: String? = ""
  back func realContacts: [Contact]? {
    default
    value = [this]
  }

  object func canSend: Bool = contactSender?.canSend

  back object func defaultRecipients: [Contact]? = []
}

interface ContactSender {
  func canSend = true
  func header(activity: Activity): Html? = ""
  func footer(activity: Activity): Html? = ""
  back func presend(activity: Activity, contact: IContact): Void  {
    default value = {
      if (!activity.deliveries.exists(d => d.contact == contact)) {
        activity.deliveries += ActivityDelivery(channel = contact.channel!, contact = contact)
      }
    }
  }
  back func send(activity: Activity): Void
}
object ContactSenderJoin extends ContactSender {
  impl back func presend(activity: Activity, contact: IContact): Void = {
    contact.join(activity.mainEntity).notify
  }
  impl back func send(activity: Activity): Void = {}
}

trait RawContact extends Entity with Contact {
  impl ref field addresseeName: String?
  var address: String
  impl func contactAddress: String? = address
  impl compute title {
    value = "$addresseeName <$address>".trim!
    update = {
      if (let a = new("<" .. ">")) {
        address = a
        addresseeName = (new[ .. "<")).trim
      } else {
        address =? new.trim
        addresseeName = ""
      }
    }
  }

  compute addressee: Addressee? {
    value = null
    addingType = LegalEntity
    init = {
      if (let p = new?.as[Person]) {
        p.name =? addresseeName
      } else if (let c = new?.as[Company]) {
        c.title =? addresseeName
      } else if (let cp = new?.as[CompanyPerson]) {
        cp.person.name =? addresseeName
      }
    }
    update = {
      if (let a = new) {
        back {
          forge(a)
        }
      }
    }
    init = forge(new)
  }
  func actorContactType: ActorContact.object
  func forge(addressee: Addressee): ActorContact = {
    convertToPseudo(actorContactType, addressee).save
  }
}

trait ActorContact extends PseudoEntity with Contact {
  ref field addressee: Addressee by contacts
  impl func addresseeName {
    default value = addressee.title
  }
  impl compute mainEntity {
    value = addressee
    update = {addressee = new}
  }

  impl func contactLegalEntity: LegalEntity? = addressee.legalEntity
  func legalEntity: LegalEntity? = addressee.legalEntity
  func person: Person? = addressee.addresseePerson
  func company: Actor? = addressee.addresseeCompany
  impl func contactAddressee: Addressee? = addressee
  func address: String
  impl func contactAddress: String? = address
  impl func title = "$addressee <$address>"
  impl func isOur = addressee.isOur
  compute otherContacts = addressee.contacts.filter(_ != this)
  impl view obsRefView = y (spacing = false) {
     person.alt(addressee).title >> field(visible = !ui.hover)
     person.alt(addressee) >> field(visible = ui.hover, title = title, quickView = null)
     company?.title >> field(visible = company != addressee && !ui.hover, fontStyle = Label)
     company >> field(visible = company != addressee && ui.hover, title = title, fontStyle = Label)
     address >> field(fontStyle = Label)
  }
  impl view obsDetailsView = y {
    otherContacts >> list(frame = false, mode = Static){
      address
    }
  }
}

trait Addressee extends RefEntity {
  object field gen: Int?

  func legalEntity: LegalEntity? = addresseeCompany?.as[LegalEntity].or(addresseePerson)
  func addresseePerson: Person? = null
  func addresseeCompany: Actor? = null
  func addresseeActor: Actor? = addresseePerson.or(addresseeCompany)
  func systemContact: Contact? = null
  func isOur = false

  field contacts: [ActorContact]? inline by addressee
  func collectContacts: [ActorContact]? {
    default value = contacts
  }
  func phones: [PhoneContact]? = {
    contacts*.as[PhoneContact].or(collectContacts*.as[PhoneContact])
  }
  func emails: [EmailContact]? = {
    contacts*.as[EmailContact].or(collectContacts*.as[EmailContact])
  }
  func websites: [WebsiteContact]? = {
    contacts*.as[WebsiteContact].or(collectContacts*.as[WebsiteContact])
  }
}

trait IEmailContact extends Contact {
  impl func channel: CommChannel? = EMail
  func email: Email
  impl compute address: String = email
  override func isAutoPublic: Bool = !(try? email).endsWith("@" + Config.emailDomain)

  back object func filterUser(address: String?): [IUser]? = {
    User.all.filter{u =>
         u.userEnabled
      && address.lower.startsWith(u.login.lower + "@")
      && (u.is(Admin) || u.person.companies*.company.filter(our)*.contacts*.as[WebsiteContact].exists(c => c.domain =%= address("@" .. ]))
    }
  }
  back object func find(address: String?): [Contact]? = {
    IEmailContact.all.filter(c => c.email =%= address).result.get
      .or(filterUser(address))
  }
  back object func make(contact: ExtMsgContact): Contact = {
    IEmailContact.all.find(c => c.email =%= contact.address).result.get
      .or{filterUser(contact.address).first}
      .or{
        if (let website = contact.address("@" .. ]) {
          if (let addressee = WebsiteContact.all.find(domain =%= website).result.get?.addressee) {
            if (!contact.name || !contact.name.contains(" ") || contact.name == addressee.title || !addressee.is[Company] || contact.type == "Role") {
              addressee.addEmail(contact.address!)
            } else {
              addressee.as[Company]!.addPerson(contact.name.replace(addressee.title, "").replace("()", "").trim)!.addEmail(contact.address!)
            }
          } else if (let companyName = contact.company) {
            let company = Company.all.find(c => c.title =%= companyName).result.get.alt(Company(title = companyName))
            company.addWebsite(website.lower)
            company.addPerson(contact.name.replace(company, "").replace("()", "").trim)!.addEmail(contact.address!)
          }
        }
      }
      .alt(RawEmailContact(addresseeName = contact.name, email = contact.address!))
  }
}

object Flow2bSupport extends Entity with IEmailContact {
  searchWeight = 4

  impl func title = "Support"
  impl func email: Email = "support@" + Config.emailDomain
  override func isAutoPublic: Bool = false

  impl view obsRefView = label(icon = "question-circle", "Support", fontStyle = Normal)
}

entity EmailContact extends ActorContact with IEmailContact {
  icon = "at"
  singular = "Email"
  plural = "Emails"

  impl ref field email: Email {
    validate = if (!EmailContact.isAddressValid(email)) "Email format is invalid for $email"
  }

  object func isAddressValid(address: Email?): Bool = {
    address.matches(Regex("^[a-zA-Z0-9.!#\$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*\$"))
  }
  object func filterAddress(address: Email?): Email? = if (EmailContact.isAddressValid(address)) address
  impl view form = grid(labels = None) {
    addressee
    email
  }
  back object func add(addressee: Addressee, email: Email?): IEmailContact? {
    deprecated(use = "addressee.addEmail(email)")
    value = addressee.addEmail(email)
  }
  impl event onSave = {
    email = email.lower.trim!
  }
}
entity RawEmailContact extends RawContact with IEmailContact {
  singular = "Email"
  plural = "Emails"
  impl ref field email: Email {
    validate = if (!EmailContact.isAddressValid(email)) "Email format is invalid for $email"
  }

  impl view form = nav{grid {
    addressee >> field(editMode = AlwaysEdit, visible = !ui.navEdit)
    addresseeName
    email
  }}

  impl func actorContactType = EmailContact
  impl event onSave = {
    email = email.lower.trim!
  }
}

trait IPhoneContact extends Contact {
  ref field phone: Phone
  ref field type: PhoneType = Phone
  impl func address: String = phone

  back object func find(type: PhoneType, address: String?): [Contact]? = {
    IPhoneContact.all.filter(c => c.type == type && c.phone =%= address).result.get
  }
  back object func make(type: PhoneType, contact: ExtMsgContact): Contact = {
    IPhoneContact.all.find(c => c.type == type && c.phone =%= contact.address).result.get
      .alt(RawPhoneContact(addresseeName = contact.name, type = type, phone = contact.address!))
  }
}

entity PhoneContact extends ActorContact with IPhoneContact {
  icon = "phone"
  singular = "Phone"
  plural = "Phones"

  impl view form = grid(labels = None){
    addressee
    x{type phone >> field(stretch = 1)}
  }
  back object func add(addressee: Addressee, type: PhoneType, phone: Phone?): PhoneContact? {
    deprecated(use = "addressee.addPhone(email)")
    value = addressee.addPhone(type, phone)
  }
}

entity RawPhoneContact extends RawContact with IPhoneContact {
  singular = "Phone"
  plural = "Phones"

  impl view form = nav{grid {
    addressee >> field(editMode = AlwaysEdit, visible = !ui.navEdit)
    addresseeName
    x{type phone >> field(stretch = 1)}
  }}

  impl func actorContactType = PhoneContact
}


extend entity Addressee {
  back func addEmail(email: Email?): IEmailContact? = if (let email = email.trim) {
    if (EmailContact.isAddressValid(email)) {
      contacts*.as[ActorContact with IEmailContact].find(a => a.email =%= email)
        .or(IEmailContact.all.find(a => a.email =%= email && a.is[IEmailContact with RawContact]).map(_.as[IEmailContact with RawContact]!.forge(this).as[ActorContact with IEmailContact]!))
        .alt(EmailContact(addressee = this, email = email).save)
    }
  }

  back func addPhone(type: PhoneType, phone: Phone?): PhoneContact? = if (let phone = phone.trim) {
    contacts*.as[PhoneContact].find(a => a.phone =%= phone && a.type == type)
      .alt(PhoneContact(addressee = this, type = type, phone = phone).save)
  }

  back func addWebsite(url: Url?): WebsiteContact? = if (let url = url.trim) {
     contacts*.as[WebsiteContact].find(a => a.url =%= url)
       .alt(WebsiteContact(addressee = this, url = url).save)
  }
}

enum PhoneType {
  case Phone
  case Mobile
  case Fax
}

entity WebsiteContact extends ActorContact {
  icon = "globe"
  singular = "Website"
  plural = "Websites"
  ref field url: Url
  impl func address: String = url
  compute domain: Url? = url.dropPrefixes(["https://", "http://", "www."]).dropSuffix("/").lower
  impl view form = grid(labels = None){
    addressee
    url
  }
}

trait ContactAddressee extends Contact with Addressee {
  impl func systemContact: Contact? = this
  impl func isOur = false
}

class Address {
  field person: String?
  field company: String?
  field number: String?
  field street: PlainText {
    availableFor = List
  }
  field suburb: String?
  field city: String?
  field region: String?
  field country: String?
  field postcode: String?

  func isEmpty {
    value = false
    deprecated(use = "Optional address")
  }
  compute title: PlainText = ["$person $company".trim, "$(number.trim) $(street.trim)".trim, [suburb, city, region, postcode].filter(nonEmpty).join(" "), country].filter(nonEmpty).join("\n")!
  impl func toString = title

  func fields: [String?] = [person, company, number, street, suburb, city, region, country, postcode]
  func canBeMerged(o: Address): Bool = {
     fields.zip(o.fields).all(!left || !right || left =%= right)
  }
  func merge(o: Address): Void = {
    if (!person.trim) person = o.person
    if (!company.trim) company = o.company
    if (!number.trim) number = o.number
    if (!suburb.trim) suburb = o.suburb
    if (!city.trim) city = o.city
    if (!region.trim) region = o.region
    if (!country.trim) country = o.country
    if (!postcode.trim) postcode = o.postcode
  }

  impl view form = y{
     grid(frame = true, visible = ui.navEdit, labels = Right, width = 1.0, labelsWidth = 0.25) {
       person
       company
       street >> field(label = "Street Address")
       number >> field(label = "Apartment, unit, etc.")
       suburb
       region
       city
       region
       postcode
       country
     }
     title >> field(visible = !ui.navEdit)
   }
}


enum CommChannel(hasSubject: Bool, sender: ContactSender?,
  back findContacts: (address: String?) => [Contact]?, back makeContact: ExtMsgContact => Contact,
  back defaultRecipients: => [Contact]?
) {
  case EMail(
      sender = IEmailContact.contactSender, hasSubject = true
      findContacts = IEmailContact.find(address)
      makeContact = IEmailContact.make(_)
      defaultRecipients = IEmailContact.defaultRecipients
  ) {background = "#fff" icon = "at" label = "EMail"}
  case SMS(
      sender = IPhoneContact.contactSender
      findContacts = IPhoneContact.find(Mobile, address)
      makeContact = IPhoneContact.make(Mobile, _)
      defaultRecipients = IPhoneContact.defaultRecipients
  ) {background = "#02a6dc" icon = "sms" label = "SMS"}

  func canSend: Bool = sender?.canSend
}
