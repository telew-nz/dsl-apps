class Seq[T] extends NativeOrd {
  native apply(index: Number): T
  native apply(name: String): T
  native first: T
  native reverse: [T]
  native first(size: Int): [T]
  native onlyOne: T?
  native allTheSame: T?
  native drop(size: Int?): [T]?
  native last: T
  native last(size: Int): [T]
  native dropLast(size: Int?): [T]?
  native distinct: [T]
  native toSet: Set[T]
  native toSeq: [T]
  native toQtyAmountQueue[Q extends Number, V extends Number where T = (Q, V)](alg: QtyAmountQueueAlgorithm): QtyAmountQueue[Q, V]

  native count: Int
  native contains(item: T): Bool
  native indexOf(item: T): Int?
  native sub(item: T): [T]?
  native find(predicate: T => Bool): T?
  native all(predicate: T => Bool): Bool
  native exists(predicate: T => Bool): Bool
  native isUnique(f: T => Any): Bool
  native sum[O where T = O?, O extends Number]: T
  native sum[where T extends Number]: T?
  native fold[A](start: A, acc: (T, acc: A) => A): A
  native avg[O where T = O?, O extends Number]: T
  native avg[where T extends Number]: T?
  native median[O where T = O?, O extends Number]: T
  native median[where T extends Number]: T?
  native distributionStats[where T extends Number]: DistributionStats[T?]

  native min[where T extends NativeOrd]: T
  native max[where T extends NativeOrd]: T
  native join(separator: String): String

  native filter(predicate: T => Bool): [T]?
  native takeWhile(p: T => Bool): [T]?
  native dropWhile(p: T => Bool): [T]?
  native map[T1](f: T => T1): [T1]
  native mapOpt[T1](f: T => T1?): [T1]?
  native oneByOne[T1](f: T => Future[T1]): Future[[T1]]
  native foreach(f: T => Void): [T]
  native flatMap[T1](f: T => [T1]?): [T1]?
  native toMap[K, V where T = (K, V)]: [K: V]
  native toMap[K](key: T => K): [K: T]

  native zip[R, RR](other: [R], map: (left: T, right: R) => RR): [RR]
  native groupBy[K](by: T => K): [K: [T]]
  native accum[A, R](start: A, acc: (T, acc: A) => NoInfer[A], map: (T, prevAcc: A, acc: A) => R): (result: [R], acc: A)
  native accum[V](f: [T] => V): [(T, V)]
  native distribute[I extends Number](number: I?, by: T => Number?): [(item: T, value: I?)]

  native sort(lt: (T, T) => Bool): [T]
  native sort[where T extends Number]: [T]
  native sort[where T extends NativeOrd]: [T]
  native sortBy[O extends NativeOrd](by: T => O): [T]

  native intersect(other: [T]?): [T]?
  native combinations(length: Int): [[T]]?
  native neighbours[R](f: (left: T, right: T) => R): [R]
  native sliding(size: Int): [[T]]
  native sliding(size: Int, step: Int): [[T]]

  native append: [T]
  native allCompleted[I where T = Future[I]]: Future[[I]]
  native query: QueryN[T]
  native json: Json
}

class Seq?[T] extends NativeOrd {
  native apply(index: Number): T
  native apply(name: String): T
  native isEmpty: Bool
  native nonEmpty: Bool
  native first: T?
  native first(size: Int?): [T]?
  native onlyOne: T?
  native allTheSame: T?
  native drop(size: Int?): [T]?
  native last: T?
  native last(size: Int?): [T]?
  native dropLast(size: Int?): [T]?
  native distinct: [T]?
  native toSet: Set[T]?
  native toSeq: [T]?
  native reverse: [T]?
  native toQtyAmountQueue[Q extends Number, V extends Number where T = (Q, V)](alg: QtyAmountQueueAlgorithm): QtyAmountQueue[Q, V]?

  native count: Int?
  native contains(item: T): Bool
  native indexOf(item: T): Int?
  native sub(item: T): [T]?
  native find(predicate: T => Bool): T?
  native all(predicate: T => Bool): Bool
  native exists(predicate: T => Bool): Bool
  native isUnique(f: T => Any): Bool
  native sum[O where T = O?, O extends Number]: T
  native sum[where T extends Number]: T?
  native fold[A](start: A, acc: (T, acc: A) => A): A
  native avg[O where T = O?, O extends Number]: T
  native avg[where T extends Number]: T?
  native median[O where T = O?, O extends Number]: T
  native median[where T extends Number]: T?
  native min[O where T = O?, T extends NativeOrd]: T
  native min[where T extends NativeOrd]: T?
  native max[O where T = O?, T extends NativeOrd]: T
  native max[where T extends NativeOrd]: T?
  native join(separator: String): String?
  native distributionStats[where T extends Number]: DistributionStats[T?]

  native filter(predicate: T => Bool): [T]?
  native takeWhile(p: T => Bool): [T]?
  native dropWhile(p: T => Bool): [T]?
  native map[T1](f: T => T1): [T1]?
  native mapOpt[T1](f: T => T1?): [T1]?
  native oneByOne[T1](f: T => Future[T1]): Future[[T1]?]
  native foreach(f: T => Void): [T]?
  native flatMap[T1](f: T => [T1]?): [T1]?
  native toMap[K, V where T = (K, V)]: [K: V]?
  native toMap[K](key: T => K): [K: T]?

  native zip[R, RR](other: [R]?, map: (left: T, right: R) => RR): [RR]?
  native groupBy[K](by: T => K): [K : [T]]?
  native accum[A, R](start: A, acc: (T, acc: A) => NoInfer[A], map: (T, prevAcc: A, acc: A) => R): (result: [R]?, acc: A)
  native accum[V](f: [T] => V): [(T, V)]?
  native distribute[I extends Number](number: I?, by: T => Number?): [(item: T, value: I?)]?

  native sort(lt: (T, T) => Bool): [T]?
  native sort[where T extends Number]: [T]?
  native sort[where T extends NativeOrd]: [T]?
  native sortBy[O extends NativeOrd](by: T => O): [T]?

  native intersect(other: [T]?): [T]?
  native combinations(length: Int): [[T]]?
  native neighbours[R](f: (left: T, right: T) => R): [R]?
  native sliding(size: Int): [[T]]?
  native sliding(size: Int, step: Int): [[T]]?

  native append: [T]
  native query: QueryN[T]
  native allCompleted[I where T = Future[I]]: Future[[I]?]

  native json: Json
}

class DistributionStats[T] {
  field min: T
  field median: T {
    label = "Average"
  }
  field max: T

  func map[R](f: (T) => R): DistributionStats[R] = {
    DistributionStats[R](min = f(min), median = f(median), max = f(max))
  }
}