back object Conversion extends IConversion {
  impl func convert(from: [Int?]) = {
    if (from < [1,2,5]) {
      if (ConversionService.serviceState != Active) {
        ConversionService.serviceState = Active
        ConversionService.updateDashboard
        ConversionService.save
      }
      Image.all.filter(is("png")).foreach{f =>
        ReprocessFileJob(file = f).enqueue
      }
    }
     if (from == [1,2,5] || from == [1,2,6]) {
      Image.allWithDeleted.filter(deleted && is("png")).foreach{f =>
        ReprocessFileJob(file = f).enqueue
      }
    }
    _core(from)
  }
}

back interface IConversion extends NativeConversion {
  func do(version: [Int?]?): Future[Any] {
    default
    value = {}
    deprecated(use = "convert(from: [Int?]) or install")
  }

  func convert(from: [Int?]): Future[Any] {
    ignoreWarnings
    default
    value = do(from)
  }
  func install: Future[Any] {
    ignoreWarnings
    default
    value = do([])
  }
}

class ReprocessFileJob extends SystemJob {
  impl func service = ConversionService
  field file: File

  impl func dependsOnRegisters = false

  impl func do = {
    Conv.reprocessFile(file.save)
  }
}

object ConversionService extends SystemService {
  impl func title = "Conversion Service"
  func serviceAccess: [Role]? = [Admin]
  impl func defaultDebug = true
  impl view form = nav{grid(labels = Top){
     issuesView
     serviceState
     errorsCount >> field(editMode = AlwaysRead)
  }}
}

back interface NativeConversion {
  native fixBackRefs[E extends AnyEntity](entity: E.object, field: E => Any): Void
  native renameEntity(entity: AnyEntity.object, oldName: String): String
  native renameApp(newName: String, oldName: String): String
  native renameOldEntity(newName: String, oldName: String): String
  native renameField[E extends AnyEntity](entity: E.object, field: E => Any, oldName: String): String
  native renameFieldClass[E extends AnyEntity, C](entity: E.object, field: E => Any, cls: C.object, oldName: String): String
  native renameOldField[E extends AnyEntity](entity: E.object, newName: String, oldName: String): String
  native recalcField[E extends AnyEntity](entity: E, field: E => Any): E
  native field[D](entity: AnyRef, oldName: String): D
  native conv(entity: AnyEntity): ConvEntity
  native all(fullName: String): [ConvEntity]?
  native recalcRegister(reg: Register.object): Void
  native recreateRegister(reg: Register.object): Void
  native checkRegister(reg: Register.object): String
  native checkAllRegisters: String
  native disableRegister(reg: Register.object): Void
  native enableRegister(reg: Register.object): Void
  native recreateAllRegisters(): Void
  native recalcAllRegisters(): Void
  native timeout[R](duration: Duration, f: => R): R


  native reprocessFile(file: File): Future[Void]
  native _core(version: [Int?]?): Future[Void]

  native freeze: Bool
  native unfreeze: Bool
}

back object Conv extends NativeConversion {
  native apply[R](f: NativeConversion => R): R
}

back inline entity ConvEntity extends AnyEntity {
  native dslTypeName: String
  native field[D](name: String): D
  native update[D](name: String, value: D): ConvEntity
}

back class ConvClass {
  native field[D](name: String): D
  native update[D](name: String, value: D): ConvClass
}


back object Sys extends NativeConversion {
  native apply[R](pwd: String): Sys.object

  native cleanWorkspace(confirmName: String): Future[String]

  native restartWorkspace(wid: Id): Future[Void]
  native restartJobActor(): Future[Void]
  native restartDslActor(): Future[Void]
  native addUser(user: User, wid: Id): Future[Void]
  native changePassword(login: String, pwd: String): Future[Void]
  native moveApp(package: String, wid: Id): Future[Void]
}