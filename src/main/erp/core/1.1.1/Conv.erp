back interface NativeConversion {
  native fixBackRefs[E extends AnyEntity](entity: E.object, field: E => Any): Void
  native renameEntity(entity: AnyEntity.object, oldName: String): String
  native renameApp(newName: String, oldName: String): String
  native renameOldEntity(newName: String, oldName: String): String
  native renameField[E extends AnyEntity](entity: E.object, field: E => Any, oldName: String): String
  native renameFieldClass[E extends AnyEntity, C](entity: E.object, field: E => Any, cls: C.object, oldName: String): String
  native renameOldField[E extends AnyEntity](entity: E.object, newName: String, oldName: String): String
  native recalcField[E extends AnyEntity](entity: E, field: E => Any): E
  native field[D](entity: AnyRef, oldName: String): D
  native conv(entity: AnyEntity): ConvEntity
  native all(fullName: String): [ConvEntity]?
  native recalcRegister(reg: Register.object): Void
  native recreateRegister(reg: Register.object): Void
  native checkRegister(reg: Register.object): String
  native checkAllRegisters: String
  native disableRegister(reg: Register.object): Void
  native enableRegister(reg: Register.object): Void
  native recreateAllRegisters(): Void
  native recalcAllRegisters(): Void
  native timeout[R](duration: Duration, f: => R): R
  native cleanWorkspace(confirmName: String): Future[String]
  native freeze: Bool
  native unfreeze: Bool
}

back interface IConversion extends NativeConversion {
  func do(version: [Int?]?): Future[Any]
}

back object Conv extends NativeConversion {
  native apply[R](f: NativeConversion => R): R
}

back trait ConvEntity extends AnyEntity {
  native field[D](name: String): D
  native update[D](name: String, value: D): ConvEntity
}

back class ConvClass {
  native field[D](name: String): D
  native update[D](name: String, value: D): ConvClass
}