trait Register extends InlineEntity {
  const system field prev: this? {availableFor = Overall}
  const system field next: this? {availableFor = Overall}
  const system field calced: Bool
  object native current: QueryN[this]
  object native at(order: Any): QueryN[this]
  object native between(start: Any, end: Any): QueryN[(start: this, items: [this]?)]
  object native without(registers: [Id]?): Query1[Void]
}

object RegisterService extends SystemService {
  func title = "Register Service"
  func serviceAccess: [Role]? = [Admin]
  func active = userEnabled
  view form = nav{grid(labels = Top){
   issuesView
   serviceState
   errorsCount >> field(editMode = AlwaysRead)
  }}
}

trait RegisterTie[R extends Register] extends InlineEntity {
  const system field prevs: [R]? {availableFor = Overall}
  func filter(item: R): Bool = true
}

class QtyAmountQueue[Q extends Number, Value extends Number] {
  native qty: Q
  native amount: Value?
  native enqueue(qty: Q?, value: Value?): QtyAmountQueue[Q, Value]
  native dequeue(qty: Q?): (value: Value?, queue: QtyAmountQueue[Q, Value]?)
}

class QtyAmountQueue?[Q extends Number, Value extends Number] {
  native qty: Q?
  native amount: Value?
  native enqueue(alg: QtyAmountQueueAlgorithm, qty: Q?, value: Value?): QtyAmountQueue[Q, Value]?
  native dequeue(qty: Q?): (value: Value?, queue: QtyAmountQueue[Q, Value]?)
}

enum QtyAmountQueueAlgorithm {
  case FIFO
  case MIFO
  case LIFO
}

class QtyQueue[Q extends Number, Item] {
  native qty: Q
  native enqueue(qty: Q, value: Item): QtyQueue[Q, Item]
  native dequeue(qty: Q?): (items: [(qty: Q, item: Item)]?, queue: QtyQueue[Q, Item]?)
}

class QtyQueue?[Q extends Number, Item] {
  native qty: Q?
  native enqueue(qty: Q, value: Item): QtyQueue[Q, Item]
  native dequeue(qty: Q?): (items: [(qty: Q, item: Item)]?, queue: QtyQueue[Q, Item]?)
}
