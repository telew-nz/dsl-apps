entity Workspace {
  background = "#222"
  object native current: Workspace

  field title: String
  const field frozen: Bool {label = "Workspace Frozen"}
  system const field authId: String
  system field dashboards: [Dashboard]? inline by workspace
  back func dashboard(role: Role): Dashboard = dashboards.find(d => d.role == role)!
  func toString: String? = title
  func actor: Actor? {
    value = OurActor.our?.actor
    deprecated(use = "OurActor.our")
  }
  back func apiRoot: Url = "$(SystemService.apiRoot)/$authId"
  system field apps: [String -> String]?
  back func updateAppVersion(app: String, version: String): Void = {
    apps = apps + [app -> version]
    save()
  }
  back func cleanAppVersion(app: String, version: String): Void = {
    apps = apps - app
    save()
  }
  view form = nav{
    grid {
      title >> field(label = "Workspace Title")
      dashboards >> list (label = "Role Contacts", canAdd = false, canDelete = false) {grid(labels = None) {
        role.toString
        contacts >> list(frame = false, margin = None) {form}
      }}
    }
    add("Workspace") {
      let w <- UI.save(Workspace(title = "New Workspace"))
      UI.info("Workspace is created. Please refresh the page.")
    }
  }
}

entity Dashboard extends PseudoEntity with ContactAddressee {
  singular = "Role"
  plural = "Roles"
  front object native current: Dashboard?

  field workspace: Workspace by dashboards
  func mainEntity = workspace
  field role: Role

  func canSend: Bool = true
  object func send(activity: Activity, contacts: [this]): Void = {
    contacts*.send(activity)
  }
  func send(activity: Activity): Void = {
    let e = activity.entities.first
    if (!e.hasObserverInRole(role)) {
      join(e).notify
    }
  }

  compute curUnreadItems: [SubjectObserver]? = if (User.current!.roles.contains(this.role)) {
    User.current!.unreadSubjects
      .filter(unreadCount && (!subject.itemRoles.intersect(User.current!.roles) || subject.itemRoles.contains(this.role)))
  }
  compute curIssueItems0 {
    value = subjects
      .filter((try? subject) && fullUnreadCount)
      .sortBy(issues*.priority*.number.max.desc, subject.itemPriority.number.desc, subject.itemOrder)
  }
  compute curIssueItems1 {
    availableFor = All
    value = curIssueItems0.first(50)
  }
  compute curIssueItems = {
    let subs = curUnreadItems*.subject.toSet
    curIssueItems1.filter(i => !subs.contains(i.subject))
  }

  compute curPins0: [SubjectObserver]? {
    value = User.current!.unreadSubjects.filter(!unreadCount && (!subject.itemRoles.intersect(User.current!.roles) || subject.itemRoles.contains(this.role)))
  }
  compute curPins = {
    let subs = (curUnreadItems + curIssueItems1)*.subject.toSet
    curPins0.filter(i => !subs.contains(i.subject))
  }

  compute curActiveItems0 {
    availableFor = All
    value = {
      subjects
        .filter((try? subject) && !unreadCount && pinned && subject.isForUser(User.current!, role))
        .sortBy(subject.itemOrder)
    }
  }
  compute curActiveItems1 {
      availableFor = All
      value = curActiveItems0.first(50)
    }

  compute curActiveItems = {
    let subs = (curUnreadItems + curIssueItems1 + curPins0)*.subject.toSet
    curActiveItems1.filter(i => !subs.contains(i.subject))
  }

  view form = y(flow = true) {
    curUnreadItems.first(50) >> list(margin = None, border = Bottom, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row{unreadCount >> field(fontStyle = Badge, background = "#983fa0", width = 0.05) subjectType >> field(fontStyle = Label, width = 0.25, align = Right)
      subject >> field(width = 1.0, margin = NoneInner) }
    }}
    curIssueItems >> list(margin = None, border = Bottom, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row{fullUnreadCount >> field(fontStyle = Badge, background = "#b00", width = 0.05) subjectType >> field(fontStyle = Label, width = 0.25, align = Right)
      subject >> field(width = 1.0, margin = NoneInner)}
      row{space(width = 0.3) issuesText >> field(color = "red", width = 0.7)}
    }}
    curPins.first(50) >> list(margin = None, border = Bottom, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row{badge("P", background = "#369", width = 0.05) subjectType >> field(fontStyle = Label, width = 0.25, align = Right) subject >> field(width = 1.0, margin = NoneInner)}
    }}
    curActiveItems >> list(margin = None, border = Bottom, action = subject.form.open) {grid(labels = None, width = 1.3) {
      row{badge("A", background = "#369", width = 0.05) subjectType >> field(fontStyle = Label, width = 0.25, align = Right) subject >> field(width = 1.0, margin = NoneInner)}
    }}
  }
  func title = role.toString!

  compute curCount {
    value = (curUnreadItems.count, curIssueCount, curActiveCount, curPinsCount)
  }
  compute curPinsCount {
    availableFor = List
    value = curPins0.count
  }
  compute curActiveCount {
    availableFor = List
    value = curActiveItems0.count
  }
  compute curIssueCount {
    availableFor = List
    value = curIssueItems0.count
  }

}

trait DashboardItem extends Entity {
  back func issues: [DashboardIssue]? = []
  func fixes(issue: DashboardIssue): Future[[Fix]?] = []
  func activeRoles: [Role]? = []

  compute savedIssues: Seq[DashboardIssue]? {
    value = observers*.issues.toSeq
    views = []
  }

  view issuesView = savedIssues >> list(label = "", frame = true) {
    y(background = "#fff3f3") {
      _.toString >> field (color = "red")
      fixes(_) >> list(frame = false) {
        x {
          "â€¢ " + text
          acts >> list(flow = true, frame = false) {
            button(label = label) {
              _.as[Act]!.do()
            }
          }
        }
      }
    }
  }

  back native updateDashboard: Void

  class Fix(text: String, acts: [Act]?)
  class Act(label: String, front field do: () => Future[Void])
}

enum DashboardIssue(role: Role, priority: Priority)

enum Priority(number: Dec[4]?) {
  case critical(number = calc.higher(major).number)
  case major(number = calc.higher(default).number)
  case default(number = 0)
  case minor(number = calc.lower(default).number)

  object func calc = PriorityCalc()
}

class PriorityCalc {
  field bottom: Dec[4]? = -10000
  field top: Dec[4]? =  10000

  func higher(p: Priority) = if (bottom < p.number) PriorityCalc(bottom = p.number, top = top) else this
  func lower(p: Priority) = if (top > p.number) PriorityCalc(bottom = bottom, top = p.number) else this
  func number = (top + bottom)/2
}
