interface BaseString extends NativeOrd with Hashable {
  native length: Int

  native trim: String?
  native lower: String
  native upper: String
  native capitalize: String
  native decapitalize: String
  native contains(substring: String): Bool
  native containsIgnoreCase(substring: String): Bool

  native matches(r: Regex): Bool
  native all(r: Regex): [RegexMatch]?
  native replace(r: Regex, value: String?): String?

  native replace(what: String, to: String?): String?

  native indexOf(sub: String?): Int?
  native lastIndexOf(sub: String?): Int?
  native startsWith(prefix: String?): Bool
  native endsWith(suffix: String?): Bool

  native dropPrefix(prefix: String): String?
  native dropPrefixes(prefixes: [String]): String?
  native dropSuffix(suffix: String): String?
  native dropSuffixes(suffixes: [String]): String?
  native fromCamelCase: String
  native lines(rules: SplitRules): [String]
  native split(separator: String): [String]
  native splitTo[R](separator: String, rules: SplitRules): R

  native toData: Data
  native decodeBase64: Data
  native decodeMimeBase64: Data
  native toNumber: Number?
  back native tooLong: Bool
  back native parseJson[R]: R
  back native parseHtml: HtmlElement
}

interface BaseString? extends NativeOrd with Hashable {
  native isEmpty: Bool
  native nonEmpty: Bool
  native length: Int?

  native trim: String?
  native lower: String?
  native upper: String?
  native capitalize: String?
  native decapitalize: String?
  native contains(substring: String): Bool
  native containsIgnoreCase(substring: String): Bool

  native matches(r: Regex): Bool
  native all(r: Regex): [RegexMatch]?
  native replace(r: Regex, value: String?): String?

  native replace(what: String, to: String?): String?

  native indexOf(sub: String?): Int?
  native lastIndexOf(sub: String?): Int?
  native startsWith(prefix: String?): Bool
  native endsWith(suffix: String?): Bool

  native dropPrefix(prefix: String): String?
  native dropPrefixes(prefixes: [String]): String?
  native dropSuffix(suffix: String): String?
  native dropSuffixes(suffixes: [String]): String?
  native fromCamelCase: String?
  native lines(rules: SplitRules): [String]?
  native split(separator: String): [String]?
  native splitTo[R](separator: String, rules: SplitRules): R?

  native decodeBase64: Data?
  native decodeMimeBase64: Data?
  native toData: Data?
  native toNumber: Number?
  back native tooLong: Bool
  back native parseJson[R]: R?
  back native parseHtml: HtmlElement
}

enum SplitRules(quote: String?, escape: String?, quoteEscape: String?) {
  case None(quote = "", escape = "", quoteEscape = "")
  case CSV(quote = '"', escape = "", quoteEscape = '""')
}

class String extends BaseString {
  object native randomKey(len: UInt): String
}
class Text extends BaseString
class PlainText extends BaseString
class Url extends BaseString
class Phone extends BaseString
class Email extends BaseString
class Code extends BaseString
class Address extends BaseString
class Html extends BaseString
class Xml extends BaseString
class Json extends BaseString
class Password extends BaseString
class Dsl extends BaseString

class Char

class Regex {
  object native apply(pattern: String): Regex
}

class RegexMatch {
  native group(i: Int): String?
}