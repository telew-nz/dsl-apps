interface IHttpRequest {
  field ssl: Bool
  field url: Url
  field params: [String -> String?]?
  field headers: [String -> String?]?
  system field oauth: OAuth?
  field method: String?
  func body: Any
}
class IncomingHttpRequest extends IHttpRequest {
  field body: Data?
  func header(name: String): String? = headers.apply(name)
  func param(name: String): String? = params.apply(name)
}
class HttpRequest extends IHttpRequest {
  field body: Any = ""

  func header(name: String, value: String): HttpRequest = {
    this.headers = this.headers + [name -> value]
    this
  }
  func headers(headers: [String -> String?]?): HttpRequest = {
    this.headers = this.headers + headers
    this
  }
  func param(name: String, value: String?): HttpRequest = {
    this.params = this.params + [name -> value]
    this
  }
  func params(params: Any): HttpRequest = {
    if (let fs = params.as[[String -> String?]?]) {
      this.params = this.params +  fs
    } else {
      this.params = this.params + params.as[AnyRef]!.toMap.mapValues(_.toString)
    }
    this
  }
  func form(fields: Any): HttpRequest = {
     header("content-type", "application/x-www-form-urlencoded")
       .params(fields)
   }
  func basicAuth(userName: String, password: String?): HttpRequest = {
    header("Authorization", "Basic " + "$userName:$password".toData.base64)
  }
  func oauth(service: OAuth): HttpRequest = {
    this.oauth = service
    this
  }
  func oauth2(service: OAuth2): HttpRequest = {
    header("Authorization", "Bearer $(service.accessToken)")
  }
  func body(data: Any): HttpRequest = {
    this.body = body
    this
  }
  back func get: Future[HttpResponse] = {
    this.method = "GET"
    perform
  }
  back func post: Future[HttpResponse] = {
    this.method = "POST"
    perform
  }
  back native post(data: Any): Future[HttpResponse]
  back native put(data: Any): Future[HttpResponse]
  back native patch(data: Any): Future[HttpResponse]

  back func delete: Future[HttpResponse] = {
    this.method = "DELETE"
    perform
  }
  back func options: Future[HttpResponse] = {
    this.method = "OPTIONS"
    perform
  }
  back native perform: Future[HttpResponse]

  func toString =
"Request: $method $(if(ssl) "https://" else "http://")$url $params
$headersString

$body
"
 func headersString = headers.toSeq.map("$(_.#0): $(_.#1)").join("
")
}

object http {
  func apply(url: Url): HttpRequest = HttpRequest(url = url.dropPrefixes(["http://", "https://"])!)
}
object https {
  func apply(url: Url): HttpRequest = HttpRequest(ssl = true, url = url.dropPrefixes(["http://", "https://"])!)
}

class HttpResponse {
  field request: HttpRequest
  field code: Int?
  field headers: [String -> String]?
  field body: Data?
  func toString =
"$(request)

Response: $status
$headersString

$body"
  func status: String? = headers.apply("Status")
  func headersString = headers.toSeq.map("$(_.#0): $(_.#1)").join("
")
}

interface Hashable {
  back native hmac(secret: String): Hmac
  back native md5: Data
  back native sha1: Data
  back native sha256: Data
  back native sha512: Data
}

class Data extends Hashable {
  native parseJson[R]: R
  native base64: String
  native mimeBase64: String
  native hex: String
}

class Data? extends Hashable {
  native parseJson[R]: R?
  native base64: String?
  native mimeBase64: String?
  native hex: String?
}

class Hmac {
  back native md5: Data
  back native sha1: Data
  back native sha256: Data
  back native sha512: Data
}

entity File {
  ref field name: String
  compute content: Future[Data?] {
    value = getContent
    update = {
      setContent(new)
    }
  }
  native getContent: Future[Data?]
  native setContent(data: Future[Data?]): Void

  compute url: Url? {
    value = getUrl
    availableFor = All
  }
  const system field uploadUrl: Url? {availableFor = All}
  field contentType: String?
  private compute _contentUpdated: Bool = false
  native getUrl: Url?

  func title: String = name
  view form = nav{grid{
    name
    url
  }}

  func extension: String? = if (let i = name.lastIndexOf(".")) name(i .. ]
  func is(ext: String): Bool = name.lower.endsWith(ext.lower)

  native type: FileType
}

interface FileType {
  field file: File
}
class FileTypeGeneric extends FileType
class FileTypeImage extends FileType
class FileTypeHtml extends FileType
class Image

object Zip {
  back native apply(name: Url, files: [File]?): File
}

back class HtmlElement {
  native plainText: PlainText?
  native innerHtml: Html?
  native append(html: Html?): HtmlElement
  native prepend(html: Html?): HtmlElement
  native delete: Void
  native select(selector: String?): [HtmlElement]?
  native attr(name: String): String?
  native attr(name: String, value: String?): HtmlElement
  native attrs: [String -> String]?
}