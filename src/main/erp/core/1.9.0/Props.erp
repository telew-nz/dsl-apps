interface DslTypeProps[T] {
  func deprecated(use: String): Unit
  compute icon: String
  compute color: String
  compute background: String
  compute singular: String?
  compute singularShort: String?
  compute plural: String?
  compute order: Dec[4]?
  compute externalCapitalizeFieldNames: Bool {
    deprecated(use = "extFieldNaming = UpperCamelCase")
  }
  back compute extFieldNaming: ExtFieldNaming
}
enum ExtFieldNaming {
  case LowerCamelCase
  case UpperCamelCase
  case Underscore
}

interface DslObjectTypeProps[T] extends DslTypeProps[T]
interface DslStoredTypeProps[T] extends DslTypeProps[T] {
  compute width: Dec[4]
}

interface DslReportTypeProps[T] extends DslTypeProps[T] {
  compute generateFilters: Bool
}

interface DslRoleTypeProps[T] extends DslTypeProps[T] {
  compute public: Bool
}

interface DslDeclProps[T, R] {
  func ignoreWarnings: Bool
  func default: Bool
  func deprecated(use: String): Void
}

interface DslDeclInstProps[T, R] extends DslDeclProps[T, R] {
  func canSort: Bool
}

interface DslFieldBaseProps[T, R] extends DslDeclProps[T, R] {
  compute auto: Bool
  compute label: String?
  compute dynamicLabel: String?
  compute singular: String?
  compute plural: String?
  compute visible: T => Bool
  compute views: T => [Layout]?
  compute width: Dec[4]
  compute update: (new: R, old: R?) => Future[Void]
  compute canAdd: T => Bool
  compute isValid: T => Bool {deprecated(use = "validate") }
  compute validate: => String?
  compute unit: T => Unit
  compute signer: T => Actor
  compute availableFor: FieldAvailability

  compute format: String
  back compute transient: Bool
  back compute extRequired: Bool
  back compute extName: String
  back func jsonMap[J](apply: R => J, unapply: J => R)
  back func jsonMap[J](apply: R => J)
  back compute jsonMap: Mapper[R]
  compute canEditUnit: Bool
}

interface DslViewProps[T, R] extends DslDeclProps[T, R] {
  compute printable: Bool
  compute canInline: Bool
  compute label: String?
}

interface Mapper[From, To] {
  func apply(f: From): To = throw "Apply is not supported"
  func unapply(f: To): From = throw "Unapply is not supported"
}

interface DslFieldProps[T, R] extends DslFieldBaseProps[T, R]

interface DslFieldEnumProps[T, R, E] extends DslFieldBaseProps[T, R] {
  compute from: T => Set[E]?
  compute search: Bool
}
interface DslFieldRefProps[T, R, Ref] extends DslFieldBaseProps[T, R] {
  compute by: Ref => Any
  compute from: T => [Ref]?
  compute init: (T, new: Ref) => Void
  compute remove: (old: Ref) => Future[Void]
  compute addingType: AnyEntity.object
  func available(av: FieldAvailability): AvBuilder[Ref]
  compute deleteCascade: Bool
  compute cleanCascade: Bool
  compute touchCascade: Bool
}

interface DslRegisterFieldProps[T, R, Ref] extends DslFieldRefProps[T, R, Ref] {
  compute autoRecalc: Bool
}

interface AvBuilder[R] {
  func for(av: FieldAvailability) = this
  func with(fields: R => Any) = this
  func available(av: FieldAvailability) = this
  func field[E](field: R => E, builder: AvBuilder[E] => AvBuilder[E]) = this
  func with[E extends R](entity: E.object, fields: E => Any) = this
}

enum FieldAvailability {
  case None
  case Ref
  case List
  case Inline
  case All
  case Overall
}

interface DslComputeProps[T, R]  extends DslFieldBaseProps[T, R]
interface DslComputeRefProps[T, R, Ref]  extends DslFieldBaseProps[T, R] {
  compute from: T => [Ref]?
  compute init: (T, new: Ref) => Void
  compute remove: (old: Ref) => Future[Void]
  compute addingType: AnyEntity.object
  func available(av: FieldAvailability): AvBuilder[Ref]
}
interface DslComputeEnumProps[T, R, E]  extends DslFieldBaseProps[T, R] {
  compute from: T => Set[E]?
  compute search: Bool
}

interface DslCaseProps[T, R] {
  compute icon: String?
  compute label: String?
  compute color: String?
  compute background: String?
}

interface DslAccessEntityProps[T, R] {
  compute read: R => Bool
  compute write: (R,
    old: R? {deprecated(use = "created, deleted, updated and origin(field)")},
    new: R? {deprecated(use = "created, deleted, updated and origin(field)")}) => Bool
}

interface DslMenuItemProps[R] {
  compute label: String
  compute list: R => Layout
}

interface DslStyleProps[T, R] {
  compute css: String
}

enum EditMode {
  case Inherit
  case Inverse
  case AlwaysEdit
  case AlwaysRead
  case AlwaysRefRead
  case Original
}

enum Margin {
  case None
  case NoneInner
  case Default
  case Around
  case LeftRight
  case TopBottom
  case Top
  case Bottom
  case Left
  case Right
}

enum XAlign {
  case Left
  case Center
  case Right
}

enum YAlign {
  case Top
  case Center
  case Bottom
}

interface DslLayoutProps[T, R] {
  compute icon: String
  compute name: String
  compute label: T => String?
  compute singular: T => String?
  compute plural: T => String?
  compute span: Int
  compute rowSpan: Int
  compute editMode: EditMode
  compute flow: Bool
  compute noPageBreak: Bool
  compute pageBreakAfter: Bool

  compute canAdd: Bool
  compute width: Any
  compute height: Any
  front compute visible: (T, ui: ViewContext) => Bool
  compute printable: Bool
  compute frame: Bool
  compute margin: Margin
  compute stretch: Int?
  compute align: XAlign
  compute yAlign: YAlign
  compute color: T => String?
  compute background: T => String?
  compute fontSize: T => Dec[4]?
  compute fontStyle: T => FontStyle
  compute barcode: T => String
  compute border: BorderStyle
  compute maxHeight: Dec[4]
  compute limit: Int
  front compute more: () => Void
  compute syncGroup: String
  compute showEmpty: Bool
  compute noTab: Bool
  compute noLabel: Bool
  compute separateEdit: Bool
  compute miniature: Miniature
  front compute canAction: Bool
  front compute action: R => Future[Void]
  compute spacing: Bool
  compute newEngine: Bool
  compute style: LayoutStyle
}

enum LayoutStyle {
  case Normal
  case LabelPrint
}
enum FontStyle {
  case Normal
  case Strikeout
  case Underline
  case H1
  case H2
  case H3
  case Bold
  case Label
  case Badge
}

enum BorderStyle {
  case None
  case Around
  case Bottom
  case Top
  case Left
  case Right
}

enum Miniature {
  case List
  case Gallery
}

enum DslLayoutLabelsMode {
  case Right
  case Top
  case TopRight
  case Left
  case None
}

interface DslLayoutGridProps[T, R] extends DslLayoutProps[T, R] {
  compute labels: DslLayoutLabelsMode
  compute labelsWidth: Dec[4]

}

interface DslLayoutPanelProps[T, R] extends DslLayoutProps[T, R] {
  compute collapsed: T => Bool
}

interface DslLayoutMenuItemProps[T, R] extends DslLayoutProps[T, R] {
  compute fastSearch: Bool
  compute fastAdd: Bool
}

enum ListMode {
  case Static
  case Action
  case Edit
  case Select
  case EditSelect
}

interface DslLayoutListProps[T, I] extends DslLayoutProps[T, I] {
  compute mode: ListMode
  compute canDelete: Bool
  compute add: AnyRef.object => Future[I]
  compute itemWidth: Dec[8]?
}

enum GraphMode {
  case Line
  case StepLine
}

interface DslLayoutGraphProps[T, I] extends DslLayoutProps[T] {
  compute mode: GraphMode
  compute legend: Bool
}

interface DslLayoutFieldProps[T, R] extends DslLayoutProps[T, R] {
  compute placeholder: String?
  compute canEditUnit: Bool
  compute compact: Bool
  compute showPlus: Bool
  compute title: R => String
}

interface DslLayoutModeProps[T, R] extends DslLayoutProps[T, R] {
}

interface DslLayoutNavProps[T, R] extends DslLayoutProps[T, R] {
  compute canEdit: Bool
  compute canDelete: Bool
  compute showFilters: Bool
  compute showHeader: Bool
  compute fullScreenComments: Bool
  front compute onBarcode: (barcode: String, ui: ViewContext) => Future[Void]
  front compute onNfc: (message: NfcMessage, ui: ViewContext) => Future[Any]
}

enum RowPosition {
  case Head
  case Tail
}

interface DslLayoutRowProps[T, R] extends DslLayoutProps[T, R] {
  compute position: RowPosition
  compute labels: Bool
}

interface DslLayoutXProps[T, R] extends DslLayoutProps[T, R] {
  compute start: R
  compute end: R
}

interface DslLayoutYProps[T, R] extends DslLayoutProps[T, R] {
  compute start: R
  compute end: R
}
