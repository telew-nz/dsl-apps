trait Contact extends RefEntity {
  compute addresseeName: String? = title
  back func realContacts: [Contact]? = [this]
  back func join(entity: Entity): [SubjectObserver]? = {
    strategy.join(this, entity)
  }
  func basicJoin(entity: Entity): SubjectObserver? = {
    if (let o = entity.observers.find(observer == this)) o else SubjectObserver(subject = entity, observer = this).save
  }
  func atMention: Html = '<a href="javascript:;" data-href="#@$(Workspace.current.authId)/$(dslType.fullName)/$id">@$title</a>'
  func strategy: ContactStrategy

  system field subjects: [SubjectObserver]? inline by observer {availableFor = Overall}

  func canSend: Bool = false
  back object func send(activity: Activity, contacts: [this]): Void = {}
}

trait RawContact extends Entity with Contact {
  ref field addresseeName: String?
  func address: String
  func title = "$addresseeName <$address>".trim!
  compute addressee: Addressee? {
    value = null
    init = {
      if (let p = new?.as[Person]) {
        p.name =? addresseeName
      } else if (let c = new?.as[Company]) {
        c.title =? addresseeName
      } else if (let cp = new?.as[CompanyPerson]) {
        cp.person.name =? addresseeName
      }
    }
    update = {
      if (let a = new) {
        back {
          forge(a)
        }
      }
    }
  }
  func strategy: ContactStrategy = Any
  func convertToActorContact: ActorContact
  back func forge(addressee: Addressee): ActorContact = {
    activities.foreach {act =>
      act.entities = act.entities.map(e => if (e == this) addressee.realEntity else e)
    }
    let cc = convertToActorContact
    cc.addressee = addressee
    cc.save
  }
}

trait ActorContact extends PseudoEntity with Contact {
  ref field addressee: Addressee by contacts
  func addresseeName = addressee.title
  func mainEntity = addressee

  func person: Person? = addressee?.addresseePerson
  func company: Actor? = addressee?.addresseeCompany
  func strategy: ContactStrategy = Any
  func address: String
  func title = "$addressee <$address>"
}

trait Addressee extends RefEntity {
  func addresseePerson: Person? = null
  func addresseeCompany: Actor? = null
  func systemContact: Contact? = null
  field contacts: [ActorContact]? inline by addressee
  func collectContacts: [ActorContact]? = contacts
}

trait IEmailContact extends Contact {
  ref field email: Email {
    validate = if (!EmailContact.isAddressValid(email)) "Email format is invalid for $email"
  }
  func address: String = email
  event onSave = {
    email = email.lower.trim!
  }
}
entity EmailContact extends ActorContact with IEmailContact {
  singular = "Email"
  plural = "Emails"

  object func isAddressValid(address: Email?): Bool = {
    address.matches(Regex("^[a-zA-Z0-9.!#\$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*\$"))
  }
  object func filterAddress(address: Email?): Email? = if (EmailContact.isAddressValid(address)) address
  view form = grid(labels = None) {
    addressee
    email
  }
  back object func add(addressee: Addressee, email: Email): IEmailContact = {
    addressee.contacts*.as[IEmailContact].find(a => a.email == email)
      .or(IEmailContact.all.find(a => a.email == email && a.is[RawContact]).map(_.as[RawContact]!.forge(addressee).as[IEmailContact]!))
      .alt(EmailContact(addressee = addressee, email = email).save)
  }
}

trait IPhoneContact extends Contact {
  ref field phone: Phone
  func address: String = phone
}

entity PhoneContact extends ActorContact with IPhoneContact {
  singular = "Phone"
  plural = "Phones"

  view form = grid(labels = None){
    addressee
    phone
  }
  back object func add(addressee: Addressee, phone: Phone): PhoneContact = {
    addressee.contacts*.as[PhoneContact].find(a => a.phone == phone)
      .alt(PhoneContact(addressee = addressee, phone = phone).save)
  }
}

entity WebsiteContact extends ActorContact {
  singular = "Website"
  plural = "Websites"
  ref field url: Url
  func address: String = url
  view form = grid(labels = None){
    addressee
    url
  }
}

enum ContactStrategy(back field join: (contact: Contact, entity: Entity) => [SubjectObserver]?) {
  case Any(join = contact.basicJoin(entity).toSeq)
  case All(join = contact.realContacts*.basicJoin(entity))
}
trait ContactAddressee extends Contact with Addressee {
  object func send(activity: Activity, contacts: [this]): Void = {
    contacts*.join(activity.entities.first)*.notify
  }
  func systemContact: Contact? = this
  func strategy: ContactStrategy = All
}
trait IContactGroup extends Entity with ContactAddressee
entity RoleContactGroup extends IContactGroup {
  ref field role: Role
  func canSend: Bool = true
  ref field strategy: ContactStrategy = All
  back func realContacts: [Contact]? = User.all(role)
  func title: String = "$strategy $role"
  view form = nav(fullScreenComments){grid(labels = Top){
    role
    contacts >> field(frame = false, margin = None)
  }}
}

