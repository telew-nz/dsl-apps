trait SystemService extends Entity with IUser {
  background = "#222"
  field serviceState: SystemServiceState {
    default = Active
    update = {
      if (new == Active) errorsCount = 0
    }
  }
  func roles: [Role]? = [Admin]
  field errorsCount: Int?
  event onSave = {
    if (serviceState == Error && updated(serviceState)) joinAll(Admin)
  }
  func userEnabled = serviceState != Inactive
  system field debug: Bool = false
  back object func apiRoot = "https://ws.flow2b.com/api/v1"
}

enum SystemServiceState {
  case Active {background = "#dea"}
  case Error {background = "#f99"}
  case Inactive {background = "#ddd"}
}

interface SystemJob {
  background = "#222"
  func service: SystemService
  native run(): Void
  back func do: Future[Any]
  back func reportError(error: Any): Future[Bool] = true
}

trait ScheduledJob extends AnyEntity with SystemJob {
  func service: SystemService
  func schedule: String?
  back func do: Future[Any]
}

trait DeferredJob extends AnyEntity with SystemJob {
  func service: SystemService
  func jobDate: Date?
  back func do: Future[Any]
}

object PublicService extends SystemService {
  func title = "Public Service"
  func roles: [Role]? = [Public]
}

trait IApiService extends SystemService {
  const field login: String? {
    default = String.randomKey(32)
    label = "Key"
  }
  const field password: String? {
    transient
    default = String.randomKey(8)
    label = "Secret"
  }
  back func reportError(error: Any): Future[Bool] = false
}

entity ApiService extends IApiService {
  field roles: [Role]?

  field title: String
  field reportErrors: Bool
  object view list = ApiService.all >> nav{list{x{title serviceState}}}
  view form = nav{grid(labels = Top){
    title
    roles
    login >> field(visible = id)
    password >> field(visible = id)
    reportErrors
    serviceState
    errorsCount >> field(editMode = AlwaysRead)
  }}
  back func reportError(error: Any): Future[Bool] = reportErrors
}

interface WorkspaceRouter[D] {
  back func parse(request: IncomingHttpRequest): D
  back func keys(request: IncomingHttpRequest, data: D): [String]?
}
trait WorkspaceEndpoint[D] extends AnyEntity {
  func service: SystemService
  back func keys: [String]?
  back func router: WorkspaceRouter[D]
  back func process(request: IncomingHttpRequest, data: D): Future[Any]
  back func reportError(error: Any): Future[Bool] = true
}

trait Endpoint extends AnyEntity {
  func service: SystemService
  back func process(request: IncomingHttpRequest): Future[Any]
  back func reportError(error: Any): Future[Bool] = true
}

trait OAuth extends AnyEntity {
  func authTmpTokenUrl: Url
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url

  func authConsumerKey: String
  func authConsumerSecret: String

  const system field accessToken: String? {availableFor = Overall}
  const system field accessTokenSecret: String? {availableFor = Overall}

  ref compute authorized: Bool = accessToken
  func authParams: [String -> String]? = null
  system field tmpToken: String?
  front native authorize: Void
  view authorizeView = y {
    button("Authorize Again", visible = authorized) {authorize}
    button("Authorize", visible = !authorized) {authorize}
  }
}

trait OAuth2 extends AnyEntity  {
  func authAuthorizeUrl: Url
  func authTokenExchangeUrl: Url

  func authClientId: String
  func authClientSecret: String
  func authScope: String?

  const system field accessToken: String? {availableFor = Overall}
  ref compute authorized: Bool = accessToken

  func auth(params: [String -> Any]): Void = {
    accessToken = params.apply("access_token")!.as[String]!
  }
  system field tmpToken: String?

  front native authorize: Void
  view authorizeView = y {
    button("Authorize Again", visible = authorized) {authorize}
    button("Authorize", visible = !authorized) {authorize}
  }
}

trait ImportTask extends Entity {
  background = "#222"
  func service: SystemService
  const field state: ImportTaskState = Entered
  const field error: Text? {visible = state == Error}

  view stateView = group {
    state
    error
    button("Process Again", visible = state != Entered) {
      Query(this).foreach{i =>
        i.state = Entered
        i.error = ""
        i.save
        createJob.run()
      }.result
    }
  }
  func createJob: ImportJob
  event onSave = {
    if (!deleted && !service.isCurrent && (created || state == Error)) createJob.run()
  }
}

interface ImportJob extends SystemJob {
  func service: SystemService = task.service
  func task: ImportTask
  final func do: Future[Any] = {
    Activity.current!.entities = [task, service]
    import.map{_ =>
      task.state = Complete
      task.error = ""
      task.save
    }
  }
  final func reportError(error: Any): Future[Bool] = {
    task.state = Error
    task.error = error
    task.save
    false
  }
  back func import: Future[Any]
}

enum ImportTaskState {
  case Entered {background = "#ed9"}
  case Error {background = "#f99"}
  case Complete {color = "white" background = "#090"}
}
