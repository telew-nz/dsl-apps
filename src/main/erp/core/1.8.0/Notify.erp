trait NotifyTemplate[T extends Entity] extends Entity {
  field enabled: Bool = true
  back func required: Bool = true
  //if true, do not run the text through formatters such as Email template
  back func fullFormat: Bool = false
  back func supported: [CommChannel]? {
    default value = CommChannel.all.toSet
  }
  back func preferred: Seq[CommChannel]? = []

  back func to(data: T): [Addressee]?
  back func comment(data: T): Text? = ""
  back func from(data: T, channel: CommChannel): Contact? {
    default value = NotifyService.contacts.find(c => c.channel == channel)
      .or(OurLegalEntity.all*.legalEntity*.contacts.find(c => c.channel == channel).result.get)
  }
  back func subject(data: T, channel: CommChannel): String? {
    default value = data.entitySubject
  }
  back func text(data: T, channel: CommChannel): Text?
}

object NotifyService extends SystemService {
  impl func title = "Notification Service"
  func serviceAccess: [Role]? = [Admin]
  field testMode: Bool
  field contacts: [Contact]? {
    label = "Outgoing contacts"
  }
  impl func ourContacts: [IContact]? = contacts
  impl view form = nav{grid(labels = Top){
     issuesView
     serviceState
     errorsCount >> field(editMode = AlwaysRead)
     contacts
  }}
  view test = nav{grid(labels = Top){
     issuesView
     serviceState
     errorsCount >> field(editMode = AlwaysRead)
     contacts
     testMode
  }}
  impl func login = "notify"
}