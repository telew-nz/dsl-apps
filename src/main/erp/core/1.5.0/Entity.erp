trait AnyEntity extends AnyRef {
  system ref field id: Id?

  object native all: QueryN[this]
  object native allWithDeleted: QueryN[this]
  object native load(id: Id): Query1[this]
  native save: this
  native delete: this
  native touch: this
  native updateRegisters: this
  native forceTouch: this
  native created: Bool
  native updated: Bool
  native dataUpdated: Bool
  native registerUpdated: Bool
  native touched: Bool
  native deleted: Bool
  native keepState[R](f: => Future[R]): Future[R]
  native updateWith(item: AnyEntity, onlyMissing: Bool): Void
  native replace[E extends AnyEntity](item: E): NoInfer[E]
  native convertTo[E extends AnyEntity](e: E.object): NoInfer[E]

  view quick
  object view list
  front event onLoad: Future[Any] = {}
  front event onOpen: Future[Any] {
    deprecated(use = "onLoad")
    value = {}
  }
  back event preDelete: Void = {
  }
  back event onSave: Future[Any] = {
    onSaveOrDelete
  }
  back event onDelete: Future[Any] = {
    onSaveOrDelete
  }
  back event onSaveOrDelete: Future[Any] = {}
  func multiupdate: [AnyEntity]? = []
  back func preComputeItems: [AnyEntity]? = []

  back final func get: Any = this
  back object func get: Any = this.all
  back object final func post(body: this): this = body.save
  back final func patch: this = save
  back func apiUrl: Url = {
    "$(Workspace.current.apiRoot)/$(dslType.fullName)/$id"
  }
  back func apiUrl(function: String): Url = {
    "$apiUrl/$function"
  }

  back func saveBy(key: this => Any): this = {
    if (id) {
      this
    } else {
      let k = key(this)
      if (let old = this.object.all.find(i => i != this && key(i) == k)) {
        old.updateWith(this, onlyMissing = true)
        this.replace(old)
        old
      } else {
        this.save
      }
    }
  }
}

trait NewEngine extends AnyEntity

trait InlineEntity extends AnyEntity
trait RefEntity extends AnyEntity {
  func title: String
  impl func toString: String? = title
  func entityNumbers: [String?]? = []
  func realEntity: Entity
  view ref
  object view refList
  view traitItem
  view refItem
}
trait PseudoEntity extends RefEntity {
  func mainEntity: RefEntity
  impl final func realEntity: Entity = mainEntity.realEntity
  impl func title: String {
    default
    value = mainEntity.title
  }
}

trait Entity extends RefEntity {
  field tickets: [Ticket]? read by items {
    views = []
  }

  view dash

  func itemImage: Image? = null
  func itemRoles: [Role]? = []
  func itemPriority: Priority = default
  func itemOrder: NativeOrd = ("DateDesc", touchedOn.alt(Date.now).desc)
  func itemActiveOrder: NativeOrd = itemOrder

  func entitySubject: String = title
  func mustAddPublicLink = true
  impl final func realEntity: this = this
  const system field activities: [Activity]? inline by entities {availableFor = Overall}
  const system field observers: [SubjectObserver]? inline by subject {availableFor = All}

  const system field touchedOn: Date? = now

  native at(date: Date): this?
  native revisions: [Revision[this]]?
  native revisions[T](field: this => T): [Revision[T]]?
  native convertToPseudo[E extends AnyEntity](e: E.object, mainEntity: RefEntity): NoInfer[E]
  func saveMain: this = {
    Activity.current!.setMainEntity(this)
    save
  }

  func formUrl: Url = "$(System.url)#$(Workspace.current.authId)/$(dslType.fullName)/form/$id"
  back native publicUrl(contact: Contact, readOnly: Bool): Url

  back func joinAll(role: Role): [SubjectObserver]? = {
    User.all(role)*.join(this)
  }

  back object func filterByNumber(number: String?): [Entity]? = if (let number) Entity.all.filter(entityNumbers.exists(n => n =%= number)).result.get
  back object func findReferences(in: String?): [Entity]? = {
    in
       .all(Regex("(((^|[\s(,:])(([A-Za-z]{1,3}[0-9]+[A-Za-z0-9\-\.]{2,})|([0-9\-]{4,})))|(#\s*[A-Za-z0-9\-\.]+))(?=[\s),:;.]|\$)"))
       .flatMap {n =>
          Entity.filterByNumber(n.toString.trim.dropPrefix("#").trim)
        }
  }
  func hasObserverInRole(role: Role): Bool = observers.exists(is(role))
  func hasObserver(observer: User?): Bool = observers.exists(i => i.observer == observer)
  func isForRole(role: Role): Bool = !itemRoles || itemRoles.contains(role)
  func isFor(owner: IUser?, role: Role): Bool =  isForRole(role) && isForUser(owner, role)
  func isForUser(owner: IUser?, role: Role): Bool =  !owner || !splitPerUser(role.fullName) || !owner!.is(role) || hasObserver(owner?.as[User]) || !observers.exists(_.is(role))
  back func _isForUser(owner: IUser?, role: String): Bool =  !owner || !splitPerUser(role) || !owner!._is(role) || hasObserver(owner?.as[User]) || !observers.exists(_._is(role))
  func isFor(owner: IUser?): Bool = {
    !owner?.as[User] ||
    (!itemRoles && (hasObserver(owner?.as[User]) || !observers.exists(observer.is[User]) ) ) ||
    (!itemRoles.intersect(owner?.roles) && (hasObserver(owner?.as[User]) || itemRoles.intersect(owner?.roles).exists(r => !hasObserverInRole(r))))
  }
  func unreadCount(user: User?): Int? = {
    observers.filter(o => o.observer ==? user)*.unreadCount.sum
  }

  func isForCurrent(role: Role): Bool = isFor(IUser.current, role)
  func splitPerUser(role: String): Bool = false

  func mention: Html = '<a href="javascript:;" data-href="#$(Workspace.current.authId)/$(dslType.fullName)/$id">#$fullTitle</a>'

  report Report {
    impl view list = User.load(User.current!.id!).flatMap(subjects.mapOpt(try? subject).filter(touchedOn)).sortBy(touchedOn!.desc)
      >> nav{list(canAdd = false){ref}}
  }

  impl event onLoad = {
    if (let u = User.current) {
      if (observers.exists(badgeUnreadCount(u) && if (let dr = try? observer.as[Dashboard]?.role!) User.current?.is(dr) && !hasObserverInRole(dr) else false)) {
        UI.save {
          u.join(this)
        }
      }
    }
  }
}

class Revision[T] {
  field begin: Date
  field end: Date?
  //field prev: Revision[T]?
  field value: T
  //field next: Revision[T]?
}



interface Report {
  func list: Layout
}
