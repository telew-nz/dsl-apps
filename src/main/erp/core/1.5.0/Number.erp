interface Number extends NativeOrd {
  native abs: this
  native format(width: Int?, scale: Int? = 0): String?
  native unit: Unit?
  native withoutUnit: this {deprecated(use = "noUnit")}
  native noUnit: this
  native unformattedString: String
  native mod(divider: Int): Int?
  native round(mode: RoundMode, scale: Int?): Number?
  native roundInc(mode: RoundMode, inc: Number): Number?
  native floor(scale: Int?): Number? {deprecated(use = "round(floor, scale)")}
  native ceil(scale: Int?): Number? {deprecated(use = "round(ceil, scale)")}
  native roundInc(increment: Number): Number? {deprecated(use = "roundInc(round, scale)")}
  native floorInc(increment: Number): Number? {deprecated(use = "roundInc(floor, scale)")}
  native ceilInc(increment: Number): Number? {deprecated(use = "roundInc(ceil, scale)")}
  object native random: Number?
  native unsigned: UNumber? {deprecated(use = "positive")}
  native positive: UNumber?
  native negative: UNumber?
}
enum RoundMode {
  case round
  case floor
  case ceil
  case down
  case up
  case halfUp
  case halfDown
  case halfEven
}
class Int extends Number
class Dec extends Number
class Qty extends Number
class Money extends Number {
  native unit: Currency?
  native to[R extends Money](date: Date): Future[R]
}
class Percent extends Number
class Int? extends Number
class Dec? extends Number
class Money? extends Number {
  native unit: Currency?
  native to[R extends Money](date: Date): Future[R?]
}
class Percent? extends Number
class Qty? extends Number

enum UnitPosition {
  case Prefix
  case PrefixWithSpace
  case Suffix
  case SuffixWithSpace
}

interface Unit {
  func position: UnitPosition
  func symbol: String
  func pluralSymbol: String = symbol
  func scale: Int?
  func formatLg: Int? = 0
  func convert(dec: Number?): Number? {
    default value = throw "Cannot convert $dec to $symbol"
  }
}

enum Currency(impl field symbol: String, impl field scale: Int?, title: String, impl field position: UnitPosition) extends Unit {
  object func default: Currency = USD
  object func our: Currency = OurActor.ours.first?.actor?.getCurrency.alt(default)

  case USD(symbol = "US\$", scale = 2, title = "US Dollar", position = Prefix) = "US\$"
  case EUR(symbol = "€", scale = 2, title = "Euro", position = Prefix) = "€"
  impl func toString: String? = title
}

object PercentUnit extends Unit {
  impl func position: UnitPosition = Suffix
  impl func symbol: String = "%"
  impl func scale: Int? = 2
  impl func formatLg: Int? = 2
}