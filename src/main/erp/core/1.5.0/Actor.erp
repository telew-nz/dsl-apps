enum Gender {
  case Male {background = "#b5c8ff"}
  case Female {background = "#ffb5d1"}
}

trait Actor extends Entity with Addressee {
  impl var title: String
  func our: OurActor?


  ref field status: TicketStatus = Entered
  const ref field n: Int? = increment(Addressee.gen)
  func number: String

  impl func mustAddPublicLink = false
  ref field currency: Currency? = Currency.our
  field people: [CompanyPerson]? inline by company {singular = "Person"}
  func isTheir: Bool

  func getCurrency: Currency = currency.alt(our)
  func top: Actor
  func isTop: Bool
  func isLegalCompany: Bool = false
  func legalEntities: [LegalEntity]
  func all: [Actor]

  func shortForm: Layout[Actor]
  object func ours: [Actor]? {
    value = OurActor.ours*.actor
    deprecated(use = "OurActor.ours")
  }
  object func our: Actor? {
    value = OurActor.our?.actor
    deprecated(use = "OurActor.our")
  }
  func isOur: Bool {
    value = our
    deprecated(use = "our")
  }
}

trait OurActor extends PseudoEntity {
  func actor: Actor
  object native _ours: [OurActor]?
  object func ours: [OurActor]? = OurActor._ours
  object func our: OurActor? = ours.first?.actor?.top?.our
  func getCurrency: Currency = actor.getCurrency
}

trait LegalEntity extends Actor {
  impl func our: OurLegalEntity?


  ref field group: CompanyGroup? by legalEntities
  impl func top: Actor = group?.as[Actor].alt(this)
  impl func isTop: Bool = !group
  impl func legalEntities: [LegalEntity] = [this]
  impl func all: [Actor] = [this]
}

trait OurLegalEntity extends OurActor {
  impl func actor: Actor = legalEntity
  func legalEntity: LegalEntity
  object func onlyOne: OurLegalEntity? = ours.onlyOne
  override object func ours: [OurLegalEntity]? = OurActor._ours*.as[OurLegalEntity]
}

entity CompanyPerson extends PseudoEntity with Addressee {
  icon = "user"
  impl func mainEntity = person
  ref field company: Actor by people {
    available(Ref).with(contacts)
  }
  ref field person: Person inline by companies {deleteCascade = false}

  impl func addresseePerson: Person? = person
  impl func addresseeCompany: Actor? = company

  impl func systemContact: Contact? = person.user
  field jobTitle: JobTitle? by people
  view shortForm = grid(labels = Top) {
    jobTitle
    extension("preContact")
    contacts >> field(frame = false, label = "Work Contacts", margin = None)
  }
  impl view form = nav{
    grid(labels = Top) {
      person >> inline (label = "", frame = false) {
        companyForm
      }
      company >> field(label = "")
      jobTitle >> field (label = "")
      extension("preContact")
      row {
        contacts >> field(frame = false, label = "Work Contacts", margin = None)
        person >> group{contacts >> field(label = "Personal Contacts", frame = false, margin = None)}
        company >> group{contacts >> field(label = "Company Contacts", frame = false, margin = None)}
      }
    }
  }
  impl func title: String = "$person ($company)"
}

entity JobTitle {
  impl field title: String
  field people: [CompanyPerson]? by jobTitle
  field description: Text?

  impl view form = nav{grid{
    title
    extension
    description
  }}
}