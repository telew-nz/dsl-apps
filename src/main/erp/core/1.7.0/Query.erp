interface Query[T] {
  func foreach(f: T => Void): this
  func update(f: T => Void): this
  func delete: this
  object func apply(value: Any): Query1[Any]
}

interface QueryN[T] extends Query[T] {
  func find(predicate: T => Bool): Query01[T]
  func exists(predicate: T => Bool): Query1[Bool]
  func filter(predicate: T => Bool): QueryN[T]

  func map[R1](f: T => R1): QueryN[R1]
  func flatMap[R1](f: T => [R1]?): QueryN[R1]
  func flatQuery[R1](f: T => QueryN[R1]?): QueryN[R1]
  func streams(next: (T, number: Int, head: T) => T?): QueryN[[T]]
  func weaveBy[I, O extends NativeOrd where T = [I]](by: I => O): QueryN[I] //To join streams

  func groupBy[K](by: T => K): QueryN[(K, items: [T])]
  func aggFuture[I, K, R1 where T = (K, [I])](f: (key: K, [I]) => Future[R1]): QueryN[(K, R1)]
  func agg[I, K, R1 where T = (K, [I])](f: (key: K, [I]) => R1): QueryN[(K, R1)]
  func agg[V](f: [T]? => V): Query1[V]
  func subtotal[I, K, R1 where T = (K, [I])](f: (key: K, [I]) => R1): QueryN[(K, R1, items: [I])]
  func subtotalFuture[I, K, R1 where T = (K, [I])](f: (key: K, [I]) => Future[R1]): QueryN[(K, R1, items: [I])]
  func total[V](f: [T]? => V): QueryN[(V, items: [T]?)]
  func totalFuture[V](f: [T]? => Future[V]): QueryN[(V, items: [T]?)]
  func accum[I, K, R1 where T = (K, [I])](f: (key: K, [I]) => R1): QueryN[(key: I, R1)]
  func accum[V](f: [T] => V): QueryN[(T, V)]
  func sortBy[O extends NativeOrd](by: T => O): QueryN[T]
  func reverse: QueryN[T]
  func distinct: QueryN[T]

  func first: Query01[T]
  func first(size: Int): QueryN[T]
  func drop(size: Int?): QueryN[T]

  func unionFuture(other: Future[[T]?]): QueryN[T]
  func union(other: [T]?): QueryN[T]
  func join[R, O](other: QueryN[R], on: (left: T, right: R) => Bool, map: (left: T, right: R) => O): QueryN[O]
  func leftJoin[R, O](other: QueryN[R], on: (left: T, right: R) => Bool, map: (left: T, right: R?) => O): QueryN[O]
  func rightJoin[R, O](other: QueryN[R], on: (left: T, right: R) => Bool, map: (left: T?, right: R) => O): QueryN[O]
  func fullJoin[R, O](other: QueryN[R], on: (left: T, right: R) => Bool, map: (left: T?, right: R?) => O): QueryN[O]

  func query: QueryN[T]
  func result: Future[[T]?]
}

interface Query01[T] extends Query[T] {
  func query: Query01[T]
  func result: Future[T?]
  func map[R1](f: T => R1): Query01[R1]
  func flatMap[R1](f: T => [R1]?): QueryN[R1]
}
interface Query1[T] extends Query[T] {
  func query: Query1[T]
  func result: Future[T]
  func map[R1](f: T => R1): Query1[R1]
  func flatMap[R1](f: T => [R1]?): QueryN[R1]
}