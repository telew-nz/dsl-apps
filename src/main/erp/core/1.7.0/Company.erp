entity Company extends LegalEntity with ContactAddressee {
  icon = "building"

  impl func numPrefix = "CO"

  impl ref field our: OurCompany? inline by company
  impl field title: String
  field logo: Image?

  impl func addresseeCompany: Actor? = this
  impl func isTheir: Bool = isCurrent || group?.isTheir
  func isCurrent = contacts.exists(isPubCurrent) || people.exists(person.isCurrent)
  impl func canSend = our
  impl func realContacts: [Contact]? = people*.person*.user.distinct
  impl func collectContacts: [ActorContact]? = contacts + people*.contacts + group?.collectContacts

  report Report {
    impl view list = Company.all >> nav{list{grid(labels = None){
      group
      title
    }}}
  }

  impl view form = nav{
    tabs {
      grid(labels = Top, label = "Main"){
        logo >> field(height = 8, label = "")
        x(flow = false){
          title >> field(stretch = 1, fontStyle = H1)
          number >> field(fontStyle = Label)
        }
        group
        currency
        contacts >> field(frame = false, margin = NoneInner)
        people >> field(separateEdit)
        extension("main")
      }
      our!.form
      extension("tabs")
      grid(labels = Top, label = "Other") {
        extension
      }
    }
    extension("buttons")
  }

  impl view shortForm = grid(labels = None) {
    title
    contacts >> field(frame = false)
  }

  back object func add(title: String): Company = {
    Company.all.find(c => c.title =%= title).result.get.alt {
      Company(title = title)
    }
  }
}

entity OurCompany extends OurLegalEntity {
  field company: Company inline by our
  impl func legalEntity = company
  impl func mainEntity = company
  impl view form = grid(labels = Top, label = "Our Company") {
  }
  impl view traitItem = y{
    h3("Company")
    company.title
  }
}

entity CompanyGroup extends Actor with ContactAddressee {
  icon = "monument"
  impl ref field our: OurCompanyGroup? inline by companyGroup{
    validate =
      if (our && legalEntities.exists(!our)) "Our company group can include only our companies"
      else if (!our && legalEntities.exists(our)) "Not our company group cannot include our companies"
  }
  impl func numPrefix = "COG"

  field logo: Image?
  impl field title: String
  impl func addresseeCompany: Actor? = this
  impl func top: Actor = this
  impl func isTop: Bool = true
  impl field legalEntities: [LegalEntity] by group {available(All).for(All)}
  impl func all: [Actor] = this + legalEntities
  impl func isTheir: Bool = isCurrent
  func isCurrent = contacts.exists(isPubCurrent) || people.exists(person.isCurrent)
  impl func collectContacts: [ActorContact]? = contacts + people*.contacts

  impl func canSend = our
  impl func realContacts: [Contact]? = all*.people*.person*.user.distinct

  impl view shortForm = title
  impl view form =  nav{
     tabs {
       grid(labels = Top, label = "Main"){
         logo >> field(height = 8, label = "")
         x(flow = false){
           title >> field(stretch = 1, fontStyle = H1)
           number >> field(fontStyle = Label)
         }
         currency
         contacts >> field (margin = None)
         legalEntities
         people >> field(separateEdit)
         extension("main")
       }
       our!.form
       extension("tabs")
       grid(labels = Top, label = "Other") {
         extension
       }
     }
     extension("buttons")
   }

  report Report {
    impl view list = CompanyGroup.all >> nav{list{grid(labels = None){
      title
    }}}
  }
}

entity OurCompanyGroup extends OurActor {
  field companyGroup: CompanyGroup inline by our
  impl func mainEntity = companyGroup
  impl func actor = companyGroup
  impl view form = grid(labels = Top, label = "Our Company Group") {
  }
  impl view traitItem = y{
    h3("Company Group")
    companyGroup.title
  }
}