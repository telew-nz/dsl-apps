class Id

interface Any {
  object native interface: Dsl
  object native hierarchy: Text
  func toString: String? = ""
  object native subObjects: Set[this.object]?
  object native implObjects: Set[this]?
}
interface AnyRef {
  native fullTitle: String

  native get[T](field: String): T
  native update(field: String, value: Any): this
  native default[R](field: this => R): NoInfer[R]
  native defaultAllFields(): Void
  native clear[R](field: (this) => R): NoInfer[R?]
  native updated(field: (this) => Any): Bool
  native origin[R](field: (this) => R): NoInfer[R]
  native validationErrors: [String]?
  native increment(field: this.object => Int?): Int?
  native silentUpdate[R](field: this => R, value: NoInfer[R]): NoInfer[R]
  native rollback: this

  native json: Json
  native toMap: [String -> Any]?
  native dslType: DslType
  object native dslType: DslType

  view form
}

interface AnyClass extends AnyRef

class Bool extends NativeOrd

class Option[T] {
  object native some[R](value: R): R?
  object native none[R]: R?

  native isEmpty: Bool
  native isDefined: Bool
  native nonEmpty: Bool
  native toSeq: [T]?

  native all(predicate: T => Bool): Bool
  native exists(predicate: T => Bool): Bool
  native filter(predicate: T => Bool): T?
  native map[T1](f: T => T1): T1?
  native flatMap[T1](f: T => T1?): T1?
}

class Future[T] {
  object native apply[T](v: T): Future[T]
  object native failed[T](error: Any): Future[T]
  native map[T1, R where T1 = Future[R]](f: T => T1): T1
  native map[T1](f: T => T1): Future[T1]
  native flatMap[T1](f: T => Future[T1]): Future[T1]
  native get: T
  native recover(f: Any => T?): Future[T]
  native flatRecover(f: Any => Future[T?]): Future[T]
}

interface Tuple
interface Enum extends NativeOrd {
  native number: Int
  native name: String
  native fullName: String
  func code: String {
    default value = name
  }
  object native all: [this]?
  object func withName(name: String?): this? = all.find(e => e.name == name)
  func isFirst: Bool = number == 1
  native isLast: Bool
  func props: DslCaseProps[this, this] = Reflection.props[DslCaseProps[this, this]](this)
}

interface NativeOrd {
  native asc: this
  native desc: this
  native between(a: this, b: this): Bool
  native max(b: this): this
  native min(b: this): this
  native clamp(min: this, max: this): this
}
interface Ord extends NativeOrd {
  func compare(other: this): Int? = {
    if (this == other) 0
    else if (this.more(other)) 1
    else -1
  }
  func more(other: this): Bool
}

object Reflection {
  native object[T](name: String): T.object
  native props[T](of: () => Any): T
}
class DslType {
  field name: String
  field fullName: String
  field singular: String
  field plural: String
  field singularShort: String
  field isObject: Bool
}

inline entity Signature {
  field date: Date
  field image: File? inline
}

trait HasNumber extends RefEntity {
  func number: String
  compute refNum: String? {
    label = "Reference Number"
    value = refNums.first
    update = {
      this.refNums = new.toSeq + refNums.drop(1)
    }
  }
  ref field refNums: [String]? {
    label = "Reference Numbers"
  }
  compute fullNum: String {
    label = "Number"
    value = calcFullNum
  }
  func calcFullNum: String = if (let r = refNum) "$number ($(refNums.join('; ')))" else number
  impl func entityNumbers: [String?]? = [number] + refNums

  func addRefNum(refNum: String?): Void = if (let refNum = refNum.trim) {
    if (!refNums.exists(_ =%= refNum)) {
      refNums = refNums + [refNum]
      save
    }
  }

  impl func searchStr: String {
    default value = "$fullNum $title"
  }
  impl view ref {
    default layout = x(flow = false){fullNum >> field(fontStyle = Label) title >> field(stretch = 1) }
  }
}

trait HasN extends HasNumber {
  ref const field n: Int? = nextN
  func nextN: Int?
  func numPrefix: String
  impl compute number {
    value = numPrefix + n.format(3, 0)
  }
}