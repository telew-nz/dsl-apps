class Layout[I] {
  front native open: Void
  front native print: Void
  native unnav: Layout[I]
  native removeField(field: I => Any): Layout[I]
  native modifiedLayout(prev: () => I): Layout[I]
  native deletedLayout: Layout[I]
  native createdLayout: Layout[I]
}

object UI {
  front native info(message: Text): Void
  front native save[E extends AnyEntity](data: E): Future[NoInfer[E]]
  front native download(file: Query1[File]): Void
  front native openUrl(url: Url): Void
}

class ViewContext {
  native isSelected: Bool
  native edit: Bool
}

object Nfc {
  front native _canWrite: Bool

  front func canWrite: Bool = Workspace.current.hasNfc && _canWrite
}

class NfcMessage(records: [NfcRecord]?) {
  front native write: Void
  func record(tp: String?): NfcRecord? = records.find(is(tp))
}

class NfcRecord(tnf: Int?, recordType: Data?, recordId: Data?, payload: Data?) {
  object func urlPrefixes: [Url] = ["http://www.", "https://www.", "http://", "https://", "tel:", "mailto:", "ftp://anonymous:anonymous@", "ftp://ftp.", "ftps://", "sftp://"]

  object func url(url: Url): NfcRecord = {
    NfcRecord(tnf = 1, recordType = "U".toData, payload = {
      if (let prefix = urlPrefixes.find(url.lower.startsWith(_))) {
        [urlPrefixes.indexOf(prefix)].bytesToData + (url(prefix.length .. ]).toData
      } else {
        [0].bytesToData + url.toData
      }
    })
  }
  object func item(entity: RefEntity): NfcRecord = {
    url(entity.redirectUrl)
  }

  object func androidFlow2bApp: NfcRecord = {
    NfcRecord(tnf = 4, recordType = "android.com:pkg".toData, payload = "com.flow2b".toData)
  }

  func url: Url? = {
    if (tnf == 1 && recordType.toString == "U", let payload) {
      (if (let b = payload.byte(1)) urlPrefixes(b)) + payload.subData(2, payload.bytes + 1).toString.as[Url]
    }
  }
  func item: Future[RefEntity]? = {
    let pref = "https://rd.flow2b.com/r/"
    if (let url where url.startsWith(pref)) {
      let path = url.dropPrefix(pref)
      let i = path.lastIndexOf("/")!
      RefEntity.load((path(i .. ])!).result
    }
  }
  func is(tp: String?): Bool = recordType.toString == tp
}
