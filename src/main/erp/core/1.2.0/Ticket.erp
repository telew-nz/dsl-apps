entity Ticket extends DashboardItem {
  icon = "ticket-alt"
  object field gen: Int?
  list field items: [Entity]? by tickets {label = "Related Items"}
  ref field status: TicketStatus = Entered
  const ref field n: Int? = increment(Ticket.gen)
  func number = "TK" + n.format(3, 0)
  ref field subject: String
  field description: Text?
  ref field roles: [Role]? = {
    if (let roles = items*.itemRoles) roles.toSet
    else if (front) if (let c = Dashboard.current) [c.role]
  }

  func itemRoles = roles
  func activeRoles = if (status.active) if (let roles) roles else observers*.observer*.as[User]*.roles.toSet
  func title = "$number $subject "
  func active = status.active

  view form = nav(fullScreenComments = !description) {
    grid(labels = None) {
      x(flow = false){
        status >> field(editMode = AlwaysEdit, compact)
        subject >> field(stretch = 1, fontStyle = H2)
        number >> field(fontStyle = H3)
      }
      roles
      items
      tickets >> field(singular = "Sub-Ticket")
      description
    }
    extension("nav")
  }
  view ref = x(flow = false){status >> field(editMode = AlwaysEdit) title}
  view quick = grid (labels = None) {
    x(flow = false){status subject >> field(stretch = 1, fontStyle = H2) number >> field(fontStyle = H3)}
    roles >> field(compact)
    description
  }
  func splitPerUser(role: Role): Bool = true
  func entityNumbers = [number]
}

enum TicketStatus(active: Bool) {
  case Entered(active = true) {
    background = "#ed9"
    icon = "play"
  }
  case InProgress(active = true) {
    background = "#8bf"
    icon = "spinner"
  }
  case Closed(active = false) {
    color = "white"
    background = "#090"
    icon = "check-circle"
  }
  case Canceled(active = false) {
    background = "#999"
    icon = "times-circle"
  }
}