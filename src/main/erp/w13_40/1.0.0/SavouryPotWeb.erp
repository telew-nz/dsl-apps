entity SavouryPotSupportedWebSite {
  field supportedDate: Date = now
  ref field website: Url
  field version: SavouryPotVersion
  func title = website
  compute requests = SavouryPotWebRequest.all.filter(r => r.website == website).sortBy(date.desc)
}
extend entity Ticket extends NewEngine
entity SavouryPotWebRequest {
  compute website: Url? {
    value = url.dropPrefixes(["http://", "https://", "www."])[ .. "/")
  } 
  field date: Date = now                                                                             
  field url: Url
  field weight: Int = 1
                                                                              
  func title = url
  object view list = SavouryPotWebRequest.all
      .filter(request => !SavouryPotSupportedWebSite.all.exists(
        website == request.website && supportedDate >= request.date
      ))
      .groupBy(website)
      .agg(weight.sum, urls = url, requestsCount = count, date.min)
      .sortBy(weight.desc, date) >> 
    nav {
      y {
        button("Add") {
          SavouryPotWebRequest().form.open
        }
        list(frame = true, margin = None) {
          grid {
            row {
              website >> field(width = 0.4)
              weight >> field(width = 0.2)
              requestsCount >> field(width = 0.2, label = "Requests")
              date >> field(width = 0.2)
            }
            urls
            button("Done") {
              SavouryPotSupportedWebSite(website = website!).form.open
            }
          }
        }
      }
    }
}
                                                                           
entity SavouryPotVersion {
  func title: String = major + "." + minor + "." + patchNumber
  ref field major: Int = 1
  ref field minor: Int?  
  ref field patchNumber: Int?  {label = "patch"}
  field releaseDate: Date?
  compute websitesString: String? = websites*.website.join(", ")
  field websites: [SavouryPotSupportedWebSite]? read by version
}