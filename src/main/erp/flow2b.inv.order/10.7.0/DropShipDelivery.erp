entity DropShipDelivery extends IPurchaseDelivery with ISalesDelivery with IProdMovePath with FPathDates with HasN with DlvFPathState {
  icon = "truck-moving"
  
  impl func journalDate = dispatchDate
  impl func dlvPrePath = null
  impl func dlvStart: Date = dispatchDate
  impl func dlvEnd: Date = dispatchDate
  impl func dlvPostPath = this
  impl func pathSrc = null
  impl func pathDst = shipTo
  impl func pathState = state
  impl compute dlvState: DlvState {
    value = DlvState.path0(_state)
    update = {_state = new.path0}
  }
  impl func pathCanDo = false
  impl func dlvOrderStates = [InTransit, Complete]
  impl func dlvInTransitDate = dispatchDate
  impl func dlvInProgessDate = dispatchDate
  impl func dlvRetInTransitDate = dispatchDate
  impl func dlvCompleteDate = deliveryDate
  impl func nextN = increment(Order.gen)
  impl func numPrefix = "DD" 
  impl func hasInTransit = true
  impl func store = null
  impl func retStore = null
  impl func needLedgers = state.started
  impl compute itemImage = refItems.photo
  impl func pathItems = items*.as[IOrderDlvItem with IProdMoveItem]
  
  impl func updateRetDeliveryDate(): Future[Date] = throw "Drop ship rent is yet to be implemented"
  
  override func entityNumbers = [number, refNum, trackingNumber]
  override func isInstant = false
 
  impl func orders: [Order] = ((try? purchaseOrders) + (try? salesOrders))!
  list compute vendor = purchaseOrders.first.vendor
  list compute customer = salesOrders.first.customer
  //override func deliverySupplier = supplier?.legalEntity
  //override func deliveryReceiver = receiver?.legalEntity
  impl func legalEntity: OurLegalEntity = salesOrders.first.legalEntity
  impl func title = "$fullNum $(try? receiver?.title)"
  impl func invTitle: String = "$fullNum $(deliveryDate.date)"
  impl func defaultSalesOrders: [SalesOrder]? = [SalesOrder(deliveries = [this], vendor = purchaseOrders.first.customer)]
  impl func defaultPurchaseOrders: [PurchaseOrder]? = [PurchaseOrder(deliveries = [this], customer = salesOrders.first.vendor)]
  impl func updateSupplier(): Void = {
    if (!purchaseOrders.first.id) purchaseOrders.first.vendor = supplier?.as[Vendor]
  }
  impl func updateReceiver(): Void = {
    if (!salesOrders.first.id) salesOrders.first.customer = receiver?.as[Customer]
  }
  impl field shipTo: ILocation? {
    from = Query(receiver?.legalEntity).flatMap(deliveryLocations)
    visible = receiver
  }
  func debtDueDate = deliveryDate
  override func ledgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    if (state.started) {
      let sl <- salesLedgers(this, dispatchDate)
      let pl <- purchaseLedgers(this, dispatchDate)
      sl + pl
    }
  }
  compute refItems {
    availableFor = List
    value = calcRefItems
  }
  
  impl view deliveryHeader = grid(width = 1.2){
    issuesView
    state
    row {supplier, receiver, dispatchDate}
    row {space, shipTo, deliveryDate}
    freightView
    salesOrders
    purchaseOrders
    
    prev >> field(title = title)
    repeat
    next >> field(title = title)
    
    items >> list(editMode = AlwaysRead){form}
  }
  impl view form = nav{grid(width = 1.2, labels = Top) {
    salesOrders
    purchaseOrders
    row {number refNum >> field(noTab) space}
    state
    row {supplier, receiver, dispatchDate}
    row {space, shipTo, deliveryDate}
    freightView
    
    prev >> field(title = title)
    repeat
    next >> field(title = title)
    
    items >> list(editMode = AlwaysRead){form}
  } generalLedgerButton} 
  
  impl view ref = x{title state}
  impl event onSave = {
    orders*.touch
  }
  
  impl object view list = DropShipDelivery.all >> nav{list(canAdd = false){grid(labels = None){
    row{number >> field(width = 0.2) deliveryDate >> field(visible = true, width = 0.3) vendor >> field(width = 0.25) customer >> field(width = 0.25)}
    x{state}
  }}}
}
