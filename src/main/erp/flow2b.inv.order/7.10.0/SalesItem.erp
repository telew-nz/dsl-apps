inline trait ISalesItem extends OrderItem {
  field order: SalesOrder by allItems
  field invoice: SalesInvoice? by allItems {
    default = order.invoices.first
    from = order.invoices
    validate = if (!invoice && order.real) "Invoice should be selected for every item"
    visible = this.order.invoices.count > 1
  }
  func ledgerAccount: LedgerAccount = UnearnedRevenues
  func cashFlow: CashFlowCategory = Sales
  func canBeDeleted = !orderDeliveryItem?.purchase
  func setActive(v: Bool): Void = {
    if (this.active != v) {
      this.active = v
      if (let p = orderDeliveryItem?.purchase) p.active = v
      orderDeliveryItem?.forceTouch
    }
  }
  func revenueLedgers(journal: Journal, date: Date, baseAmount: Money?): [Ledger] = {
    throw "$(this) cannot have revenues"
  }
}
  
inline trait ISalesItemWithDelivery extends ISalesItem {
  func journalDelivery: IDelivery? = delivery
}
 
inline entity SalesItem extends ISalesItemWithDelivery with OrderProductItem {
  field deliveryItem: DeliveryItem inline by sales
    
  singular = "Product"
  
  //Register
  func outStock(product: IProduct, baseQty: Qty): StockRegister? = {
    if (let sd = delivery?.as[SalesDelivery]) {
      StockRegister(
        legalEntity = sd.legalEntity, store = sd.source!, good = product,
        sort = if (sd.status == Planned) 2 else 0, 
        date = sd.dispatchDate, document = sd,
        factualQty = if (sd.status == Planned) 0 else -(baseQty), 
        reservedQty = if (sd.status == Planned) baseQty else 0
      )
    }
  }
  
  func revenueLedgers(journal: Journal, date: Date, baseAmount: Money?): [Ledger] = {
    [LSales(account = Sales, journal = journal, date = date, product = product, 
            location = delivery!.as[SalesDelivery]?.source, qty = qty, 
            counterparty = order.customer?.legalEntity, trAmount = -baseAmount)]
  }
  register invLedgers: [LInventory]? = {
    if (let d = delivery?.as[SalesDelivery]) {
      if (d.status == Delivered && product.isTangible && active) {
        product.tangibleProductQtys(qty).map{i =>
          LInventory(journal = delivery!, product = i.product, qty = i.qty, 
                     isDebit = false, contraAccount = CostOfGoodsSold)
        }
      } else null
    } else null
  }
    
  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor >> field(align = Right)
        amountEditor  >> field(align = Right)
    }
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
  
  view form = grid(margin = None, width = 1.2, labels = Top) {
    row (labels = false){
      deliveryItem.product >> field(width = 0.6) 
      deliveryItem.qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right) 
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      deliveryItem.stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || deliveryItem.isUnavailable) 
      space(width = 0.2) 
      gstEditor  >> field(visible = ui.isSelected && order.legalEntity.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
    invoice >> field(visible = ui.isSelected && this.order.invoices.count > 1)
    deliveryItem.availableView >> field(visible = ui.isSelected && active && (delivery?.is[SalesDelivery] || !delivery), label = "")
    accessories >> list(visible = ui.isSelected && delivery?.status ?== Planned) {
      x {_ add("Add") {
        let item = SalesItem(order = order, invoice = invoice, 
                             deliveryItem = DeliveryItem(product = _, delivery = deliveryItem.delivery, qty = deliveryItem.qty.as[Qty[_.unit]]!) 
                            )
        item.deliveryItem.updateAmount()
      }}
    }
  }
  
}

