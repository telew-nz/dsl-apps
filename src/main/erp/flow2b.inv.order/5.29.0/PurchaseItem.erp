inline trait IPurchaseItem extends OrderItem {
  field order: PurchaseOrder by allItems
  field invoice: PurchaseInvoice? by allItems {
    default = order.invoices.first
    from = order.invoices
    isValid = invoice || !order.real
    visible = this.order.invoices.count > 1
  } 
  func ledgerAccount: LedgerAccount = PrepaidExpenses
  func cashFlow: CashFlowCategory = Purchases
}

inline trait IPurchaseItemWithDelivery extends IPurchaseItem {
  register ledgers: [Ledger]? <- if (let d = delivery) {
    if (d.status != Delivered || !active) Future.apply([]) else {
      let baseCurrency = d.legalEntity.getCurrency
      let baseAmount <- amount.to[Money[baseCurrency]](d.deliveryDate)
      let baseDiscount <- discount.to[Money[baseCurrency]](d.deliveryDate)

      let debt = LDebt(account = PrepaidExpenses, origin = d, journal = d, 
               counterparty = order.vendor, trAmount = -amount + discount, currency = currency)
      let disc = if (let d = baseDiscount) {
        LCounterparty(account = DiscountsReceived, journal = delivery!, counterparty = order.customer, trAmount = -d)
      }
      let exp = if (let a = baseAmount) expenseLedger(a)
      CurrencyTrading.with([debt] + disc + exp)
     }
  } else Future.apply([])
     
  func expenseLedger(baseAmount: Money): Ledger = throw "$(this) cannot have expenses"
}

inline trait IPurchaseProductItem extends IPurchaseItemWithDelivery with OrderProductItem {
  //Register
  func expenseLedger(baseAmount: Money): Ledger = {
    let d = delivery!
    if (!d.is[PurchaseDelivery]) LProduct(account = CostOfGoodsSold, journal = d, product = product, qty = qty, trAmount = baseAmount)
    else if (product.isTangible) LInventory(journal = d, product = product, qty = qty, trAmount = baseAmount, isDebit = true)
    else LProduct(account = PurchaseExpenses, journal = d, product = product, qty = qty, trAmount = baseAmount)
  }
  
  register stock = {
    if (delivery?.status == Canceled || !active) null
    else if (let pd = delivery?.as[PurchaseDelivery]) {
      if (product.isTangible) StockRegister(
        legalEntity = pd.receiver, store = pd.destination!, good = product,
        sort = if (pd.status == Delivered) 0 else 1, 
        date = pd.deliveryDate, document = pd,
        factualQty = if (pd.status == Delivered) baseQty else 0, 
        expectedQty = if (pd.status == Delivered) 0 else baseQty
      ) else null
    } else null
  } 
}

inline entity PurchaseItem extends IPurchaseProductItem {
  singular = "Product"
  field deliveryItem: DeliveryItem inline by purchase
  
  view form = grid(width = 1.2, margin = None) {
    row {
      deliveryItem.product >> field(label = "", width = 0.55) 
      deliveryItem.qty >> field(canEditUnit = true, width = 0.2) 
      priceEditor >> field(width = 0.2) 
      amountEditor >> field(width = 0.25)
    }
    read {
      space(width = 0.95) 
      discountEditor >> field(width = 0.25)
    }
    deliveryItem.delivery >> field(visible = this.order.deliveries.count > 1)
    invoice
    edit {
      panel(collapsed = !discount, label = "More", frame = false, margin = None) {
        grid(width = 1.2, margin = Bottom) {
          row{gstEditor >> field(width = 0.2) discountEditor >> field(width = 0.25) space(width = 0.75)}
        }
      }
    }
  }
  
  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor 
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
}
