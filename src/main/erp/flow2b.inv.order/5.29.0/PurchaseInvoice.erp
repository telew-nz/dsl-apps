entity PurchaseInvoice extends Invoice with IPurchaseInvoice {
  background = "#d68400"
    
  field primary: Bool
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
  field orders: [PurchaseOrder] by invoices
  field allItems: [IPurchaseItem]? inline by invoice {deleteCascade = false}
  compute items: [IPurchaseItem]? {
    value = allItems.filter(active)
    update = {
      allItems = new + allItems.filter(!active)
    }
  }
  ref compute number: String {
    value = manualNumber.alt(if (primary) "PI" + orders.first.nakedN else "PI" + n)
    update = {manualNumber = new}
  }
  
  ref compute counterparty: LegalEntity = order.vendor
  ref compute legalEntity = order.customer
  func title = "$number $(try? counterparty?.title)"
    
  func onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    orders*.touch
    debits*.debit*.touch
    processRevision()
  }
  
  view invoiceHeader = grid(width = 1.2){
    statusesView
    row {total  date paymentTerms}
    row {gstAmount dueDate  space}
    row {totalWithoutGst  space space}
    debits >> field(label = "Payments", singular = "Payment")
    revisionsView
  }
  view form = nav{grid(width = 1.2, labels = Top) {
      row{number vendor customer}
      invoiceHeader
      orders
      items >> list(editMode = AlwaysRead){form}  
    }
    invoiceButtons
  } 
  object view list = PurchaseInvoice.all >> nav{list{grid(labels = None) {
    row{number, date.as[Date[day]]!, vendor, total}
    statusesView
  }}}
  
}
