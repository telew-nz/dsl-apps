trait Order {
  background = "#a73e6c"
  field referenceNumber: String?
  func orderCustomer: LegalEntity?
  func orderVendor: LegalEntity?
  object field gen: Int?
  const ref field n: Int? = increment(Order.gen)
  ref field currency: Currency {
    default = Currency.our
  }
  func pricesIncludingGst = legalEntity.pricesIncludingGst
  func legalEntity: LegalEntity
  ref compute deliveryOverdueState: DeliveryOverdueState {
    value = {
      if (status == Canceled) NoDeliveryOverdue
      else if (deliveries.exists(overdueState == DeliveryOverdue)) DeliveryOverdue
      else NoDeliveryOverdue
    } 
    visible = deliveryOverdueState == DeliveryOverdue
  }
   ref compute paymentOverdueState: PaymentOverdueState {
    value = {
      if (status == Canceled) NoPaymentOverdue
      else if (invoices.exists(overdueState == PaymentOverdue)) PaymentOverdue
      else NoPaymentOverdue
    } 
    visible = paymentOverdueState == PaymentOverdue
  }
  func preEntered: Bool
  ref compute invoiceIssueState: InvoiceIssueState {
    value = {
      if (invoices.all(issueState == InvoiceNotIssued)) InvoiceNotIssued
      else if (invoices.exists(issueState != InvoiceIssued)) InvoiceModified
      else InvoiceIssued
    }
    visible = invoiceIssueState != InvoiceIssued
  }
  field manualNumber: String?
  ref field status: OrderStatus = Active
  field date: Date = now
  func canceled = status == Canceled
  func deliveries: [Delivery]?
  func invoices: [Invoice]?
  func real: Bool = status == Active
  func nakedN: String = manualNumber.alt(n.format(3, 0)!)
  func allItems: [OrderItem]?
  func items: [OrderItem]?
  
  event onSave = {
    deliveries*.touch
    invoices*.touch
  }
  ref compute state: OrderState {
    value = {
      if (status == Canceled) Canceled
      else if (status == Quote) Quote
      else if (complete) Complete
      else Processing
    }
    update = {
      this.status = new.status
      if (new == Quote) {
        if (!items) {
          deliveries*.delete()
          invoices*.delete()
        }
        items*.quoteSwitch(false)
      } else if (old == Quote && new == Processing) {
        if (!deliveries) default(deliveries)
        if (!invoices) default(invoices)
        setDefaultDelivery()
        setDefaultInvoice()
        items*.quoteSwitch(true)
      } 
    }
    from = [OrderState.Quote, if (complete) OrderState.Complete else OrderState.Processing, OrderState.Canceled]
  }
  func complete = allItems && items.all(complete) && !invoices.exists(overpaid)
  func active: Bool = state != Complete && state != Canceled
  compute gstAmount: Money[currency]? = items*.gstAmount.sum
  compute totalWithoutGst: Money[currency]? = items*.orderAmount.sum
  ref stored compute total: Money[currency]? = totalWithoutGst + gstAmount
  
  ref stored compute deliveryState: OrderDeliveryState {
    value = {
      if (status != Active || !deliveries) NotDelivered
      else if (deliveries.all(status == Delivered)) Delivered
      else if (deliveries.exists(status == Delivered)) PartiallyDelivered
      else if (deliveries.exists(status == InTransit)) InTransit
      else Planned
    }
    visible = state == Processing
    update = {
      if (new != deliveryState) {
        deliveries.foreach{d => d.status = if (new == OrderDeliveryState.Planned) DeliveryStatus.Planned else DeliveryStatus.Delivered}
      }
    }
    from = [OrderDeliveryState.Planned, OrderDeliveryState.Delivered].toSet + deliveryState
  }
  
  ref stored compute paymentState: PaymentState {
    value = {
      if (invoices.exists(overpaid)) Overpaid
      else if (!total || items.all(paid)) Paid
      else if (items.exists(paidAmount > 0)) PartiallyPaid
      else Unpaid
    }
    visible = state == Processing
  } 
  
  ref compute dropShipState: DropShipState {
    value = {
      if (deliveries.exists(_.is[DropShipDelivery])) {
        if (deliveries.all(_.is[DropShipDelivery])) DropShip
        else PartialDropShip
      } else NotDropShip
    }
  	visible = dropShipState != NotDropShip
  }
    
  func orderDate = date
  func journalDate = date
  func orderCurrency = currency
  func orderTotal = total
  func orderPaidAmount = items*.orderPaidAmount.sum
    
  func setDefaultDelivery(): Void = {
    if (let d = deliveries.last) this.items*.orderDeliveryItem.filter(!delivery).foreach(delivery = d)
  }
  func setDefaultInvoice(): Void = {
    if (let d = invoices.last) this.items.filter(!invoice).foreach(invoice = d)
  }
}

