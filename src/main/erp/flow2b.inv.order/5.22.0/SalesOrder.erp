entity SalesOrder extends Order with ISalesOrder {
  background = "#a73e6c"
  func hasSalesIssues = {
    status != Canceled 
    && (availability.isIssue || deliveryOverdueState == DeliveryOverdue || invoices.exists(hasSalesIssues))
  }
  field deliveries: [ISalesDelivery]? inline by salesOrders {
    default = [SalesDelivery(primary = true, salesOrders = [this])]
    visible = preEntered
    isValid = deliveries || !real
    from = ISalesDelivery.all.filter(customer == this.customer)
    update = {
      setDefaultDelivery()
    }
  }
  field invoices: [SalesInvoice]? inline by orders {
    default = [SalesInvoice(primary = true, orders = [this])]
    visible = preEntered
    isValid = invoices || !real
    from = SalesInvoice.all.filter(order.customer == this.customer)
    update = {
      setDefaultInvoice()
    }
  }
  ref field vendor: LegalEntity {
    default =? LegalEntity.ours.onlyOne
    available(All).for(All).with(priceModels)
    from = LegalEntity.ours
  }
  ref field customer: LegalEntity by salesOrders {
    update = {
      this.currency = customer.currency.alt(vendor.getCurrency)
      if (deliveries) deliveries.first!.receiver = customer
      customerSelected()
    }
  }
  func isTheir = customer.isTheir
  field items: [ISalesItem]? inline by order {visible = preEntered}
  ref compute availability: GoodAvailability {
    value = {
      if (status == Canceled) Available
      else if (deliveries.exists(status == Planned && _.availability == Unavailable)) Unavailable
      else if (deliveries.exists(status == Planned && _.availability == AvailableLater)) AvailableLater
      else Available
    }
	visible = availability.isIssue
  }
  
  compute preEntered = (try? vendor)
  ref compute number: String {
    value = manualNumber.alt("SO" + n)
    update = {manualNumber = new}
  }
  func title = "$number $customer"
  func legalEntity: LegalEntity = vendor
  
  //Views
  view form = nav{tabs {
      grid(labels = Top, width = 1.2, label = "Main"){    
        row{number total >> field(canEditUnit = true) date}
        statusesView
        row{customer   vendor  space }
        formExt
        
        extension
        items >> list{form}
      }
      grid(labels = Top, width = 1.2, label = "Deliveries"){  
        deliveries >> list{nav{inline{deliveryHeader.removeField(salesOrders)}}}
        extension("deliveries")
      }
      grid(labels = Top, width = 1.2, label = "Invoices"){  
        invoices >> list{nav{inline{invoiceHeader}}}
        extension("invoices")
      }
      extension("tabs")
    }
    button("Update Prices") {updatePrices()}
  }
  
  view statusesView = x {
    state
    paymentState >> field(visible = state == Processing) 
    paymentOverdueState
    deliveryState >> field(visible = state == Processing)
    deliveryOverdueState
    availability
    dropShipState
  }
  
  report Report {
    field superProduct: ISuperProduct?
    field product: IProduct?
    field customer: LegalEntity? {auto = true}
    field withIssues: Bool
    field salesPerson: Person? {
      from = Person.all.filter(is(Salesperson))
    }
    
    view list = SalesOrder.all.filter(
      (!withIssues || hasSalesIssues) && isFor(salesPerson, Salesperson)
      && ((!this.product && !this.superProduct) || items*.as[OrderProductItem].exists(product ==? this.product && product.superProduct ==? this.superProduct))
    ) 
      >> nav{list{grid(labels = None) {
        row{number, date.as[Date[day]]!, customer, total}
        statusesView
      }}}
  }
  
  object view widget = SalesOrder.all.filter(hasSalesIssues && isForCurrent(Salesperson)).sortBy(date) 
    >> nav(label = "Sales", limit = 5, more = SalesOrder.Report(withIssues = true, salesPerson = Person.current).list.open) {
       list {}
       button("Stock") {StockReport().list.open}
       extension("Stock")
       button("Customers") {Actor.list.open}
       add("Person") {Person().form.open} 
       add("Company") {Company().form.open}
       button("Product Sales") {ProductSalesReport().list.open}
       extension("Button")
    }
  view ref = x{title total statusesView}
}