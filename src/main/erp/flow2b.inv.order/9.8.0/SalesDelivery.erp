trait ISalesDelivery extends Delivery {
  background = "#2e8e67"
  impl func deliverySupplier = supplier?.legalEntity
  impl func deliveryReceiver = getReceiver?.legalEntity
  func supplier: IVendor?
  field receiver: ICustomer? {
    update = updateReceiver()
  }
  ref compute getReceiver: ICustomer? {
    label = "Receiver"
    value = receiver.or(customer)
    update = {
      this.receiver = if (new == customer) null else new
    }
  }
  func isTheir = customer?.isTheir
  field salesOrders: [SalesOrder] by deliveries {
    available(All)
    default =? defaultSalesOrders
  }
  func shipTo: ILocation? = null
  func deliveryHeader: Layout
    
  func defaultSalesOrders: [SalesOrder]? = []
  func updateReceiver(): Void = {}
  func availability: GoodAvailability = Available
  impl func ledgers(journal: Journal, date: Date): Future[[Ledger]?] = salesLedgers(journal, date)
} 

entity SalesDelivery extends ISalesDelivery with IOutgoingDelivery with RoutePath {
  icon = "truck"
  background = "#2e8e67"
  field primary: Bool
  field stockType: StockType = Inventory
  impl func stockTypeSrc = stockType
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
  impl func deliverySrc: IStore? = source
  impl func vendor = legalEntity
  ref field source: IStore? {
    default = onlyOne
    validate = if (!source && items.exists(storeRequired)) "Source field in delivery $(this) is required"
    /*update = {
      if (let c = source?.as[ISalesChannel]) {
        salesOrders.foreach {so =>
          if (!so.salesChannel) so.salesChannel = c
        }
      }
    }*/
  }
  override func canDispatch = deliveryStatus == Planned && availability == Available && orders.all(canDispatch)

  impl field shipTo: ILocation? {
    from = Query(getReceiver?.legalEntity).flatMap(deliveryLocations)
    visible = getReceiver
  }
  compute shipToText {
    availableFor = List
    value = shipTo?.locationAddress?.title
  }
  override func pathSrc = source
  impl func pathDst = shipTo
  func debtDueDate = deliveryDate
  
  impl func hasInTransit: Bool = shipTo

  impl ref compute number: String {
    value = manualNumber.alt(if (primary) "SD" + orders.first.nakedN else "SD" + n.format(3, 0))
    update = {manualNumber = new}
  }
  impl func entityNumbers = [number, trackingNumber.replace(" ", "")]
  impl func orders: [Order] = salesOrders
  impl list compute supplier = order.orderVendor
  impl compute customer = order.orderCustomer
    
  impl func legalEntity = order.legalEntity
  impl func title = "$number $(try? getReceiver?.title)"
  
  impl view deliveryHeader = grid(width = 1.2){
    issuesView
    statusesView
    row {getReceiver, source, dispatchDate}
    row {shipTo, space,  deliveryDate}
    row {space, space, dueDate}
    stockType >> field(visible = ui.edit || stockType != Inventory)
    freightView
    possibleDispatchPeriods >> list(frame = false){ 
      x {
        start
        label("—")
        if (end == Date.max) "∞" else end
        button("Set") {
          this.dispatchDate = start
          this.save()
        }
      }
    }
    items >> list(editMode = AlwaysRead, mode = EditSelect){form.unnav}
  }
  
  impl view form = nav{grid(width = 1.2, labels = Top) {
      salesOrders
      number    
      deliveryHeader
    }
    generalLedgerButton
  } 
  
  impl view ref = y {
    x{title dispatchDate}
    statusesView
  }
  impl view dash = grid(labels = None) {
    row {
      y {
        dispatchDate
        title
        statusesView
      }
      shipToText
    }
    refItems
  }
  impl event onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    salesOrders*.touch
    if (salesOrders.all(canceled)) status = Canceled
  }
  
  view statusesView = x{status >> field(editMode = AlwaysEdit) availability >> field(visible = availability.isIssue) dispatchState}
  
  impl object view list = SalesDelivery.all >> nav{list(canAdd = false){grid(labels = None){row{
    itemImage >> field(miniature = List, width = 0.15)
    dash >> field(width = 0.85)
  }}}}
}
