inline trait ISalesItem extends OrderItem {
  impl field order: SalesOrder by allItems
  
  impl func ledgerAccount: LedgerAccount = UnearnedRevenues
  impl func cashFlow: CashFlow = Sales
  impl func canBeDeleted = if (let p = orderDeliveryItem?.purchase) !p.active else true
  override func setActive(v: Bool): Void = {
    if (this.active != v) {
      this.active = v
      if (let p = orderDeliveryItem?.purchase) p.active = v
      orderDeliveryItem?.forceTouch
    }
  }
  func revenueLedgers(journal: Journal, date: Date, baseAmount: UMoney?): [Ledger]?
}
   
inline trait ISalesItemWithDelivery extends ISalesItem {
  func journalDelivery: IDelivery? = delivery
  func deliveryItem: IOrderDeliveryItem
  func delivery: Delivery = deliveryItem.delivery
  impl func itemDelivery = deliveryItem.delivery
}
 
inline entity SalesItem extends ISalesItemWithDelivery with OrderProductItem with HasProductItems {
  icon = "box"
  impl field deliveryItem: DeliveryItem inline by sales
  singular = "Item"
 
  //Register
  func stockProd = product
  func itemsQty = qty
  impl func needProductItems: Bool = delivery?.status?.started
  impl func revenueLedgers(journal: Journal, date: Date, baseAmount: UMoney?) = {
    let rt = product.revenueType
    [LSales(journal = journal, date = date, product = product, revenueType = rt,
            location = delivery.as[SalesDelivery]?.source, unit = product.unit, qty = baseQty, 
            counterparty = order.customer?.legalEntity, trAmount = -baseAmount)]
  }
  register invLedgers: [LInvBase]? = {
    if (let d = delivery?.as[SalesDelivery]) {
      if (d.status == Delivered && product.isTangible && active) {
        ProductItem.flatMap(product, qty, productItems) {
          product.tangibleProductQtys(trQty).map{i =>
            d.stockType.obj.new(
              journal = d, product = i.product, productItem = item, qty = -i.qty,
              salesAmount = amountNoGst - discountNoGst, contraAccount = CostOfGoodsSold)
          }
        }
      }
    }
  }
  compute productBaseCost: ProductCost? {
    availableFor = Inline
    value = {
      if (let pi = deliveryItem?.purchase) {
        ProductCost(date = pi.order.date, cost = pi.total(withGst = !order.legalEntity.hasGst).positive)
      } else if (product.isTangible) {
        if (let invs = try? invLedgers!) {
          ProductCost(date = invs.first.date, cost = (-invs*.amount.sum).positive)
        } else if (let pc = product.productCost) {
          ProductCost(date = pc.date, cost = pc.cost*qty)
        }
      }
    }
  }
  compute productCost: Future[ProductCost?] {
    availableFor = Inline
    value = {
      if (let pc = productBaseCost) {
        let pc1: ProductCost <- pc.to(currency, order.date)
        pc1
      } else {
        Future(null)
      }
    }
  }
  compute approxCost = delivery?.status != Delivered
  compute costDate: Date? = productBaseCost?.date
  compute cost: Future[UMoney[currency]?] {
    dynamicLabel = if (approxCost) "Approx Cost" else "Cost"
    value = {
      let pc <- productCost
      if (pricesIncludingGst) pc?.cost*(1.0000 + gstRate.alt(0)) else pc?.cost
    }
  }
  compute margin: Future[Percent[2]?] {
    value = {
      let cost <- this.cost
      if (let t = total(order.legalEntity.hasGst), let pc = cost) {
        (t - pc).as[Percent[2]]/t
      }
    }
    update = {
      let cost <- this.cost
      if (let c = cost, let mm = (1.0000 - new.get).positive) {
        amountEditor = c/mm
        discountEditor = 0
      }
    }
  }
    
  impl view rowView = group {
    row{
      deliveryItem.product >> field(rowSpan = 2, placeholder = "")
      deliveryItem.qty >> field(canEditUnit = true) 
      priceEditor >> field(align = Right)
      amountEditor >> field(align = Right)
    }
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
    row(visible = invoiceDesc) {
      invoiceDesc >> field(span = 4)
    }
  }
  
  impl view form = grid(margin = None, width = 1.2, labels = Top) {
    row (labels = false){
      deliveryItem.product >> field(width = 0.6, placeholder = "Product, Service or Kit") 
      deliveryItem.qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right) 
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      deliveryItem.stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || deliveryItem.isUnavailable) 
      space(width = 0.2)
      gstEditor  >> field(visible = ui.isSelected && order.legalEntity.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    row {
      itemDesc >> field(width = 1.0, visible = ui.isSelected || desc)
      total >> field(visible = ui.isSelected && discount, width = 0.2, align = Right)
    }
    row {
      space(width = 0.4)
      costDate >> field(fontStyle = Label, align = Right, label = "", width = 0.4, visible = ui.isSelected && !IUser.current.isPublic && productBaseCost && approxCost)
      margin >> field(width = 0.2, visible = ui.isSelected && !IUser.current.isPublic && productBaseCost, align = Right) 
      cost >> field(width = 0.2, visible = ui.isSelected && !IUser.current.isPublic && productBaseCost, align = Right) 
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
    deliveryItem.availableView >> field(visible = ui.isSelected && active && (delivery.is[SalesDelivery]), label = "")
    accessories >> list(visible = ui.isSelected && delivery?.status ?== Planned) {
      x {_ add("Add") {
        let item = SalesItem(order = order,
                             deliveryItem = DeliveryItem(product = _, delivery = deliveryItem.delivery, qty = deliveryItem.qty.as[UQty[_.unit]]!) 
                            )
        item.deliveryItem.updateAmount()
      }}
    }

    deliveryItem.productItems >> field(visible = ui.isSelected && product.trackItems)
  }
  
}

