inline trait OrderItem extends IAmountItem with IOrderItem {
  var order: Order
  field desc: Text? {label = "Description"}
  func inTransit: Bool = itemDelivery?.status == InTransit
  func paid: Bool = order.paid
  func complete = delivered && paid
  func currency = order.orderCurrency 
  func pricesIncludingGst = order.pricesIncludingGst 
  func orderAmountNoGst = amountNoGst - discountNoGst
  func orderAmountWithGst = amountWithGst - discountWithGst
  func invoiceAmountNoGst = amountNoGst - discountNoGst
  func invoiceAmountWithGst = amountWithGst - discountWithGst
  func orderDeliveryItem: IOrderDeliveryItem?
  func itemDelivery: Delivery?
  func canceled = order.canceled
  func needsRevision: Bool = updated(sAmount) || updated(gstRate) || updated(desc)
  func quoteSwitch(quote: Bool): Void = {}  
  func considerGst: Bool = order.legalEntity.hasGst
  func orderDiscount: Money? = 0
  event onSave = {
    if (registerUpdated) {
      order.updateRegisters
    }
  }
  func invoiceDesc = desc
  func name: String
  func fullDesc: Text = if (let d = desc) "$name\n$d" else name
}

inline trait OrderProductItem extends OrderItem with IAmountQtyItem {
  func orderDeliveryItem: IOrderDeliveryItem? = deliveryItem
  func deliveryItem: IDeliveryProductItem
  func product = deliveryItem.product
  func baseQty = deliveryItem.baseQty
  func defaultGstRate = product.gstRate(order.orderVendor)
  func qty = deliveryItem.qty
  func invoiceQty: Qty? = qty
  func unit = deliveryItem.unit
  func needsRevision: Bool = {
    deliveryItem.needsRevision || updated(sAmount) || updated(gstRate) || updated(desc)
  }
  func invoiceDesc = itemDesc
  func name: String = product.title
  func fullDesc: Text = if (let d = itemDesc) "$name\n$d" else name
  compute itemDesc: Text? {
    label = "Description"
    value = desc.or(product.invoiceDesc)
    update = {
      this.desc = if (new != product.invoiceDesc) new
    }
  }
  compute accessories: [ISubProduct]? = {
    product.superProduct.crossSells*.products.filter(p => !order.items*.as[OrderProductItem]*.product*.superProduct.contains(p))*.subProducts
  }
}
