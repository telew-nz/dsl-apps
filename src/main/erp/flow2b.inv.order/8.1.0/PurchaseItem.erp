inline trait IPurchaseItem extends OrderItem {
  field order: PurchaseOrder by allItems
  field invoice: PurchaseInvoice? by allItems {
    default = order.invoices.first
    from = order.invoices
    validate = if (!invoice && order.real) "Invoice should be selected for every item"
    visible = this.order.invoices.count > 1
  } 
  func ledgerAccount: LedgerAccount = PrepaidExpenses
  func cashFlow: CashFlowCategory = Purchases
  func canBeDeleted = if (let p = orderDeliveryItem?.sales) !p.active else true
  func setActive(v: Bool): Void = {
    if (this.active != v) {
      this.active = v
      if (let p = orderDeliveryItem?.sales) p.active = v
      orderDeliveryItem?.forceTouch
    }
  }
  func expenseLedgers(journal: Journal, date: Date, baseAmount: Money?): [Ledger]?
}

inline trait IPurchaseItemWithDelivery extends IPurchaseItem {
}
 
inline trait IPurchaseProductItem extends IPurchaseItemWithDelivery with OrderProductItem {
  //Register
  func expenseLedgers(journal: Journal, date: Date, baseAmount: Money?) = {
    let d = delivery!
    if (!d.is[PurchaseDelivery]) {
      [LProduct(account = CostOfGoodsSold, journal = journal, date = date, product = product, qty = qty, trAmount = baseAmount)]
    } else if (product.isTangible) {
      ProductItem.distribute(product, qty, baseAmount, deliveryItem.productItems) {
        d.as[PurchaseDelivery]!.stockType.obj.new(
           journal = journal, date = date, product = product.as[IProduct]!, 
           productItem = item, 
           qty = trQty, trAmount = trAmount)
      }
    } else {
      [LProduct(account = PurchaseExpenses, journal = journal, date = date, product = product, qty = qty, trAmount = baseAmount)]
    }
  }
}

inline entity PurchaseItem extends IPurchaseProductItem with HasProductItemsInline {
  singular = "Product"
  field deliveryItem: DeliveryItem inline by purchase
  func stockProd = product
  func itemsQty = qty
  func needProductItems: Bool = delivery?.status == Delivered
  view form = grid(margin = None, width = 1.2, labels = Top) {
    row (labels = false){
      deliveryItem.product >> field(width = 0.6) 
      deliveryItem.qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right) 
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      space(width = 0.8) 
      gstEditor  >> field(visible = ui.isSelected && order.vendor?.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
    invoice >> field(visible = ui.isSelected && this.order.invoices.count > 1)
    snView >> field(visible = ui.isSelected && product.trackItems)
  }
  
  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor 
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
  
  register quoteInv: LInventory? = if (deliveryItem.delivery?.status != Delivered && amountNoGst && product.isTangible) {
    if (let p = deliveryItem.product.as[IProduct]) {
      LInventory(journal = deliveryItem.delivery?.as[Journal].alt(order), qty = qty, product = p, isQuote = true,
                 trAmount = if (order.legalEntity.hasGst) amountNoGst else amountWithGst)
    }
  }
}
