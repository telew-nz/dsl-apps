trait IncomeItem extends OrderItem with IOrderDeliveryItem with IncomeRecodable {
  func orderDeliveryItem: IOrderDeliveryItem? = this
  func deliveryItem = this
  
  func name: String = income.title
  field nonTaxable: UPercent? {
    default = (try? income)?.nonTaxable
    validate = if (0 > taxable || taxable > 1.00_PercentUnit) "Taxable percentage should be between 0% and 100%"
  }
  func recode(): Void = {
    this.gstRate = if (let p = order.orderVendor) if (order.legalEntity.hasGst) income.gstRate(p)
    this.nonTaxable = income.nonTaxable
    this.save
  }
  
  compute taxable: UPercent? {
    label = "Taxable Percentage"
    value = (1.00_PercentUnit - nonTaxable).as[UPercent]
    update = {
      nonTaxable = (1.00_PercentUnit - new).as[UPercent]
    }
  }
}

inline entity ExpenseItem extends IPurchaseItemWithDelivery with IncomeItem {
  singular = "Expense"
  icon = "book"
  
  func itemDelivery = delivery
  func purchase: IPurchaseItem? = this
  func sales: ISalesItem? = null
  
  field expense: ExpenseType {
    update = {
      recode()
    }
  }
  func income = expense
  func cashFlow: CashFlow = Expenses
  
  view form = grid(margin = None, width = 1.2, labels = Top) {
    row {
      expense >> field(width = 0.6) 
      taxable >> field(showEmpty width = 0.4, align = Right)
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      desc >> field(width = 0.8, visible = ui.isSelected || desc)
      gstEditor  >> field(visible = ui.isSelected && order.as[PurchaseOrder]!.vendor?.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
  }
  
  view rowView = group {
    row{expense >> field(rowSpan = 2)
        space
        space
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
    row(visible = invoiceDesc) {invoiceDesc >> field(span = 4)}
  }
  func expenseLedgers(journal: Journal, date: Date, baseAmount: Money?) = {
    [LExpenses(journal = journal, date = date, trAmount = baseAmount, expenseType = expense, taxable = taxable)]
  }
}

inline entity RevenueItem extends ISalesItemWithDelivery with IncomeItem {
  singular = "Revenue"
  icon = "book"
  
  func itemDelivery = delivery
  func purchase: IPurchaseItem? = null
  func sales: ISalesItem? = this
  
  field revenue: RevenueType {
    update = {
      recode()
    }
  }
  func income = revenue
  func cashFlow: CashFlow = Sales
  
  view form = grid(margin = None, width = 1.2, labels = Top) {
    row {
      revenue >> field(width = 0.6) 
      taxable >> field(showEmpty width = 0.4, align = Right)
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      desc >> field(width = 0.8, visible = ui.isSelected || desc)
      gstEditor  >> field(visible = ui.isSelected && order.as[SalesOrder]!.vendor?.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
  }
  
  view rowView = group {
    row{revenue >> field(rowSpan = 2)
        space
        space
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
    row(visible = invoiceDesc) {invoiceDesc >> field(span = 4)}
  }
  func revenueLedgers(journal: Journal, date: Date, baseAmount: Money?) = {
    [LSales(account = Sales, journal = journal, date = date, trAmount = -baseAmount, revenueType = revenue, taxable = taxable)]
  }
}