inline trait IPurchaseItem extends OrderItem {
  field order: PurchaseOrder by allItems
  field invoice: PurchaseInvoice? by allItems {
    default = order.invoices.first
    from = order.invoices
    validate = if (!invoice && order.real) "Invoice should be selected for every item"
    visible = this.order.invoices.count > 1
  } 
  func ledgerAccount: LedgerAccount = PrepaidExpenses
  func cashFlow: CashFlowCategory = Purchases
  func canBeDeleted = !orderDeliveryItem?.sales
  func setActive(v: Bool): Void = {
    active = v
    if (let s = orderDeliveryItem?.sales) s.active = v
  }
}

inline trait IPurchaseItemWithDelivery extends IPurchaseItem {
  
  register ledgers: [Ledger]? <- if (let d = delivery) {
    if (d.status != Delivered || !active) Future.apply([]) else {
      let baseCurrency = d.legalEntity.getCurrency
      let baseAmount <- amount.to[Money[baseCurrency]](d.deliveryDate)
      let baseDiscount <- discount.to[Money[baseCurrency]](d.deliveryDate)

      let debt = LDebt(account = PrepaidExpenses, origin = d, journal = d, 
        counterparty = order.vendor, trAmount = -amount + discount, currency = currency)
      let disc = if (let d = baseDiscount) {
        LCounterparty(account = DiscountsReceived, journal = delivery!, counterparty = order.customer, trAmount = -d)
      }
      let exp = if (let a = baseAmount) expenseLedger(a)
      CurrencyTrading.with([debt] + disc + exp)
    }
  } else Future([])
     
  func expenseLedger(baseAmount: Money): Ledger = throw "$(this) cannot have expenses"
}
 
inline trait IPurchaseProductItem extends IPurchaseItemWithDelivery with OrderProductItem {
  //Register
  func expenseLedger(baseAmount: Money): Ledger = {
    let d = delivery!
    if (!d.is[PurchaseDelivery]) LProduct(account = CostOfGoodsSold, journal = delivery!, product = product, qty = qty, trAmount = baseAmount)
    else if (product.isTangible) LInventory(journal = delivery!, product = product.as[IProduct]!, qty = qty, trAmount = baseAmount, isDebit = true)
    else LProduct(account = PurchaseExpenses, journal = delivery!, product = product, qty = qty, trAmount = baseAmount)
  }
  
  func inStock(product: IProduct, baseQty: Qty): StockRegister? = {
    if (let pd = delivery?.as[PurchaseDelivery]) {
      StockRegister(
          legalEntity = pd.legalEntity, store = pd.destination!, good = product,
          sort = if (pd.status == Delivered) 0 else 1, 
          date = pd.deliveryDate, document = pd,
          factualQty = if (pd.status == Delivered) baseQty else 0, 
          expectedQty = if (pd.status == Delivered) 0 else baseQty
      )
    }
  }
}

inline entity PurchaseItem extends IPurchaseProductItem {
  singular = "Product"
  field deliveryItem: DeliveryItem inline by purchase
  
  view form = grid(margin = None, width = 1.2, labels = Top) {
    row (labels = false){
      deliveryItem.product >> field(width = 0.6) 
      deliveryItem.qty >> field(canEditUnit = true, width = 0.2) 
      priceEditor >> field(width = 0.2) 
      amountEditor >> field(width = 0.2)
    }
    row {
      space(width = 0.8) 
      gstEditor  >> field(visible = ui.isSelected, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2)
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
    invoice >> field(visible = ui.isSelected && this.order.invoices.count > 1)
  }
  
  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor 
        amountEditor}
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
}
