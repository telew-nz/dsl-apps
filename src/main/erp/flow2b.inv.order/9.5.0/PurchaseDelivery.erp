trait IPurchaseDelivery extends Delivery {
  background = "#2e8e67"
  func deliverySupplier = getSupplier?.legalEntity
  field supplier: IVendor? {
    update = updateSupplier()
  }
  ref compute getSupplier: IVendor? {
    label = "Supplier"
    value = supplier.or(vendor)
    update = {
      this.supplier = if (new == vendor) null else new
    }
  }
  field purchaseOrders: [PurchaseOrder] by deliveries {
    available(All)
    default =? defaultPurchaseOrders
  }
  func deliveryHeader: Layout
    
  func defaultPurchaseOrders: [PurchaseOrder]? = []
  func updateSupplier(): Void = {}
  func ledgers(journal: Journal, date: Date): Future[[Ledger]?] = purchaseLedgers(journal, date)
}

entity PurchaseDelivery extends IPurchaseDelivery with IIncomingDelivery with RoutePath {
  icon = "truck"
  background = "#2e8e67"
  field primary: Bool
  field stockType: StockType = Inventory
  func stockTypeDst = stockType
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
  func deliveryDst: IStore? = destination
  func pathSrc = pickUpLocation
  func customer = legalEntity
  ref field destination: IStore? {
    default = onlyOne
    validate = if (!destination && items.exists(storeRequired)) "Destination field in delivery $(this) is required"
  }
  field pickUpLocation: ILocation? {
    from = Query(getSupplier?.legalEntity).flatMap(deliveryLocations)
    visible = getSupplier
  }
  compute pickUpText {
    availableFor = List
    value = pickUpLocation?.locationAddress?.title
  }
  func debtDueDate = deliveryDate
  
  ref compute number: String {
    value = manualNumber.alt(if (primary) "PD" + orders.first.nakedN else "PD" + n.format(3, 0))
    update = {manualNumber = new}
  }
  func entityNumbers = [number, trackingNumber.replace(" ", "")]
  func orders: [Order] = purchaseOrders
  compute vendor = order.orderVendor
     
  func deliveryReceiver = order.legalEntity.legalEntity
  func legalEntity = order.legalEntity
  func title = "$number $(try? getSupplier?.title)"

  view deliveryHeader = grid(width = 1.2){
    issuesView
    statusesView
    row {getSupplier, destination, dispatchDate}
    row {pickUpLocation, space,  deliveryDate}   
    stockType >> field(visible = ui.edit || stockType != Inventory)
    freightView
    items >> list(editMode = AlwaysRead, mode = EditSelect){form.unnav}
  }
  
  view form = nav{grid(width = 1.2, labels = Top) {
    
    purchaseOrders
    number
    deliveryHeader    
  } generalLedgerButton } 
  
  view ref = y {
    x{title deliveryDate}
    statusesView
  }
  view dash = grid(labels = None) {
    row {
      y {
        deliveryDate
        title
        statusesView
      }
      pickUpText
    }
    refItems
  }
  
  event onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    purchaseOrders*.touch
    if (purchaseOrders.all(canceled)) status = Canceled
  }
  
  view statusesView = x{status >> field(editMode = AlwaysEdit)}
  
  object view list = PurchaseDelivery.all >> nav{list(canAdd = false){grid(labels = None){row{
    itemImage >> field(miniature = List, width = 0.15)
    dash >> field(width = 0.85)
  }}}}
}