trait Delivery extends IDeliveryPath with DebtOrigin {
  background = "#2e8e67"
  field manualNumber: String?
  func number: String
  func defaultDate: Date = if (order.created) order.date else Date.now
  func order: Order = orders.first
  func orders: [Order]
  func vendor: IVendor?
  func customer: ICustomer?
  field allItems: [IOrderDeliveryItem]? inline by delivery {deleteCascade = false}
  compute items: [IOrderDeliveryItem]? {
    value = allItems.filter(active)
    update = { 
      allItems = new + allItems.filter(!active)
    }
  } 
  func journalDate = deliveryDate
  func store: Store? = null
    
  func dueDate(orders: [Order], policy: IDeliveryPolicy?): Date? = {
    if (status == Delivered || status == Canceled || !policy) null
    else if (let invoices = items*.sales*.invoice.distinct) {
      let canDispatch = invoices.map(canDispatch)
      if (canDispatch.contains(false)) null
      else if (let p = policy, let orderItems = orders*.items) {
        if (let d = p.dueDate(orderItems, this, invoices.map(prepaymentDate!).max)) d.max(dispatchDate)
        else dispatchDate
      } 
      else if (status == Planned) dispatchDate 
      else deliveryDate
    }
    else null
  }
  func canCancel = false
  register ledgers: [Ledger]? <- if (status == Delivered && !isInstant) {
    let ls <- ledgers(this, deliveryDate)
    CurrencyTrading.with(ls)
  }
  compute isInstant = orders.onlyOne?.isInstant
  func ledgers(journal: Journal, date: Date): Future[[Ledger]?]
  
  func salesLedgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    let baseCurrency = legalEntity.getCurrency
      
    let lss <- items*.sales.map{p =>
      let baseAmount <- p.invoiceAmount(noGst = legalEntity.hasGst).to[Money[baseCurrency]](date)
      let baseDiscount <- p.orderDiscount.to[Money[baseCurrency]](date)
      (p, baseAmount, baseDiscount)
    }.allCompleted
    lss.groupBy(p.currency, p.invoice?.payer, p.order.customer).toSeq.flatMap{c =>
      let items = c.#3
      let amount = items*.p*.invoiceAmount(noGst = legalEntity.hasGst).sum
      let baseDiscount = items*.baseDiscount.sum
      
      let debt = if(!isInstant) if (let p = c.payer) {
        LDebt(account = UnearnedRevenues, origin = this, journal = journal, date = date, 
              counterparty = p.legalEntity, trAmount = amount, currency = c.currency, manLink = true)
      }
      let disc = if (let dis = baseDiscount) {
        LCounterparty(account = DiscountsProvided, journal = journal, date = date, 
                      counterparty = c.customer?.legalEntity, trAmount = dis)
      } 
      let ls = items.flatMap(p.revenueLedgers(journal, date, _.baseAmount))
      debt.toSeq + disc + ls
    }
  }
  
  func purchaseLedgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    let baseCurrency = legalEntity.getCurrency
      
    let lss <- items*.purchase.map{p =>
      let baseAmount <- p.invoiceAmount(noGst = legalEntity.hasGst).to[Money[baseCurrency]](date)
      let baseDiscount <- p.orderDiscount.to[Money[baseCurrency]](date)
      (p, isTangible = p.as[PurchaseItem]?.product?.isTangible, baseAmount, baseDiscount)
    }.allCompleted
    var tangibleItems = lss.filter(isTangible)
    let intagibleItems = lss.filter(!isTangible)
    let tan = tangibleItems && intagibleItems
    if (tan) {
      if (let intagibleAmount = intagibleItems.map(baseAmount - baseDiscount).sum) {
        tangibleItems = tangibleItems.distribute(intagibleAmount, by = baseAmount).map{
          (p, isTangible, baseAmount = baseAmount + value, baseDiscount)
        }
      }
    }
    (tangibleItems + intagibleItems).groupBy(p.currency, p.invoice?.payee, p.order.vendor).toSeq.flatMap{c =>
      let items = c.#3
      let amount = items*.p*.invoiceAmount(noGst = legalEntity.hasGst).sum
      let baseDiscount = if (!tan) items*.baseDiscount.sum
      
      let debt = if(!isInstant) if (let p = c.payee) {
        LDebt(account = PrepaidExpenses, origin = this, journal = journal, date = date, 
              counterparty = p.legalEntity, trAmount = -amount, currency = c.currency, manLink = true)
      }
      let disc = if (let dis = baseDiscount) {
        LCounterparty(account = DiscountsReceived, journal = journal, date = date, 
                      counterparty = c.vendor?.legalEntity, trAmount = -dis)
      } 
      let ls = items.filter(!tan || isTangible).flatMap(p.expenseLedgers(journal, date, baseAmount))
      debt.toSeq + disc + ls
    }
  }
}

