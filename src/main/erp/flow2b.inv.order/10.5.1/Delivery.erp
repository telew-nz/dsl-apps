trait OrderDlv extends IOrderDlv with Journal with DashboardItem with HasNumber {
  background = "#2e8e67"
  
  func store: IStore?
  func retStore: IStore?
  impl func orders: [Order]
  func needLedgers: Bool
  impl func dlvItems = allItems
  func stockType: StockInvType = Inventory
  
  field allItems: [IOrderDlvItem]? inline by delivery {deleteCascade = false}
  compute items: [IOrderDlvItem]? {
    value = allItems.filter(active)
    update = { 
      allItems = new + allItems.filter(!_.active)
    }
  } 
  
  back func ledgers(journal: Journal, date: Date): Future[[Ledger]?]
  
  back func isInstant = orders.onlyOne?.isInstant
  compute canceled: Bool = orders.all(canceled)
  compute planned: Bool = orders.all(canceled || state != Quote || getTerms.reserveQuote)
  func dispatchShDate = ScheduleDate(date = dlvInTransitDate, schedule = store?.schedule.alt(Schedule24))
  func completeShDate = ScheduleDate(date = dlvCompleteDate, schedule = retStore?.schedule.alt(Schedule24))

  func updateRetDeliveryDate(): Future[Date]
  
  func calcRetDeliveryDate: Future[Date] = {
    guard (let prods = items*.as[IDlvProgressItem].map(product, order.orderVendor!, dur)) else return {
      dlvInTransitDate
    }

    back {
      prods
        .mapOpt(i => if (let pm = i.orderVendor.priceModelRent(i.product)) (pm, i.dur))
        .distinct
        .map{
          pm.rentRetDate(dispatchShDate, completeShDate.schedule, dur)
        }
        .min
        .alt(PriceModelNone.rentRetDate(dispatchShDate, completeShDate.schedule, prods*.dur.max))
    }
  }
  
  func updateDurs(): Future[Void] = {
    items*.as[IDlvProgressItem].oneByOne(updateDur())
  }
  
  register ledgers: [Ledger]? <- back {
    if (!isInstant && needLedgers) {
      let ls <- ledgers(this, journalDate)
      CurrencyTrading.with(ls)
    }
  }
  
  final func calcRefItems = RefProductItems.create(items*.as[IDlvProductItem].sortBy(sales?.amount.or(purchase?.amount).desc).map(RefProductQty(product = product, qty = qty)))
  
  back func salesLedgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    let baseCurrency = legalEntity.getCurrency
      
    let lss <- items*.sales.map{p =>
      let baseAmount <- p.invoiceAmount(noGst = legalEntity.hasGst).to[UMoney[baseCurrency]](date)
      let baseDiscount <- p.orderDiscount.to[Money[baseCurrency]](date)
      (p, baseAmount, baseDiscount)
    }.allCompleted
    lss.groupBy(p.currency, p.order.payer, p.order.customer).toSeq.flatMap{c =>
      let items = c.#3
      let amount = items*.p*.invoiceAmount(noGst = legalEntity.hasGst).sum
      let baseDiscount = items*.baseDiscount.sum
      
      let debt = if(!isInstant) if (let p = c.payer) {
        LDeliveryDebt(account = UnearnedRevenues, origin = this, journal = journal, date = date, 
              counterparty = p.legalEntity, trAmount = amount, currency = c.currency)
      }
      let disc = if (let dis = baseDiscount) {
        LSales(journal = journal, date = date, 
               counterparty = c.customer?.legalEntity, trAmount = dis)
      } 
      let ls = items.flatMap(p.revenueLedgers(journal, date, _.baseAmount))
      debt.toSeq + disc + ls
    }
  }
  
  back func purchaseLedgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    let baseCurrency = legalEntity.getCurrency
      
    let lss <- items*.purchase.map{p =>
      let baseAmount <- p.invoiceAmount(noGst = legalEntity.hasGst).to[UMoney[baseCurrency]](date)
      let baseDiscount <- p.orderDiscount.to[UMoney[baseCurrency]](date)
      (p, isTangible = p.as[PurchaseItem]?.product?.isTangible, baseAmount, baseDiscount)
    }.allCompleted
    var tangibleItems = lss.filter(isTangible)
    let intagibleItems = lss.filter(!isTangible)
    let tan = tangibleItems && intagibleItems
    if (tan) {
      if (let intagibleAmount = intagibleItems.map(baseAmount - baseDiscount).sum) {
        tangibleItems = tangibleItems.distribute(intagibleAmount, by = baseAmount).map{
          (p, isTangible, baseAmount = baseAmount + value, baseDiscount)
        }
      }
    }
    (tangibleItems + intagibleItems).groupBy(p.currency, p.order.payee, p.order.vendor).toSeq.flatMap{c =>
      let items = c.#3
      let amount = items*.p*.invoiceAmount(noGst = legalEntity.hasGst).sum
      let baseDiscount = if (!tan) items*.baseDiscount.sum
      
      let debt = if(!isInstant) if (let p = c.payee) {
        LDeliveryDebt(account = PrepaidExpenses, origin = this, journal = journal, date = date, 
              counterparty = p.legalEntity, trAmount = -amount, currency = c.currency)
      }
      let disc = if (let dis = baseDiscount) {
        LSales(journal = journal, date = date, unit = Item, 
               counterparty = c.vendor?.legalEntity, trAmount = -dis)
      } 
      let ls = items.filter(!tan || isTangible).flatMap(p.expenseLedgers(journal, date, baseAmount))
      debt.toSeq + disc + ls
    }
  }
  
  func order: Order = orders.first
  
  /*field manualNumber: String?
  override func defaultDate: Date = if (order.created) order.date else Date.now
  
  override func priorityDate = order.date
  
  func debtCurrency: Currency = order.currency
  
  impl func canCancel = false
  impl func journalDate = deliveryDate
  func store: Store? = null
     
  back func isInstant = orders.onlyOne?.isInstant
  back func ledgers(journal: Journal, date: Date): Future[[Ledger]?]  
  */
}

trait DlvFPathState extends OrderDlv {
  field _state: PathState {
    default = Planned
  }
  
  ref compute state: PathState {
    value = {
      if (canceled) Canceled 
      else if (_state == Planned) if (planned) Planned else Draft
      else {
        _state
      }
    }
    from = {
      if (canceled) [Canceled] 
      else {
        ((if (planned) [PathState.Planned, PathState.Complete]
        else [PathState.Draft, PathState.Complete]) 
        + 
        (if (hasInTransit) [PathState.InTransit])).toSet
      }
    }
    update = {
      if (!canceled) {
        _state = if (new == Draft) Planned else new
        pathStateUpdated(origin(_state))
      }
    }
  }
  func hasInTransit: Bool
  func pathStateUpdated(old: PathState): Void = {
  }
}

trait DlvFState extends OrderDlv {
  impl compute dlvState {
    value = _state
    update = {
      state = new
    }
  }
  
  field _state: DlvState {
    default = Planned
  }
  
  ref compute state: DlvState {
    value = {
      if (canceled) Canceled 
      else if (_state == Planned) if (planned) Planned else Draft
      else {
        _state
      }
    }
    from = {
      if (canceled) [Canceled] 
      else dlvStates
    }
    update = {
      if (!canceled) {
        _state = if (new == Draft) Planned else new
        stateUpdated(origin(_state))
      }
    }
  }
  func dlvStates: [DlvState] = {
      (if (planned) [DlvState.Planned, DlvState.Complete]
       else [DlvState.Draft, DlvState.Complete]) 
    + (if (hasDispatch) [DlvState.InTransit])
    + (if (hasProgress) [DlvState.InProgress])
    + (if (hasReturn) [DlvState.RetInTransit])
  }.toSet
  
  impl func dlvOrderStates = dlvStates*.order.filter(_ != ToDispatch)!.toSet
  func hasDispatch: Bool
  func hasProgress: Bool
  func hasReturn: Bool
  func stateUpdated(old: DlvState): Void = {
  }
}
