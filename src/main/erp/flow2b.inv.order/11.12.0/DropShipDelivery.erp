entity DropShipDelivery extends IPurchaseDelivery with ISalesDelivery with HasN {
  icon = "truck-moving"
  
  impl func dlvLocOwners = (salesOrders*.customer*.legalEntity + receiver.toSeq).distinct
  impl func counterparty: LegalEntity? = receiver?.legalEntity
  
  impl func nextN = increment(Order.gen)
  impl func numPrefix = "DD" 
  impl func store = null
  impl func retStore = null
  impl func needLedgers = state.started
  impl compute itemImage = refItems.photo
  override func isInstant = false
 
  impl func orders: [Order] = ((try? purchaseOrders) + (try? salesOrders))!
  list compute vendor = purchaseOrders.first.vendor
  //override func deliverySupplier = supplier?.legalEntity
  //override func deliveryReceiver = receiver?.legalEntity
  impl func legalEntity: OurLegalEntity = salesOrders.first.legalEntity
  impl func title = "$fullNum $(try? receiver?.title)"
  impl func defaultSalesOrders: [SalesOrder]? = [SalesOrder(deliveries = [this], vendor = purchaseOrders.first.customer)]
  impl func defaultPurchaseOrders: [PurchaseOrder]? = [PurchaseOrder(deliveries = [this], customer = salesOrders.first.vendor)]
  impl func updateSupplier(): Void = {
    if (!purchaseOrders.first.id) purchaseOrders.first.vendor = supplier?.makeVendor
  }
  impl func updateReceiver(): Void = {
    if (!salesOrders.first.id) salesOrders.first.customer = receiver?.makeCustomer
  }
  impl field shipTo: ILocation? {
    from = Query(receiver?.legalEntity).flatMap(deliveryLocations)
    visible = receiver
  }
  func debtDueDate = start
  override func ledgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    if (state.started) {
      let sl <- salesLedgers(this, start)
      let pl <- purchaseLedgers(this, start)
      sl + pl
    }
  }
  compute refItems {
    availableFor = List
    value = calcRefItems
  }
  impl field shipping: DDShipping? inline by dlv 
  impl field retShipping: DDRetShipping? inline by dlv {
    label = "Return Shipping"
    visible = hasProgress
  }
  
  impl back func doRepeat: Future[OrderDlv?] = {
    let s = state
    guard (let r = repeat where r.next <? end && (s == InProgress || s == Complete)) else return null
    
    _state = Complete
    save
    
    let d = r.nextEnd
    
    let so = salesOrders.first.copy( 
      date = now
      accepted = now
      deliveries = [this.copy(
        _state = if (s == InProgress) InProgress else Planned,
        prev = this, next = null,
        start = r.next, 
        shipping = null,
        repeat = if (!hasProgress || d <? end) r.copy(next = d),
        allItems = [],
        purchaseOrders = [purchaseOrders.first.copy(
          date = now
          accepted = now
          invoices = []
          allItems = []
          payments = []
        )]
      )],
      payments = []
      invoices = []
      allItems = []
    ).save
    let dd = so.deliveries.first.as[DropShipDelivery]!
    let po = dd.purchaseOrders.first
    
    items.filter(!this.hasProgress || _.is[IDlvProgressItem]).foreach{i =>
      i.sales?.as[ISalesItemWithDelivery]?.doRepeatDD(so, po, dd)
    }
    let _ <- dd.updateDurs()
    dd
  }
  
  impl view deliveryHeader = grid(width = 1.2){
    issuesView
    state
    row {supplier, receiver, start}
    row {space, space retDateEditor}
    salesOrders
    purchaseOrders
    
    shipping
    retShipping
    
    prev >> field(title = title)
    repeat
    next >> field(title = title)
    
    items >> list(editMode = AlwaysRead){form}
  }
  impl view form = nav{grid(width = 1.2, labels = Top) {
    salesOrders
    purchaseOrders
    row {number refNum >> field(noTab) space}
    state
    row {supplier, receiver, start}
    shipping
    retShipping
    
    prev >> field(title = title)
    repeat
    next >> field(title = title)
    
    items >> list(editMode = AlwaysRead){form}
  } generalLedgerButton} 
  
  impl view ref = x{title state}
  impl event onSave = {
    orders*.touch
  }
  
  impl object view list = DropShipDelivery.all >> nav{list(canAdd = false){grid(labels = None){
    row{number >> field(width = 0.2) start >> field(visible = true, width = 0.3) vendor >> field(width = 0.25) customer >> field(width = 0.25)}
    x{state}
  }}}
}

trait IDDShipping extends IShipping {
  impl func dlv: DropShipDelivery
  impl func pathItems = dlv.items*.as[IOrderDlvItem with IProdMoveItem]
  impl func pathSrc = src
  impl func pathDst = dst
  
  field src: ILocation? {
    label = "From"
    from = Query(dlv.supplier?.legalEntity).flatMap(deliveryLocations)
    init = {
      new.as[IActorLocation]?.actor = dlv.supplier?.legalEntity
    }
  }
  
  field dst: ILocation? {
    label = "To"
    from = Query(dlv.receiver?.legalEntity).flatMap(deliveryLocations)
    init = {
      new.as[IActorLocation]?.actor = dlv.receiver?.legalEntity
    }
  }
  
  impl view form = grid(width = 1.2) {
    row {src dst start}
    freightView
  }
}

entity DDShipping extends IDDShipping {
  impl field dlv: DropShipDelivery by shipping

  impl func startAttached = true 
  impl compute dlvDate = dlv.start
  impl func pathState = dlv.state.path0
}

entity DDRetShipping extends IDDShipping {
  impl field dlv: DropShipDelivery by retShipping
  impl func startAttached = false
  impl compute dlvDate = dlv.dlvEnd
  impl func pathState = dlv.state.path1
}
