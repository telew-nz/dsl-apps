trait ISalesDelivery extends OrderDlv {
  background = "#2e8e67"
  //impl func deliverySupplier = supplier?.legalEntity
  //impl func deliveryReceiver = getReceiver?.legalEntity
  
  //func supplier: IVendor?
  
  field _receiver: ICustomer? {
    update = updateReceiver()
  }
  ref compute receiver: ICustomer? {
    value = _receiver.or(order.orderCustomer)
    update = {
      this._receiver = if (new == order.orderCustomer) null else new
    }
  }
  //func isTheir = customer?.isTheir
  field salesOrders: [SalesOrder] by deliveries {
    available(All)
    default =? defaultSalesOrders
  }
  func shipTo: ILocation? = null
  func deliveryHeader: Layout
    
  func defaultSalesOrders: [SalesOrder]? = []
  func updateReceiver(): Void = {}
  func availability: GoodAvailability = Available
  impl func ledgers(journal: Journal, date: Date): Future[[Ledger]?] = salesLedgers(journal, date)
} 
 
entity SalesDelivery extends ISalesDelivery with IProdMoveOut with IProdMoveIn with DlvFState {
  icon = "truck"
  background = "#2e8e67"
  
  impl func hasDispatch = shipping
  impl func hasProgress = items.exists(_.is[IDlvProgressItem])
  impl func hasReturn = hasProgress && retShipping
  impl func isProdMoveIn = hasProgress
  
  impl func journalDate = dispatchDate
  impl func dlvPrePath = shipping
  impl func dlvStart = dispatchDate
  impl func dlvEnd = if (hasProgress) retDeliveryDate else dispatchDate
  impl func dlvPostPath = retShipping
  impl func dlvDispatchDate = dispatchDate
  impl func dlvInProgessDate = shipping?.deliveryDate.alt(dispatchDate)
  impl func dlvReturningDate = {
    if (hasProgress) retShipping?.dispatchDate.alt(retDeliveryDate)
    else dlvInProgessDate
  }
  impl func dlvCompleteDate = if (hasProgress) retDeliveryDate else dlvInProgessDate
  
  override func moveItems = items*.as[IOrderDlvItem with IProdMoveItem] 
  
  impl func moveOutDate = dispatchDate
  impl func moveOutState = state.move0
  impl func moveOutLE = legalEntity
  impl func moveOutStore = store!
  impl func moveOutItems = items*.as[IOrderDlvItem with IProdMoveItemOut]
  
  impl func moveInDate = retDeliveryDate
  impl func moveInState = state.move0
  impl func moveInLE = legalEntity
  impl func moveInStore = retStore!
  impl func moveInItems = items*.as[IOrderDlvItem with IProdMoveItemIn]
  
  
  impl ref compute number: String {
    value = if (primary) "SD" + orders.first.nakedN else "SD" + n.format(3, 0)
  }
  override func entityNumbers = [number, refNum, shipping?.trackingNumber.replace(" ", "")]
  impl func orders: [Order] = salesOrders
  //impl list compute supplier = order.orderVendor
  //impl compute customer = order.orderCustomer
    
  impl func legalEntity = order.legalEntity
  impl func title = "$number $(try? receiver?.title)"
  
  //impl func vendor = legalEntity
  override func canDispatch = state == Planned && availability == Available && orders.all(canDispatch)

  impl func stateUpdated(old: DlvState): Void = {
    if (state >= Dispatched && old < Dispatched) dispatchDate = now
    if (let shipping where state >= InProgress && old < InProgress) shipping.deliveryDate = now
    if (let retShipping where state >= Returning && old < Returning) retShipping.dispatchDate = now
    if (state >= Complete && old < Complete) retDeliveryDate = now
  }
  
  impl func updateRetDeliveryDate(): Future[Date] = {
    guard (state != Complete && hasProgress) else return dlvCompleteDate
    
    let dd <- calcRetDeliveryDate
    if (let retShipping where state < Returning) {
      retShipping.silentUpdate(dispatchDate, dd + (retShipping.dispatchDate - retDeliveryDate) )
    }
    silentUpdate(retDeliveryDate, dd)
    dd
  }
  
  field primary: Bool
  impl field stockType: StockType = Inventory
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
  impl ref field store: IStore? {
    default = onlyOne
    validate = if (!store && items.exists(storeRequired)) "Store field in delivery $(this) is required"
  }
  field shipping: SDShipping? inline by dlv {
    visible = receiver
  }
  field retShipping: SDRetShipping? inline by dlv {
    visible = receiver && hasProgress
  }
  field _retStore: IStore?
  impl compute retStore: IStore? = _retStore.or(store)

  compute shipToText {
    availableFor = List
    value = shipTo?.locationAddress?.title
  }
  //func debtDueDate = deliveryDate
  ref field dispatchDate: Date {
    default = now
    update = {
      if (let shipping where shipping.deliveryDate < new) {
        shipping.deliveryDate = new
      }
      updateRetDeliveryDate()
    }
  }
  compute deliveryDate: Date = shipping?.deliveryDate.alt(dispatchDate)
  field retDeliveryDate: Date {
    visible = hasProgress
    default = dispatchDate + 1_hour
    update = {
      updateDurs()
    }
  }
  
  
  impl view deliveryHeader = grid(width = 1.2){
    issuesView
    stateView
    row {store, receiver dispatchDate}
    row {retStore, space retDeliveryDate}
    shipping
    retShipping
    possibleDispatchPeriods >> list(frame = false){ 
      x {
        start
        label("—")
        if (end == Date.max) "∞" else end
        button("Set") {
          this.dispatchDate = start
          this.save()
        }
      }
    }
    items >> list(editMode = AlwaysRead, mode = EditSelect){form.unnav}
  }
  
  impl view form = nav{grid(width = 1.2, labels = Top) {
      salesOrders
      number    
      deliveryHeader
    }
    generalLedgerButton
  } 
  
  impl view ref = y {
    x{title dispatchDate}
    stateView
  }
  impl view dash = grid(labels = None) {
    row {
      y {
        dispatchDate
        title
        stateView
      }
      shipToText
    }
    refItems
  }
  impl event onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    salesOrders*.touch
  }
  
  view stateView = x{
    state >> field(editMode = AlwaysEdit) 
    availability >> field(visible = availability.isIssue) 
    dispatchState
    stockType >> field(visible = ui.edit || stockType != Inventory)
  }
  
  impl object view list = SalesDelivery.all >> nav{list(canAdd = false){grid(labels = None){row{
    itemImage >> field(miniature = List, width = 0.15)
    dash >> field(width = 0.85)
  }}}}
}

entity SDShipping extends PseudoEntity with IProdMovePath {
  impl func mainEntity = dlv
  impl func pathStart = dlv.dispatchDate
  impl func pathSrc = dlv.store
  impl func pathDst = dst
  impl func pathEnd = deliveryDate
  impl func pathState = dlv.state.path0
  
  field dlv: SalesDelivery
  field deliveryDate: Date {
    default = dlv.dispatchDate
    update = {
      if (new < dlv.dispatchDate) {
        dlv.dispatchDate = new
      }
    }
  }
  
  field dst: ILocation? {
    label = "Destination"
    from = Query(dlv.receiver?.legalEntity).flatMap(deliveryLocations)
  }
  
  impl view form = grid(width = 1.2) {
    row {deliveryDate dst space}
    freightView
  }
}


entity SDRetShipping extends PseudoEntity with IProdMovePath {
  impl func mainEntity = dlv
  impl func pathStart = dispatchDate
  impl func pathSrc = src
  impl func pathDst = dlv.retStore
  impl func pathEnd = dlv.retDeliveryDate
  impl func pathState = dlv.state.path1
  
  field dlv: SalesDelivery
  field dispatchDate: Date {
    default = dlv.retDeliveryDate
    update = {
      if (new > dlv.retDeliveryDate) {
        dlv.retDeliveryDate = new
      }
    }
  }
  
  field src: ILocation? {
    label = "Source"
    from = Query(dlv.receiver?.legalEntity).flatMap(deliveryLocations)
  }
  
  impl view form = grid(width = 1.2) {
    row {dispatchDate src space}
    freightView
  }
}
