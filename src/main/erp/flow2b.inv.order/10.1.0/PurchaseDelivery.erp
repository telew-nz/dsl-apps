trait IPurchaseDelivery extends OrderDlv {
  background = "#2e8e67"
  field _supplier: IVendor? {
    update = updateSupplier()
  }
  ref compute supplier: IVendor? {
    value = _supplier.or(order.orderVendor)
    update = {
      this._supplier = if (new == order.orderVendor) null else new
    }
  }
  field purchaseOrders: [PurchaseOrder] by deliveries {
    available(All)
    default =? defaultPurchaseOrders
  }
  func deliveryHeader: Layout
  func defaultPurchaseOrders: [PurchaseOrder]? = []
  func updateSupplier(): Void = {}
  impl func ledgers(journal: Journal, date: Date): Future[[Ledger]?] = purchaseLedgers(journal, date)
}

entity PurchaseDelivery extends IPurchaseDelivery with IProdMoveIn with DlvFPathState {
  icon = "truck"
  background = "#2e8e67"
  
  impl func journalDate = date
  impl func dlvPrePath = shipping
  impl func dlvStart = date
  impl func dlvEnd = date
  impl func dlvPostPath = null
  impl func dlvState = DlvState.path1(state)
  impl func dlvOrderStates = if (shipping) [Dispatched, Delivered] else [Delivered]
  impl func dlvDispatchDate = shipping?.dispatchDate.alt(date)
  impl func dlvInProgessDate = date
  impl func dlvReturningDate = date
  impl func dlvCompleteDate = date
  
  impl func moveInDate = date
  impl func moveInState = state.move1
  impl func hasInTransit = shipping
  impl func moveInLE = legalEntity
  impl func moveInStore = store!
  impl func moveInItems = items*.purchase*.as[IPurchaseItem with IProdMoveItemIn]
  
  impl func updateRetDeliveryDate(): Future[Date] = throw "TODO!!!"

  
  //impl func deliveryReceiver = order.legalEntity.legalEntity
  impl func legalEntity = order.legalEntity
  impl func title = "$fullNum $(try? supplier?.title)"
  impl ref compute number: String {
    value = if (primary) "PD" + orders.first.nakedN else "PD" + n.format(3, 0)
  }
  override func entityNumbers = [number, refNum, shipping?.trackingNumber.replace(" ", "")]
  impl func orders: [Order] = purchaseOrders
  //impl compute vendor = order.orderVendor
  impl func pathStateUpdated(old: PathState): Void = {
    if (state == InTransit) {
      if (old != Complete) shipping!.dispatchDate = now
    } else if (state == Complete) {
      if (old != InTransit) shipping?.dispatchDate = now
      date = now
    }
  }
  
  field primary: Bool
  ref field date: Date {
    label = "Delivery Date"
    default = now
    update = {
      if (let shipping where shipping.dispatchDate > new) {
        shipping.dispatchDate = new
      }
    }
  }

  field shipping: PDShipping? inline by delivery {
    visible = supplier
  }
  
  impl field stockType: StockType = Inventory
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
  impl ref field store: IStore? {
    default = onlyOne
    validate = if (!store && items.exists(storeRequired)) "Store field in delivery $(this) is required"
  }
  field _retStore: IStore?
  impl compute retStore: IStore? = _retStore.or(store)
  
  compute shippingText {
    availableFor = List
    value = shipping?.src?.locationAddress?.title
  }
  //func debtDueDate = deliveryDate
  impl view deliveryHeader = grid(width = 1.2){
    issuesView
    stateView
    date
    row {store, supplier, space}
    shipping
    items >> list(editMode = AlwaysRead, mode = EditSelect){form.unnav}
  }
  
  impl view form = nav{grid(width = 1.2, labels = Top) {
    purchaseOrders
    number
    deliveryHeader    
  } generalLedgerButton } 
  
  impl view ref = y {
    x{title date}
    stateView
  }
  impl view dash = grid(labels = None) {
    row {
      y {
        date
        title
        stateView
      }
      shippingText
    }
    refItems
  }
  
  impl event onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    purchaseOrders*.touch
  }
  
  view stateView = x{state >> field(editMode = AlwaysEdit) stockType >> field(visible = ui.edit || stockType != Inventory)}
  
  impl object view list = PurchaseDelivery.all >> nav{list(canAdd = false){grid(labels = None){row{
    itemImage >> field(miniature = List, width = 0.15)
    dash >> field(width = 0.85)
  }}}}
}

entity PDShipping extends PseudoEntity with IProdMovePath {
  impl func mainEntity = delivery
  impl func pathStart = dispatchDate
  impl func pathSrc: ILocation? = src
  impl func pathDst = delivery.store
  impl func pathEnd = delivery.date
  impl func pathState = delivery.state
  
  field delivery: PurchaseDelivery
  field dispatchDate: Date {
    default = now
    update = {
      if (new > delivery.date) {
        delivery.date = new
      }
    }
  }
  
  field src: ILocation? {
    label = "Source"
    from = Query(delivery.supplier?.legalEntity).flatMap(deliveryLocations)
  }
  
  impl view form = grid(width = 1.2) {
    row {dispatchDate src space}
    freightView
  }
}
