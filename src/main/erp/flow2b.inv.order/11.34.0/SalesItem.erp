inline trait ISalesItem extends OrderItem {
  impl field order: SalesOrder by allItems
  
  impl func ledgerAccount: LedgerAccount = UnearnedRevenues
  impl func cashFlow: CashFlow = Sales
  impl func canBeDeleted = if (let p = orderDlvItem?.purchase) !p.active else true
  override func setActive(v: Bool): Void = {
    if (this.active != v) {
      this.active = v
      if (let p = orderDlvItem?.purchase) p.active = v
      orderDlvItem?.forceTouch
    }
  }
  func revenueLedgers(journal: Journal, date: Date, baseAmount: UMoney?): [Ledger]?
} 
   
inline trait ISalesItemWithDelivery extends ISalesItem {
  //func journalDelivery: IDelivery? = delivery
  func deliveryItem: IOrderDlvItem
  func delivery: OrderDlv = deliveryItem.delivery
  impl func itemDlv = deliveryItem.delivery
  
  func doRepeatDD(so: SalesOrder, po: PurchaseOrder, d: OrderDlv): OrderItem = {
    this.copy(order = so, invoices = [], deliveryItem = deliveryItem.copy(delivery = d, purchase = deliveryItem.purchase!.copy(order = po)))
  }

}
 
inline entity SalesItem extends ISalesItemWithDelivery with OrderProductItem with FProductItems  {
  icon = "box"
  impl field deliveryItem: DeliveryItem inline by sales
  singular = "Sell"
 
  impl func itemsQty = qty
  impl func needProductItems = deliveryItem.needProductItems
  
  impl view rowView = group {
    row{
      deliveryItem.product.fullNum >> field (fontStyle = Label, rowSpan = 4)
      deliveryItem.product >> field (title = title, span = 2, rowSpan = 2)
      deliveryItem.qty 
      priceEditor >> field(align = Right)
      amountEditor >> field(align = Right)
    }
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor >> field (span = 3)}
    row(visible = invoiceDesc) {
      invoiceDesc >> field(span = 5)
    }
    row(visible = productItems){product.productItemsLabel >> field(fontStyle = Label, span = 2, align = Right) productItems.join(", ") >> field (span = 3)}
  }
  
  //Register
  func stockProd = product
  impl func revenueLedgers(journal: Journal, date: Date, baseAmount: UMoney?) = {
    let rt = product.revenueType
    [LSales(account = Sales, journal = journal, date = date, product = product, revenueType = rt,
            location = delivery.as[SalesDelivery]?.store, unit = product.unit, qty = baseQty, 
            counterparty = order.customer?.legalEntity, trAmount = -baseAmount)]
  }
  register invLedgers: [LInvBase]? = {
    if (let d = delivery?.as[SalesDelivery]) {
      if (d.dlvState == Complete && product.isTangible && active) {
        ProductItem.flatMap(product, qty, productItems) {
          product.tangibleProductQtys(trQty).mapOpt{i =>
            if (let p = i.product.as[IProductInv]) {
              d.stockType.obj.new(
                journal = d, product = p, productItem = item, qty = -i.qty,
                salesAmount = amountNoGst - discountNoGst, contraAccount = CostOfGoodsSold)
            }
          }
        }
      }
    }
  }
  compute productBaseCost: ProductCost? {
    availableFor = Inline
    value = {
      if (let pi = deliveryItem?.purchase) {
        ProductCost(date = pi.order.date, cost = pi.total(withGst = !order.legalEntity.hasGst).positive)
      } else if (product.isTangible) {
        if (let invs = try? invLedgers!) {
          ProductCost(date = invs.first.date, cost = (-invs*.amount.sum).positive)
        } else if (let pc = product.productCost) {
          ProductCost(date = pc.date, cost = pc.cost*qty)
        }
      }
    }
  }
  compute productCost: Future[ProductCost?] {
    availableFor = Inline
    value = {
      if (let pc = productBaseCost) {
        let pc1: ProductCost <- pc.to(currency, order.date)
        pc1
      } else {
        Future(null)
      }
    }
  }
  compute approxCost = deliveryItem.delivery.dlvState != Complete
  compute costDate: Date? = productBaseCost?.date
  compute cost: Future[UMoney[currency]?] {
    dynamicLabel = if (approxCost) "Approx Cost" else "Cost"
    value = {
      let pc <- productCost
      if (pricesIncludingGst) pc?.cost*(1.0000 + gstRate.alt(0)) else pc?.cost
    }
  }
  compute margin: Future[Percent[2]?] {
    value = {
      let cost <- this.cost
      if (let t = total(order.legalEntity.hasGst), let pc = cost) {
        (t - pc).as[Percent[2]]/t
      }
    }
    update = {
      let cost <- this.cost
      if (let c = cost, let mm = (1.0000 - new.get).positive) {
        amountEditor = c/mm
        discountEditor = 0
      }
    }
  }
  func dekit(): Future[Void] = {
    let kitItems <- back{product.as[IKit]!.items}
    
    order.items = order.items.flatMap{i =>
      if (i == this) {
        let k = qty
        
        deliveryItem.silentUpdate(qty, kitItems.first.qty*k)
        deliveryItem.silentUpdate(product, kitItems.first.product)

        this + kitItems.drop(1).map{q =>
          SalesItem(order = order, deliveryItem = DeliveryItem(delivery = deliveryItem.delivery, product = q.product, unit = q.unit, qty = q.qty*k))
        }
      } else {
        [i]
      }
    }
  }
  
  impl view form = grid(margin = None, width = 1.2, labels = Top) {
    row (labels = false){
      deliveryItem.product >> field(width = 0.6, placeholder = "Product, Service or Kit") 
      deliveryItem.qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right) 
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      deliveryItem.stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || deliveryItem.isUnav) 
      space(width = 0.2)
      gstEditor  >> field(visible = ui.isSelected && order.legalEntity.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    row {
      itemDesc >> field(width = 1.0, visible = ui.isSelected || desc)
      total >> field(visible = ui.isSelected && discount, width = 0.2, align = Right)
    }
    row {
      space(width = 0.4)
      costDate >> field(editMode = AlwaysRead, fontStyle = Label, align = Right, label = "", width = 0.4, visible = ui.isSelected && !IUser.current.isPublic && productBaseCost && approxCost)
      margin >> field(width = 0.2, visible = ui.isSelected && !IUser.current.isPublic && productBaseCost, align = Right) 
      cost >> field(width = 0.2, visible = ui.isSelected && !IUser.current.isPublic && productBaseCost, align = Right) 
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
    deliveryItem.availableView >> field(visible = ui.isSelected && active && (delivery.is[SalesDelivery]), label = "")
    accessories >> list(visible = ui.isSelected && delivery.dlvState == Planned) {
      x {_ add("Add") {
        let item = SalesItem(order = order,
                             deliveryItem = DeliveryItem(product = _, delivery = deliveryItem.delivery, unit = deliveryItem.unit, qty = deliveryItem.qty.as[UQty[_.unit]]) 
                            )
        item.deliveryItem.updateAmount()
      }}
    }

    snView >> field(visible = ui.isSelected && product.trackItems, label = try? product.productItemsLabel)
    x(visible = ui.isSelected && ui.edit) {
      button("Dekit", visible = product.is[IKit]) {
        dekit()
      }
      button("Split", visible = qty > 1) {
        deliveryItem.splitRest((qty - 1).positive!)
      }
    }
  }
  
}

