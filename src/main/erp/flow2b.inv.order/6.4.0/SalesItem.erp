inline trait ISalesItem extends OrderItem {
  field order: SalesOrder by allItems
  field invoice: SalesInvoice? by allItems {
    default = order.invoices.first
    from = order.invoices
    validate = if (!invoice && order.real) "Invoice should be selected for every item"
    visible = this.order.invoices.count > 1
  }
  func ledgerAccount: LedgerAccount = UnearnedRevenues
  func cashFlow: CashFlowCategory = Sales
  func canBeDeleted = !orderDeliveryItem?.purchase
  func setActive(v: Bool): Void = {
    this.active = v
    if (let p = orderDeliveryItem?.purchase) p.active = v
  }
  func posRowView: Layout[ISalesItem]
}
 
inline trait ISalesItemWithDelivery extends ISalesItem {
  register ledgers: [Ledger]? <- if (let d = delivery) {
    if (d.status == Delivered && (amount || discount) && active) {
      let baseCurrency = d.legalEntity.getCurrency
      let baseAmount <- amount.to[Money[baseCurrency]](d.deliveryDate)
      let baseDiscount <- discount.to[Money[baseCurrency]](d.deliveryDate)
        
      let debt = LDebt(account = UnearnedRevenues, origin = d, journal = d, 
               counterparty = order.customer, trAmount = amount - discount, currency = currency)
      let disc = if (let d = baseDiscount) {
        LCounterparty(account = DiscountsProvided, journal = delivery!, counterparty = order.customer, trAmount = d)
      } 
      let rev = if (let a = baseAmount) {
        revenueLedger(a)
      }
      CurrencyTrading.with([debt] + disc + rev)
    } else Future([]) 
  } else Future([]) 
    
  func revenueLedger(baseAmount: Money): Ledger = throw "$(this) cannot have revenue"
}
 
inline entity SalesItem extends ISalesItemWithDelivery with OrderProductItem {
  field deliveryItem: DeliveryItem inline by sales
    
  singular = "Product"
  
  //Register
  func outStock(product: IProduct, baseQty: Qty): StockRegister? = {
    if (let sd = delivery?.as[SalesDelivery]) {
      StockRegister(
        legalEntity = sd.legalEntity, store = sd.source!, good = product,
        sort = if (sd.status == Planned) 2 else 0, 
        date = sd.dispatchDate, document = sd,
        factualQty = if (sd.status == Planned) 0 else -(baseQty), 
        reservedQty = if (sd.status == Planned) baseQty else 0
      )
    }
  }
  
  func revenueLedger(baseAmount: Money): Ledger = {
    LSales(account = Sales, journal = delivery!, product = product, qty = qty, 
           counterparty = order.customer, trAmount = -baseAmount)
  }
  register invLedgers: [LInventory]? = {
    if (let d = delivery?.as[SalesDelivery]) {
      if (d.status == Delivered && product.isTangible && active) {
        product.tangibleProductQtys(qty).map{i =>
          LInventory(journal = delivery!, product = i.product, qty = i.qty, isDebit = false, contraAccount = CostOfGoodsSold)
        }
      } else null
    } else null
  }
  compute revenue = -ledgers*.as[LSales]*.amount.sum
  compute cost = -ledgers*.as[LInventory]*.amount.sum
  compute grossMargin = revenue - cost
  compute grossMarginPercent = if (revenue) (grossMargin.as[Dec[8]]/revenue.as[Dec[8]]).as[Percent[2]] else 0
    
  view form = grid(margin = None, width = 0.6, labels = Top) {
    deliveryItem.product
    deliveryItem.qty >> field(canEditUnit = true) 
    deliveryItem.stockDesc >> field(label = "")
    deliveryItem.availableView >> field(visible = active && (delivery?.is[SalesDelivery] || !delivery), label = "")
    priceEditor
    amountEditor
    gstEditor
    discountEditor
  }
    
  view rowView = group {
    row{deliveryItem.product >> field(rowSpan = 2)
        deliveryItem.qty >> field(canEditUnit = true) 
        priceEditor >> field(align = Right)
        amountEditor  >> field(align = Right)
    }
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
  
  view posRowView = group {
    row{deliveryItem.product >> field(rowSpan = 5)
        deliveryItem.qty 
        amountEditor  >> field(align = Right)
    }
    row(visible = this.deliveryItem.isUnavailable){deliveryItem.stockDesc >> field(span = 2, align = Right)}
    row(visible = discount){label("Discount" align = Right) discountEditor >> field(span = 2)}
    row(visible = this.order.deliveries.count > 1){label("Delivery" align = Right) deliveryItem.delivery >> field(span = 2)}
    row(visible = this.order.invoices.count > 1){label("Invoice" align = Right) invoice >> field(span = 2)}    
  }
}

