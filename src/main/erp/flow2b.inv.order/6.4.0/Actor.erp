extend trait Actor {
  func isCustomer: Bool
  func isVendor: Bool
  report Report {
    field type: ActorType?
    view list = Actor.all
      .filter(
        !type || (type == Customer && isCustomer) || (type == Vendor && isVendor)
      )
  }
}
       
enum ActorType {
  case Customer
  case Vendor
}
  
extend trait LegalEntity {
  stored compute isCustomer: Bool = salesOrders
  stored compute isVendor: Bool = purchaseOrders
  field salesOrders: [SalesOrder]? read by customer 
  field purchaseOrders: [PurchaseOrder]? read by vendor 
  extend event onSave = {
    if (updated(debtAllowance)) salesOrders*.touch
  }
}

extend entity Company {
  extend view form = extend ("buttons") {
    button("Sales Orders") {
      SalesOrder.Report(customer = this).list.open
    }
    button("Purchase Orders") {
      PurchaseOrder.Report(vendor = this).list.open
    }
  }
}

extend entity Person {
  extend view form = extend ("buttons") {
    button("Sales Orders") {
      SalesOrder.Report(customer = this).list.open
    }
    button("Purchase Orders") {
      PurchaseOrder.Report(vendor = this).list.open
    }
  }
}

extend entity CompanyGroup {
  func isCustomer: Bool = legalEntities.exists(isCustomer)
  func isVendor: Bool = legalEntities.exists(isVendor)
}
