entity SalesInvoice extends Invoice with ISalesInvoice {
  background = "#d68400"
  field primary: Bool
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
  field orders: [SalesOrder] by invoices {
    from = SalesOrder.all.filter(i => i.vendor == vendor && i.customer == customer)
  }
  field allItems: [ISalesItem]? inline by invoice {deleteCascade = false}
  compute items: [ISalesItem]? {
    value = allItems.filter(active)
    update = {
      allItems = new + allItems.filter(!active)
    }
  }
  ref compute number: String {
    value = manualNumber.alt(if (primary) "SI" + orders.first.nakedN else "SI" + n)
    update = {manualNumber = new}
  }
  ref compute debtCounterparty: LegalEntity? = order.orderCustomer
  ref compute legalEntity = order.legalEntity
  func title = "$number $(date.date) $(try? debtCounterparty?.title)"
  event onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    orders*.touch
    credits*.credit*.touch
    processRevision()
  }
   
  view invoiceHeader = grid(width = 1.2){
    statusesView
    row {total  date paymentTerms}
    row {gstAmount dueDate space}
    row {totalWithoutGst space space}
    
    credits >> field(label = "Payments", singular = "Payment")
    
    revisionsView
  }
  view form = nav{grid(width = 1.2, labels = Top) {
      row {number customer vendor}
      invoiceHeader
      orders
      items >> list(editMode = AlwaysRead){form}
    } 
    invoiceButtons
  } 
  view posView = grid (labels = Top, width = 1.2) {
    credits >> list(label = "Payments", singular = "Payment", 
                    add = Setoff(debit = this, credit = IncomingPayment(payer = orders.first.customer, payee = orders.first.vendor, amount = unpaidAmount))) {
      posView
    }
  }
  
  object view list = SalesInvoice.all >> nav{list(canAdd = false){grid(labels = None) {
    row{number, date.as[Date[day]]!, customer, total}
    statusesView
  }}}
}

extend entity Setoff {
  compute ip {
    value = credit.as[IncomingPayment]!
    update = {}
    views = []
  }
  view posView = ip >> grid(labels = Top) {
    row {account amount}
  }
}
