entity SalesInvoice extends Invoice with ISalesInvoice {
  background = "#d68400"
  field primary: Bool
  const ref field n: Int? = if (primary) order.n else increment(Order.gen)
  field orders: [SalesOrder] by invoices {
    from = SalesOrder.all.filter(i => i.vendor == vendor && i.customer == customer)
  }
  field allItems: [ISalesItem]? inline by invoice {deleteCascade = false}
  compute items: [ISalesItem]? {
    value = allItems.filter(active)
    update = {
      allItems = new + allItems.filter(!active)
    }
  }
  ref compute number: String {
    value = manualNumber.alt(if (primary) "SI" + orders.first.nakedN else "SI" + n)
    update = {manualNumber = new}
  }
  field sPayer: LegalEntity?
  func orderCounterparty: LegalEntity? = customer
  func debtCounterparty: LegalEntity? = payer
  func customer = orders.first.customer
  
  ref compute payer: LegalEntity? {
    value = sPayer.or(order.orderCustomer)
    update = {
      sPayer = if (order.orderCustomer != new) new
    }
  }
  
  ref compute legalEntity = order.legalEntity
  func title = "$number $(date.date) $(try? debtCounterparty?.title)"
  event onSave = {
    if (primary) n = order.n 
    else if (!n) n = increment(Order.gen)
    orders*.touch
    credits*.credit*.touch
    processRevision()
  }
   
  view invoiceHeader = grid(width = 1.2){
    statusesView
    row {total  date payer}
    row {gstAmount dueDate paymentTerms}
    row {totalWithoutGst space space}
    
    credits >> field(label = "Payments", singular = "Payment")
    
    revisionsView
    
    items >> list(mode = Select, editMode = AlwaysRead){form}
  }
  view form = nav{grid(width = 1.2, labels = Top) {
      orders
      row {number space vendor}    
      invoiceHeader
    } 
    invoiceButtons
  } 
  view posView = grid (labels = Top, width = 1.2) {
    unpaidAmount >> field(fontStyle = H2, label = "Amount to Pay")  

    credits >> list(label = "Payments", singular = "Payment", 
                    canAdd = unpaidAmount
                    add = Setoff(debit = this, credit = {
                      if (unpaidAmount > 0) IncomingPayment(payer = payer, payee = orders.first.vendor, amount = unpaidAmount!)
                      else OutgoingPayment(payer = orders.first.vendor, payee = payer, amount = -unpaidAmount!)
                    })) {
      posViewIp
    }
    revisionsView
  }
  
  object view list = SalesInvoice.all >> nav{list(canAdd = false){grid(labels = None) {
    row{number, date.as[Date[day]]!, payer, total}
    statusesView
  }}}
}
