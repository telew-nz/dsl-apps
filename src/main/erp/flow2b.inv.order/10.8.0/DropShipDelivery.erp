entity DropShipDelivery extends IPurchaseDelivery with ISalesDelivery with HasN {
  icon = "truck-moving"
  
  impl func hasDispatch = shipping
  impl func hasReturn = hasProgress && retShipping && retDeliveryDate && retDeliveryDate! <=? repeat?.next
  impl func journalDate = dispatchDate
  impl func dlvPrePath = shipping
  impl func dlvStart: Date = dispatchDate
  impl func dlvEnd: Date = dispatchDate
  impl func dlvPostPath = retShipping
  
  impl func dlvInTransitDate = dispatchDate
  impl func dlvInProgessDate = dispatchDate
  impl func dlvRetInTransitDate = dispatchDate
  impl func dlvCompleteDate = deliveryDate
  impl func nextN = increment(Order.gen)
  impl func numPrefix = "DD" 
  impl func store = null
  impl func retStore = null
  impl func needLedgers = state.started
  impl compute itemImage = refItems.photo
  
  ref field dispatchDate: Date {
    default = now
    update = {
      if (let shipping where shipping.deliveryDate < new) {
        shipping.deliveryDate = new
      }
      updateRetDeliveryDate()
    }
  }
  compute deliveryDate: Date = shipping?.deliveryDate.alt(dispatchDate)
  ref field retDeliveryDate: Date? {
    label = "Return Delivery Date"
    visible = hasProgress
    default = dispatchDate + 1_hour
    validate = if (!retDeliveryDate && hasProgress && !repeat) "Either return or repeat should be set"
    update = {
      updateDurs()
    }
  }
  compute hasRetDate: Bool {
    label = ""
    value = retDeliveryDate
    update = {
      if (!new && !repeat) {
        DlvRepeat(dlv = this)
      }
      retDeliveryDate = if (new) repeat?.next.alt(dispatchDate + 1_hour)
    }
  }
  view retDateEditor = x(label = "Return date") {
    hasRetDate >> field(noTab) retDeliveryDate >> field(noTab, visible = retDeliveryDate)
  }
  
  impl func updateRetDeliveryDate(): Future[Date] = {
    guard (state != Complete && hasProgress, let retDeliveryDate) else return dlvCompleteDate
    
    let dd <- calcRetDeliveryDate
    if (let retShipping where state < RetInTransit) {
      retShipping.silentUpdate(dispatchDate, dd + (retShipping.dispatchDate - retDeliveryDate) )
    }
    silentUpdate(_.retDeliveryDate, dd)
    dd
  }
  
  override func isInstant = false
 
  impl func orders: [Order] = ((try? purchaseOrders) + (try? salesOrders))!
  list compute vendor = purchaseOrders.first.vendor
  list compute customer = salesOrders.first.customer
  //override func deliverySupplier = supplier?.legalEntity
  //override func deliveryReceiver = receiver?.legalEntity
  impl func legalEntity: OurLegalEntity = salesOrders.first.legalEntity
  impl func title = "$fullNum $(try? receiver?.title)"
  impl func invTitle: String = "$fullNum $(deliveryDate.date)"
  impl func defaultSalesOrders: [SalesOrder]? = [SalesOrder(deliveries = [this], vendor = purchaseOrders.first.customer)]
  impl func defaultPurchaseOrders: [PurchaseOrder]? = [PurchaseOrder(deliveries = [this], customer = salesOrders.first.vendor)]
  impl func updateSupplier(): Void = {
    if (!purchaseOrders.first.id) purchaseOrders.first.vendor = supplier?.as[Vendor]
  }
  impl func updateReceiver(): Void = {
    if (!salesOrders.first.id) salesOrders.first.customer = receiver?.as[Customer]
  }
  impl field shipTo: ILocation? {
    from = Query(receiver?.legalEntity).flatMap(deliveryLocations)
    visible = receiver
  }
  func debtDueDate = deliveryDate
  override func ledgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    if (state.started) {
      let sl <- salesLedgers(this, dispatchDate)
      let pl <- purchaseLedgers(this, dispatchDate)
      sl + pl
    }
  }
  compute refItems {
    availableFor = List
    value = calcRefItems
  }
  field shipping: DDShipping? inline by dlv 
  field retShipping: DDRetShipping? inline by dlv {
    label = "Return Shipping"
    visible = hasProgress
  }
  
  impl back func doRepeat: Future[OrderDlv?] = {
    let s = state
    guard (s == InProgress || s == Complete) else return null
    
    _state = Complete
    save
    
    let r = repeat!
    let d = r.next
    
    let so = salesOrders.first.copy(            
      deliveries = [this.copy(
        _state = if (s == InProgress) InProgress else Planned,
        prev = this, next = null,
        dispatchDate = d, 
        shipping = null,
        repeat = if (d >? retDeliveryDate) r.copy(next = d + r.every),
        allItems = [],
        purchaseOrders = [purchaseOrders.first.copy(
          invoices = []
          allItems = []
        )]
      )],
      invoices = []
      allItems = []
    ).save
    let dd = so.deliveries.first.as[DropShipDelivery]!
    let po = dd.purchaseOrders.first
    
    items.foreach{i =>
      i.sales?.as[ISalesItemWithDelivery]?.doRepeatDD(so, po, dd)
    }
    let _ <- dd.updateDurs()
    dd
  }
  
  impl view deliveryHeader = grid(width = 1.2){
    issuesView
    state
    row {supplier, receiver, dispatchDate}
    salesOrders
    purchaseOrders
    
    shipping
    retShipping
    
    prev >> field(title = title)
    repeat
    next >> field(title = title)
    
    items >> list(editMode = AlwaysRead){form}
  }
  impl view form = nav{grid(width = 1.2, labels = Top) {
    salesOrders
    purchaseOrders
    row {number refNum >> field(noTab) space}
    state
    row {supplier, receiver, dispatchDate}
    shipping
    retShipping
    
    prev >> field(title = title)
    repeat
    next >> field(title = title)
    
    items >> list(editMode = AlwaysRead){form}
  } generalLedgerButton} 
  
  impl view ref = x{title state}
  impl event onSave = {
    orders*.touch
  }
  
  impl object view list = DropShipDelivery.all >> nav{list(canAdd = false){grid(labels = None){
    row{number >> field(width = 0.2) deliveryDate >> field(visible = true, width = 0.3) vendor >> field(width = 0.25) customer >> field(width = 0.25)}
    x{state}
  }}}
}

entity DDShipping extends PseudoEntity with IProdMovePath {
  impl func mainEntity = dlv
  impl func pathItems = dlv.items*.as[IOrderDlvItem with IProdMoveItem]
  impl func pathStart = dlv.dispatchDate
  impl func pathSrc = src
  impl func pathDst = dst
  impl func pathEnd = deliveryDate
  impl func pathState = dlv.state.path0
  
  field dlv: DropShipDelivery
  field deliveryDate: Date {
    default = dlv.dispatchDate
    update = {
      if (new < dlv.dispatchDate) {
        dlv.dispatchDate = new
      }
    }
  }
  field src: ILocation? {
    label = "From"
    from = Query(dlv.supplier?.legalEntity).flatMap(deliveryLocations)
    init = {
      new.as[IActorLocation]?.actor = dlv.supplier?.legalEntity
    }
  }
  
  field dst: ILocation? {
    label = "To"
    from = Query(dlv.receiver?.legalEntity).flatMap(deliveryLocations)
    init = {
      new.as[IActorLocation]?.actor = dlv.receiver?.legalEntity
    }
  }
  
  impl view form = grid(width = 1.2) {
    row {src dst deliveryDate}
    freightView
  }
}

entity DDRetShipping extends PseudoEntity with IProdMovePath {
  impl func mainEntity = dlv
  impl func pathItems = dlv.items*.as[IOrderDlvItem with IProdMoveItem]
  impl func pathStart = dispatchDate
  impl func pathSrc = src
  impl func pathDst = dst
  impl func pathEnd = dlv.retDeliveryDate!
  impl func pathState = dlv.state.path1
  
  field dlv: DropShipDelivery
  field dispatchDate: Date {
    default = dlv.retDeliveryDate!
    update = {
      if (new > dlv.retDeliveryDate!) {
        dlv.retDeliveryDate = new
      }
    }
  }
  
  field src: ILocation? {
    label = "From"
    from = Query(dlv.receiver?.legalEntity).flatMap(deliveryLocations)
    init = {
      new.as[IActorLocation]?.actor = dlv.receiver?.legalEntity
    }
  }
  
  field dst: ILocation? {
    label = "To"
    from = Query(dlv.supplier?.legalEntity).flatMap(deliveryLocations)
    init = {
      new.as[IActorLocation]?.actor = dlv.supplier?.legalEntity
    }
  }
  
  impl view form = grid(width = 1.2) {
    row {src dst dispatchDate}
    freightView
  }
}
