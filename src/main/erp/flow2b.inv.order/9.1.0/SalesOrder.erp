trait ISalesChannel extends Entity
entity SalesChannel extends ISalesChannel {
  field title: String
  field description: Text?
}

entity SalesOrder extends Order with ISalesOrder {
  icon = "shopping-cart"
  background = "#a73e6c"
  func orderCustomer = customer
  func orderVendor = vendor
  func counterparty = customer?.legalEntity
  func salesPersonAccess: Bool = !User.current!.onlyTheirOrders || isForCurrent(Salesperson)
  func deliveryCounterparty = customer?.legalEntity

  field sPayer: Customer? {
    available(Ref).with(debtBalance)
  }
  ref compute payer: Customer? {
    available(Ref).with(debtBalance)
    value = sPayer.or(customer)
    update = {
      sPayer = if (customer != new) new
    }
  }
  func debtCounterparty: LegalEntity? = payer?.legalEntity
  
  field deliveries: [ISalesDelivery]? inline by salesOrders {
    default = [SalesDelivery(primary = true, salesOrders = [this])]
    visible = preEntered
    from = ISalesDelivery.all.filter(i => i.legalEntity == legalEntity)
    update = {
      setDefaultDelivery()
    }
  }
  field salesChannel: ISalesChannel? {
    default = deliveries.onlyOne?.as[SalesDelivery]?.source?.as[ISalesChannel]
  }
  func activeRoles = {
    let s = state
    if (s == Quote || s == Processing) [Salesperson]
  }
  func addItem(prod: ISubProduct, qty: Qty, productItems: [ProductItem]?) = {
    let si = SalesItem(order = this)
    let di = si.deliveryItem
    di.silentUpdate(product, prod)
    di.silentUpdate(unit, qty.unit?.as[ProductUnit]!)
    di.qty = qty
    di.productItems = productItems
    si
  }
  
  ref field vendor: OurLegalEntity {
    default =? onlyOne
    available(All).for(All).with(priceModels)
    update = {
      items*.orderDeliveryItem*.updateGst()
    }
  }
  ref field customer: Customer? by salesOrders {
    available(Ref).with(debtBalance)
    update = {
      this.currency =? try? customer?.legalEntity?.currency.alt(vendor.getCurrency)
      deliveries.foreach(_.receiver = new?.defaultReceiver)
      payer = new?.defaultPayer
    }
    validate = if (back) if (!customer && !calcInstant) "Customer cannot be empty for incomplete orders"
  }
 
  func isTheir = customer?.isTheir
  field allItems: [ISalesItem]? inline by order
  compute items: [ISalesItem]? {
    value = allItems.filter(active || wasCanceled)
    update = {
      allItems = new + allItems.filter(!_.active && !_.wasCanceled)
    }
    init = {
      new.order = _
    }
    visible = preEntered
  }
  ref compute availability: GoodAvailability {
    value = {
      if (status == Canceled) Available
      else if (deliveries.exists(status == Planned && _.availability == Unavailable)) Unavailable
      else if (deliveries.exists(status == Planned && _.availability == AvailableLater)) AvailableLater
      else Available
    }
	visible = availability.isIssue
  }
  
  compute preEntered = (try? vendor)
  ref compute number: String = "SO" + n.format(3, 0)
  func entityNumbers: [String]? = [number] + referenceNumber.toSeq
  func title = if (let r = referenceNumber) "$number ($r) $customer" else "$number $customer"
  func legalEntity = vendor
  
  //Views
  view form = nav(onBarcode = if (ui.edit) this.procBarcode(barcode)){
    tabs {
      posView
      grid(labels = Top, width = 1.2, label = "Deliveries"){  
        deliveries >> list{nav{
          inline{deliveryHeader}
          generalLedgerButton
        }}
        extension("deliveries")
      }
      grid(labels = Top, width = 1.2, label = "More"){ 
	    extension
      }
      extension("tabs")
    }
    invoiceButtons
    //button("Update Prices") {updatePrices()}
  }
  
  view statusesView = x {
    state
    issueState
    paymentState 
    overdueState
    deliveryState
    deliveryOverdueState
    availability
    dropShipState
  }
  
  compute sd {
    value = deliveries.onlyOne?.as[SalesDelivery]
    update = {}
  }
  
  view posView = grid (labels = Top, label = "Main", width = 1.2) {
    issuesView
    row {number referenceNumber >> field(noTab) vendor}
    statusesView 
    row {total >> field(canEditUnit = true) date >> field(noTab) salesChannel}
    row {customer sd!.shipTo >> field(visible = sd) space} 
    row {payer >> field(visible = ui.edit || sPayer) dueDate paymentTerms}
    
    row { sd!.source >> field(visible = sd, label = "Store") sd!.dispatchDate >> field(noTab, visible = sd) sd!.deliveryDate >> field(noTab, visible = sd && sd!.shipTo)}
    extension("delivery")
    extension
    items >> list(mode = EditSelect) {
      form 
    }
    unpaidAmount >> field(fontStyle = H2, label = "Amount to Pay")  
    paymentsView
    
    invoicesView
  } 
 
  report Report {
    field superProduct: ISuperProduct?
    field product: IProduct?
    field customer: LegalEntity? {auto = true}
    field salesPerson: User? {
      from = User.all.filter(is(Salesperson))
    }
    
    view list = SalesOrder.all.filter(
      isFor(salesPerson, Salesperson)
      && ((!this.product && !this.superProduct) || items*.as[OrderProductItem].exists(product ==? this.product && product.superProduct ==? this.superProduct))
    ) 
      >> nav{list{grid(labels = None) {
        row{number, date.as[Date[day]]!, customer, total}
        statusesView
        refItems
      }}}
  }
  
  view ref = y {
    x{title total date }
    statusesView
  }
  view dash = y {
    x{title total date }
    statusesView
    refItems
  }
}