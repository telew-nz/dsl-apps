trait ISalesChannel extends Entity
entity SalesChannel extends ISalesChannel {
  impl field title: String
  field description: Text?
}

entity SalesOrder extends Order with ISalesOrder {
  icon = "shopping-cart"
  background = "#a73e6c"
  impl func orderCustomer = customer
  impl func orderVendor = vendor
  func counterparty = customer?.legalEntity
  func salesPersonAccess: Bool = !User.current!.onlyTheirOrders || isForCurrent(Salesperson)
  impl func deliveryCounterparty = customer?.legalEntity

  field sPayer: Customer? 
  impl ref compute payer: Customer? {
    available(Ref).with(debtBalance, allowance, accountTerms).field(legalEntity, with(legalInfo))
    value = sPayer.or(customer)
  }
  impl func debtCounterparty: LegalEntity? = payer?.legalEntity
  compute shipTo: ILocation? = deliveries*.shipTo.onlyOne
  compute shipToText {
    availableFor = List
    value = shipTo?.locationAddress?.title
  }
  
  impl field deliveries: [ISalesDelivery] inline by salesOrders {
    default = [SalesDelivery(primary = true, salesOrders = [this])]
    visible = preEntered
    from = ISalesDelivery.all.filter(i => i.legalEntity == legalEntity)
  }
  field salesChannel: ISalesChannel? {
    default = deliveries.onlyOne?.as[SalesDelivery]?.store?.as[IStore with ISalesChannel]
  }
  impl func activeRoles = {
    if (active) [Salesperson]
  }
  impl func addItem(prod: ISubProduct, qty: UQty, productItems: [ProductItem]?) = {
    let si = SalesItem(order = this)
    let di = si.deliveryItem
    di.silentUpdate(product, prod)
    di.silentUpdate(unit, qty.unit?.as[ProductUnit]!)
    di.qty = qty
    di.productItems = productItems
    si
  }
  
  override ref field vendor: OurLegalEntity {
    default =? onlyOne
    available(All).for(All).with(priceModels)
    update = {
      items*.orderDlvItem*.updateGst()
    }
  }
  impl ref field customer: Customer? by salesOrders {
    available(Ref).with(debtBalance, allowance, accountTerms)
    update = {
      this.currency =? try? customer?.legalEntity?.currency.alt(vendor.getCurrency)
      deliveries.foreach(_.receiver = new?.defaultReceiver)
      payer = new?.defaultPayer
    }
    validate = if (back) if (!customer && !calcInstant) "Customer cannot be empty for incomplete orders"
  }
 
  func isTheir = customer?.isTheir
  impl field allItems: [ISalesItem]? inline by order
  impl compute items: [ISalesItem]? {
    value = allItems.filter(active || wasCanceled)
    update = {
      allItems = new + allItems.filter(!_.active && !_.wasCanceled)
    }
    init = {
      new.order = _
    }
    visible = preEntered
  }
  ref compute availability: GoodAvailability {
    value = {
      if (canceled) Available
      else if (deliveries.exists(!dlvState.started && _.availability == Unavailable)) Unavailable
      else if (deliveries.exists(!dlvState.started && _.availability == AvailableLater)) AvailableLater
      else Available
    }
	visible = availability.isIssue
  }
  
  impl compute preEntered = (try? vendor)
  impl ref compute number: String = "SO" + n.format(3, 0)
  impl func entityNumbers: [String]? = [number] + referenceNumber.toSeq
  impl func title = if (let r = referenceNumber) "$number ($r) $customer" else "$number $customer"
  impl func legalEntity = vendor
  
  //Views
  impl view form = nav(onBarcode = if (ui.edit) this.procBarcode(barcode)){
    tabs {
      posView
      grid(labels = Top, width = 1.2, label = "Deliveries"){  
        deliveries >> list{nav{
          inline{deliveryHeader}
          generalLedgerButton
        }}
        extension("deliveries")
      }
      grid(labels = Top, width = 1.2, label = "More"){ 
        salesChannel
	    extension
      }
      extension("tabs")
    }
    invoiceButtons
    //button("Update Prices") {updatePrices()}
  }
  
  view stateView = x {
    state >> field(editMode = AlwaysEdit)
    paymentState 
    overdueState
    deliveryState
    deliveryOverdueState
    availability
    dropShipState
  }
  
  compute sd {
    value = deliveries.onlyOne?.as[SalesDelivery]
    update = {}
  }
  compute prevOrder {
    value = sd?.prev?.order
    label = "Previous"
  }
  compute nextOrder { 
    value = sd?.next?.order
    label = "Next"
  }
  
  view posView = grid (labels = Top, label = "Main", width = 1.2) {
    issuesView
    
    row {number >> field(noTab) referenceNumber >> field(noTab) date >> field(noTab, label = "Order Date")}
    x{stateView >> field(stretch = 0) acceptView salesChannel  >> field(stretch = 0, editMode = AlwaysRead)}
    
    row {total >> field(canEditUnit = true)  vendor >> field(noTab) terms >> field(noTab)} 
    row {customer sd!.store >> field(visible = sd) sd!.dispatchDate >> field(noTab, visible = sd)}
    x{
      add("Shipping", visible = sd && customer && !sd!.shipping) {SDShipping(dlv = sd!)}
      add("Return Shipping", visible = sd && customer && !sd!.retShipping && sd!.hasProgress) {SDRetShipping(dlv = sd!)}
      add("Repeat", visible = sd && customer && !sd!.repeat) {DlvRepeat(dlv = sd!)}
      add("Payer", visible = sd && customer && !sPayer) {sPayer = customer}
    }
    payer >> field(visible = sPayer) 
    sd!.shipping >> field(visible = sd && sd!.shipping)
    sd!.retShipping >> field(visible = sd && sd!.retShipping && sd!.hasProgress)
    row {
      space
      sd!.retStore >> field(visible = sd && sd!.hasProgress) 
      sd!.retDateEditor >> field(visible = sd && sd!.hasProgress) 
    } 
    prevOrder >> field(title = title, editMode = AlwaysRead)
    sd!.repeat >> field(visible = sd && sd!.repeat)
    nextOrder >> field(title = title, editMode = AlwaysRead)
    
    extension("delivery")
    extension
    items >> list(mode = EditSelect) {
      form 
    }
    
    unpaidAmount >> field(fontStyle = H2, label = "Amount to Pay")
    paymentsView
    
    invoicesView
  } 
 
  report Report {
    field superProduct: ISuperProduct?
    field product: IProduct?
    field customer: LegalEntity? {auto = true}
    field salesPerson: User? {
      from = User.all.filter(is(Salesperson))
    }
    
    impl view list = SalesOrder.all.filter(
      isFor(salesPerson, Salesperson)
      && ((!this.product && !this.superProduct) || items*.as[ISalesItem with OrderProductItem].exists(product ==? this.product && product.superProduct ==? this.superProduct))
    ) 
      >> nav{list{grid(labels = None){row{
        itemImage >> field(miniature = List, width = 0.15)
        dash >> field(width = 0.85)
      }}}}
  }
  
  impl view ref = y {
    x{title total date }
    stateView
  }
  impl view dash = grid(labels = None) {
    row {
      y {
        date
        x{title total}
        stateView
      }
      shipToText
    }
    refItems
  }
  
}