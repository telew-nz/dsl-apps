trait Order extends Entity with DashboardItem with Journal with HasDebtCounterparty with IOrder {
  background = "#a73e6c"
  ref field referenceNumber: String?
  func orderCustomer: ICustomer?
  func orderVendor: IVendor?
  object field gen: Int?
  const ref field n: Int? = increment(Order.gen)
  ref field currency: Currency {
    default = Currency.our
  }
  ref compute total: Money[currency]? = totalNoGst + gstAmount
  
  func references = if (let r = referenceNumber) [r]
  
  func isQuote = state == Quote
  func pricesIncludingGst = if (let v = orderVendor) v.pricesIncludingGst else legalEntity.pricesIncludingGst
  func legalEntity: OurLegalEntity
  ref compute deliveryOverdueState: DeliveryOverdueState {
    value = {
      if (canceled) NoDeliveryOverdue
      else if (let od = maxDispatchDate) if (od < now) DeliveryOverdue else NoDeliveryOverdue
      else NoDeliveryOverdue
    } 
    visible = deliveryOverdueState == DeliveryOverdue
  }
  func preEntered: Bool
  ref field date: Date = now
  func deliveries: [Delivery]
  
  func nakedN: String = n.format(3, 0)!
  func allItems: [OrderItem]?
  func items: [OrderItem]?

  back func calcInstant: Bool = if (let d = deliveries.onlyOne) {
    d.deliveryStatus == Delivered 
    	&& (d.deliveryDate - this.date).abs <= 3600_second 
        && isInstantPaid
        && if (let r = invoices.onlyOne) (r.date - this.date).abs <= 3600_second else !invoices
  }

  event onSave = {
    deliveries*.touch    
  }
  
  ref stored compute deliveryState: OrderDeliveryState {
    value = {
      if (deliveries.all(status == Delivered)) Delivered
      else if (deliveries.exists(status == Delivered)) PartiallyDelivered
      else if (deliveries.exists(status == InTransit)) InTransit
      else if (canceled) NotDelivered
      else Planned
    }
    visible = deliveryState == PartiallyDelivered
  }
  
  ref compute dropShipState: DropShipState {
    value = {
      if (deliveries.exists(_.is[DropShipDelivery])) {
        if (deliveries.all(_.is[DropShipDelivery])) DropShip
        else PartialDropShip
      } else NotDropShip
    }
  	visible = dropShipState != NotDropShip
  }
  
  front func procBarcode(s: String): Future[Void] = {
    let r <- back{IBarcode.find(s)}
    if (let r) {
      if (let p = r.barcodeItem.as[ISubProduct]) {
        addQty(p, r.qty, [])
      } else if (let p = r.barcodeItem.as[ProductItem]) {
        addQty(p.product, r.qty, [p])
      } else {
        UI.info("Barcode item is not product $(r.barcodeItem)")
      }
    } else {
      UI.info("No barcode $s found")
    }
  }
  
  func addQty(product: ISubProduct, qty: Qty, productItems: [ProductItem]?): OrderItem = {
    if (let ii = items*.as[OrderProductItem]
        .find(i => i.product == product && i.unit == qty.unit)
    ) {
      if (let i = ii?.deliveryItem?.as[DeliveryItem]) {
        i.qty = (i.qty + qty)!
        i.productItems = i.productItems + productItems
        ii
      } else {
        addItem(product, qty, productItems)
      }
    } else {
      addItem(product, qty, productItems)
    }
  }
  func addItem(product: ISubProduct, qty: Qty, productItems: [ProductItem]?): OrderItem
    
  func orderDate = date
  func orderCurrency = currency
  func orderTotal = total

  compute refItems {
    availableFor = List
    value = RefProductItems.create(items*.as[OrderProductItem].map(RefProductQty(product = product, qty = qty)))
  }
  
  back func deliveryInstantLedgers(journal: Journal, date: Date): Future[[Ledger]?] = {
    deliveries.first.ledgers(journal, date)
  }
}

