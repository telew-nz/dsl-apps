inline trait OrderItem extends IAmountItem with IInvoiceItem {
  var order: Order
  var invoice: Invoice?
  func inTransit: Bool = delivery?.status == InTransit
  func paidAmount: Money[currency]? = if (amount > 0) invoice?.paidAmountForItem(this) else amount
  func orderPaidAmount = paidAmount
  func paid: Bool = invoiceAmount <= 0 || paidAmount == invoiceAmount
  func complete = delivered && paid
  func currency = order.orderCurrency 
  func pricesIncludingGst = order.pricesIncludingGst 
  func orderAmount = amount - discount
  func invoiceAmount = amount - discount
  func orderDeliveryItem: IOrderDeliveryItem?
  func delivery: Delivery? = orderDeliveryItem?.delivery
  func canceled = order.canceled
  func needsRevision: Bool = updated(sAmount) || updated(gstRate)
  func quoteSwitch(quote: Bool): Void = {}  
}

inline trait OrderProductItem extends OrderItem with IAmountQtyItem {
  func orderDeliveryItem: IOrderDeliveryItem? = deliveryItem
  func deliveryItem: IDeliveryProductItem
  func product = deliveryItem.product
  func baseQty = deliveryItem.baseQty
  func qty = deliveryItem.qty
  func invoiceQty: Qty? = qty
  func unit = deliveryItem.unit
  func needsRevision: Bool = {
    deliveryItem.needsRevision || updated(sAmount) || updated(gstRate)
  }
  
  compute accessories: [ISubProduct]? = product.superProduct.accessories*.accessory*.subProducts.filter(p => !order.items*.as[OrderProductItem]*.product.contains(p))
}