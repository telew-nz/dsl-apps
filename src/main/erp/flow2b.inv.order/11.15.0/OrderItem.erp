inline trait OrderItem extends IAmountItem with IOrderItem {
  impl var order: Order
  field desc: Text? {label = "Description"}
  //func inTransit: Bool = itemDelivery?.status == InTransit
  func paid: Bool = order.paid
  //func complete = delivered && paid
  
  impl func currency = order.currency 
  impl func pricesIncludingGst = order.pricesIncludingGst 
  func orderAmount = if (pricesIncludingGst) orderAmountWithGst else orderAmountNoGst
  func orderAmountNoGst = totalNoGst
  func orderAmountWithGst = totalWithGst
  impl func invoiceAmountNoGst = totalNoGst
  impl func invoiceAmountWithGst = totalWithGst
  func orderDlvItem: IOrderDlvItem?
  impl func itemDlv: OrderDlv?
  impl func canceled = order.canceled
  impl func needsRevision: Bool = updated(sAmount) || updated(gstRate) || updated(desc)
  impl func sameAsPrev: Bool = if(let p = prev?.as[OrderItem]) {
    p.sAmount == sAmount && p.gstRate == gstRate && p.desc == desc
  }
  func quoteSwitch(quote: Bool): Void = {}  
  impl func considerGst: Bool = order.legalEntity.hasGst
  func orderDiscount: Money? = 0
  impl event onSave = {
    if (registerUpdated) {
      order.updateRegisters
    }
  }
  func invoiceDesc = desc
  func name: String
  func fullDesc: Text = if (let d = desc) "$name\n$d" else name
  func doRepeat(o: Order, d: OrderDlv): OrderItem = this.copy(order = o, invoices = [])
}

inline trait OrderProductItem extends OrderItem with IOrderProdItem with IAmountQtyItem {
  impl func orderDlvItem: IOrderDlvItem? = deliveryItem
  var deliveryItem: IDlvProductItem
  impl func product = deliveryItem.product
  func baseQty = deliveryItem.baseQty
  impl func defaultGstRate = product.gstRate(order.orderVendor?.legalEntity)
  impl func qty = deliveryItem.qty
  impl func invoiceQty: UQty? = qty
  impl func hasProgress = deliveryItem.is[IDlvProgressItem]
  func unit = deliveryItem.unit
  override func needsRevision: Bool = {
    deliveryItem.needsRevision || updated(sAmount) || updated(sDiscount) || updated(gstRate) || updated(desc)
  }
  override func sameAsPrev: Bool = if (let p = prev?.as[OrderProductItem]) {
    deliveryItem.sameAsPrev(p.deliveryItem) && p.sAmount == sAmount && p.sDiscount == sDiscount && p.gstRate == gstRate && p.desc == desc
  }
  override func invoiceDesc = itemDesc
  impl func name: String = product.title
  override func fullDesc: Text = if (let d = itemDesc) "$name\n$d" else name
  compute itemDesc: Text? {
    label = "Description"
    value = desc.or(product.invoiceDesc)
    update = {
      this.desc = if (new != product.invoiceDesc) new
    }
  }
  compute accessories: [ISubProduct]? = {
    product.superProduct.crossSells*.products.filter(p => !order.items*.as[OrderProductItem]*.product*.superProduct.contains(p))*.subProducts
  }
  override func doRepeat(o: Order, d: OrderDlv) = this.copy(order = o, invoices = [], deliveryItem = deliveryItem.copy(delivery = d))
}
