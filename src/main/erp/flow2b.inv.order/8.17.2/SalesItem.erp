inline trait ISalesItem extends OrderItem {
  field order: SalesOrder by allItems
  field invoice: SalesInvoice? by allItems {
    default = order.invoices.first
    from = order.invoices
    validate = if (!invoice && order.real) "Invoice should be selected for every item"
    visible = this.order.invoices.count > 1
  }
  func ledgerAccount: LedgerAccount = UnearnedRevenues
  func cashFlow: CashFlow = Sales
  func canBeDeleted = if (let p = orderDeliveryItem?.purchase) !p.active else true
  func setActive(v: Bool): Void = {
    if (this.active != v) {
      this.active = v
      if (let p = orderDeliveryItem?.purchase) p.active = v
      orderDeliveryItem?.forceTouch
    }
  }
  func revenueLedgers(journal: Journal, date: Date, baseAmount: Money?): [Ledger]?
}
   
inline trait ISalesItemWithDelivery extends ISalesItem {
  func journalDelivery: IDelivery? = delivery
}
 
inline entity SalesItem extends ISalesItemWithDelivery with OrderProductItem with HasProductItems {
  icon = "box"
  field deliveryItem: DeliveryItem inline by sales
    
  singular = "Product"
  
  //Register
  func stockProd = product
  func itemsQty = qty
  func needProductItems: Bool = delivery?.status?.started
  func revenueLedgers(journal: Journal, date: Date, baseAmount: Money?) = {
    [LSales(account = Sales, journal = journal, date = date, product = product, 
            location = delivery!.as[SalesDelivery]?.source, unit = product.unit, qty = baseQty, 
            counterparty = order.customer?.legalEntity, trAmount = -baseAmount)]
  }
  register invLedgers: [LInvBase]? = {
    if (let d = delivery?.as[SalesDelivery]) {
      if (d.status == Delivered && product.isTangible && active) {
        ProductItem.flatMap(product, qty, productItems) {
          product.tangibleProductQtys(trQty).map{i =>
            d.stockType.obj.new(
              journal = d, product = i.product, productItem = item, qty = -i.qty,
              salesAmount = amountNoGst - discountNoGst , contraAccount = CostOfGoodsSold)
          }
        }
      }
    }
  }
  compute productCost: ProductCost? {
    availableFor = Inline
    value = if (let pi = deliveryItem?.purchase) {
      ProductCost(date = pi.order.date, cost = pi.total(withGst = !order.legalEntity.hasGst))
    } else if (let invs = try? invLedgers!) {
      ProductCost(date = invs.first.date, cost = -invs*.amount.sum)
    } else {
      product.productCost
    }
  }
  compute approxCost = delivery?.status != Delivered
  compute costDate = productCost?.date
  compute cost {
    dynamicLabel = if (approxCost) "Approx Cost" else "Cost"
    value = (if (pricesIncludingGst) productCost?.cost*(1.0000 + gstRate.alt(0)) else productCost?.cost)*qty
  }
  compute margin: Percent[2]? {
    value = {
      if (let t = total(order.legalEntity.hasGst), let pc = cost) {
        (t - pc).as[Percent[2]]/t
      }
    }
    visible = productCost
    update = {
      if (let c = cost, let mm = 1.0000 - new) {
        amountEditor = c/mm
        discountEditor = 0
      }
    }
  }
    
  view rowView = group {
    row{
      deliveryItem.product >> field(rowSpan = 2)
      deliveryItem.qty >> field(canEditUnit = true) 
      priceEditor >> field(align = Right)
      amountEditor >> field(align = Right)
    }
    row(visible = discount){label("Discount", span = 2, align = Right) discountEditor}
  }
  
  view form = grid(margin = None, width = 1.2, labels = Top) {
    row (labels = false){
      deliveryItem.product >> field(width = 0.6) 
      deliveryItem.qty >> field(canEditUnit = true, width = 0.2, align = Right) 
      priceEditor >> field(width = 0.2, align = Right) 
      amountEditor >> field(width = 0.2, align = Right)
    }
    row {
      deliveryItem.stockDesc >> field(noLabel, width = 0.6, visible = ui.isSelected || deliveryItem.isUnavailable) 
      space(width = 0.2)
      gstEditor  >> field(visible = ui.isSelected && order.legalEntity.hasGst, width = 0.2) 
      discountEditor >> field(visible = ui.isSelected || discount, width = 0.2, align = Right)
    }
    row {
      space(width = 1.0)
      total >> field(visible = ui.isSelected && discount, width = 0.2, align = Right)
    }
    row {
      space(width = 0.4)
      costDate >> field(fontStyle = Label, align = Right, label = "", width = 0.4, visible = ui.isSelected && !IUser.current.isPublic && productCost && approxCost)
      margin >> field(width = 0.2, visible = ui.isSelected && !IUser.current.isPublic && productCost, align = Right) 
      cost >> field(width = 0.2, visible = ui.isSelected && !IUser.current.isPublic && productCost, align = Right) 
    }
    deliveryItem.delivery >> field(visible = ui.isSelected && this.order.deliveries.count > 1)
    invoice >> field(visible = ui.isSelected && this.order.invoices.count > 1)
    deliveryItem.availableView >> field(visible = ui.isSelected && active && (delivery?.is[SalesDelivery] || !delivery), label = "")
    accessories >> list(visible = ui.isSelected && delivery?.status ?== Planned) {
      x {_ add("Add") {
        let item = SalesItem(order = order, invoice = invoice, 
                             deliveryItem = DeliveryItem(product = _, delivery = deliveryItem.delivery, qty = deliveryItem.qty.as[Qty[_.unit]]!) 
                            )
        item.deliveryItem.updateAmount()
      }}
    }

    deliveryItem.productItems >> field(visible = ui.isSelected && product.trackItems)
  }
  
}

