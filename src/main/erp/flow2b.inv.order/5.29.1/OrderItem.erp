inline trait OrderItem extends IInvoiceItem {
  var order: Order
  var invoice: Invoice?
  func inTransit: Bool = delivery?.status == InTransit
  func paidAmount: Money[currency]? = if (amount > 0) invoice?.paidAmountForItem(this) else amount
  func orderPaidAmount = paidAmount
  func paid: Bool = invoiceAmount <= 0 || paidAmount == invoiceAmount
  func complete = delivered && paid
  func currency = order.orderCurrency 
  func orderAmount = amount - discount
  func invoiceAmount = amount - discount
  func orderDeliveryItem: IOrderDeliveryItem?
  func delivery: Delivery? = orderDeliveryItem?.delivery
  func canceled = order.canceled
  field storedWithGst: Bool {
    default = order.pricesIncludingGst
    update = {
      if (new) {
        sAmount = sAmount*gstRateK
        sDiscount = sDiscount*gstRateK
      } else {
        sAmount = sAmount/gstRateK
        sDiscount = sDiscount/gstRateK
      }
    }
  }
  func needsRevision: Bool = updated(sAmount) || updated(gstRate)
  field sAmount: Money[currency]?
  compute gstRateK = 1 + gstRate.alt(0).withoutUnit
  
  compute amount: Money[currency]? {
    value = if (storedWithGst) sAmount/gstRateK else sAmount
    update = {
      storedWithGst = false
      sAmount = new
    }
  }
  compute amountWithGst: Money[currency]? {
    value = if (storedWithGst) sAmount else sAmount*gstRateK
    update = {
      storedWithGst = true
      sAmount = new
    }
  }
  compute amountEditor: Money[currency]? {
    label = "Amount"
    dynamicLabel = {
      if (let r = gstRate) if (order.pricesIncludingGst) "Amount incl $(r.as[Percent]) GST" else "Amount excl $(r.as[Percent]) GST"
      else "Amount"
    }
    value = if (order.pricesIncludingGst) amountWithGst else amount
    update = {
      if (order.pricesIncludingGst) this.amountWithGst = new 
      else this.amount = new
    }
  }
  compute gstAmount: Money[currency]? = {
    amountWithGst - amount - discountWithGst + discount
  }
  
  field sDiscount: Money[currency]?
  compute discount: Money[currency]? {
    value = if (storedWithGst) sDiscount/gstRateK else sDiscount
    update = {
      storedWithGst = false
      sDiscount = new
    }
  }
  compute discountWithGst: Money[currency]? {
    value = if (storedWithGst) sDiscount else sDiscount*gstRateK
    update = {
      storedWithGst = true
      sDiscount = new
    }
  }
  compute discountEditor: Money[currency]? {
    label = "Discount"
    dynamicLabel = {
      if (let r = gstRate) if (order.pricesIncludingGst) "Discount incl $(r.as[Percent]) GST" else "Discount excl $(r.as[Percent]) GST"
      else "Discount"
    }
    value = if (order.pricesIncludingGst) discountWithGst else discount
    update = {
      if (order.pricesIncludingGst) this.discountWithGst = new 
      else this.discount = new
    }
  }
  
  field gstRate: Percent[2]??
  compute gstEditor: Percent[2]? {
    label = "GST"
    value = gstRate.alt(0).as[Percent[2]]
    update = {
      gstRate = new
    }
  }
  func quoteSwitch(quote: Bool): Void = {}
}

inline trait OrderProductItem extends OrderItem {
  func orderDeliveryItem: IOrderDeliveryItem? = deliveryItem
  func deliveryItem: IDeliveryProductItem
  func product = deliveryItem.product
  func baseQty = deliveryItem.baseQty
  func qty = deliveryItem.qty
  func invoiceQty: Qty? = qty
  func unit = deliveryItem.unit
  func needsRevision: Bool = {
    deliveryItem.needsRevision || updated(sAmount) || updated(gstRate)
  }
  compute price: Money[currency]? {
    value = amount/qty
    update = {amount = new*qty}
  }
  compute priceWithGst: Money[currency]? {
    value = amountWithGst/qty
    update = {amountWithGst = new*qty}
  }
  compute priceEditor: Money[currency]? {
    label = "Price"
    value = if (order.pricesIncludingGst) priceWithGst else price
    update = {
      if (order.pricesIncludingGst) this.priceWithGst = new 
      else this.price = new
    }
  }
  
  compute suggestedAccessories: [Accessory]? = {
    product.superProduct.accessories.filter(!order.items*.as[OrderProductItem]*.product*.superProduct.contains(accessory))
  }    
}