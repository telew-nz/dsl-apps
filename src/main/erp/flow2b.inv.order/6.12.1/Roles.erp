extend role Salesperson {
  entity SalesOrder {
    read = salesPersonAccess
    write = salesPersonAccess
  }
  entity SalesInvoice {
    read = orders.all(salesPersonAccess)
    write = orders.all(salesPersonAccess)
  }
  entity SalesDelivery {
    read = salesOrders.all(salesPersonAccess)
    write = salesOrders.all(salesPersonAccess)
  }
  entity InvoiceRevision {
    read = invoice.as[SalesInvoice]?.orders.all(salesPersonAccess)
    write = invoice.as[SalesInvoice]?.orders.all(salesPersonAccess)
  }
  entity LSales {
    read = if (let ss = User.current!.accessStores) location.in(ss) else true
  }
  entity CashAccount = readOnly
  entity BankAccount = readOnly
  entity Good = readOnly
  entity Service = readOnly
  entity Kit = readOnly
  entity Company = readWrite
  entity Person = readWrite
  entity CompanyGroup = readWrite
  menu Sales {
    entity SalesOrder
    trait Actor = "Customers"
    entity SalesDelivery
    entity DropShipDelivery
    entity SalesInvoice
    entity IncomingPayment
    report ProductSalesReport = "Product Sales"
  }
  
  menu Inventory {
    report StockReport
    trait ISuperProduct
  }
  
  extend view dashboard = SalesOrder.widget
}

extend trait User {
  field accessStores: [Store]? {
    label = "Stores"
    singular = "Store"
    views = []
    visible = is(Salesperson)
  }
  field onlyTheirOrders: Bool {
    views = []
    visible = is(Salesperson)
  }
}
extend entity Person {
  extend view form = extend("access") {
    accessStores
    onlyTheirOrders
  }
}

extend role SalesManager {
  menu Sales {
    entity SalesOrder
    entity SalesDelivery
    entity DropShipDelivery
    entity SalesInvoice
    entity IncomingPayment
    report ProductSalesReport = "Product Sales"
  }
  
  menu Inventory {
    report StockReport
    trait ISuperProduct
  }
  
  extend view dashboard = SalesOrder.widget
}

extend role Buyer {
  entity PurchaseOrder = readWrite
  entity PurchaseItem = readWrite
  menu Purchases {
    entity PurchaseOrder
    trait Actor = "Vendors"
    entity PurchaseDelivery
    entity DropShipDelivery
    entity PurchaseInvoice
    entity OutgoingPayment
  }
  
  menu Inventory {
    report StockReport
    report SupplyRequirement
    trait ISuperProduct
  }
}

extend role Bookkeeper {
  entity SalesInvoice = readWrite
  entity PurchaseInvoice = readWrite
  trait SalesItem = readOnly
  trait DeliveryItem = readOnly
  entity SalesDelivery = readOnly
  entity SalesOrder = readOnly
  entity PurchaseDelivery = readOnly
  entity PurchaseOrder = readOnly
}

extend role Customer {
  entity SalesOrder {
    read = isTheir
    write = isTheir
  }
  entity SalesInvoice {
    read = isTheir
    write = false
  }
  entity SalesDelivery {
    read = isTheir
    write = false
  }
  entity DropShipDelivery {
    read = isTheir
    write = false
  }
  entity IncomingPayment {
    read = isTheir
    write = false
  }
  extend view dashboard = SalesOrder.all.sortBy(date.desc) >> 
    nav(label = "Sales Orders" limit = 5, more = SalesOrder.Report().list.open) {
      list {}
    }
  menu {
    entity SalesOrder
  }
}
