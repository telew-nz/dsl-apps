extend role Salesperson {
  entity SalesOrder {
    read = salesPersonAccess
    write = salesPersonAccess
  }
  entity SalesDelivery {
    read = salesOrders.all(salesPersonAccess)
    write = salesOrders.all(salesPersonAccess)
  }
  entity Invoice {
    read = order.as[SalesOrder]?.salesPersonAccess
    write = order.as[SalesOrder]?.salesPersonAccess
  }
  entity Transfer {
    read = salesPersonAccess
    write = salesPersonAccess
  }
  entity LSales {
    read = if (let ss = User.current!.accessStores) location.in(ss) else true
  }
  entity CashAccount = readOnly
  entity BankAccount = readOnly
  entity Good = readOnly
  entity Service = readOnly
  entity Kit = readOnly
  entity Company = readWrite
  entity Person = readWrite
  entity CompanyGroup = readWrite
  extend view menu = menu("Sales") {
    SalesOrder >> item(fastAdd)
    ISuperProduct >> item(fastSearch)
    Customer >> item(fastSearch, fastAdd)
    StockReport
    ProdAvailability
    extension("Sales")
  }
  
  extend view menu = menu("Product Movements") {
    Transfer >> item(fastAdd)
  }
}

extend entity Transfer {
  func salesPersonAccess: Bool = {
    if (let st = User.current!.accessStores) st.contains(source) || st.contains(destination)
    else true
  }
}

extend entity User {
  field accessStores: [IStore]? {
    label = "Stores"
    singular = "Store"
    views = []
    visible = is(Salesperson)
  }
  field onlyTheirOrders: Bool {
    views = []
    visible = is(Salesperson)
  }
 extend view form = extend {
    accessStores
    onlyTheirOrders
  }
}

extend role BusAdmin {
  entity PurchaseOrder = readWrite
  entity PurchaseItem = readWrite
  extend view menu = menu ("Sales") {
    Customer >> item(fastSearch)
    SalesOrder
    ProductSalesReport >> item("Product Sales")
    extension("Sales")
  }
  
  extend view menu = menu ("Purchases") {
    PurchaseOrder >> item(fastAdd)
    Vendor >> item(fastSearch)
    extension("Purchases")
  }
  
  extend view menu = menu ("Product Movements") {
    Transfer >> item(fastAdd)
    SalesDelivery
    DropShipDelivery
    PurchaseDelivery
    extension("Movements")
  }
  
  extend view menu = menu ("Products") {
    ISuperProduct >> item(fastSearch)
    StockReport
    ProdAvailability
    StockCorrection >> item(fastAdd)
    SupplyRequirement
    IPriceModel
  }
}
/*
extend role CustomerRole {
  entity SalesOrder {
    read = isTheir
    write = isTheir
  }
  entity SalesDelivery {
    read = isTheir
    write = false
  }
  entity DropShipDelivery {
    read = isTheir
    write = false
  }
  extend view dashboard = SalesOrder.all.sortBy(date.desc) >> 
    nav(label = "Sales Orders" limit = 5, more = SalesOrder.Report().list.open) {
      list {}
    }
  extend view menu = SalesOrder
}*/
