class KiwibankCsvFullData extends BankStatementItem {
  impl field accountNumber: String?
  
  impl field date: Date {format = "dd-MM-yyyy"}
  field memo: String?
  field paymentType: String?
  field tpRef: String?
  field tpPart: String?
  field tpCode: String?
  field opRef: String?
  field opPart: String?
  field opCode: String?
  field opName: String?
  field opAccountNumber: String?
  field credit: Dec[2]?
  field debit: Dec[2]?
  impl field amount: Dec[2]?
  field balance: Dec[2]?
  
  impl func itemType = {
    if (memo == "TRANSACTION FEES ;") BankFee 
    else Payment
  }
  
  func curRegEx = memo.all(Regex("POS W/D (\d+.\d+)(\S+) @")).first
  impl func stmCurrency: Currency? = if (let curRegEx) Currency.all.find(name == curRegEx.group(2)!)
  impl func amountInCurrency: Number? = if (let stmCurrency, let curRegEx) {
    let a = curRegEx.group(1)!.toNumber!.as[Money[stmCurrency]]!
    if (amount < 0) -a else a
  }
  impl func toString = "$accountNumber: $date $opName $amount"
  
  impl func data(account: FinAccount): BankData = {
    BankData(memo = memo, thierName = opName, thierAccount = opAccountNumber, 
             particulars = tpPart, reference = tpRef, code = tpCode, balance = balance)
  }
}

extend enum BankStatementType {
  case KiwibankCsvFull(
    canProcess = file.is("csv") && data.toString.lines(CSV).first == "Account number,Date,Memo/Description,Source Code (payment type),TP ref,TP part,TP code,OP ref,OP part,OP code,OP name,OP Bank Account Number,Amount (credit),Amount (debit),Amount,Balance", 
    process = ProcessResult(items = data.toString.lines(CSV).drop(1).map(splitTo[KiwibankCsvFullData](",", CSV))), 
    knowOurAccount = true
  )
}