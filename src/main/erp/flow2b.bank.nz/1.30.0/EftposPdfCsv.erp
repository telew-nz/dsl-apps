class EftposPdfCsvData extends BankStatementItem {
  field sDate: String
  field sTime: String
  impl func date: Date = Date("$sDate $sTime", "dd/MM/yyyy HH:mm:ss")
  field cardNumber: String?
  field type1: String?
  field type2: String?
  field type3: String?
  compute type = "$type1 $type2 $type3".trim
  field cardFiid: String?
  field sAmount: String
  field exception: String?
  
  impl func stmAmount: Dec[2]? = {
    let a = sAmount.trim.dropPrefix("\$").replace(",", "")
    if (a.contains("\$")) (a[ .. "\$")).trim.toNum else a.toNum
  }
    

  impl func data(account: FinAccount): BankData = {
    BankData(
      type = type,
      cardNumber = cardNumber
      bankComment = exception
    )
  }
}

extend enum BankStatementType {
  case EftposPdfCsv(
    canProcess = file.is("csv") && data.toString.lines(CSV).first.alt("")
      .startsWith("ACQUIRER DEBIT TRANSACTION JOURNAL FOR BUSINESS DATE/s")
    process = {
      let lines = data.toString.lines(CSV)
      let a = lines.drop(1).first
      ProcessResult(
        directions = [Incoming]
        account = CardAccount.all.result.get.onlyOne
        items = lines.drop(5)
          .filter{s => 
            let ss = s.split(rules = CSV)
            ss.count > 3 && ss.apply(3)
          }
          .mapOpt(splitTo[EftposPdfCsvData](CSV))
          .filter(!exception.lower.contains("fail") && !exception.lower.contains("decline"))
      )   
    }, 
    knowOurAccount = CardAccount.all.result.get.onlyOne
  )
}