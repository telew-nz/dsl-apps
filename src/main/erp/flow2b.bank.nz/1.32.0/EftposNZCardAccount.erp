entity EftposNZCardAccount extends ICardAccount {
  impl func title = "$legalEntity: Eftpos NZ"  
  impl field numbers: [String]?
  field dailyMailImporter: EftposNZDailyMailImporter? by account
  impl view form = nav{grid{
    legalEntity
    numbers
    currency
    initBalance
    balance
    dailyMailImporter
  } ledgerBtn }
}

object ReconEftposNZTransfer extends IReconRule {
  impl func title = "Transfer from Eftpos NZ"
  impl func pr = -3
  impl func backDescr = "If the bank reference contains Eftpos NZ in particulars and references, it will be reconciled as Eftpos NZ transfer"
  impl func apply(movements: [CashMovement]?, payment: Payment): CashMovement? = {
    let d = payment.bankData
    if (d.amount > 0 && d.particulars =%= "Eftpos NZ" && (d.reference =%= "Eftpos" || d.reference =%= "Eftpos NZ") 
        let contraAccount = EftposNZCardAccount.all.result.get.onlyOne
    ) {
       ReconTransfer.make(movements, payment, contraAccount)
    }
  }
}
 
entity EftposNZDailyMailImporter extends MsgProc with SystemService with Contact {
  impl func title: String = "Eftpos NZ Daily Mail Importer $account"
  impl func roles: [Role]? = [Admin]
  
  impl func priority = 1.0
  field address = "i.wlg.mis@smokestack.verifone.com"
  ref field account: EftposNZCardAccount by dailyMailImporter
  impl func canProc(msg: ExtMsg) = {
       msg.subject.flex.startsWith("EFTPOS - ") 
    && msg.subject.flex.endsWith(" Transaction Listing")
    && msg.from.address =%= this.address
  }
  
  impl func proc(msg: ExtMsg): Future[ExtMsg?]  = {
    guard (let attach = msg.attachs.onlyOne where attach.name.endsWith("csv")) else return msg
 
    saveMain
    Activity.current!.from = this
    BankStatementUpload(
      account = account
      files = [attach.make]
    ).saveMain
    null
  }
  
  impl view form = nav{grid(labels = Top){
    account
    address
  }}
}