class AnzCsvData extends BankStatementItem {
  field type: String?
  field details: String?
  field particulars: String?
  field code: String?
  field reference: String?
  field amount: Dec[2]?
  impl field date: Date {format = "dd/MM/yyyy"}
  field foreignCurrencyAmount: String?
  field conversionCharge: String?

  impl func data(account: FinAccount): BankData = {
    BankData(
      type = type, amount = amount,
      memo = if (type != "Eft-Pos" && type != "Visa Purchase" && type != "Transfer" && type != "Payment" && type != "Direct Credit" && type != "Direct Debit" && type != "Automatic Payment") details, 
      thierName = {
        if (type == "Eft-Pos" || type == "Payment" || type == "Direct Credit" || type == "Direct Debit" || type == "Automatic Payment") {
          details 
        } else if (type == "Visa Purchase") code
      }
      particulars = particulars, reference = reference, code = code, 
      thierAccount = {
        if (type == "Transfer") details 
        else if (type == "Loan Payment") details("To: " .. ]
        else if (details == "Anz Visa Business") "%" + reference[-4 .. ]
      }
      tax = {
        if (code == "Gst") Gst
        else if (code == "Paye" || code == "Ded") PayrollTax
        else if (type == "Withholding Tax") WithholdingTax
      }
      itemType = {
        if (type == "Bank Fee") BankFee 
        else if (type == "Debit Interest" || type == "Credit Interest Paid") Interest
        else if (type == "Tax Payment" || type == "Withholding Tax") Tax
      }
    )
  }
}

extend enum BankStatementType {
  case AnzCsv(
    canProcess = file.is("csv") && data.toString.lines(CSV).first == "Type,Details,Particulars,Code,Reference,Amount,Date,ForeignCurrencyAmount,ConversionCharge", 
    process = ProcessResult(
       accountNumber = file.name[ .. "_Transactions"), 
       items = data.toString.lines(CSV).drop(1).mapOpt(splitTo[AnzCsvData](CSV))
    )
    knowOurAccount = true
  )
}